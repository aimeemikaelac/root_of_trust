// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module freduce_coefficients (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        output_r_address1,
        output_r_ce1,
        output_r_we1,
        output_r_d1,
        output_r_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [63:0] output_r_d0;
input  [63:0] output_r_q0;
output  [4:0] output_r_address1;
output   output_r_ce1;
output   output_r_we1;
output  [63:0] output_r_d1;
input  [63:0] output_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[63:0] output_r_d0;
reg[4:0] output_r_address1;
reg output_r_ce1;
reg output_r_we1;
reg[63:0] output_r_d1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] output_addr_71_reg_353;
reg   [4:0] output_addr_72_reg_362;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_117_p2;
reg   [4:0] output_addr_73_reg_368;
wire   [37:0] tmp_397_i_fu_161_p4;
reg   [37:0] tmp_397_i_reg_373;
wire    ap_CS_fsm_state3;
reg   [63:0] output_load_reg_378;
wire   [3:0] i_4_fu_186_p2;
reg   [3:0] i_4_reg_383;
reg   [4:0] output_addr_74_reg_388;
wire   [63:0] v_assign_8_fu_287_p2;
reg   [63:0] v_assign_8_reg_393;
wire    ap_CS_fsm_state5;
reg   [37:0] tmp_397_i1_reg_398;
wire   [4:0] output_addr_75_reg_404;
reg   [3:0] i_reg_105;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_s_fu_123_p1;
wire   [63:0] tmp_302_fu_134_p1;
wire   [63:0] tmp_305_fu_192_p1;
wire   [63:0] tmp_300_fu_179_p2;
wire   [63:0] tmp_304_fu_249_p2;
wire   [63:0] tmp_306_fu_256_p2;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_308_fu_335_p2;
wire   [63:0] tmp_309_fu_341_p2;
wire   [3:0] tmp_301_fu_128_p2;
wire   [0:0] tmp_396_fu_139_p3;
wire   [63:0] tmp_i_cast_cast_fu_147_p3;
wire   [63:0] tmp_1064_i_fu_155_p2;
wire   [63:0] tmp_299_fu_171_p3;
wire  signed [63:0] over_fu_197_p1;
wire   [63:0] v_assign_7_fu_200_p2;
wire   [0:0] tmp_397_fu_205_p3;
wire   [63:0] tmp_i1_cast_cast_fu_213_p3;
wire   [63:0] tmp_1066_i_fu_221_p2;
wire   [38:0] tmp_399_i_fu_227_p4;
wire   [63:0] tmp_303_fu_241_p3;
wire  signed [63:0] over_7_fu_237_p1;
wire   [63:0] tmp_399_fu_269_p2;
wire   [63:0] tmp_398_fu_263_p2;
wire   [63:0] tmp2_fu_275_p2;
wire   [63:0] tmp3_fu_281_p2;
wire   [0:0] tmp_400_fu_293_p3;
wire   [63:0] tmp_i2_cast_cast_fu_301_p3;
wire   [63:0] tmp_1064_i1_fu_309_p2;
wire   [63:0] tmp_307_fu_328_p3;
wire  signed [63:0] over_8_fu_325_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_105 <= i_4_reg_383;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_105 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_4_reg_383 <= i_4_fu_186_p2;
        output_addr_74_reg_388[3 : 0] <= tmp_305_fu_192_p1[3 : 0];
        output_load_reg_378 <= output_r_q1;
        tmp_397_i_reg_373 <= {{tmp_1064_i_fu_155_p2[63:26]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd1))) begin
        output_addr_72_reg_362[3 : 0] <= tmp_s_fu_123_p1[3 : 0];
        output_addr_73_reg_368[3 : 1] <= tmp_302_fu_134_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_397_i1_reg_398 <= {{tmp_1064_i1_fu_309_p2[63:26]}};
        v_assign_8_reg_393 <= v_assign_8_fu_287_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = output_addr_75_reg_404;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = output_addr_74_reg_388;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = tmp_305_fu_192_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd0))) begin
        output_r_address0 = output_addr_71_reg_353;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd1))) begin
        output_r_address0 = tmp_s_fu_123_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_r_address0 = 64'd10;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address1 = output_addr_73_reg_368;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address1 = output_addr_72_reg_362;
    end else if ((((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd1))) begin
        output_r_address1 = tmp_302_fu_134_p1;
    end else begin
        output_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_ce1 = 1'b1;
    end else begin
        output_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_d0 = tmp_309_fu_341_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_d0 = tmp_306_fu_256_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_r_d0 = 64'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_d1 = tmp_308_fu_335_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_d1 = tmp_304_fu_249_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_d1 = tmp_300_fu_179_p2;
    end else begin
        output_r_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_we1 = 1'b1;
    end else begin
        output_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_117_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_4_fu_186_p2 = (i_reg_105 + 4'd2);

assign output_addr_71_reg_353 = 64'd10;

assign output_addr_75_reg_404 = 64'd1;

assign over_7_fu_237_p1 = $signed(tmp_399_i_fu_227_p4);

assign over_8_fu_325_p1 = $signed(tmp_397_i1_reg_398);

assign over_fu_197_p1 = $signed(tmp_397_i_reg_373);

assign tmp2_fu_275_p2 = (output_r_q0 + output_r_q1);

assign tmp3_fu_281_p2 = (tmp_399_fu_269_p2 + tmp_398_fu_263_p2);

assign tmp_1064_i1_fu_309_p2 = (v_assign_8_fu_287_p2 + tmp_i2_cast_cast_fu_301_p3);

assign tmp_1064_i_fu_155_p2 = (output_r_q0 + tmp_i_cast_cast_fu_147_p3);

assign tmp_1066_i_fu_221_p2 = (tmp_i1_cast_cast_fu_213_p3 + v_assign_7_fu_200_p2);

assign tmp_299_fu_171_p3 = {{tmp_397_i_fu_161_p4}, {26'd0}};

assign tmp_300_fu_179_p2 = (output_r_q0 - tmp_299_fu_171_p3);

assign tmp_301_fu_128_p2 = (i_reg_105 | 4'd1);

assign tmp_302_fu_134_p1 = tmp_301_fu_128_p2;

assign tmp_303_fu_241_p3 = {{tmp_399_i_fu_227_p4}, {25'd0}};

assign tmp_304_fu_249_p2 = (v_assign_7_fu_200_p2 - tmp_303_fu_241_p3);

assign tmp_305_fu_192_p1 = i_4_fu_186_p2;

assign tmp_306_fu_256_p2 = ($signed(output_r_q0) + $signed(over_7_fu_237_p1));

assign tmp_307_fu_328_p3 = {{tmp_397_i1_reg_398}, {26'd0}};

assign tmp_308_fu_335_p2 = (v_assign_8_reg_393 - tmp_307_fu_328_p3);

assign tmp_309_fu_341_p2 = ($signed(over_8_fu_325_p1) + $signed(output_r_q0));

assign tmp_396_fu_139_p3 = output_r_q0[32'd63];

assign tmp_397_fu_205_p3 = v_assign_7_fu_200_p2[32'd63];

assign tmp_397_i_fu_161_p4 = {{tmp_1064_i_fu_155_p2[63:26]}};

assign tmp_398_fu_263_p2 = output_r_q0 << 64'd4;

assign tmp_399_fu_269_p2 = output_r_q0 << 64'd1;

assign tmp_399_i_fu_227_p4 = {{tmp_1066_i_fu_221_p2[63:25]}};

assign tmp_400_fu_293_p3 = v_assign_8_fu_287_p2[32'd63];

assign tmp_fu_117_p2 = ((i_reg_105 < 4'd10) ? 1'b1 : 1'b0);

assign tmp_i1_cast_cast_fu_213_p3 = ((tmp_397_fu_205_p3[0:0] === 1'b1) ? 64'd33554431 : 64'd0);

assign tmp_i2_cast_cast_fu_301_p3 = ((tmp_400_fu_293_p3[0:0] === 1'b1) ? 64'd67108863 : 64'd0);

assign tmp_i_cast_cast_fu_147_p3 = ((tmp_396_fu_139_p3[0:0] === 1'b1) ? 64'd67108863 : 64'd0);

assign tmp_s_fu_123_p1 = i_reg_105;

assign v_assign_7_fu_200_p2 = ($signed(output_load_reg_378) + $signed(over_fu_197_p1));

assign v_assign_8_fu_287_p2 = (tmp2_fu_275_p2 + tmp3_fu_281_p2);

always @ (posedge ap_clk) begin
    output_addr_72_reg_362[4] <= 1'b0;
    output_addr_73_reg_368[0] <= 1'b1;
    output_addr_73_reg_368[4] <= 1'b0;
    output_addr_74_reg_388[4] <= 1'b0;
end

endmodule //freduce_coefficients
