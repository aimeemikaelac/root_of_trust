-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fmul_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    in2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in2_ce0 : OUT STD_LOGIC;
    in2_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fmul_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_3FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000011111111111111111111111111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv64_1FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001111111111111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_325_i_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_325_i_reg_790 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_addr_84_reg_800 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_330_i_fu_357_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_330_i_reg_805 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_335_i_fu_381_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_335_i_reg_821 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal t_addr_88_reg_831 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_340_i_fu_405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_340_i_reg_836 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_345_i_fu_429_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_345_i_reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal t_addr_92_reg_862 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_350_i_fu_453_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_350_i_reg_867 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_355_i_fu_477_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_355_i_reg_883 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal t_addr_96_reg_893 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_addr_5_reg_898 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_360_i_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_360_i_reg_904 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_addr_97_reg_909 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_365_i_fu_525_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_365_i_reg_915 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal t_addr_98_reg_923 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_i_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_addr_99_reg_928 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_397_i_i_fu_575_p4 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_397_i_i_reg_934 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal t_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_load_111_reg_939 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_600_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_944 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_addr_100_reg_949 : STD_LOGIC_VECTOR (4 downto 0);
    signal v_assign_1_fu_701_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_1_reg_954 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_397_i16_i_reg_959 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_7_fu_768_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_968 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_i4_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_reg_973 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fproduct_3_fu_299_ap_start : STD_LOGIC;
    signal grp_fproduct_3_fu_299_ap_done : STD_LOGIC;
    signal grp_fproduct_3_fu_299_ap_idle : STD_LOGIC;
    signal grp_fproduct_3_fu_299_ap_ready : STD_LOGIC;
    signal grp_fproduct_3_fu_299_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fproduct_3_fu_299_output_r_ce0 : STD_LOGIC;
    signal grp_fproduct_3_fu_299_output_r_we0 : STD_LOGIC;
    signal grp_fproduct_3_fu_299_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fproduct_3_fu_299_in2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fproduct_3_fu_299_in2_ce0 : STD_LOGIC;
    signal grp_fproduct_3_fu_299_in_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fproduct_3_fu_299_in_r_ce0 : STD_LOGIC;
    signal i_i_reg_276 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_i3_reg_288 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_reg_grp_fproduct_3_fu_299_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_17_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_369_i_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_373_i_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_367_i_fu_593_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_372_i_fu_663_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_374_i_fu_670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_381_i_fu_749_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_382_i_fu_755_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_827_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_828_fu_321_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp3_fu_327_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_829_fu_339_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_830_fu_345_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp5_fu_351_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_831_fu_363_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_832_fu_369_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp7_fu_375_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_833_fu_387_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_834_fu_393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp9_fu_399_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_835_fu_411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_836_fu_417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp11_fu_423_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_837_fu_435_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_838_fu_441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp13_fu_447_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_839_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_840_fu_465_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp15_fu_471_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_841_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_842_fu_489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp17_fu_495_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_843_fu_507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_844_fu_513_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp19_fu_519_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_368_i_fu_542_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_845_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_cast_cast_fu_561_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1064_i_i_fu_569_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_366_i_fu_585_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal over_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_s_fu_614_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_846_fu_619_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i10_i_cast_cast_fu_627_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1066_i_i_fu_635_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_399_i_i_fu_641_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_371_i_fu_655_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal over_11_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_848_fu_683_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_847_fu_677_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp21_fu_689_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp22_fu_695_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_849_fu_707_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i13_i_cast_cast_fu_715_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1064_i14_i_fu_723_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_380_i_fu_742_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal over_12_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component fproduct_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in2_ce0 : OUT STD_LOGIC;
        in2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fsquare_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    t_U : component fsquare_t
    generic map (
        DataWidth => 64,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_fproduct_3_fu_299 : component fproduct_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fproduct_3_fu_299_ap_start,
        ap_done => grp_fproduct_3_fu_299_ap_done,
        ap_idle => grp_fproduct_3_fu_299_ap_idle,
        ap_ready => grp_fproduct_3_fu_299_ap_ready,
        output_r_address0 => grp_fproduct_3_fu_299_output_r_address0,
        output_r_ce0 => grp_fproduct_3_fu_299_output_r_ce0,
        output_r_we0 => grp_fproduct_3_fu_299_output_r_we0,
        output_r_d0 => grp_fproduct_3_fu_299_output_r_d0,
        in2_address0 => grp_fproduct_3_fu_299_in2_address0,
        in2_ce0 => grp_fproduct_3_fu_299_in2_ce0,
        in2_q0 => in_r_q0,
        in_r_address0 => grp_fproduct_3_fu_299_in_r_address0,
        in_r_ce0 => grp_fproduct_3_fu_299_in_r_ce0,
        in_r_q0 => in2_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_fproduct_3_fu_299_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fproduct_3_fu_299_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_reg_grp_fproduct_3_fu_299_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fproduct_3_fu_299_ap_ready)) then 
                    ap_reg_grp_fproduct_3_fu_299_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i3_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_i3_reg_288 <= i_7_reg_968;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_i3_reg_288 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_i_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_i_reg_276 <= i_reg_944;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_i_reg_276 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_7_reg_968 <= i_7_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_reg_944 <= i_fu_600_p2;
                    t_addr_100_reg_949(3 downto 0) <= tmp_373_i_fu_606_p1(5 - 1 downto 0)(3 downto 0);
                t_load_111_reg_939 <= t_q1;
                tmp_397_i_i_reg_934 <= tmp_1064_i_i_fu_569_p2(63 downto 26);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_1))) then
                    t_addr_98_reg_923(3 downto 0) <= tmp_i_17_fu_537_p1(5 - 1 downto 0)(3 downto 0);
                    t_addr_99_reg_928(3 downto 1) <= tmp_369_i_fu_548_p1(5 - 1 downto 0)(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_325_i_reg_790 <= tmp_325_i_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_330_i_reg_805 <= tmp_330_i_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_335_i_reg_821 <= tmp_335_i_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_340_i_reg_836 <= tmp_340_i_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_345_i_reg_852 <= tmp_345_i_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_350_i_reg_867 <= tmp_350_i_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_355_i_reg_883 <= tmp_355_i_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_360_i_reg_904 <= tmp_360_i_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_365_i_reg_915 <= tmp_365_i_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_397_i16_i_reg_959 <= tmp_1064_i14_i_fu_723_p2(63 downto 26);
                v_assign_1_reg_954 <= v_assign_1_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (exitcond_i_fu_762_p2 = ap_const_lv1_0))) then
                    tmp_i4_reg_973(3 downto 0) <= tmp_i4_fu_774_p1(3 downto 0);
            end if;
        end if;
    end process;
    t_addr_98_reg_923(4) <= '0';
    t_addr_99_reg_928(0) <= '1';
    t_addr_99_reg_928(4) <= '0';
    t_addr_100_reg_949(4) <= '0';
    tmp_i4_reg_973(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, tmp_i_fu_531_p2, ap_CS_fsm_state22, exitcond_i_fu_762_p2, grp_fproduct_3_fu_299_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fproduct_3_fu_299_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = exitcond_i_fu_762_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22, exitcond_i_fu_762_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = exitcond_i_fu_762_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22, exitcond_i_fu_762_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = exitcond_i_fu_762_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_762_p2 <= "1" when (i_i3_reg_288 = ap_const_lv4_A) else "0";
    grp_fproduct_3_fu_299_ap_start <= ap_reg_grp_fproduct_3_fu_299_ap_start;
    grp_fu_309_p2 <= std_logic_vector(unsigned(t_q1) + unsigned(t_q0));
    i_7_fu_768_p2 <= std_logic_vector(unsigned(i_i3_reg_288) + unsigned(ap_const_lv4_1));
    i_fu_600_p2 <= std_logic_vector(unsigned(i_i_reg_276) + unsigned(ap_const_lv4_2));
    in2_address0 <= grp_fproduct_3_fu_299_in_r_address0;
    in2_ce0 <= grp_fproduct_3_fu_299_in_r_ce0;
    in_r_address0 <= grp_fproduct_3_fu_299_in2_address0;
    in_r_ce0 <= grp_fproduct_3_fu_299_in2_ce0;
    output_r_address0 <= tmp_i4_reg_973(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= t_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        over_11_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_399_i_i_fu_641_p4),64));

        over_12_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_397_i16_i_reg_959),64));

        over_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_397_i_i_reg_934),64));

    t_addr_5_reg_898 <= ap_const_lv64_0(5 - 1 downto 0);
    t_addr_84_reg_800 <= ap_const_lv64_7(5 - 1 downto 0);
    t_addr_88_reg_831 <= ap_const_lv64_5(5 - 1 downto 0);
    t_addr_92_reg_862 <= ap_const_lv64_3(5 - 1 downto 0);
    t_addr_96_reg_893 <= ap_const_lv64_1(5 - 1 downto 0);
    t_addr_97_reg_909 <= ap_const_lv64_A(5 - 1 downto 0);

    t_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, t_addr_97_reg_909, ap_CS_fsm_state12, t_addr_98_reg_923, ap_CS_fsm_state17, tmp_i_fu_531_p2, t_addr_99_reg_928, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, tmp_i4_fu_774_p1, grp_fproduct_3_fu_299_output_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state2, tmp_i_17_fu_537_p1, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_address0 <= tmp_i4_fu_774_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address0 <= t_addr_99_reg_928;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address0 <= t_addr_98_reg_923;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_0)))) then 
            t_address0 <= t_addr_97_reg_909;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_1))) then 
            t_address0 <= tmp_i_17_fu_537_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            t_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= grp_fproduct_3_fu_299_output_r_address0;
        else 
            t_address0 <= "XXXXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, t_addr_84_reg_800, ap_CS_fsm_state5, ap_CS_fsm_state6, t_addr_88_reg_831, ap_CS_fsm_state7, ap_CS_fsm_state8, t_addr_92_reg_862, ap_CS_fsm_state9, ap_CS_fsm_state10, t_addr_96_reg_893, t_addr_5_reg_898, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state17, tmp_i_fu_531_p2, ap_CS_fsm_state18, t_addr_100_reg_949, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, tmp_369_i_fu_548_p1, tmp_373_i_fu_606_p1, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address1 <= t_addr_100_reg_949;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address1 <= tmp_373_i_fu_606_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_0))) then 
            t_address1 <= t_addr_5_reg_898;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_1))) then 
            t_address1 <= tmp_369_i_fu_548_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            t_address1 <= t_addr_96_reg_893;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_address1 <= t_addr_92_reg_862;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_address1 <= t_addr_88_reg_831;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address1 <= t_addr_84_reg_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        else 
            t_address1 <= "XXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state17, tmp_i_fu_531_p2, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, grp_fproduct_3_fu_299_output_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_0)))) then 
            t_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_ce0 <= grp_fproduct_3_fu_299_output_r_ce0;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state17, tmp_i_fu_531_p2, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_i_fu_531_p2 = ap_const_lv1_0)))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(tmp_325_i_reg_790, tmp_335_i_reg_821, tmp_345_i_reg_852, tmp_355_i_reg_883, tmp_365_i_reg_915, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state20, grp_fproduct_3_fu_299_output_r_d0, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, tmp_367_i_fu_593_p2, tmp_372_i_fu_663_p2, tmp_381_i_fu_749_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_d0 <= tmp_381_i_fu_749_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            t_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_d0 <= tmp_372_i_fu_663_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_d0 <= tmp_367_i_fu_593_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_d0 <= tmp_365_i_reg_915;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_d0 <= tmp_355_i_reg_883;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_d0 <= tmp_345_i_reg_852;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_d0 <= tmp_335_i_reg_821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_d0 <= tmp_325_i_reg_790;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_d0 <= grp_fproduct_3_fu_299_output_r_d0;
        else 
            t_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t_d1_assign_proc : process(tmp_330_i_reg_805, tmp_340_i_reg_836, tmp_350_i_reg_867, tmp_360_i_reg_904, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, tmp_374_i_fu_670_p2, tmp_382_i_fu_755_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_d1 <= tmp_382_i_fu_755_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_d1 <= tmp_374_i_fu_670_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_d1 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_d1 <= tmp_360_i_reg_904;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_d1 <= tmp_350_i_reg_867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_d1 <= tmp_340_i_reg_836;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_d1 <= tmp_330_i_reg_805;
        else 
            t_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state20, grp_fproduct_3_fu_299_output_r_we0, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            t_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_we0 <= grp_fproduct_3_fu_299_output_r_we0;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp11_fu_423_p2 <= std_logic_vector(unsigned(tmp_835_fu_411_p2) + unsigned(tmp_836_fu_417_p2));
    tmp13_fu_447_p2 <= std_logic_vector(unsigned(tmp_837_fu_435_p2) + unsigned(tmp_838_fu_441_p2));
    tmp15_fu_471_p2 <= std_logic_vector(unsigned(tmp_839_fu_459_p2) + unsigned(tmp_840_fu_465_p2));
    tmp17_fu_495_p2 <= std_logic_vector(unsigned(tmp_841_fu_483_p2) + unsigned(tmp_842_fu_489_p2));
    tmp19_fu_519_p2 <= std_logic_vector(unsigned(tmp_843_fu_507_p2) + unsigned(tmp_844_fu_513_p2));
    tmp21_fu_689_p2 <= std_logic_vector(unsigned(t_q0) + unsigned(t_q1));
    tmp22_fu_695_p2 <= std_logic_vector(unsigned(tmp_848_fu_683_p2) + unsigned(tmp_847_fu_677_p2));
    tmp3_fu_327_p2 <= std_logic_vector(unsigned(tmp_827_fu_315_p2) + unsigned(tmp_828_fu_321_p2));
    tmp5_fu_351_p2 <= std_logic_vector(unsigned(tmp_829_fu_339_p2) + unsigned(tmp_830_fu_345_p2));
    tmp7_fu_375_p2 <= std_logic_vector(unsigned(tmp_831_fu_363_p2) + unsigned(tmp_832_fu_369_p2));
    tmp9_fu_399_p2 <= std_logic_vector(unsigned(tmp_833_fu_387_p2) + unsigned(tmp_834_fu_393_p2));
    tmp_1064_i14_i_fu_723_p2 <= std_logic_vector(unsigned(v_assign_1_fu_701_p2) + unsigned(tmp_i13_i_cast_cast_fu_715_p3));
    tmp_1064_i_i_fu_569_p2 <= std_logic_vector(unsigned(t_q0) + unsigned(tmp_i_i_cast_cast_fu_561_p3));
    tmp_1066_i_i_fu_635_p2 <= std_logic_vector(unsigned(tmp_i10_i_cast_cast_fu_627_p3) + unsigned(v_assign_s_fu_614_p2));
    tmp_325_i_fu_333_p2 <= std_logic_vector(unsigned(tmp3_fu_327_p2) + unsigned(grp_fu_309_p2));
    tmp_330_i_fu_357_p2 <= std_logic_vector(unsigned(tmp5_fu_351_p2) + unsigned(grp_fu_309_p2));
    tmp_335_i_fu_381_p2 <= std_logic_vector(unsigned(tmp7_fu_375_p2) + unsigned(grp_fu_309_p2));
    tmp_340_i_fu_405_p2 <= std_logic_vector(unsigned(tmp9_fu_399_p2) + unsigned(grp_fu_309_p2));
    tmp_345_i_fu_429_p2 <= std_logic_vector(unsigned(tmp11_fu_423_p2) + unsigned(grp_fu_309_p2));
    tmp_350_i_fu_453_p2 <= std_logic_vector(unsigned(tmp13_fu_447_p2) + unsigned(grp_fu_309_p2));
    tmp_355_i_fu_477_p2 <= std_logic_vector(unsigned(tmp15_fu_471_p2) + unsigned(grp_fu_309_p2));
    tmp_360_i_fu_501_p2 <= std_logic_vector(unsigned(tmp17_fu_495_p2) + unsigned(grp_fu_309_p2));
    tmp_365_i_fu_525_p2 <= std_logic_vector(unsigned(tmp19_fu_519_p2) + unsigned(grp_fu_309_p2));
    tmp_366_i_fu_585_p3 <= (tmp_397_i_i_fu_575_p4 & ap_const_lv26_0);
    tmp_367_i_fu_593_p2 <= std_logic_vector(unsigned(t_q0) - unsigned(tmp_366_i_fu_585_p3));
    tmp_368_i_fu_542_p2 <= (i_i_reg_276 or ap_const_lv4_1);
    tmp_369_i_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_368_i_fu_542_p2),64));
    tmp_371_i_fu_655_p3 <= (tmp_399_i_i_fu_641_p4 & ap_const_lv25_0);
    tmp_372_i_fu_663_p2 <= std_logic_vector(unsigned(v_assign_s_fu_614_p2) - unsigned(tmp_371_i_fu_655_p3));
    tmp_373_i_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_600_p2),64));
    tmp_374_i_fu_670_p2 <= std_logic_vector(unsigned(t_q1) + unsigned(over_11_fu_651_p1));
    tmp_380_i_fu_742_p3 <= (tmp_397_i16_i_reg_959 & ap_const_lv26_0);
    tmp_381_i_fu_749_p2 <= std_logic_vector(unsigned(v_assign_1_reg_954) - unsigned(tmp_380_i_fu_742_p3));
    tmp_382_i_fu_755_p2 <= std_logic_vector(signed(over_12_fu_739_p1) + signed(t_q1));
    tmp_397_i_i_fu_575_p4 <= tmp_1064_i_i_fu_569_p2(63 downto 26);
    tmp_399_i_i_fu_641_p4 <= tmp_1066_i_i_fu_635_p2(63 downto 25);
    tmp_827_fu_315_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_828_fu_321_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_829_fu_339_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_830_fu_345_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_831_fu_363_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_832_fu_369_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_833_fu_387_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_834_fu_393_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_835_fu_411_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_836_fu_417_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_837_fu_435_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_838_fu_441_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_839_fu_459_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_840_fu_465_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_841_fu_483_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_842_fu_489_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_843_fu_507_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_844_fu_513_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_845_fu_553_p3 <= t_q0(63 downto 63);
    tmp_846_fu_619_p3 <= v_assign_s_fu_614_p2(63 downto 63);
    tmp_847_fu_677_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_848_fu_683_p2 <= std_logic_vector(shift_left(unsigned(t_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_849_fu_707_p3 <= v_assign_1_fu_701_p2(63 downto 63);
    tmp_i10_i_cast_cast_fu_627_p3 <= 
        ap_const_lv64_1FFFFFF when (tmp_846_fu_619_p3(0) = '1') else 
        ap_const_lv64_0;
    tmp_i13_i_cast_cast_fu_715_p3 <= 
        ap_const_lv64_3FFFFFF when (tmp_849_fu_707_p3(0) = '1') else 
        ap_const_lv64_0;
    tmp_i4_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_288),64));
    tmp_i_17_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_276),64));
    tmp_i_fu_531_p2 <= "1" when (unsigned(i_i_reg_276) < unsigned(ap_const_lv4_A)) else "0";
    tmp_i_i_cast_cast_fu_561_p3 <= 
        ap_const_lv64_3FFFFFF when (tmp_845_fu_553_p3(0) = '1') else 
        ap_const_lv64_0;
    v_assign_1_fu_701_p2 <= std_logic_vector(unsigned(tmp21_fu_689_p2) + unsigned(tmp22_fu_695_p2));
    v_assign_s_fu_614_p2 <= std_logic_vector(unsigned(t_load_111_reg_939) + unsigned(over_fu_611_p1));
end behav;
