// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_sign_ed25519_12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_v_address0,
        r_v_ce0,
        r_v_we0,
        r_v_d0,
        r_v_q0,
        r_v_address1,
        r_v_ce1,
        r_v_we1,
        r_v_d1,
        r_v_q1,
        x_v_address0,
        x_v_ce0,
        x_v_q0,
        y_v_address0,
        y_v_ce0,
        y_v_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] r_v_address0;
output   r_v_ce0;
output   r_v_we0;
output  [31:0] r_v_d0;
input  [31:0] r_v_q0;
output  [4:0] r_v_address1;
output   r_v_ce1;
output   r_v_we1;
output  [31:0] r_v_d1;
input  [31:0] r_v_q1;
output  [4:0] x_v_address0;
output   x_v_ce0;
input  [31:0] x_v_q0;
output  [4:0] y_v_address0;
output   y_v_ce0;
input  [31:0] y_v_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] r_v_address0;
reg r_v_ce0;
reg r_v_we0;
reg[31:0] r_v_d0;
reg[4:0] r_v_address1;
reg r_v_ce1;
reg r_v_we1;
reg[31:0] r_v_d1;
reg x_v_ce0;
reg y_v_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_59_fu_156_p2;
reg   [5:0] i_59_reg_274;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_162_p1;
reg   [63:0] tmp_reg_279;
wire   [0:0] exitcond_fu_150_p2;
wire   [2:0] rep_fu_181_p2;
reg   [2:0] rep_reg_309;
wire    ap_CS_fsm_state4;
wire   [4:0] i_60_fu_216_p2;
reg   [4:0] i_60_reg_317;
wire    ap_CS_fsm_state6;
reg   [4:0] r_v_addr_19_reg_322;
wire   [0:0] exitcond_i_fu_210_p2;
reg   [4:0] r_v_addr_20_reg_328;
reg   [5:0] i_reg_117;
wire    ap_CS_fsm_state3;
reg   [2:0] rep_i_reg_128;
reg   [4:0] i_i_reg_139;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_759_i_fu_222_p1;
wire   [63:0] tmp_760_i_fu_227_p1;
wire   [31:0] tmp_s_fu_168_p2;
wire   [31:0] tmp_i_cast_fu_205_p1;
wire   [31:0] grp_fu_262_p3;
wire   [31:0] tmp_761_i_fu_250_p2;
wire   [31:0] tmp_762_i_cast_fu_257_p1;
wire   [24:0] tmp_777_fu_191_p4;
wire   [6:0] tmp_797_fu_187_p1;
wire   [23:0] t_s_fu_236_p4;
wire   [31:0] t_9_fu_246_p1;
wire   [7:0] tmp_798_fu_232_p1;
wire   [5:0] grp_fu_262_p0;
wire   [24:0] grp_fu_262_p1;
wire   [0:0] exitcond1_i_fu_175_p2;
reg   [6:0] ap_NS_fsm;
wire   [30:0] grp_fu_262_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

crypto_sign_mac_mpcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 25 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
crypto_sign_mac_mpcA_x_U72(
    .din0(grp_fu_262_p0),
    .din1(grp_fu_262_p1),
    .din2(r_v_q1),
    .dout(grp_fu_262_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_i_reg_139 <= i_60_reg_317;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_139 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_117 <= i_59_reg_274;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_117 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_i_fu_210_p2))) begin
        rep_i_reg_128 <= rep_reg_309;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_150_p2 == 1'd1))) begin
        rep_i_reg_128 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_59_reg_274 <= i_59_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_60_reg_317 <= i_60_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_i_fu_210_p2))) begin
        r_v_addr_19_reg_322 <= tmp_759_i_fu_222_p1;
        r_v_addr_20_reg_328 <= tmp_760_i_fu_227_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        rep_reg_309 <= rep_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_150_p2 == 1'd0))) begin
        tmp_reg_279[5 : 0] <= tmp_fu_162_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond1_i_fu_175_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond1_i_fu_175_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_v_address0 = r_v_addr_19_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_v_address0 = tmp_760_i_fu_227_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_v_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_v_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_v_address0 = tmp_reg_279;
    end else begin
        r_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_v_address1 = r_v_addr_20_reg_328;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_v_address1 = tmp_759_i_fu_222_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_v_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_v_address1 = 64'd0;
    end else begin
        r_v_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        r_v_ce0 = 1'b1;
    end else begin
        r_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        r_v_ce1 = 1'b1;
    end else begin
        r_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_v_d0 = tmp_762_i_cast_fu_257_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_v_d0 = grp_fu_262_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_v_d0 = tmp_s_fu_168_p2;
    end else begin
        r_v_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_v_d1 = tmp_761_i_fu_250_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_v_d1 = tmp_i_cast_fu_205_p1;
    end else begin
        r_v_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        r_v_we0 = 1'b1;
    end else begin
        r_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7))) begin
        r_v_we1 = 1'b1;
    end else begin
        r_v_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_v_ce0 = 1'b1;
    end else begin
        x_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_v_ce0 = 1'b1;
    end else begin
        y_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_150_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond1_i_fu_175_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_i_fu_210_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign exitcond1_i_fu_175_p2 = ((rep_i_reg_128 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_150_p2 = ((i_reg_117 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_i_fu_210_p2 = ((i_i_reg_139 == 5'd31) ? 1'b1 : 1'b0);

assign grp_fu_262_p0 = 31'd19;

assign grp_fu_262_p1 = grp_fu_262_p10;

assign grp_fu_262_p10 = tmp_777_fu_191_p4;

assign i_59_fu_156_p2 = (i_reg_117 + 6'd1);

assign i_60_fu_216_p2 = (i_i_reg_139 + 5'd1);

assign rep_fu_181_p2 = (rep_i_reg_128 + 3'd1);

assign t_9_fu_246_p1 = t_s_fu_236_p4;

assign t_s_fu_236_p4 = {{r_v_q1[31:8]}};

assign tmp_759_i_fu_222_p1 = i_i_reg_139;

assign tmp_760_i_fu_227_p1 = i_60_fu_216_p2;

assign tmp_761_i_fu_250_p2 = (t_9_fu_246_p1 + r_v_q0);

assign tmp_762_i_cast_fu_257_p1 = tmp_798_fu_232_p1;

assign tmp_777_fu_191_p4 = {{r_v_q0[31:7]}};

assign tmp_797_fu_187_p1 = r_v_q0[6:0];

assign tmp_798_fu_232_p1 = r_v_q1[7:0];

assign tmp_fu_162_p1 = i_reg_117;

assign tmp_i_cast_fu_205_p1 = tmp_797_fu_187_p1;

assign tmp_s_fu_168_p2 = (x_v_q0 + y_v_q0);

assign x_v_address0 = tmp_fu_162_p1;

assign y_v_address0 = tmp_fu_162_p1;

always @ (posedge ap_clk) begin
    tmp_reg_279[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //crypto_sign_ed25519_12
