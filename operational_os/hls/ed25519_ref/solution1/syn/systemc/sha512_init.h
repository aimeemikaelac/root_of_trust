// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sha512_init_HH_
#define _sha512_init_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct sha512_init : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > md_state_address0;
    sc_out< sc_logic > md_state_ce0;
    sc_out< sc_logic > md_state_we0;
    sc_out< sc_lv<64> > md_state_d0;
    sc_out< sc_lv<3> > md_state_address1;
    sc_out< sc_logic > md_state_ce1;
    sc_out< sc_logic > md_state_we1;
    sc_out< sc_lv<64> > md_state_d1;


    // Module declarations
    sha512_init(sc_module_name name);
    SC_HAS_PROCESS(sha512_init);

    ~sha512_init();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_6A09E667F3BCC908;
    static const sc_lv<64> ap_const_lv64_BB67AE8584CAA73B;
    static const sc_lv<64> ap_const_lv64_3C6EF372FE94F82B;
    static const sc_lv<64> ap_const_lv64_A54FF53A5F1D36F1;
    static const sc_lv<64> ap_const_lv64_510E527FADE682D1;
    static const sc_lv<64> ap_const_lv64_9B05688C2B3E6C1F;
    static const sc_lv<64> ap_const_lv64_1F83D9ABFB41BD6B;
    static const sc_lv<64> ap_const_lv64_5BE0CD19137E2179;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_md_state_address0();
    void thread_md_state_address1();
    void thread_md_state_ce0();
    void thread_md_state_ce1();
    void thread_md_state_d0();
    void thread_md_state_d1();
    void thread_md_state_we0();
    void thread_md_state_we1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
