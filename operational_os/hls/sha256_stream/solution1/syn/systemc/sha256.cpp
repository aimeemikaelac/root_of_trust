// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> sha256::ap_ST_fsm_state1 = "1";
const sc_lv<9> sha256::ap_ST_fsm_state2 = "10";
const sc_lv<9> sha256::ap_ST_fsm_state3 = "100";
const sc_lv<9> sha256::ap_ST_fsm_state4 = "1000";
const sc_lv<9> sha256::ap_ST_fsm_state5 = "10000";
const sc_lv<9> sha256::ap_ST_fsm_state6 = "100000";
const sc_lv<9> sha256::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> sha256::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> sha256::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> sha256::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sha256::ap_const_lv1_0 = "0";
const sc_lv<1> sha256::ap_const_lv1_1 = "1";
const sc_lv<2> sha256::ap_const_lv2_0 = "00";
const sc_lv<2> sha256::ap_const_lv2_2 = "10";
const sc_lv<2> sha256::ap_const_lv2_3 = "11";
const sc_lv<2> sha256::ap_const_lv2_1 = "1";
const sc_lv<32> sha256::ap_const_lv32_6 = "110";
const sc_lv<32> sha256::ap_const_lv32_3 = "11";
const int sha256::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> sha256::ap_const_lv32_4 = "100";
const sc_lv<32> sha256::ap_const_lv32_5 = "101";
const sc_lv<32> sha256::ap_const_lv32_7 = "111";
const sc_lv<31> sha256::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<7> sha256::ap_const_lv7_0 = "0000000";
const sc_lv<32> sha256::ap_const_lv32_8 = "1000";
const sc_lv<64> sha256::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> sha256::ap_const_lv64_1 = "1";
const sc_lv<64> sha256::ap_const_lv64_2 = "10";
const sc_lv<32> sha256::ap_const_lv32_1 = "1";
const sc_lv<64> sha256::ap_const_lv64_3 = "11";
const sc_lv<64> sha256::ap_const_lv64_4 = "100";
const sc_lv<32> sha256::ap_const_lv32_2 = "10";
const sc_lv<64> sha256::ap_const_lv64_5 = "101";
const sc_lv<64> sha256::ap_const_lv64_6 = "110";
const sc_lv<64> sha256::ap_const_lv64_7 = "111";
const sc_lv<32> sha256::ap_const_lv32_6A09E667 = "1101010000010011110011001100111";
const sc_lv<32> sha256::ap_const_lv32_BB67AE85 = "10111011011001111010111010000101";
const sc_lv<32> sha256::ap_const_lv32_3C6EF372 = "111100011011101111001101110010";
const sc_lv<32> sha256::ap_const_lv32_A54FF53A = "10100101010011111111010100111010";
const sc_lv<32> sha256::ap_const_lv32_510E527F = "1010001000011100101001001111111";
const sc_lv<32> sha256::ap_const_lv32_9B05688C = "10011011000001010110100010001100";
const sc_lv<32> sha256::ap_const_lv32_1F83D9AB = "11111100000111101100110101011";
const sc_lv<32> sha256::ap_const_lv32_5BE0CD19 = "1011011111000001100110100011001";
const sc_lv<31> sha256::ap_const_lv31_1 = "1";
const sc_lv<7> sha256::ap_const_lv7_40 = "1000000";
const sc_lv<7> sha256::ap_const_lv7_1 = "1";
const bool sha256::ap_const_boolean_1 = true;

sha256::sha256(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sha256_AXILiteS_s_axi_U = new sha256_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("sha256_AXILiteS_s_axi_U");
    sha256_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    sha256_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    sha256_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    sha256_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    sha256_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    sha256_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    sha256_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    sha256_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    sha256_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    sha256_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    sha256_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    sha256_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    sha256_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    sha256_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    sha256_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    sha256_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    sha256_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    sha256_AXILiteS_s_axi_U->ACLK(ap_clk);
    sha256_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    sha256_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sha256_AXILiteS_s_axi_U->num_blocks(num_blocks);
    sha256_AXILiteS_s_axi_U->num_blocks_ap_vld(num_blocks_ap_vld);
    sha256_AXILiteS_s_axi_U->digest_out_address0(grp_final_fu_269_digest_address0);
    sha256_AXILiteS_s_axi_U->digest_out_ce0(grp_final_fu_269_digest_ce0);
    sha256_AXILiteS_s_axi_U->digest_out_we0(grp_final_fu_269_digest_we0);
    sha256_AXILiteS_s_axi_U->digest_out_d0(grp_final_fu_269_digest_d0);
    data_buffer_U = new sha256_data_buffer("data_buffer_U");
    data_buffer_U->clk(ap_clk);
    data_buffer_U->reset(ap_rst_n_inv);
    data_buffer_U->address0(data_buffer_address0);
    data_buffer_U->ce0(data_buffer_ce0);
    data_buffer_U->we0(data_buffer_we0);
    data_buffer_U->d0(stream_in_V_0_data_out);
    data_buffer_U->q0(data_buffer_q0);
    data_buffer_U->address1(grp_update_fu_256_message_address1);
    data_buffer_U->ce1(data_buffer_ce1);
    data_buffer_U->q1(data_buffer_q1);
    cipher_m_block_U = new sha256_cipher_m_bdEe("cipher_m_block_U");
    cipher_m_block_U->clk(ap_clk);
    cipher_m_block_U->reset(ap_rst_n_inv);
    cipher_m_block_U->address0(cipher_m_block_address0);
    cipher_m_block_U->ce0(cipher_m_block_ce0);
    cipher_m_block_U->we0(cipher_m_block_we0);
    cipher_m_block_U->d0(cipher_m_block_d0);
    cipher_m_block_U->q0(cipher_m_block_q0);
    cipher_m_block_U->address1(cipher_m_block_address1);
    cipher_m_block_U->ce1(cipher_m_block_ce1);
    cipher_m_block_U->q1(cipher_m_block_q1);
    cipher_m_h_U = new sha256_cipher_m_h("cipher_m_h_U");
    cipher_m_h_U->clk(ap_clk);
    cipher_m_h_U->reset(ap_rst_n_inv);
    cipher_m_h_U->address0(cipher_m_h_address0);
    cipher_m_h_U->ce0(cipher_m_h_ce0);
    cipher_m_h_U->we0(cipher_m_h_we0);
    cipher_m_h_U->d0(cipher_m_h_d0);
    cipher_m_h_U->q0(cipher_m_h_q0);
    cipher_m_h_U->address1(cipher_m_h_address1);
    cipher_m_h_U->ce1(cipher_m_h_ce1);
    cipher_m_h_U->we1(cipher_m_h_we1);
    cipher_m_h_U->d1(cipher_m_h_d1);
    grp_update_fu_256 = new update("grp_update_fu_256");
    grp_update_fu_256->ap_clk(ap_clk);
    grp_update_fu_256->ap_rst(ap_rst_n_inv);
    grp_update_fu_256->ap_start(grp_update_fu_256_ap_start);
    grp_update_fu_256->ap_done(grp_update_fu_256_ap_done);
    grp_update_fu_256->ap_idle(grp_update_fu_256_ap_idle);
    grp_update_fu_256->ap_ready(grp_update_fu_256_ap_ready);
    grp_update_fu_256->SHA256_m_tot_len_read(cipher_m_tot_len_reg_221);
    grp_update_fu_256->SHA256_m_len_read(cipher_m_len_reg_209);
    grp_update_fu_256->SHA256_m_block_address0(grp_update_fu_256_SHA256_m_block_address0);
    grp_update_fu_256->SHA256_m_block_ce0(grp_update_fu_256_SHA256_m_block_ce0);
    grp_update_fu_256->SHA256_m_block_we0(grp_update_fu_256_SHA256_m_block_we0);
    grp_update_fu_256->SHA256_m_block_d0(grp_update_fu_256_SHA256_m_block_d0);
    grp_update_fu_256->SHA256_m_block_q0(cipher_m_block_q0);
    grp_update_fu_256->SHA256_m_block_address1(grp_update_fu_256_SHA256_m_block_address1);
    grp_update_fu_256->SHA256_m_block_ce1(grp_update_fu_256_SHA256_m_block_ce1);
    grp_update_fu_256->SHA256_m_block_q1(cipher_m_block_q1);
    grp_update_fu_256->SHA256_m_h_address0(grp_update_fu_256_SHA256_m_h_address0);
    grp_update_fu_256->SHA256_m_h_ce0(grp_update_fu_256_SHA256_m_h_ce0);
    grp_update_fu_256->SHA256_m_h_we0(grp_update_fu_256_SHA256_m_h_we0);
    grp_update_fu_256->SHA256_m_h_d0(grp_update_fu_256_SHA256_m_h_d0);
    grp_update_fu_256->SHA256_m_h_q0(cipher_m_h_q0);
    grp_update_fu_256->message_address0(grp_update_fu_256_message_address0);
    grp_update_fu_256->message_ce0(grp_update_fu_256_message_ce0);
    grp_update_fu_256->message_q0(data_buffer_q0);
    grp_update_fu_256->message_address1(grp_update_fu_256_message_address1);
    grp_update_fu_256->message_ce1(grp_update_fu_256_message_ce1);
    grp_update_fu_256->message_q1(data_buffer_q1);
    grp_update_fu_256->ap_return_0(grp_update_fu_256_ap_return_0);
    grp_update_fu_256->ap_return_1(grp_update_fu_256_ap_return_1);
    grp_final_fu_269 = new final("grp_final_fu_269");
    grp_final_fu_269->ap_clk(ap_clk);
    grp_final_fu_269->ap_rst(ap_rst_n_inv);
    grp_final_fu_269->ap_start(grp_final_fu_269_ap_start);
    grp_final_fu_269->ap_done(grp_final_fu_269_ap_done);
    grp_final_fu_269->ap_idle(grp_final_fu_269_ap_idle);
    grp_final_fu_269->ap_ready(grp_final_fu_269_ap_ready);
    grp_final_fu_269->SHA256_m_tot_len_read(cipher_m_tot_len_reg_221);
    grp_final_fu_269->SHA256_m_len_read(cipher_m_len_reg_209);
    grp_final_fu_269->SHA256_m_block_address0(grp_final_fu_269_SHA256_m_block_address0);
    grp_final_fu_269->SHA256_m_block_ce0(grp_final_fu_269_SHA256_m_block_ce0);
    grp_final_fu_269->SHA256_m_block_we0(grp_final_fu_269_SHA256_m_block_we0);
    grp_final_fu_269->SHA256_m_block_d0(grp_final_fu_269_SHA256_m_block_d0);
    grp_final_fu_269->SHA256_m_block_q0(cipher_m_block_q0);
    grp_final_fu_269->SHA256_m_block_address1(grp_final_fu_269_SHA256_m_block_address1);
    grp_final_fu_269->SHA256_m_block_ce1(grp_final_fu_269_SHA256_m_block_ce1);
    grp_final_fu_269->SHA256_m_block_q1(cipher_m_block_q1);
    grp_final_fu_269->SHA256_m_h_address0(grp_final_fu_269_SHA256_m_h_address0);
    grp_final_fu_269->SHA256_m_h_ce0(grp_final_fu_269_SHA256_m_h_ce0);
    grp_final_fu_269->SHA256_m_h_we0(grp_final_fu_269_SHA256_m_h_we0);
    grp_final_fu_269->SHA256_m_h_d0(grp_final_fu_269_SHA256_m_h_d0);
    grp_final_fu_269->SHA256_m_h_q0(cipher_m_h_q0);
    grp_final_fu_269->digest_address0(grp_final_fu_269_digest_address0);
    grp_final_fu_269->digest_ce0(grp_final_fu_269_digest_ce0);
    grp_final_fu_269->digest_we0(grp_final_fu_269_digest_we0);
    grp_final_fu_269->digest_d0(grp_final_fu_269_digest_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_final_fu_269_ap_done );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_final_fu_269_ap_done );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_block_counter_1_fu_292_p2);
    sensitive << ( block_counter_reg_233 );

    SC_METHOD(thread_block_counter_cast_fu_283_p1);
    sensitive << ( block_counter_reg_233 );

    SC_METHOD(thread_cipher_m_block_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_block_address0 );
    sensitive << ( grp_final_fu_269_SHA256_m_block_address0 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cipher_m_block_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_block_address1 );
    sensitive << ( grp_final_fu_269_SHA256_m_block_address1 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cipher_m_block_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_block_ce0 );
    sensitive << ( grp_final_fu_269_SHA256_m_block_ce0 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cipher_m_block_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_block_ce1 );
    sensitive << ( grp_final_fu_269_SHA256_m_block_ce1 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cipher_m_block_d0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_block_d0 );
    sensitive << ( grp_final_fu_269_SHA256_m_block_d0 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cipher_m_block_we0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_block_we0 );
    sensitive << ( grp_final_fu_269_SHA256_m_block_we0 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_cipher_m_h_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_h_address0 );
    sensitive << ( grp_final_fu_269_SHA256_m_h_address0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_h_ce0 );
    sensitive << ( grp_final_fu_269_SHA256_m_h_ce0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_h_d0 );
    sensitive << ( grp_final_fu_269_SHA256_m_h_d0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_d1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_SHA256_m_h_we0 );
    sensitive << ( grp_final_fu_269_SHA256_m_h_we0 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_buffer_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_message_address0 );
    sensitive << ( tmp_3_fu_310_p1 );

    SC_METHOD(thread_data_buffer_ce0);
    sensitive << ( stream_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_message_ce0 );

    SC_METHOD(thread_data_buffer_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_message_ce1 );

    SC_METHOD(thread_data_buffer_we0);
    sensitive << ( stream_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data_index_1_fu_304_p2);
    sensitive << ( data_index_reg_244 );

    SC_METHOD(thread_exitcond_fu_298_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( data_index_reg_244 );

    SC_METHOD(thread_grp_final_fu_269_ap_start);
    sensitive << ( ap_reg_grp_final_fu_269_ap_start );

    SC_METHOD(thread_grp_update_fu_256_ap_start);
    sensitive << ( ap_reg_grp_update_fu_256_ap_start );

    SC_METHOD(thread_num_blocks_ap_vld_in_sig);
    sensitive << ( num_blocks_ap_vld );
    sensitive << ( num_blocks_ap_vld_preg );

    SC_METHOD(thread_num_blocks_blk_n);
    sensitive << ( num_blocks_ap_vld );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_num_blocks_in_sig);
    sensitive << ( num_blocks );
    sensitive << ( num_blocks_preg );
    sensitive << ( num_blocks_ap_vld );

    SC_METHOD(thread_stream_in_V_0_ack_in);
    sensitive << ( stream_in_V_0_state );

    SC_METHOD(thread_stream_in_V_0_ack_out);
    sensitive << ( stream_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_stream_in_V_0_data_out);
    sensitive << ( stream_in_V_0_payload_A );
    sensitive << ( stream_in_V_0_payload_B );
    sensitive << ( stream_in_V_0_sel );

    SC_METHOD(thread_stream_in_V_0_load_A);
    sensitive << ( stream_in_V_0_sel_wr );
    sensitive << ( stream_in_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_0_load_B);
    sensitive << ( stream_in_V_0_sel_wr );
    sensitive << ( stream_in_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_0_sel);
    sensitive << ( stream_in_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_0_state_cmp_full);
    sensitive << ( stream_in_V_0_state );

    SC_METHOD(thread_stream_in_V_0_vld_in);
    sensitive << ( stream_in_V_TVALID );

    SC_METHOD(thread_stream_in_V_0_vld_out);
    sensitive << ( stream_in_V_0_state );

    SC_METHOD(thread_stream_in_V_TDATA_blk_n);
    sensitive << ( stream_in_V_0_state );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_stream_in_V_TREADY);
    sensitive << ( stream_in_V_0_state );

    SC_METHOD(thread_tmp_3_fu_310_p1);
    sensitive << ( data_index_reg_244 );

    SC_METHOD(thread_tmp_fu_287_p2);
    sensitive << ( num_blocks_in_sig );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( block_counter_cast_fu_283_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_V_0_vld_out );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( grp_update_fu_256_ap_done );
    sensitive << ( grp_final_fu_269_ap_done );
    sensitive << ( tmp_fu_287_p2 );
    sensitive << ( exitcond_fu_298_p2 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000001";
    stream_in_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_0_state = "00";
    num_blocks_preg = "00000000000000000000000000000000";
    num_blocks_ap_vld_preg = SC_LOGIC_0;
    ap_reg_grp_update_fu_256_ap_start = SC_LOGIC_0;
    ap_reg_grp_final_fu_269_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stream_in_V_TDATA, "(port)stream_in_V_TDATA");
    sc_trace(mVcdFile, stream_in_V_TVALID, "(port)stream_in_V_TVALID");
    sc_trace(mVcdFile, stream_in_V_TREADY, "(port)stream_in_V_TREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, stream_in_V_0_data_out, "stream_in_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_0_vld_in, "stream_in_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_0_vld_out, "stream_in_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_0_ack_in, "stream_in_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_0_ack_out, "stream_in_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_0_payload_A, "stream_in_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_0_payload_B, "stream_in_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_0_sel_rd, "stream_in_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_0_sel_wr, "stream_in_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_0_sel, "stream_in_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_0_load_A, "stream_in_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_0_load_B, "stream_in_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_0_state, "stream_in_V_0_state");
    sc_trace(mVcdFile, stream_in_V_0_state_cmp_full, "stream_in_V_0_state_cmp_full");
    sc_trace(mVcdFile, num_blocks, "num_blocks");
    sc_trace(mVcdFile, num_blocks_preg, "num_blocks_preg");
    sc_trace(mVcdFile, num_blocks_ap_vld, "num_blocks_ap_vld");
    sc_trace(mVcdFile, num_blocks_in_sig, "num_blocks_in_sig");
    sc_trace(mVcdFile, num_blocks_ap_vld_preg, "num_blocks_ap_vld_preg");
    sc_trace(mVcdFile, num_blocks_ap_vld_in_sig, "num_blocks_ap_vld_in_sig");
    sc_trace(mVcdFile, stream_in_V_TDATA_blk_n, "stream_in_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, num_blocks_blk_n, "num_blocks_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, block_counter_1_fu_292_p2, "block_counter_1_fu_292_p2");
    sc_trace(mVcdFile, block_counter_1_reg_331, "block_counter_1_reg_331");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, data_index_1_fu_304_p2, "data_index_1_fu_304_p2");
    sc_trace(mVcdFile, data_index_1_reg_339, "data_index_1_reg_339");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_update_fu_256_ap_done, "grp_update_fu_256_ap_done");
    sc_trace(mVcdFile, data_buffer_address0, "data_buffer_address0");
    sc_trace(mVcdFile, data_buffer_ce0, "data_buffer_ce0");
    sc_trace(mVcdFile, data_buffer_we0, "data_buffer_we0");
    sc_trace(mVcdFile, data_buffer_q0, "data_buffer_q0");
    sc_trace(mVcdFile, data_buffer_ce1, "data_buffer_ce1");
    sc_trace(mVcdFile, data_buffer_q1, "data_buffer_q1");
    sc_trace(mVcdFile, cipher_m_block_address0, "cipher_m_block_address0");
    sc_trace(mVcdFile, cipher_m_block_ce0, "cipher_m_block_ce0");
    sc_trace(mVcdFile, cipher_m_block_we0, "cipher_m_block_we0");
    sc_trace(mVcdFile, cipher_m_block_d0, "cipher_m_block_d0");
    sc_trace(mVcdFile, cipher_m_block_q0, "cipher_m_block_q0");
    sc_trace(mVcdFile, cipher_m_block_address1, "cipher_m_block_address1");
    sc_trace(mVcdFile, cipher_m_block_ce1, "cipher_m_block_ce1");
    sc_trace(mVcdFile, cipher_m_block_q1, "cipher_m_block_q1");
    sc_trace(mVcdFile, cipher_m_h_address0, "cipher_m_h_address0");
    sc_trace(mVcdFile, cipher_m_h_ce0, "cipher_m_h_ce0");
    sc_trace(mVcdFile, cipher_m_h_we0, "cipher_m_h_we0");
    sc_trace(mVcdFile, cipher_m_h_d0, "cipher_m_h_d0");
    sc_trace(mVcdFile, cipher_m_h_q0, "cipher_m_h_q0");
    sc_trace(mVcdFile, cipher_m_h_address1, "cipher_m_h_address1");
    sc_trace(mVcdFile, cipher_m_h_ce1, "cipher_m_h_ce1");
    sc_trace(mVcdFile, cipher_m_h_we1, "cipher_m_h_we1");
    sc_trace(mVcdFile, cipher_m_h_d1, "cipher_m_h_d1");
    sc_trace(mVcdFile, grp_update_fu_256_ap_start, "grp_update_fu_256_ap_start");
    sc_trace(mVcdFile, grp_update_fu_256_ap_idle, "grp_update_fu_256_ap_idle");
    sc_trace(mVcdFile, grp_update_fu_256_ap_ready, "grp_update_fu_256_ap_ready");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_block_address0, "grp_update_fu_256_SHA256_m_block_address0");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_block_ce0, "grp_update_fu_256_SHA256_m_block_ce0");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_block_we0, "grp_update_fu_256_SHA256_m_block_we0");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_block_d0, "grp_update_fu_256_SHA256_m_block_d0");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_block_address1, "grp_update_fu_256_SHA256_m_block_address1");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_block_ce1, "grp_update_fu_256_SHA256_m_block_ce1");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_h_address0, "grp_update_fu_256_SHA256_m_h_address0");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_h_ce0, "grp_update_fu_256_SHA256_m_h_ce0");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_h_we0, "grp_update_fu_256_SHA256_m_h_we0");
    sc_trace(mVcdFile, grp_update_fu_256_SHA256_m_h_d0, "grp_update_fu_256_SHA256_m_h_d0");
    sc_trace(mVcdFile, grp_update_fu_256_message_address0, "grp_update_fu_256_message_address0");
    sc_trace(mVcdFile, grp_update_fu_256_message_ce0, "grp_update_fu_256_message_ce0");
    sc_trace(mVcdFile, grp_update_fu_256_message_address1, "grp_update_fu_256_message_address1");
    sc_trace(mVcdFile, grp_update_fu_256_message_ce1, "grp_update_fu_256_message_ce1");
    sc_trace(mVcdFile, grp_update_fu_256_ap_return_0, "grp_update_fu_256_ap_return_0");
    sc_trace(mVcdFile, grp_update_fu_256_ap_return_1, "grp_update_fu_256_ap_return_1");
    sc_trace(mVcdFile, grp_final_fu_269_ap_start, "grp_final_fu_269_ap_start");
    sc_trace(mVcdFile, grp_final_fu_269_ap_done, "grp_final_fu_269_ap_done");
    sc_trace(mVcdFile, grp_final_fu_269_ap_idle, "grp_final_fu_269_ap_idle");
    sc_trace(mVcdFile, grp_final_fu_269_ap_ready, "grp_final_fu_269_ap_ready");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_block_address0, "grp_final_fu_269_SHA256_m_block_address0");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_block_ce0, "grp_final_fu_269_SHA256_m_block_ce0");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_block_we0, "grp_final_fu_269_SHA256_m_block_we0");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_block_d0, "grp_final_fu_269_SHA256_m_block_d0");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_block_address1, "grp_final_fu_269_SHA256_m_block_address1");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_block_ce1, "grp_final_fu_269_SHA256_m_block_ce1");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_h_address0, "grp_final_fu_269_SHA256_m_h_address0");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_h_ce0, "grp_final_fu_269_SHA256_m_h_ce0");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_h_we0, "grp_final_fu_269_SHA256_m_h_we0");
    sc_trace(mVcdFile, grp_final_fu_269_SHA256_m_h_d0, "grp_final_fu_269_SHA256_m_h_d0");
    sc_trace(mVcdFile, grp_final_fu_269_digest_address0, "grp_final_fu_269_digest_address0");
    sc_trace(mVcdFile, grp_final_fu_269_digest_ce0, "grp_final_fu_269_digest_ce0");
    sc_trace(mVcdFile, grp_final_fu_269_digest_we0, "grp_final_fu_269_digest_we0");
    sc_trace(mVcdFile, grp_final_fu_269_digest_d0, "grp_final_fu_269_digest_d0");
    sc_trace(mVcdFile, cipher_m_len_reg_209, "cipher_m_len_reg_209");
    sc_trace(mVcdFile, cipher_m_tot_len_reg_221, "cipher_m_tot_len_reg_221");
    sc_trace(mVcdFile, block_counter_reg_233, "block_counter_reg_233");
    sc_trace(mVcdFile, data_index_reg_244, "data_index_reg_244");
    sc_trace(mVcdFile, tmp_fu_287_p2, "tmp_fu_287_p2");
    sc_trace(mVcdFile, ap_reg_grp_update_fu_256_ap_start, "ap_reg_grp_update_fu_256_ap_start");
    sc_trace(mVcdFile, exitcond_fu_298_p2, "exitcond_fu_298_p2");
    sc_trace(mVcdFile, ap_reg_grp_final_fu_269_ap_start, "ap_reg_grp_final_fu_269_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_3_fu_310_p1, "tmp_3_fu_310_p1");
    sc_trace(mVcdFile, block_counter_cast_fu_283_p1, "block_counter_cast_fu_283_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sha256.hdltvin.dat");
    mHdltvoutHandle.open("sha256.hdltvout.dat");
}

sha256::~sha256() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sha256_AXILiteS_s_axi_U;
    delete data_buffer_U;
    delete cipher_m_block_U;
    delete cipher_m_h_U;
    delete grp_update_fu_256;
    delete grp_final_fu_269;
}

void sha256::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sha256::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_final_fu_269_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_287_p2.read()))) {
            ap_reg_grp_final_fu_269_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_final_fu_269_ap_ready.read())) {
            ap_reg_grp_final_fu_269_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_update_fu_256_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_298_p2.read()))) {
            ap_reg_grp_update_fu_256_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_256_ap_ready.read())) {
            ap_reg_grp_update_fu_256_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(grp_update_fu_256_ap_done.read(), ap_const_logic_1))) {
        block_counter_reg_233 = block_counter_1_reg_331.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(num_blocks_ap_vld_in_sig.read(), ap_const_logic_1))) {
        block_counter_reg_233 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(grp_update_fu_256_ap_done.read(), ap_const_logic_1))) {
        cipher_m_len_reg_209 = grp_update_fu_256_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(num_blocks_ap_vld_in_sig.read(), ap_const_logic_1))) {
        cipher_m_len_reg_209 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(grp_update_fu_256_ap_done.read(), ap_const_logic_1))) {
        cipher_m_tot_len_reg_221 = grp_update_fu_256_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(num_blocks_ap_vld_in_sig.read(), ap_const_logic_1))) {
        cipher_m_tot_len_reg_221 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_287_p2.read()))) {
        data_index_reg_244 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(stream_in_V_0_vld_out.read(), ap_const_logic_1))) {
        data_index_reg_244 = data_index_1_reg_339.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        num_blocks_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
             esl_seteq<1,1,1>(grp_final_fu_269_ap_done.read(), ap_const_logic_1))) {
            num_blocks_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, num_blocks_ap_vld.read()))) {
            num_blocks_ap_vld_preg = num_blocks_ap_vld.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        num_blocks_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, num_blocks_ap_vld.read()))) {
            num_blocks_preg = num_blocks.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_vld_out.read()))) {
            stream_in_V_0_sel_rd =  (sc_logic) (~stream_in_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_ack_in.read()))) {
            stream_in_V_0_sel_wr =  (sc_logic) (~stream_in_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(stream_in_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(stream_in_V_0_state.read(), ap_const_lv2_2)))) {
            stream_in_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_0_state.read(), ap_const_lv2_1)))) {
            stream_in_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(stream_in_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_ack_out.read()))))) {
            stream_in_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        block_counter_1_reg_331 = block_counter_1_fu_292_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        data_index_1_reg_339 = data_index_1_fu_304_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_load_A.read())) {
        stream_in_V_0_payload_A = stream_in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_load_B.read())) {
        stream_in_V_0_payload_B = stream_in_V_TDATA.read();
    }
}

void sha256::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sha256::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sha256::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(grp_final_fu_269_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(grp_final_fu_269_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sha256::thread_block_counter_1_fu_292_p2() {
    block_counter_1_fu_292_p2 = (!block_counter_reg_233.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(block_counter_reg_233.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void sha256::thread_block_counter_cast_fu_283_p1() {
    block_counter_cast_fu_283_p1 = esl_zext<32,31>(block_counter_reg_233.read());
}

void sha256::thread_cipher_m_block_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_block_address0 = grp_final_fu_269_SHA256_m_block_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_block_address0 = grp_update_fu_256_SHA256_m_block_address0.read();
    } else {
        cipher_m_block_address0 =  (sc_lv<7>) ("XXXXXXX");
    }
}

void sha256::thread_cipher_m_block_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_block_address1 = grp_final_fu_269_SHA256_m_block_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_block_address1 = grp_update_fu_256_SHA256_m_block_address1.read();
    } else {
        cipher_m_block_address1 =  (sc_lv<7>) ("XXXXXXX");
    }
}

void sha256::thread_cipher_m_block_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_block_ce0 = grp_final_fu_269_SHA256_m_block_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_block_ce0 = grp_update_fu_256_SHA256_m_block_ce0.read();
    } else {
        cipher_m_block_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_cipher_m_block_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_block_ce1 = grp_final_fu_269_SHA256_m_block_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_block_ce1 = grp_update_fu_256_SHA256_m_block_ce1.read();
    } else {
        cipher_m_block_ce1 = ap_const_logic_0;
    }
}

void sha256::thread_cipher_m_block_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_block_d0 = grp_final_fu_269_SHA256_m_block_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_block_d0 = grp_update_fu_256_SHA256_m_block_d0.read();
    } else {
        cipher_m_block_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256::thread_cipher_m_block_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_block_we0 = grp_final_fu_269_SHA256_m_block_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_block_we0 = grp_update_fu_256_SHA256_m_block_we0.read();
    } else {
        cipher_m_block_we0 = ap_const_logic_0;
    }
}

void sha256::thread_cipher_m_h_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_m_h_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_m_h_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cipher_m_h_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cipher_m_h_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_h_address0 = grp_final_fu_269_SHA256_m_h_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_h_address0 = grp_update_fu_256_SHA256_m_h_address0.read();
    } else {
        cipher_m_h_address0 =  (sc_lv<3>) ("XXX");
    }
}

void sha256::thread_cipher_m_h_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_m_h_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_m_h_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cipher_m_h_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cipher_m_h_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        cipher_m_h_address1 =  (sc_lv<3>) ("XXX");
    }
}

void sha256::thread_cipher_m_h_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(num_blocks_ap_vld_in_sig.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cipher_m_h_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_h_ce0 = grp_final_fu_269_SHA256_m_h_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_h_ce0 = grp_update_fu_256_SHA256_m_h_ce0.read();
    } else {
        cipher_m_h_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_cipher_m_h_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(num_blocks_ap_vld_in_sig.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cipher_m_h_ce1 = ap_const_logic_1;
    } else {
        cipher_m_h_ce1 = ap_const_logic_0;
    }
}

void sha256::thread_cipher_m_h_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_m_h_d0 = ap_const_lv32_1F83D9AB;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_m_h_d0 = ap_const_lv32_510E527F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cipher_m_h_d0 = ap_const_lv32_3C6EF372;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cipher_m_h_d0 = ap_const_lv32_6A09E667;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_h_d0 = grp_final_fu_269_SHA256_m_h_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_h_d0 = grp_update_fu_256_SHA256_m_h_d0.read();
    } else {
        cipher_m_h_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_cipher_m_h_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_m_h_d1 = ap_const_lv32_5BE0CD19;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_m_h_d1 = ap_const_lv32_9B05688C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cipher_m_h_d1 = ap_const_lv32_A54FF53A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cipher_m_h_d1 = ap_const_lv32_BB67AE85;
    } else {
        cipher_m_h_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256::thread_cipher_m_h_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(num_blocks_ap_vld_in_sig.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cipher_m_h_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        cipher_m_h_we0 = grp_final_fu_269_SHA256_m_h_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        cipher_m_h_we0 = grp_update_fu_256_SHA256_m_h_we0.read();
    } else {
        cipher_m_h_we0 = ap_const_logic_0;
    }
}

void sha256::thread_cipher_m_h_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(num_blocks_ap_vld_in_sig.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cipher_m_h_we1 = ap_const_logic_1;
    } else {
        cipher_m_h_we1 = ap_const_logic_0;
    }
}

void sha256::thread_data_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        data_buffer_address0 =  (sc_lv<6>) (tmp_3_fu_310_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        data_buffer_address0 = grp_update_fu_256_message_address0.read();
    } else {
        data_buffer_address0 = "XXXXXX";
    }
}

void sha256::thread_data_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(stream_in_V_0_vld_out.read(), ap_const_logic_1))) {
        data_buffer_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        data_buffer_ce0 = grp_update_fu_256_message_ce0.read();
    } else {
        data_buffer_ce0 = ap_const_logic_0;
    }
}

void sha256::thread_data_buffer_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        data_buffer_ce1 = grp_update_fu_256_message_ce1.read();
    } else {
        data_buffer_ce1 = ap_const_logic_0;
    }
}

void sha256::thread_data_buffer_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(stream_in_V_0_vld_out.read(), ap_const_logic_1))) {
        data_buffer_we0 = ap_const_logic_1;
    } else {
        data_buffer_we0 = ap_const_logic_0;
    }
}

void sha256::thread_data_index_1_fu_304_p2() {
    data_index_1_fu_304_p2 = (!data_index_reg_244.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(data_index_reg_244.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256::thread_exitcond_fu_298_p2() {
    exitcond_fu_298_p2 = (!data_index_reg_244.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(data_index_reg_244.read() == ap_const_lv7_40);
}

void sha256::thread_grp_final_fu_269_ap_start() {
    grp_final_fu_269_ap_start = ap_reg_grp_final_fu_269_ap_start.read();
}

void sha256::thread_grp_update_fu_256_ap_start() {
    grp_update_fu_256_ap_start = ap_reg_grp_update_fu_256_ap_start.read();
}

void sha256::thread_num_blocks_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, num_blocks_ap_vld.read())) {
        num_blocks_ap_vld_in_sig = num_blocks_ap_vld.read();
    } else {
        num_blocks_ap_vld_in_sig = num_blocks_ap_vld_preg.read();
    }
}

void sha256::thread_num_blocks_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        num_blocks_blk_n = num_blocks_ap_vld.read();
    } else {
        num_blocks_blk_n = ap_const_logic_1;
    }
}

void sha256::thread_num_blocks_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, num_blocks_ap_vld.read())) {
        num_blocks_in_sig = num_blocks.read();
    } else {
        num_blocks_in_sig = num_blocks_preg.read();
    }
}

void sha256::thread_stream_in_V_0_ack_in() {
    stream_in_V_0_ack_in = stream_in_V_0_state.read()[1];
}

void sha256::thread_stream_in_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(stream_in_V_0_vld_out.read(), ap_const_logic_1))) {
        stream_in_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_0_ack_out = ap_const_logic_0;
    }
}

void sha256::thread_stream_in_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_0_sel.read())) {
        stream_in_V_0_data_out = stream_in_V_0_payload_B.read();
    } else {
        stream_in_V_0_data_out = stream_in_V_0_payload_A.read();
    }
}

void sha256::thread_stream_in_V_0_load_A() {
    stream_in_V_0_load_A = (stream_in_V_0_state_cmp_full.read() & ~stream_in_V_0_sel_wr.read());
}

void sha256::thread_stream_in_V_0_load_B() {
    stream_in_V_0_load_B = (stream_in_V_0_sel_wr.read() & stream_in_V_0_state_cmp_full.read());
}

void sha256::thread_stream_in_V_0_sel() {
    stream_in_V_0_sel = stream_in_V_0_sel_rd.read();
}

void sha256::thread_stream_in_V_0_state_cmp_full() {
    stream_in_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_0_state.read() != ap_const_lv2_1))[0];
}

void sha256::thread_stream_in_V_0_vld_in() {
    stream_in_V_0_vld_in = stream_in_V_TVALID.read();
}

void sha256::thread_stream_in_V_0_vld_out() {
    stream_in_V_0_vld_out = stream_in_V_0_state.read()[0];
}

void sha256::thread_stream_in_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        stream_in_V_TDATA_blk_n = stream_in_V_0_state.read()[0];
    } else {
        stream_in_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void sha256::thread_stream_in_V_TREADY() {
    stream_in_V_TREADY = stream_in_V_0_state.read()[1];
}

void sha256::thread_tmp_3_fu_310_p1() {
    tmp_3_fu_310_p1 = esl_zext<64,7>(data_index_reg_244.read());
}

void sha256::thread_tmp_fu_287_p2() {
    tmp_fu_287_p2 = (!block_counter_cast_fu_283_p1.read().is_01() || !num_blocks_in_sig.read().is_01())? sc_lv<1>(): (sc_bigint<32>(block_counter_cast_fu_283_p1.read()) < sc_bigint<32>(num_blocks_in_sig.read()));
}

void sha256::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(num_blocks_ap_vld_in_sig.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_287_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_298_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(stream_in_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_update_fu_256_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(grp_final_fu_269_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

void sha256::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_V_TDATA\" :  \"" << stream_in_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_V_TVALID\" :  \"" << stream_in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_in_V_TREADY\" :  \"" << stream_in_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

