#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("device_key_ocm_addr", 32, hls_in, 0, "ap_vld", "in_data", 1),
	Port_Property("device_key_ocm_addr_ap_vld", 1, hls_in, 0, "ap_vld", "in_vld", 1),
	Port_Property("ocm_V_req_din", 1, hls_out, 1, "ap_bus", "fifo_data", 1),
	Port_Property("ocm_V_req_full_n", 1, hls_in, 1, "ap_bus", "fifo_status", 1),
	Port_Property("ocm_V_req_write", 1, hls_out, 1, "ap_bus", "fifo_update", 1),
	Port_Property("ocm_V_rsp_empty_n", 1, hls_in, 1, "ap_bus", "fifo_status", 1),
	Port_Property("ocm_V_rsp_read", 1, hls_out, 1, "ap_bus", "fifo_update", 1),
	Port_Property("ocm_V_address", 32, hls_out, 1, "ap_bus", "unknown", 1),
	Port_Property("ocm_V_datain", 128, hls_in, 1, "ap_bus", "unknown", 1),
	Port_Property("ocm_V_dataout", 128, hls_out, 1, "ap_bus", "unknown", 1),
	Port_Property("ocm_V_size", 32, hls_out, 1, "ap_bus", "unknown", 1),
	Port_Property("iv_V", 128, hls_in, 2, "ap_vld", "in_data", 1),
	Port_Property("iv_V_ap_vld", 1, hls_in, 2, "ap_vld", "in_vld", 1),
	Port_Property("encrypted_header_old_V_address0", 8, hls_out, 3, "ap_memory", "mem_address", 1),
	Port_Property("encrypted_header_old_V_ce0", 1, hls_out, 3, "ap_memory", "mem_ce", 1),
	Port_Property("encrypted_header_old_V_q0", 128, hls_in, 3, "ap_memory", "mem_dout", 1),
	Port_Property("tag_header_old_V", 128, hls_in, 4, "ap_vld", "in_data", 1),
	Port_Property("tag_header_old_V_ap_vld", 1, hls_in, 4, "ap_vld", "in_vld", 1),
	Port_Property("encrypted_header_new_V_address0", 8, hls_out, 5, "ap_memory", "mem_address", 1),
	Port_Property("encrypted_header_new_V_ce0", 1, hls_out, 5, "ap_memory", "mem_ce", 1),
	Port_Property("encrypted_header_new_V_q0", 128, hls_in, 5, "ap_memory", "mem_dout", 1),
	Port_Property("tag_header_new_V", 128, hls_in, 6, "ap_vld", "in_data", 1),
	Port_Property("tag_header_new_V_ap_vld", 1, hls_in, 6, "ap_vld", "in_vld", 1),
	Port_Property("user_key_V", 128, hls_in, 7, "ap_none", "in_data", 1),
	Port_Property("user_key_valid_i", 1, hls_in, 8, "ap_none", "in_data", 1),
	Port_Property("user_key_valid_o", 1, hls_out, 8, "ap_none", "out_data", 1),
	Port_Property("writing_done_in", 1, hls_in, 9, "ap_none", "in_data", 1),
	Port_Property("derived_key_out_V", 128, hls_out, 10, "ap_none", "out_data", 1),
	Port_Property("derived_key_valid", 1, hls_out, 11, "ap_none", "out_data", 1),
	Port_Property("master_key_out_V", 128, hls_out, 12, "ap_none", "out_data", 1),
	Port_Property("master_key_out_valid", 1, hls_out, 13, "ap_none", "out_data", 1),
	Port_Property("iv_out_V", 128, hls_in, 14, "ap_none", "in_data", 1),
	Port_Property("iv_out_valid", 1, hls_out, 15, "ap_none", "out_data", 1),
	Port_Property("decrypted_new_header_out", 1, hls_out, 16, "ap_none", "out_data", 1),
	Port_Property("decrypted_new_header_out_valid", 1, hls_out, 17, "ap_none", "out_data", 1),
	Port_Property("reset_key_out", 1, hls_out, 18, "ap_none", "out_data", 1),
};
const char* HLS_Design_Meta::dut_name = "secure_enclave_key_store";
