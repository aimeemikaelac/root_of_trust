-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity freduce_coefficients is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of freduce_coefficients is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_3FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000011111111111111111111111111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv64_1FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001111111111111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_addr_71_reg_353 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_72_reg_362 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_73_reg_368 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_397_i_fu_161_p4 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_397_i_reg_373 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_load_reg_378 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_fu_186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_383 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_addr_74_reg_388 : STD_LOGIC_VECTOR (4 downto 0);
    signal v_assign_8_fu_287_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_8_reg_393 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_397_i1_reg_398 : STD_LOGIC_VECTOR (37 downto 0);
    signal output_addr_75_reg_404 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_105 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_302_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_305_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_300_fu_179_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_304_fu_249_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_306_fu_256_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_308_fu_335_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_309_fu_341_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_301_fu_128_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_396_fu_139_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_cast_cast_fu_147_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1064_i_fu_155_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_299_fu_171_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal over_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_7_fu_200_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_397_fu_205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_cast_cast_fu_213_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1066_i_fu_221_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_399_i_fu_227_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_303_fu_241_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal over_7_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_399_fu_269_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_398_fu_263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp3_fu_281_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_400_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_cast_cast_fu_301_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1064_i1_fu_309_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_307_fu_328_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal over_8_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_105 <= i_4_reg_383;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_105 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_4_reg_383 <= i_4_fu_186_p2;
                    output_addr_74_reg_388(3 downto 0) <= tmp_305_fu_192_p1(5 - 1 downto 0)(3 downto 0);
                output_load_reg_378 <= output_r_q1;
                tmp_397_i_reg_373 <= tmp_1064_i_fu_155_p2(63 downto 26);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_1))) then
                    output_addr_72_reg_362(3 downto 0) <= tmp_s_fu_123_p1(5 - 1 downto 0)(3 downto 0);
                    output_addr_73_reg_368(3 downto 1) <= tmp_302_fu_134_p1(5 - 1 downto 0)(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_397_i1_reg_398 <= tmp_1064_i1_fu_309_p2(63 downto 26);
                v_assign_8_reg_393 <= v_assign_8_fu_287_p2;
            end if;
        end if;
    end process;
    output_addr_72_reg_362(4) <= '0';
    output_addr_73_reg_368(0) <= '1';
    output_addr_73_reg_368(4) <= '0';
    output_addr_74_reg_388(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_117_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_4_fu_186_p2 <= std_logic_vector(unsigned(i_reg_105) + unsigned(ap_const_lv4_2));
    output_addr_71_reg_353 <= ap_const_lv64_A(5 - 1 downto 0);
    output_addr_75_reg_404 <= ap_const_lv64_1(5 - 1 downto 0);

    output_r_address0_assign_proc : process(ap_CS_fsm_state1, output_addr_71_reg_353, ap_CS_fsm_state2, tmp_fu_117_p2, ap_CS_fsm_state3, output_addr_74_reg_388, ap_CS_fsm_state5, output_addr_75_reg_404, ap_CS_fsm_state4, tmp_s_fu_123_p1, tmp_305_fu_192_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= output_addr_75_reg_404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= output_addr_74_reg_388;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address0 <= tmp_305_fu_192_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_0))) then 
            output_r_address0 <= output_addr_71_reg_353;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_1))) then 
            output_r_address0 <= tmp_s_fu_123_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_r_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXX";
        end if; 
    end process;


    output_r_address1_assign_proc : process(output_addr_72_reg_362, ap_CS_fsm_state2, tmp_fu_117_p2, output_addr_73_reg_368, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, tmp_302_fu_134_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address1 <= output_addr_73_reg_368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address1 <= output_addr_72_reg_362;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_1))) then 
            output_r_address1 <= tmp_302_fu_134_p1(5 - 1 downto 0);
        else 
            output_r_address1 <= "XXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_117_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_state2, tmp_fu_117_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_117_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, tmp_306_fu_256_p2, ap_CS_fsm_state6, tmp_309_fu_341_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_d0 <= tmp_309_fu_341_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_d0 <= tmp_306_fu_256_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_r_d0 <= ap_const_lv64_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, tmp_300_fu_179_p2, tmp_304_fu_249_p2, ap_CS_fsm_state6, tmp_308_fu_335_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_d1 <= tmp_308_fu_335_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d1 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_d1 <= tmp_304_fu_249_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_d1 <= tmp_300_fu_179_p2;
        else 
            output_r_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

        over_7_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_399_i_fu_227_p4),64));

        over_8_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_397_i1_reg_398),64));

        over_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_397_i_reg_373),64));

    tmp2_fu_275_p2 <= std_logic_vector(unsigned(output_r_q0) + unsigned(output_r_q1));
    tmp3_fu_281_p2 <= std_logic_vector(unsigned(tmp_399_fu_269_p2) + unsigned(tmp_398_fu_263_p2));
    tmp_1064_i1_fu_309_p2 <= std_logic_vector(unsigned(v_assign_8_fu_287_p2) + unsigned(tmp_i2_cast_cast_fu_301_p3));
    tmp_1064_i_fu_155_p2 <= std_logic_vector(unsigned(output_r_q0) + unsigned(tmp_i_cast_cast_fu_147_p3));
    tmp_1066_i_fu_221_p2 <= std_logic_vector(unsigned(tmp_i1_cast_cast_fu_213_p3) + unsigned(v_assign_7_fu_200_p2));
    tmp_299_fu_171_p3 <= (tmp_397_i_fu_161_p4 & ap_const_lv26_0);
    tmp_300_fu_179_p2 <= std_logic_vector(unsigned(output_r_q0) - unsigned(tmp_299_fu_171_p3));
    tmp_301_fu_128_p2 <= (i_reg_105 or ap_const_lv4_1);
    tmp_302_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_301_fu_128_p2),64));
    tmp_303_fu_241_p3 <= (tmp_399_i_fu_227_p4 & ap_const_lv25_0);
    tmp_304_fu_249_p2 <= std_logic_vector(unsigned(v_assign_7_fu_200_p2) - unsigned(tmp_303_fu_241_p3));
    tmp_305_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_186_p2),64));
    tmp_306_fu_256_p2 <= std_logic_vector(unsigned(output_r_q0) + unsigned(over_7_fu_237_p1));
    tmp_307_fu_328_p3 <= (tmp_397_i1_reg_398 & ap_const_lv26_0);
    tmp_308_fu_335_p2 <= std_logic_vector(unsigned(v_assign_8_reg_393) - unsigned(tmp_307_fu_328_p3));
    tmp_309_fu_341_p2 <= std_logic_vector(signed(over_8_fu_325_p1) + signed(output_r_q0));
    tmp_396_fu_139_p3 <= output_r_q0(63 downto 63);
    tmp_397_fu_205_p3 <= v_assign_7_fu_200_p2(63 downto 63);
    tmp_397_i_fu_161_p4 <= tmp_1064_i_fu_155_p2(63 downto 26);
    tmp_398_fu_263_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_399_fu_269_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_399_i_fu_227_p4 <= tmp_1066_i_fu_221_p2(63 downto 25);
    tmp_400_fu_293_p3 <= v_assign_8_fu_287_p2(63 downto 63);
    tmp_fu_117_p2 <= "1" when (unsigned(i_reg_105) < unsigned(ap_const_lv4_A)) else "0";
    tmp_i1_cast_cast_fu_213_p3 <= 
        ap_const_lv64_1FFFFFF when (tmp_397_fu_205_p3(0) = '1') else 
        ap_const_lv64_0;
    tmp_i2_cast_cast_fu_301_p3 <= 
        ap_const_lv64_3FFFFFF when (tmp_400_fu_293_p3(0) = '1') else 
        ap_const_lv64_0;
    tmp_i_cast_cast_fu_147_p3 <= 
        ap_const_lv64_3FFFFFF when (tmp_396_fu_139_p3(0) = '1') else 
        ap_const_lv64_0;
    tmp_s_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_105),64));
    v_assign_7_fu_200_p2 <= std_logic_vector(unsigned(output_load_reg_378) + unsigned(over_fu_197_p1));
    v_assign_8_fu_287_p2 <= std_logic_vector(unsigned(tmp2_fu_275_p2) + unsigned(tmp3_fu_281_p2));
end behav;
