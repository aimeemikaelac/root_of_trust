// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _swap_conditional_HH_
#define _swap_conditional_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct swap_conditional : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_out< sc_logic > a_we0;
    sc_out< sc_lv<64> > a_d0;
    sc_in< sc_lv<64> > a_q0;
    sc_out< sc_lv<5> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_out< sc_logic > b_we0;
    sc_out< sc_lv<64> > b_d0;
    sc_in< sc_lv<64> > b_q0;
    sc_in< sc_lv<1> > iswap;


    // Module declarations
    swap_conditional(sc_module_name name);
    SC_HAS_PROCESS(swap_conditional);

    ~swap_conditional();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > swap_cast_fu_65_p3;
    sc_signal< sc_lv<32> > swap_cast_reg_132;
    sc_signal< sc_lv<4> > i_1_fu_79_p2;
    sc_signal< sc_lv<4> > i_1_reg_140;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > a_addr_reg_145;
    sc_signal< sc_lv<1> > tmp_1_fu_73_p2;
    sc_signal< sc_lv<5> > b_addr_reg_150;
    sc_signal< sc_lv<4> > i_reg_54;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_2_fu_85_p1;
    sc_signal< sc_lv<32> > tmp_3_fu_95_p1;
    sc_signal< sc_lv<32> > tmp_fu_91_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_99_p2;
    sc_signal< sc_lv<32> > x_fu_105_p2;
    sc_signal< sc_lv<32> > tmp_6_fu_110_p2;
    sc_signal< sc_lv<32> > tmp_9_fu_121_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_a_d0();
    void thread_a_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_b_d0();
    void thread_b_we0();
    void thread_i_1_fu_79_p2();
    void thread_swap_cast_fu_65_p3();
    void thread_tmp_1_fu_73_p2();
    void thread_tmp_2_fu_85_p1();
    void thread_tmp_3_fu_95_p1();
    void thread_tmp_5_fu_99_p2();
    void thread_tmp_6_fu_110_p2();
    void thread_tmp_9_fu_121_p2();
    void thread_tmp_fu_91_p1();
    void thread_x_fu_105_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
