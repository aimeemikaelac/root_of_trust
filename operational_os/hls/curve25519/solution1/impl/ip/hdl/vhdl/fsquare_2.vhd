-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fsquare_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fsquare_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv64_3FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000011111111111111111111111111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv64_1FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001111111111111111111111111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_284 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_295 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_329 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal reg_340 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal reg_351 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_i_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal t_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_487 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal reg_494 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_477_p4 : STD_LOGIC_VECTOR (37 downto 0);
    signal reg_500 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_addr_2_reg_805 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_addr_12_reg_864 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_load_15_reg_874 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_addr_17_reg_881 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_addr_14_reg_887 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_addr_16_reg_892 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_addr_reg_898 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_load_1_reg_904 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_addr_18_reg_912 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_addr_19_reg_917 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_addr_20_reg_923 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_399_i_i_fu_709_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_399_i_i_reg_928 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_i3_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_reg_936 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsquare_inner_fu_469_ap_start : STD_LOGIC;
    signal grp_fsquare_inner_fu_469_ap_done : STD_LOGIC;
    signal grp_fsquare_inner_fu_469_ap_idle : STD_LOGIC;
    signal grp_fsquare_inner_fu_469_ap_ready : STD_LOGIC;
    signal grp_fsquare_inner_fu_469_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fsquare_inner_fu_469_output_r_ce0 : STD_LOGIC;
    signal grp_fsquare_inner_fu_469_output_r_we0 : STD_LOGIC;
    signal grp_fsquare_inner_fu_469_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsquare_inner_fu_469_in_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fsquare_inner_fu_469_in_r_ce0 : STD_LOGIC;
    signal i_i_phi_fu_288_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_i2_phi_fu_299_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_reg_grp_fsquare_inner_fu_469_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_9_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_369_i_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_373_i_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_367_i_fu_675_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_372_i_fu_727_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_381_i_fu_777_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_310_fu_504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_312_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_314_fu_532_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_316_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_318_fu_560_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_320_fu_574_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_322_fu_588_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_324_fu_602_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_326_fu_614_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i10_i_cast_cast_fu_700_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_331_fu_745_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal over_2_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_311_fu_511_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_313_fu_525_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_315_fu_539_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_317_fu_553_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_319_fu_567_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_321_fu_581_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_323_fu_595_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_325_fu_608_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_327_fu_621_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_cast_cast_fu_658_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal over_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal over_1_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_330_fu_738_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i13_i_cast_cast_fu_760_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_628_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_9_fu_634_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_368_i_fu_639_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_368_i_fu_639_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_328_fu_650_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_366_i_fu_667_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_373_i_fu_687_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_329_fu_692_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_371_i_fu_719_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_332_fu_752_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_380_i_fu_769_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_789_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i3_fu_795_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);

    component fsquare_inner IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fsquare_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    t_U : component fsquare_t
    generic map (
        DataWidth => 64,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_fsquare_inner_fu_469 : component fsquare_inner
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fsquare_inner_fu_469_ap_start,
        ap_done => grp_fsquare_inner_fu_469_ap_done,
        ap_idle => grp_fsquare_inner_fu_469_ap_idle,
        ap_ready => grp_fsquare_inner_fu_469_ap_ready,
        output_r_address0 => grp_fsquare_inner_fu_469_output_r_address0,
        output_r_ce0 => grp_fsquare_inner_fu_469_output_r_ce0,
        output_r_we0 => grp_fsquare_inner_fu_469_output_r_we0,
        output_r_d0 => grp_fsquare_inner_fu_469_output_r_d0,
        in_r_address0 => grp_fsquare_inner_fu_469_in_r_address0,
        in_r_ce0 => grp_fsquare_inner_fu_469_in_r_ce0,
        in_r_q0 => in_r_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_fsquare_inner_fu_469_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fsquare_inner_fu_469_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_reg_grp_fsquare_inner_fu_469_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fsquare_inner_fu_469_ap_ready)) then 
                    ap_reg_grp_fsquare_inner_fu_469_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                reg_284 <= reg_351;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                reg_284 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_0),64));
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                reg_284 <= grp_fu_306_p2;
            end if; 
        end if;
    end process;

    reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                reg_295 <= reg_418;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                reg_295 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_0),64));
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                reg_295 <= grp_fu_306_p2;
            end if; 
        end if;
    end process;

    reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                reg_487 <= t_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                reg_487 <= t_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state37))) then
                reg_329 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_340 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_1)))) then
                reg_351 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28))) then
                reg_362 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state41))) then
                reg_418 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_494 <= t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state39))) then
                reg_500 <= grp_fu_306_p2(63 downto 26);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_1))) then
                    t_addr_18_reg_912(3 downto 0) <= tmp_i_9_fu_634_p1(5 - 1 downto 0)(3 downto 0);
                    t_addr_19_reg_917(3 downto 1) <= tmp_369_i_fu_645_p1(5 - 1 downto 0)(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                    t_addr_20_reg_923(3 downto 0) <= tmp_373_i_fu_687_p1(5 - 1 downto 0)(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                t_load_15_reg_874 <= t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                t_load_1_reg_904 <= t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_399_i_i_reg_928 <= grp_fu_306_p2(63 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (exitcond_i_fu_789_p2 = ap_const_lv1_0))) then
                    tmp_i3_reg_936(3 downto 0) <= tmp_i3_fu_795_p1(3 downto 0);
            end if;
        end if;
    end process;
    t_addr_18_reg_912(4) <= '0';
    t_addr_19_reg_917(0) <= '1';
    t_addr_19_reg_917(4) <= '0';
    t_addr_20_reg_923(4) <= '0';
    tmp_i3_reg_936(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state31, tmp_i_fu_628_p2, ap_CS_fsm_state41, exitcond_i_fu_789_p2, grp_fsquare_inner_fu_469_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fsquare_inner_fu_469_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_lv1_1 = exitcond_i_fu_789_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state41, exitcond_i_fu_789_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_lv1_1 = exitcond_i_fu_789_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41, exitcond_i_fu_789_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_lv1_1 = exitcond_i_fu_789_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_789_p0 <= reg_295(4 - 1 downto 0);
    exitcond_i_fu_789_p2 <= "1" when (exitcond_i_fu_789_p0 = ap_const_lv4_A) else "0";
    grp_fsquare_inner_fu_469_ap_start <= ap_reg_grp_fsquare_inner_fu_469_ap_start;

    grp_fu_306_p0_assign_proc : process(reg_284, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, reg_295, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, reg_329, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state37, reg_340, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, reg_351, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state31, reg_362, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state28, reg_418, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state41, t_q0, reg_487, t_q1, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state39, reg_494, t_load_1_reg_904, i_i_phi_fu_288_p4, ap_CS_fsm_state30, ap_CS_fsm_state35, i_i2_phi_fu_299_p4, ap_CS_fsm_state40, ap_CS_fsm_state27, tmp_310_fu_504_p2, tmp_312_fu_518_p2, tmp_314_fu_532_p2, tmp_316_fu_546_p2, tmp_318_fu_560_p2, tmp_320_fu_574_p2, tmp_322_fu_588_p2, tmp_324_fu_602_p2, tmp_326_fu_614_p2, tmp_i10_i_cast_cast_fu_700_p3, tmp_331_fu_745_p2, over_2_fu_784_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_306_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_phi_fu_299_p4),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_306_p0 <= over_2_fu_784_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_fu_306_p0 <= reg_418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_306_p0 <= tmp_331_fu_745_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_306_p0 <= tmp_i10_i_cast_cast_fu_700_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_306_p0 <= reg_487;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_306_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_phi_fu_288_p4),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_306_p0 <= tmp_326_fu_614_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_306_p0 <= t_load_1_reg_904;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_306_p0 <= tmp_324_fu_602_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_306_p0 <= reg_494;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_306_p0 <= tmp_322_fu_588_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_306_p0 <= reg_284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_306_p0 <= tmp_320_fu_574_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_306_p0 <= t_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_306_p0 <= reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_306_p0 <= tmp_318_fu_560_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_306_p0 <= reg_351;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_306_p0 <= tmp_316_fu_546_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_306_p0 <= reg_340;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_306_p0 <= tmp_314_fu_532_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_306_p0 <= reg_329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_306_p0 <= tmp_312_fu_518_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_306_p0 <= reg_295;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_306_p0 <= tmp_310_fu_504_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_306_p0 <= t_q1;
        else 
            grp_fu_306_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_306_p1_assign_proc : process(reg_284, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, reg_295, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, reg_329, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state37, reg_340, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, reg_351, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state31, reg_362, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state41, t_q0, reg_487, t_q1, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state39, reg_494, t_load_15_reg_874, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state27, tmp_311_fu_511_p2, tmp_313_fu_525_p2, tmp_315_fu_539_p2, tmp_317_fu_553_p2, tmp_319_fu_567_p2, tmp_321_fu_581_p2, tmp_323_fu_595_p2, tmp_325_fu_608_p2, tmp_327_fu_621_p2, tmp_i_i_cast_cast_fu_658_p3, over_fu_682_p1, over_1_fu_734_p1, tmp_330_fu_738_p2, tmp_i13_i_cast_cast_fu_760_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_1),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_306_p1 <= tmp_i13_i_cast_cast_fu_760_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_306_p1 <= tmp_330_fu_738_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_306_p1 <= t_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_306_p1 <= over_1_fu_734_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_306_p1 <= over_fu_682_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_306_p1 <= tmp_i_i_cast_cast_fu_658_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_2),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_306_p1 <= tmp_327_fu_621_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_306_p1 <= tmp_325_fu_608_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_306_p1 <= t_load_15_reg_874;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_306_p1 <= tmp_323_fu_595_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_306_p1 <= reg_494;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_306_p1 <= reg_362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_306_p1 <= tmp_321_fu_581_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_fu_306_p1 <= reg_487;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_306_p1 <= reg_351;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_306_p1 <= tmp_319_fu_567_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_fu_306_p1 <= reg_340;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_306_p1 <= tmp_317_fu_553_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_fu_306_p1 <= reg_329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_306_p1 <= tmp_315_fu_539_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_306_p1 <= reg_295;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_306_p1 <= tmp_313_fu_525_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_306_p1 <= reg_284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_306_p1 <= tmp_311_fu_511_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_306_p1 <= t_q0;
        else 
            grp_fu_306_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_306_p2 <= std_logic_vector(unsigned(grp_fu_306_p0) + unsigned(grp_fu_306_p1));
    grp_fu_477_p4 <= grp_fu_306_p2(63 downto 26);
    i_i2_phi_fu_299_p4 <= reg_295(4 - 1 downto 0);
    i_i_phi_fu_288_p4 <= reg_284(4 - 1 downto 0);
    in_r_address0 <= grp_fsquare_inner_fu_469_in_r_address0;
    in_r_ce0 <= grp_fsquare_inner_fu_469_in_r_ce0;
    output_r_address0 <= tmp_i3_reg_936(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= t_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        over_1_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_399_i_i_reg_928),64));

        over_2_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_500),64));

        over_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_500),64));

    t_addr_12_reg_864 <= ap_const_lv64_3(5 - 1 downto 0);
    t_addr_14_reg_887 <= ap_const_lv64_2(5 - 1 downto 0);
    t_addr_16_reg_892 <= ap_const_lv64_1(5 - 1 downto 0);
    t_addr_17_reg_881 <= ap_const_lv64_A(5 - 1 downto 0);
    t_addr_2_reg_805 <= ap_const_lv64_8(5 - 1 downto 0);
    t_addr_reg_898 <= ap_const_lv64_0(5 - 1 downto 0);

    t_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state31, tmp_i_fu_628_p2, ap_CS_fsm_state19, ap_CS_fsm_state36, ap_CS_fsm_state41, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state39, ap_CS_fsm_state3, t_addr_12_reg_864, t_addr_17_reg_881, t_addr_18_reg_912, t_addr_19_reg_917, tmp_i3_fu_795_p1, grp_fsquare_inner_fu_469_output_r_address0, ap_CS_fsm_state2, tmp_i_9_fu_634_p1, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t_address0 <= tmp_i3_fu_795_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            t_address0 <= t_addr_19_reg_917;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            t_address0 <= t_addr_18_reg_912;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_0)))) then 
            t_address0 <= t_addr_17_reg_881;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_1))) then 
            t_address0 <= tmp_i_9_fu_634_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            t_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            t_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            t_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            t_address0 <= t_addr_12_reg_864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            t_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= grp_fsquare_inner_fu_469_output_r_address0;
        else 
            t_address0 <= "XXXXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state15, ap_CS_fsm_state33, ap_CS_fsm_state18, ap_CS_fsm_state31, tmp_i_fu_628_p2, ap_CS_fsm_state17, ap_CS_fsm_state38, ap_CS_fsm_state3, t_addr_2_reg_805, t_addr_14_reg_887, t_addr_16_reg_892, t_addr_reg_898, t_addr_20_reg_923, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, tmp_369_i_fu_645_p1, tmp_373_i_fu_687_p1, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            t_address1 <= t_addr_16_reg_892;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            t_address1 <= t_addr_20_reg_923;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            t_address1 <= tmp_373_i_fu_687_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_1))) then 
            t_address1 <= tmp_369_i_fu_645_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_0)))) then 
            t_address1 <= t_addr_reg_898;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            t_address1 <= t_addr_14_reg_887;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            t_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            t_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            t_address1 <= t_addr_2_reg_805;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        else 
            t_address1 <= "XXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state15, ap_CS_fsm_state26, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state31, tmp_i_fu_628_p2, ap_CS_fsm_state19, ap_CS_fsm_state36, ap_CS_fsm_state41, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state39, ap_CS_fsm_state3, grp_fsquare_inner_fu_469_output_r_ce0, ap_CS_fsm_state2, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_0)))) then 
            t_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_ce0 <= grp_fsquare_inner_fu_469_output_r_ce0;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state15, ap_CS_fsm_state33, ap_CS_fsm_state18, ap_CS_fsm_state31, tmp_i_fu_628_p2, ap_CS_fsm_state17, ap_CS_fsm_state38, ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_i_fu_628_p2 = ap_const_lv1_0)))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(grp_fu_306_p2, ap_CS_fsm_state22, ap_CS_fsm_state24, reg_295, reg_329, ap_CS_fsm_state21, ap_CS_fsm_state23, reg_340, ap_CS_fsm_state26, reg_351, ap_CS_fsm_state36, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state39, grp_fsquare_inner_fu_469_output_r_d0, ap_CS_fsm_state2, ap_CS_fsm_state27, tmp_367_i_fu_675_p2, tmp_372_i_fu_727_p2, tmp_381_i_fu_777_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t_d0 <= tmp_381_i_fu_777_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            t_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            t_d0 <= tmp_372_i_fu_727_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            t_d0 <= tmp_367_i_fu_675_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            t_d0 <= grp_fu_306_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            t_d0 <= reg_351;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            t_d0 <= reg_295;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_d0 <= reg_340;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            t_d0 <= reg_329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_d0 <= grp_fsquare_inner_fu_469_output_r_d0;
        else 
            t_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t_d1_assign_proc : process(grp_fu_306_p2, reg_284, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            t_d1 <= grp_fu_306_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            t_d1 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            t_d1 <= reg_284;
        else 
            t_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state36, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state39, grp_fsquare_inner_fu_469_output_r_we0, ap_CS_fsm_state2, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            t_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_we0 <= grp_fsquare_inner_fu_469_output_r_we0;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_310_fu_504_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_311_fu_511_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_312_fu_518_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_313_fu_525_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_314_fu_532_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_315_fu_539_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_316_fu_546_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_317_fu_553_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_318_fu_560_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_319_fu_567_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_320_fu_574_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_321_fu_581_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_322_fu_588_p2 <= std_logic_vector(shift_left(unsigned(reg_494),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_323_fu_595_p2 <= std_logic_vector(shift_left(unsigned(reg_494),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_324_fu_602_p2 <= std_logic_vector(shift_left(unsigned(t_load_15_reg_874),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_325_fu_608_p2 <= std_logic_vector(shift_left(unsigned(t_load_15_reg_874),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_326_fu_614_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_327_fu_621_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_328_fu_650_p3 <= t_q0(63 downto 63);
    tmp_329_fu_692_p3 <= reg_340(63 downto 63);
    tmp_330_fu_738_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_331_fu_745_p2 <= std_logic_vector(shift_left(unsigned(reg_487),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_332_fu_752_p3 <= reg_418(63 downto 63);
    tmp_366_i_fu_667_p3 <= (grp_fu_477_p4 & ap_const_lv26_0);
    tmp_367_i_fu_675_p2 <= std_logic_vector(unsigned(t_q0) - unsigned(tmp_366_i_fu_667_p3));
    tmp_368_i_fu_639_p0 <= reg_284(4 - 1 downto 0);
    tmp_368_i_fu_639_p2 <= (tmp_368_i_fu_639_p0 or ap_const_lv4_1);
    tmp_369_i_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_368_i_fu_639_p2),64));
    tmp_371_i_fu_719_p3 <= (tmp_399_i_i_fu_709_p4 & ap_const_lv25_0);
    tmp_372_i_fu_727_p2 <= std_logic_vector(unsigned(reg_340) - unsigned(tmp_371_i_fu_719_p3));
    tmp_373_i_fu_687_p0 <= reg_351(4 - 1 downto 0);
    tmp_373_i_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_373_i_fu_687_p0),64));
    tmp_380_i_fu_769_p3 <= (grp_fu_477_p4 & ap_const_lv26_0);
    tmp_381_i_fu_777_p2 <= std_logic_vector(unsigned(reg_418) - unsigned(tmp_380_i_fu_769_p3));
    tmp_399_i_i_fu_709_p4 <= grp_fu_306_p2(63 downto 25);
    tmp_i10_i_cast_cast_fu_700_p3 <= 
        ap_const_lv64_1FFFFFF when (tmp_329_fu_692_p3(0) = '1') else 
        ap_const_lv64_0;
    tmp_i13_i_cast_cast_fu_760_p3 <= 
        ap_const_lv64_3FFFFFF when (tmp_332_fu_752_p3(0) = '1') else 
        ap_const_lv64_0;
    tmp_i3_fu_795_p0 <= reg_295(4 - 1 downto 0);
    tmp_i3_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i3_fu_795_p0),64));
    tmp_i_9_fu_634_p0 <= reg_284(4 - 1 downto 0);
    tmp_i_9_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_9_fu_634_p0),64));
    tmp_i_fu_628_p0 <= reg_284(4 - 1 downto 0);
    tmp_i_fu_628_p2 <= "1" when (unsigned(tmp_i_fu_628_p0) < unsigned(ap_const_lv4_A)) else "0";
    tmp_i_i_cast_cast_fu_658_p3 <= 
        ap_const_lv64_3FFFFFF when (tmp_328_fu_650_p3(0) = '1') else 
        ap_const_lv64_0;
end behav;
