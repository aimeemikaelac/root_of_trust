// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ed25519_sign,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=131,HLS_SYN_DSP=84,HLS_SYN_FF=165830,HLS_SYN_LUT=132272}" *)

module ed25519_sign (
        ap_clk,
        ap_rst_n,
        m_axi_microblaze_mem_AWVALID,
        m_axi_microblaze_mem_AWREADY,
        m_axi_microblaze_mem_AWADDR,
        m_axi_microblaze_mem_AWID,
        m_axi_microblaze_mem_AWLEN,
        m_axi_microblaze_mem_AWSIZE,
        m_axi_microblaze_mem_AWBURST,
        m_axi_microblaze_mem_AWLOCK,
        m_axi_microblaze_mem_AWCACHE,
        m_axi_microblaze_mem_AWPROT,
        m_axi_microblaze_mem_AWQOS,
        m_axi_microblaze_mem_AWREGION,
        m_axi_microblaze_mem_AWUSER,
        m_axi_microblaze_mem_WVALID,
        m_axi_microblaze_mem_WREADY,
        m_axi_microblaze_mem_WDATA,
        m_axi_microblaze_mem_WSTRB,
        m_axi_microblaze_mem_WLAST,
        m_axi_microblaze_mem_WID,
        m_axi_microblaze_mem_WUSER,
        m_axi_microblaze_mem_ARVALID,
        m_axi_microblaze_mem_ARREADY,
        m_axi_microblaze_mem_ARADDR,
        m_axi_microblaze_mem_ARID,
        m_axi_microblaze_mem_ARLEN,
        m_axi_microblaze_mem_ARSIZE,
        m_axi_microblaze_mem_ARBURST,
        m_axi_microblaze_mem_ARLOCK,
        m_axi_microblaze_mem_ARCACHE,
        m_axi_microblaze_mem_ARPROT,
        m_axi_microblaze_mem_ARQOS,
        m_axi_microblaze_mem_ARREGION,
        m_axi_microblaze_mem_ARUSER,
        m_axi_microblaze_mem_RVALID,
        m_axi_microblaze_mem_RREADY,
        m_axi_microblaze_mem_RDATA,
        m_axi_microblaze_mem_RLAST,
        m_axi_microblaze_mem_RID,
        m_axi_microblaze_mem_RUSER,
        m_axi_microblaze_mem_RRESP,
        m_axi_microblaze_mem_BVALID,
        m_axi_microblaze_mem_BREADY,
        m_axi_microblaze_mem_BRESP,
        m_axi_microblaze_mem_BID,
        m_axi_microblaze_mem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 54'd1;
parameter    ap_ST_fsm_state2 = 54'd2;
parameter    ap_ST_fsm_state3 = 54'd4;
parameter    ap_ST_fsm_state4 = 54'd8;
parameter    ap_ST_fsm_state5 = 54'd16;
parameter    ap_ST_fsm_state6 = 54'd32;
parameter    ap_ST_fsm_state7 = 54'd64;
parameter    ap_ST_fsm_state8 = 54'd128;
parameter    ap_ST_fsm_state9 = 54'd256;
parameter    ap_ST_fsm_state10 = 54'd512;
parameter    ap_ST_fsm_state11 = 54'd1024;
parameter    ap_ST_fsm_state12 = 54'd2048;
parameter    ap_ST_fsm_state13 = 54'd4096;
parameter    ap_ST_fsm_state14 = 54'd8192;
parameter    ap_ST_fsm_state15 = 54'd16384;
parameter    ap_ST_fsm_state16 = 54'd32768;
parameter    ap_ST_fsm_state17 = 54'd65536;
parameter    ap_ST_fsm_state18 = 54'd131072;
parameter    ap_ST_fsm_state19 = 54'd262144;
parameter    ap_ST_fsm_state20 = 54'd524288;
parameter    ap_ST_fsm_state21 = 54'd1048576;
parameter    ap_ST_fsm_state22 = 54'd2097152;
parameter    ap_ST_fsm_state23 = 54'd4194304;
parameter    ap_ST_fsm_state24 = 54'd8388608;
parameter    ap_ST_fsm_state25 = 54'd16777216;
parameter    ap_ST_fsm_state26 = 54'd33554432;
parameter    ap_ST_fsm_state27 = 54'd67108864;
parameter    ap_ST_fsm_state28 = 54'd134217728;
parameter    ap_ST_fsm_state29 = 54'd268435456;
parameter    ap_ST_fsm_state30 = 54'd536870912;
parameter    ap_ST_fsm_state31 = 54'd1073741824;
parameter    ap_ST_fsm_state32 = 54'd2147483648;
parameter    ap_ST_fsm_state33 = 54'd4294967296;
parameter    ap_ST_fsm_state34 = 54'd8589934592;
parameter    ap_ST_fsm_state35 = 54'd17179869184;
parameter    ap_ST_fsm_state36 = 54'd34359738368;
parameter    ap_ST_fsm_state37 = 54'd68719476736;
parameter    ap_ST_fsm_state38 = 54'd137438953472;
parameter    ap_ST_fsm_state39 = 54'd274877906944;
parameter    ap_ST_fsm_state40 = 54'd549755813888;
parameter    ap_ST_fsm_state41 = 54'd1099511627776;
parameter    ap_ST_fsm_state42 = 54'd2199023255552;
parameter    ap_ST_fsm_state43 = 54'd4398046511104;
parameter    ap_ST_fsm_state44 = 54'd8796093022208;
parameter    ap_ST_fsm_state45 = 54'd17592186044416;
parameter    ap_ST_fsm_state46 = 54'd35184372088832;
parameter    ap_ST_fsm_state47 = 54'd70368744177664;
parameter    ap_ST_fsm_state48 = 54'd140737488355328;
parameter    ap_ST_fsm_state49 = 54'd281474976710656;
parameter    ap_ST_fsm_state50 = 54'd562949953421312;
parameter    ap_ST_fsm_state51 = 54'd1125899906842624;
parameter    ap_ST_fsm_state52 = 54'd2251799813685248;
parameter    ap_ST_fsm_state53 = 54'd4503599627370496;
parameter    ap_ST_fsm_state54 = 54'd9007199254740992;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MICROBLAZE_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MICROBLAZE_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_MICROBLAZE_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MICROBLAZE_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MICROBLAZE_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MICROBLAZE_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MICROBLAZE_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MICROBLAZE_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MICROBLAZE_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MICROBLAZE_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MICROBLAZE_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MICROBLAZE_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MICROBLAZE_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_microblaze_mem_AWVALID;
input   m_axi_microblaze_mem_AWREADY;
output  [C_M_AXI_MICROBLAZE_MEM_ADDR_WIDTH - 1:0] m_axi_microblaze_mem_AWADDR;
output  [C_M_AXI_MICROBLAZE_MEM_ID_WIDTH - 1:0] m_axi_microblaze_mem_AWID;
output  [7:0] m_axi_microblaze_mem_AWLEN;
output  [2:0] m_axi_microblaze_mem_AWSIZE;
output  [1:0] m_axi_microblaze_mem_AWBURST;
output  [1:0] m_axi_microblaze_mem_AWLOCK;
output  [3:0] m_axi_microblaze_mem_AWCACHE;
output  [2:0] m_axi_microblaze_mem_AWPROT;
output  [3:0] m_axi_microblaze_mem_AWQOS;
output  [3:0] m_axi_microblaze_mem_AWREGION;
output  [C_M_AXI_MICROBLAZE_MEM_AWUSER_WIDTH - 1:0] m_axi_microblaze_mem_AWUSER;
output   m_axi_microblaze_mem_WVALID;
input   m_axi_microblaze_mem_WREADY;
output  [C_M_AXI_MICROBLAZE_MEM_DATA_WIDTH - 1:0] m_axi_microblaze_mem_WDATA;
output  [C_M_AXI_MICROBLAZE_MEM_WSTRB_WIDTH - 1:0] m_axi_microblaze_mem_WSTRB;
output   m_axi_microblaze_mem_WLAST;
output  [C_M_AXI_MICROBLAZE_MEM_ID_WIDTH - 1:0] m_axi_microblaze_mem_WID;
output  [C_M_AXI_MICROBLAZE_MEM_WUSER_WIDTH - 1:0] m_axi_microblaze_mem_WUSER;
output   m_axi_microblaze_mem_ARVALID;
input   m_axi_microblaze_mem_ARREADY;
output  [C_M_AXI_MICROBLAZE_MEM_ADDR_WIDTH - 1:0] m_axi_microblaze_mem_ARADDR;
output  [C_M_AXI_MICROBLAZE_MEM_ID_WIDTH - 1:0] m_axi_microblaze_mem_ARID;
output  [7:0] m_axi_microblaze_mem_ARLEN;
output  [2:0] m_axi_microblaze_mem_ARSIZE;
output  [1:0] m_axi_microblaze_mem_ARBURST;
output  [1:0] m_axi_microblaze_mem_ARLOCK;
output  [3:0] m_axi_microblaze_mem_ARCACHE;
output  [2:0] m_axi_microblaze_mem_ARPROT;
output  [3:0] m_axi_microblaze_mem_ARQOS;
output  [3:0] m_axi_microblaze_mem_ARREGION;
output  [C_M_AXI_MICROBLAZE_MEM_ARUSER_WIDTH - 1:0] m_axi_microblaze_mem_ARUSER;
input   m_axi_microblaze_mem_RVALID;
output   m_axi_microblaze_mem_RREADY;
input  [C_M_AXI_MICROBLAZE_MEM_DATA_WIDTH - 1:0] m_axi_microblaze_mem_RDATA;
input   m_axi_microblaze_mem_RLAST;
input  [C_M_AXI_MICROBLAZE_MEM_ID_WIDTH - 1:0] m_axi_microblaze_mem_RID;
input  [C_M_AXI_MICROBLAZE_MEM_RUSER_WIDTH - 1:0] m_axi_microblaze_mem_RUSER;
input  [1:0] m_axi_microblaze_mem_RRESP;
input   m_axi_microblaze_mem_BVALID;
output   m_axi_microblaze_mem_BREADY;
input  [1:0] m_axi_microblaze_mem_BRESP;
input  [C_M_AXI_MICROBLAZE_MEM_ID_WIDTH - 1:0] m_axi_microblaze_mem_BID;
input  [C_M_AXI_MICROBLAZE_MEM_BUSER_WIDTH - 1:0] m_axi_microblaze_mem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [53:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [5:0] signature_address0;
reg    signature_ce0;
reg    signature_we0;
reg   [7:0] signature_d0;
wire   [7:0] signature_q0;
wire   [63:0] blocks_in;
reg   [63:0] blocks_in_preg;
wire    blocks_in_ap_vld;
reg   [63:0] blocks_in_in_sig;
reg    blocks_in_ap_vld_preg;
reg    blocks_in_ap_vld_in_sig;
wire   [7:0] public_key_q0;
reg   [5:0] private_key_address0;
reg    private_key_ce0;
wire   [7:0] private_key_q0;
reg    microblaze_mem_blk_n_AR;
wire    ap_CS_fsm_state7;
wire   [0:0] grp_fu_939_p2;
reg    microblaze_mem_blk_n_R;
wire    ap_CS_fsm_state14;
wire   [0:0] grp_fu_949_p2;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state47;
reg    blocks_in_blk_n;
wire    ap_CS_fsm_state6;
wire    microblaze_mem_AWREADY;
wire    microblaze_mem_WREADY;
reg    microblaze_mem_ARVALID;
wire    microblaze_mem_ARREADY;
reg   [31:0] microblaze_mem_ARADDR;
wire    microblaze_mem_RVALID;
reg    microblaze_mem_RREADY;
wire   [7:0] microblaze_mem_RDATA;
wire    microblaze_mem_RLAST;
wire   [0:0] microblaze_mem_RID;
wire   [0:0] microblaze_mem_RUSER;
wire   [1:0] microblaze_mem_RRESP;
wire    microblaze_mem_BVALID;
wire   [1:0] microblaze_mem_BRESP;
wire   [0:0] microblaze_mem_BID;
wire   [0:0] microblaze_mem_BUSER;
wire   [31:0] grp_fu_410_p2;
reg   [31:0] reg_364;
reg    ap_sig_ioackin_microblaze_mem_ARREADY;
reg    ap_block_state40_io;
reg   [7:0] reg_375;
reg    ap_block_state47;
reg   [31:0] reg_387;
reg    ap_block_state7_io;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
reg   [7:0] reg_398;
reg    ap_block_state14;
reg   [7:0] reg_1038;
reg   [31:0] reg_1043;
wire    ap_CS_fsm_state24;
wire    grp_fe_mul_fu_512_ap_done;
wire    ap_CS_fsm_state25;
wire    grp_fe_tobytes_1_fu_1001_ap_done;
reg    ap_block_state25_on_subcall_done;
reg   [31:0] reg_1049;
wire   [2:0] hash_state_addr_reg_1540;
wire   [2:0] hash_state_addr_1_reg_1545;
wire   [2:0] hash_state_addr_2_reg_1550;
wire    ap_CS_fsm_state2;
wire   [2:0] hash_state_addr_3_reg_1555;
wire   [2:0] hash_state_addr_4_reg_1560;
wire    ap_CS_fsm_state3;
wire   [2:0] hash_state_addr_5_reg_1565;
wire   [2:0] hash_state_addr_6_reg_1570;
wire    ap_CS_fsm_state4;
wire   [2:0] hash_state_addr_7_reg_1575;
wire    grp_sha512_update_32_2_fu_972_ap_done;
reg   [31:0] R_X_0_reg_1597;
wire    ap_CS_fsm_state21;
wire    grp_ge_scalarmult_base_fu_579_ap_done;
reg   [31:0] R_X_1_reg_1602;
reg   [31:0] R_X_2_reg_1607;
reg   [31:0] R_X_3_reg_1612;
reg   [31:0] R_X_4_reg_1617;
reg   [31:0] R_X_5_reg_1622;
reg   [31:0] R_X_6_reg_1627;
reg   [31:0] R_X_7_reg_1632;
reg   [31:0] R_X_8_reg_1637;
reg   [31:0] R_X_9_reg_1642;
reg   [31:0] R_Y_0_reg_1647;
reg   [31:0] R_Y_1_reg_1652;
reg   [31:0] R_Y_2_reg_1657;
reg   [31:0] R_Y_3_reg_1662;
reg   [31:0] R_Y_4_reg_1667;
reg   [31:0] R_Y_5_reg_1672;
reg   [31:0] R_Y_6_reg_1677;
reg   [31:0] R_Y_7_reg_1682;
reg   [31:0] R_Y_8_reg_1687;
reg   [31:0] R_Y_9_reg_1692;
reg   [31:0] R_Z_0_reg_1697;
reg   [31:0] R_Z_1_reg_1702;
reg   [31:0] R_Z_2_reg_1707;
reg   [31:0] R_Z_3_reg_1712;
reg   [31:0] R_Z_4_reg_1717;
reg   [31:0] R_Z_5_reg_1722;
reg   [31:0] R_Z_6_reg_1727;
reg   [31:0] R_Z_7_reg_1732;
reg   [31:0] R_Z_8_reg_1737;
reg   [31:0] R_Z_9_reg_1742;
reg   [31:0] recip_0_reg_1747;
wire    ap_CS_fsm_state22;
wire    grp_fe_invert_fu_646_ap_done;
reg   [31:0] recip_1_reg_1752;
reg   [31:0] recip_2_reg_1757;
reg   [31:0] recip_3_reg_1762;
reg   [31:0] recip_4_reg_1767;
reg   [31:0] recip_5_reg_1772;
reg   [31:0] recip_6_reg_1777;
reg   [31:0] recip_7_reg_1782;
reg   [31:0] recip_8_reg_1787;
reg   [31:0] recip_9_reg_1792;
reg   [31:0] y_1_reg_1797;
reg   [31:0] y_2_reg_1802;
reg   [31:0] y_3_reg_1807;
reg   [31:0] y_4_reg_1812;
reg   [31:0] y_5_reg_1817;
reg   [31:0] y_6_reg_1822;
reg   [31:0] y_7_reg_1827;
reg   [31:0] y_8_reg_1832;
wire   [31:0] grp_fe_mul_fu_512_ap_return_0;
wire   [31:0] grp_fe_mul_fu_512_ap_return_1;
wire   [31:0] grp_fe_mul_fu_512_ap_return_2;
wire   [31:0] grp_fe_mul_fu_512_ap_return_3;
wire   [31:0] grp_fe_mul_fu_512_ap_return_4;
wire   [31:0] grp_fe_mul_fu_512_ap_return_5;
wire   [31:0] grp_fe_mul_fu_512_ap_return_6;
wire   [31:0] grp_fe_mul_fu_512_ap_return_7;
wire   [31:0] grp_fe_mul_fu_512_ap_return_8;
wire   [31:0] grp_fe_mul_fu_512_ap_return_9;
reg   [31:0] fe_mul_ret1_i_reg_1837_1;
reg   [31:0] fe_mul_ret1_i_reg_1837_2;
reg   [31:0] fe_mul_ret1_i_reg_1837_3;
reg   [31:0] fe_mul_ret1_i_reg_1837_4;
reg   [31:0] fe_mul_ret1_i_reg_1837_5;
reg   [31:0] fe_mul_ret1_i_reg_1837_6;
reg   [31:0] fe_mul_ret1_i_reg_1837_7;
reg   [31:0] fe_mul_ret1_i_reg_1837_8;
reg   [6:0] tmp_561_i_i_i_reg_1849;
reg   [5:0] tmp_579_i_i_i_reg_1854;
wire    ap_CS_fsm_state34;
wire   [5:0] signature_addr_reg_1859;
reg   [2:0] hash_state_address0;
reg    hash_state_ce0;
reg    hash_state_we0;
reg   [63:0] hash_state_d0;
wire   [63:0] hash_state_q0;
reg   [2:0] hash_state_address1;
reg    hash_state_ce1;
reg    hash_state_we1;
reg   [63:0] hash_state_d1;
reg   [6:0] hash_buf_address0;
reg    hash_buf_ce0;
reg    hash_buf_we0;
reg   [7:0] hash_buf_d0;
wire   [7:0] hash_buf_q0;
reg    hash_buf_ce1;
reg    hash_buf_we1;
wire   [7:0] hash_buf_q1;
reg   [5:0] hram_address0;
reg    hram_ce0;
reg    hram_we0;
reg   [7:0] hram_d0;
wire   [7:0] hram_q0;
reg   [5:0] r_address0;
reg    r_ce0;
reg    r_we0;
reg   [7:0] r_d0;
wire   [7:0] r_q0;
reg   [6:0] temp_data_address0;
reg    temp_data_ce0;
reg    temp_data_we0;
wire   [7:0] temp_data_q0;
wire    grp_sha512_update_128_fu_510_ap_start;
wire    grp_sha512_update_128_fu_510_ap_done;
wire    grp_sha512_update_128_fu_510_ap_idle;
wire    grp_sha512_update_128_fu_510_ap_ready;
wire   [63:0] grp_sha512_update_128_fu_510_md_length_o;
wire    grp_sha512_update_128_fu_510_md_length_o_ap_vld;
wire   [2:0] grp_sha512_update_128_fu_510_md_state_address0;
wire    grp_sha512_update_128_fu_510_md_state_ce0;
wire    grp_sha512_update_128_fu_510_md_state_we0;
wire   [63:0] grp_sha512_update_128_fu_510_md_state_d0;
wire   [63:0] grp_sha512_update_128_fu_510_md_curlen_o;
wire    grp_sha512_update_128_fu_510_md_curlen_o_ap_vld;
wire   [6:0] grp_sha512_update_128_fu_510_md_buf_address0;
wire    grp_sha512_update_128_fu_510_md_buf_ce0;
wire    grp_sha512_update_128_fu_510_md_buf_we0;
wire   [7:0] grp_sha512_update_128_fu_510_md_buf_d0;
wire   [6:0] grp_sha512_update_128_fu_510_in_r_address0;
wire    grp_sha512_update_128_fu_510_in_r_ce0;
wire    grp_sha512_final_fu_511_ap_start;
wire    grp_sha512_final_fu_511_ap_done;
wire    grp_sha512_final_fu_511_ap_idle;
wire    grp_sha512_final_fu_511_ap_ready;
wire   [63:0] grp_sha512_final_fu_511_md_length_o;
wire    grp_sha512_final_fu_511_md_length_o_ap_vld;
wire   [2:0] grp_sha512_final_fu_511_md_state_address0;
wire    grp_sha512_final_fu_511_md_state_ce0;
wire    grp_sha512_final_fu_511_md_state_we0;
wire   [63:0] grp_sha512_final_fu_511_md_state_d0;
wire   [63:0] grp_sha512_final_fu_511_md_curlen_o;
wire    grp_sha512_final_fu_511_md_curlen_o_ap_vld;
wire   [6:0] grp_sha512_final_fu_511_md_buf_address0;
wire    grp_sha512_final_fu_511_md_buf_ce0;
wire    grp_sha512_final_fu_511_md_buf_we0;
wire   [7:0] grp_sha512_final_fu_511_md_buf_d0;
wire   [6:0] grp_sha512_final_fu_511_md_buf_address1;
wire    grp_sha512_final_fu_511_md_buf_ce1;
wire    grp_sha512_final_fu_511_md_buf_we1;
wire   [7:0] grp_sha512_final_fu_511_md_buf_d1;
wire   [5:0] grp_sha512_final_fu_511_out_r_address0;
wire    grp_sha512_final_fu_511_out_r_ce0;
wire    grp_sha512_final_fu_511_out_r_we0;
wire   [7:0] grp_sha512_final_fu_511_out_r_d0;
wire    grp_fe_mul_fu_512_ap_start;
wire    grp_fe_mul_fu_512_ap_idle;
wire    grp_fe_mul_fu_512_ap_ready;
reg   [31:0] grp_fe_mul_fu_512_f_0_read;
reg   [31:0] grp_fe_mul_fu_512_f_1_read;
reg   [31:0] grp_fe_mul_fu_512_f_2_read;
reg   [31:0] grp_fe_mul_fu_512_f_3_read;
reg   [31:0] grp_fe_mul_fu_512_f_4_read;
reg   [31:0] grp_fe_mul_fu_512_f_5_read;
reg   [31:0] grp_fe_mul_fu_512_f_6_read;
reg   [31:0] grp_fe_mul_fu_512_f_7_read;
reg   [31:0] grp_fe_mul_fu_512_f_8_read;
reg   [31:0] grp_fe_mul_fu_512_f_9_read;
wire    grp_ge_scalarmult_base_fu_579_ap_start;
wire    grp_ge_scalarmult_base_fu_579_ap_idle;
wire    grp_ge_scalarmult_base_fu_579_ap_ready;
wire   [5:0] grp_ge_scalarmult_base_fu_579_a_address0;
wire    grp_ge_scalarmult_base_fu_579_a_ce0;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_0;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_1;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_2;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_3;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_4;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_5;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_6;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_7;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_8;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_9;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_10;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_11;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_12;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_13;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_14;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_15;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_16;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_17;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_18;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_19;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_20;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_21;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_22;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_23;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_24;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_25;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_26;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_27;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_28;
wire   [31:0] grp_ge_scalarmult_base_fu_579_ap_return_29;
wire    grp_fe_invert_fu_646_ap_start;
wire    grp_fe_invert_fu_646_ap_idle;
wire    grp_fe_invert_fu_646_ap_ready;
wire   [31:0] grp_fe_invert_fu_646_ap_return_0;
wire   [31:0] grp_fe_invert_fu_646_ap_return_1;
wire   [31:0] grp_fe_invert_fu_646_ap_return_2;
wire   [31:0] grp_fe_invert_fu_646_ap_return_3;
wire   [31:0] grp_fe_invert_fu_646_ap_return_4;
wire   [31:0] grp_fe_invert_fu_646_ap_return_5;
wire   [31:0] grp_fe_invert_fu_646_ap_return_6;
wire   [31:0] grp_fe_invert_fu_646_ap_return_7;
wire   [31:0] grp_fe_invert_fu_646_ap_return_8;
wire   [31:0] grp_fe_invert_fu_646_ap_return_9;
wire    grp_sha512_update_32_fu_791_ap_start;
wire    grp_sha512_update_32_fu_791_ap_done;
wire    grp_sha512_update_32_fu_791_ap_idle;
wire    grp_sha512_update_32_fu_791_ap_ready;
wire   [63:0] grp_sha512_update_32_fu_791_md_length_o;
wire    grp_sha512_update_32_fu_791_md_length_o_ap_vld;
wire   [2:0] grp_sha512_update_32_fu_791_md_state_address0;
wire    grp_sha512_update_32_fu_791_md_state_ce0;
wire    grp_sha512_update_32_fu_791_md_state_we0;
wire   [63:0] grp_sha512_update_32_fu_791_md_state_d0;
wire   [63:0] grp_sha512_update_32_fu_791_md_curlen_o;
wire    grp_sha512_update_32_fu_791_md_curlen_o_ap_vld;
wire   [6:0] grp_sha512_update_32_fu_791_md_buf_address0;
wire    grp_sha512_update_32_fu_791_md_buf_ce0;
wire    grp_sha512_update_32_fu_791_md_buf_we0;
wire   [7:0] grp_sha512_update_32_fu_791_md_buf_d0;
wire   [4:0] grp_sha512_update_32_fu_791_in_r_address0;
wire    grp_sha512_update_32_fu_791_in_r_ce0;
wire    grp_sc_muladd_fu_962_ap_start;
wire    grp_sc_muladd_fu_962_ap_done;
wire    grp_sc_muladd_fu_962_ap_idle;
wire    grp_sc_muladd_fu_962_ap_ready;
wire   [5:0] grp_sc_muladd_fu_962_s_address0;
wire    grp_sc_muladd_fu_962_s_ce0;
wire    grp_sc_muladd_fu_962_s_we0;
wire   [7:0] grp_sc_muladd_fu_962_s_d0;
wire   [5:0] grp_sc_muladd_fu_962_a_address0;
wire    grp_sc_muladd_fu_962_a_ce0;
wire   [5:0] grp_sc_muladd_fu_962_b_address0;
wire    grp_sc_muladd_fu_962_b_ce0;
wire   [5:0] grp_sc_muladd_fu_962_c_address0;
wire    grp_sc_muladd_fu_962_c_ce0;
wire    grp_sha512_update_32_2_fu_972_ap_start;
wire    grp_sha512_update_32_2_fu_972_ap_idle;
wire    grp_sha512_update_32_2_fu_972_ap_ready;
wire   [63:0] grp_sha512_update_32_2_fu_972_md_length_o;
wire    grp_sha512_update_32_2_fu_972_md_length_o_ap_vld;
wire   [2:0] grp_sha512_update_32_2_fu_972_md_state_address0;
wire    grp_sha512_update_32_2_fu_972_md_state_ce0;
wire    grp_sha512_update_32_2_fu_972_md_state_we0;
wire   [63:0] grp_sha512_update_32_2_fu_972_md_state_d0;
wire   [63:0] grp_sha512_update_32_2_fu_972_md_curlen_o;
wire    grp_sha512_update_32_2_fu_972_md_curlen_o_ap_vld;
wire   [6:0] grp_sha512_update_32_2_fu_972_md_buf_address0;
wire    grp_sha512_update_32_2_fu_972_md_buf_ce0;
wire    grp_sha512_update_32_2_fu_972_md_buf_we0;
wire   [7:0] grp_sha512_update_32_2_fu_972_md_buf_d0;
wire   [5:0] grp_sha512_update_32_2_fu_972_in_r_address0;
wire    grp_sha512_update_32_2_fu_972_in_r_ce0;
wire    grp_sha512_update_32_1_fu_984_ap_start;
wire    grp_sha512_update_32_1_fu_984_ap_done;
wire    grp_sha512_update_32_1_fu_984_ap_idle;
wire    grp_sha512_update_32_1_fu_984_ap_ready;
wire   [63:0] grp_sha512_update_32_1_fu_984_md_length_o;
wire    grp_sha512_update_32_1_fu_984_md_length_o_ap_vld;
wire   [2:0] grp_sha512_update_32_1_fu_984_md_state_address0;
wire    grp_sha512_update_32_1_fu_984_md_state_ce0;
wire    grp_sha512_update_32_1_fu_984_md_state_we0;
wire   [63:0] grp_sha512_update_32_1_fu_984_md_state_d0;
wire   [63:0] grp_sha512_update_32_1_fu_984_md_curlen_o;
wire    grp_sha512_update_32_1_fu_984_md_curlen_o_ap_vld;
wire   [6:0] grp_sha512_update_32_1_fu_984_md_buf_address0;
wire    grp_sha512_update_32_1_fu_984_md_buf_ce0;
wire    grp_sha512_update_32_1_fu_984_md_buf_we0;
wire   [7:0] grp_sha512_update_32_1_fu_984_md_buf_d0;
wire   [5:0] grp_sha512_update_32_1_fu_984_in_r_address0;
wire    grp_sha512_update_32_1_fu_984_in_r_ce0;
wire    grp_sc_reduce_fu_996_ap_start;
wire    grp_sc_reduce_fu_996_ap_done;
wire    grp_sc_reduce_fu_996_ap_idle;
wire    grp_sc_reduce_fu_996_ap_ready;
wire   [5:0] grp_sc_reduce_fu_996_s_address0;
wire    grp_sc_reduce_fu_996_s_ce0;
wire    grp_sc_reduce_fu_996_s_we0;
wire   [7:0] grp_sc_reduce_fu_996_s_d0;
reg   [7:0] grp_sc_reduce_fu_996_s_q0;
wire    grp_fe_tobytes_1_fu_1001_ap_start;
wire    grp_fe_tobytes_1_fu_1001_ap_idle;
wire    grp_fe_tobytes_1_fu_1001_ap_ready;
wire   [5:0] grp_fe_tobytes_1_fu_1001_s_address0;
wire    grp_fe_tobytes_1_fu_1001_s_ce0;
wire    grp_fe_tobytes_1_fu_1001_s_we0;
wire   [7:0] grp_fe_tobytes_1_fu_1001_s_d0;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state46;
reg    ap_reg_grp_sha512_update_128_fu_510_ap_start;
reg    ap_block_state14_ignore_call0;
reg    ap_block_state47_ignore_call0;
reg   [63:0] hash_length_fu_206;
reg   [63:0] hash_curlen_fu_214;
reg    ap_reg_grp_sha512_final_fu_511_ap_start;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state50;
reg    ap_reg_grp_fe_mul_fu_512_ap_start;
wire    ap_CS_fsm_state23;
reg    ap_reg_grp_ge_scalarmult_base_fu_579_ap_start;
wire    ap_CS_fsm_state20;
reg    ap_reg_grp_fe_invert_fu_646_ap_start;
reg    ap_reg_grp_sha512_update_32_fu_791_ap_start;
wire    ap_CS_fsm_state38;
reg    ap_reg_grp_sc_muladd_fu_962_ap_start;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
reg    ap_reg_grp_sha512_update_32_2_fu_972_ap_start;
wire    ap_CS_fsm_state5;
reg    ap_reg_grp_sha512_update_32_1_fu_984_ap_start;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
reg    ap_reg_grp_sc_reduce_fu_996_ap_start;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state52;
reg    ap_reg_grp_fe_tobytes_1_fu_1001_ap_start;
wire   [63:0] tmp_1681_fu_1071_p1;
wire   [63:0] tmp_1683_fu_1515_p1;
wire   [63:0] tmp_1240_fu_1060_p1;
wire   [63:0] tmp_1727_fu_1504_p1;
reg    ap_reg_ioackin_microblaze_mem_ARREADY;
wire    ap_CS_fsm_state35;
wire   [7:0] tmp_1490_i_fu_1492_p2;
reg   [31:0] grp_fu_410_p0;
wire  signed [31:0] q_fu_1296_p1;
wire  signed [31:0] q_10_fu_1314_p1;
wire  signed [31:0] q_11_fu_1333_p1;
wire  signed [31:0] q_12_fu_1352_p1;
wire  signed [31:0] q_13_fu_1371_p1;
wire  signed [31:0] q_14_fu_1390_p1;
wire  signed [31:0] q_15_fu_1409_p1;
wire  signed [31:0] q_16_fu_1428_p1;
wire  signed [31:0] q_17_fu_1447_p1;
wire  signed [31:0] q_18_fu_1462_p1;
reg   [31:0] grp_fu_410_p1;
wire   [31:0] tmp_i_i_i_fu_496_p2;
wire  signed [31:0] tmp_i_i_i_fu_496_p1;
reg   [63:0] grp_fu_939_p0;
wire   [63:0] tmp_fu_1055_p1;
wire   [63:0] tmp_1679_fu_1499_p1;
reg   [7:0] grp_fu_949_p0;
wire   [31:0] tmp_1723_fu_943_p2;
wire   [5:0] tmp_563_i_i_i_fu_1304_p4;
wire   [6:0] tmp_565_i_i_i_fu_1323_p4;
wire   [5:0] tmp_567_i_i_i_fu_1342_p4;
wire   [6:0] tmp_569_i_i_i_fu_1361_p4;
wire   [5:0] tmp_571_i_i_i_fu_1380_p4;
wire   [6:0] tmp_573_i_i_i_fu_1399_p4;
wire   [5:0] tmp_575_i_i_i_fu_1418_p4;
wire   [6:0] tmp_577_i_i_i_fu_1437_p4;
wire   [0:0] tmp_1724_fu_1466_p3;
wire   [0:0] tmp_1725_fu_1474_p1;
wire   [0:0] s_0_i_i_i_fu_1478_p2;
wire   [7:0] tmp_1489_i_fu_1484_p3;
wire   [31:0] tmp_1726_fu_955_p2;
reg   [53:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 54'd1;
#0 blocks_in_preg = 64'd0;
#0 blocks_in_ap_vld_preg = 1'b0;
#0 ap_reg_grp_sha512_update_128_fu_510_ap_start = 1'b0;
#0 ap_reg_grp_sha512_final_fu_511_ap_start = 1'b0;
#0 ap_reg_grp_fe_mul_fu_512_ap_start = 1'b0;
#0 ap_reg_grp_ge_scalarmult_base_fu_579_ap_start = 1'b0;
#0 ap_reg_grp_fe_invert_fu_646_ap_start = 1'b0;
#0 ap_reg_grp_sha512_update_32_fu_791_ap_start = 1'b0;
#0 ap_reg_grp_sc_muladd_fu_962_ap_start = 1'b0;
#0 ap_reg_grp_sha512_update_32_2_fu_972_ap_start = 1'b0;
#0 ap_reg_grp_sha512_update_32_1_fu_984_ap_start = 1'b0;
#0 ap_reg_grp_sc_reduce_fu_996_ap_start = 1'b0;
#0 ap_reg_grp_fe_tobytes_1_fu_1001_ap_start = 1'b0;
#0 ap_reg_ioackin_microblaze_mem_ARREADY = 1'b0;
end

ed25519_sign_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
ed25519_sign_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .signature_address0(signature_address0),
    .signature_ce0(signature_ce0),
    .signature_we0(signature_we0),
    .signature_d0(signature_d0),
    .signature_q0(signature_q0),
    .blocks_in(blocks_in),
    .blocks_in_ap_vld(blocks_in_ap_vld),
    .public_key_address0(grp_sha512_update_32_fu_791_in_r_address0),
    .public_key_ce0(grp_sha512_update_32_fu_791_in_r_ce0),
    .public_key_q0(public_key_q0),
    .private_key_address0(private_key_address0),
    .private_key_ce0(private_key_ce0),
    .private_key_q0(private_key_q0)
);

ed25519_sign_microblaze_mem_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MICROBLAZE_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MICROBLAZE_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MICROBLAZE_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MICROBLAZE_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MICROBLAZE_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MICROBLAZE_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MICROBLAZE_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MICROBLAZE_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MICROBLAZE_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MICROBLAZE_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MICROBLAZE_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MICROBLAZE_MEM_CACHE_VALUE ))
ed25519_sign_microblaze_mem_m_axi_U(
    .AWVALID(m_axi_microblaze_mem_AWVALID),
    .AWREADY(m_axi_microblaze_mem_AWREADY),
    .AWADDR(m_axi_microblaze_mem_AWADDR),
    .AWID(m_axi_microblaze_mem_AWID),
    .AWLEN(m_axi_microblaze_mem_AWLEN),
    .AWSIZE(m_axi_microblaze_mem_AWSIZE),
    .AWBURST(m_axi_microblaze_mem_AWBURST),
    .AWLOCK(m_axi_microblaze_mem_AWLOCK),
    .AWCACHE(m_axi_microblaze_mem_AWCACHE),
    .AWPROT(m_axi_microblaze_mem_AWPROT),
    .AWQOS(m_axi_microblaze_mem_AWQOS),
    .AWREGION(m_axi_microblaze_mem_AWREGION),
    .AWUSER(m_axi_microblaze_mem_AWUSER),
    .WVALID(m_axi_microblaze_mem_WVALID),
    .WREADY(m_axi_microblaze_mem_WREADY),
    .WDATA(m_axi_microblaze_mem_WDATA),
    .WSTRB(m_axi_microblaze_mem_WSTRB),
    .WLAST(m_axi_microblaze_mem_WLAST),
    .WID(m_axi_microblaze_mem_WID),
    .WUSER(m_axi_microblaze_mem_WUSER),
    .ARVALID(m_axi_microblaze_mem_ARVALID),
    .ARREADY(m_axi_microblaze_mem_ARREADY),
    .ARADDR(m_axi_microblaze_mem_ARADDR),
    .ARID(m_axi_microblaze_mem_ARID),
    .ARLEN(m_axi_microblaze_mem_ARLEN),
    .ARSIZE(m_axi_microblaze_mem_ARSIZE),
    .ARBURST(m_axi_microblaze_mem_ARBURST),
    .ARLOCK(m_axi_microblaze_mem_ARLOCK),
    .ARCACHE(m_axi_microblaze_mem_ARCACHE),
    .ARPROT(m_axi_microblaze_mem_ARPROT),
    .ARQOS(m_axi_microblaze_mem_ARQOS),
    .ARREGION(m_axi_microblaze_mem_ARREGION),
    .ARUSER(m_axi_microblaze_mem_ARUSER),
    .RVALID(m_axi_microblaze_mem_RVALID),
    .RREADY(m_axi_microblaze_mem_RREADY),
    .RDATA(m_axi_microblaze_mem_RDATA),
    .RLAST(m_axi_microblaze_mem_RLAST),
    .RID(m_axi_microblaze_mem_RID),
    .RUSER(m_axi_microblaze_mem_RUSER),
    .RRESP(m_axi_microblaze_mem_RRESP),
    .BVALID(m_axi_microblaze_mem_BVALID),
    .BREADY(m_axi_microblaze_mem_BREADY),
    .BRESP(m_axi_microblaze_mem_BRESP),
    .BID(m_axi_microblaze_mem_BID),
    .BUSER(m_axi_microblaze_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(microblaze_mem_ARVALID),
    .I_ARREADY(microblaze_mem_ARREADY),
    .I_ARADDR(microblaze_mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd128),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(microblaze_mem_RVALID),
    .I_RREADY(microblaze_mem_RREADY),
    .I_RDATA(microblaze_mem_RDATA),
    .I_RID(microblaze_mem_RID),
    .I_RUSER(microblaze_mem_RUSER),
    .I_RRESP(microblaze_mem_RRESP),
    .I_RLAST(microblaze_mem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(microblaze_mem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(microblaze_mem_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(microblaze_mem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(microblaze_mem_BRESP),
    .I_BID(microblaze_mem_BID),
    .I_BUSER(microblaze_mem_BUSER)
);

ed25519_sign_hashtde #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
hash_state_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hash_state_address0),
    .ce0(hash_state_ce0),
    .we0(hash_state_we0),
    .d0(hash_state_d0),
    .q0(hash_state_q0),
    .address1(hash_state_address1),
    .ce1(hash_state_ce1),
    .we1(hash_state_we1),
    .d1(hash_state_d1)
);

ed25519_sign_hashudo #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
hash_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hash_buf_address0),
    .ce0(hash_buf_ce0),
    .we0(hash_buf_we0),
    .d0(hash_buf_d0),
    .q0(hash_buf_q0),
    .address1(grp_sha512_final_fu_511_md_buf_address1),
    .ce1(hash_buf_ce1),
    .we1(hash_buf_we1),
    .d1(grp_sha512_final_fu_511_md_buf_d1),
    .q1(hash_buf_q1)
);

ed25519_sign_hram #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
hram_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hram_address0),
    .ce0(hram_ce0),
    .we0(hram_we0),
    .d0(hram_d0),
    .q0(hram_q0)
);

ed25519_sign_hram #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(r_address0),
    .ce0(r_ce0),
    .we0(r_we0),
    .d0(r_d0),
    .q0(r_q0)
);

ed25519_sign_tempvdy #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
temp_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_data_address0),
    .ce0(temp_data_ce0),
    .we0(temp_data_we0),
    .d0(reg_1038),
    .q0(temp_data_q0)
);

sha512_update_128 grp_sha512_update_128_fu_510(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_update_128_fu_510_ap_start),
    .ap_done(grp_sha512_update_128_fu_510_ap_done),
    .ap_idle(grp_sha512_update_128_fu_510_ap_idle),
    .ap_ready(grp_sha512_update_128_fu_510_ap_ready),
    .md_length_i(hash_length_fu_206),
    .md_length_o(grp_sha512_update_128_fu_510_md_length_o),
    .md_length_o_ap_vld(grp_sha512_update_128_fu_510_md_length_o_ap_vld),
    .md_state_address0(grp_sha512_update_128_fu_510_md_state_address0),
    .md_state_ce0(grp_sha512_update_128_fu_510_md_state_ce0),
    .md_state_we0(grp_sha512_update_128_fu_510_md_state_we0),
    .md_state_d0(grp_sha512_update_128_fu_510_md_state_d0),
    .md_state_q0(hash_state_q0),
    .md_curlen_i(hash_curlen_fu_214),
    .md_curlen_o(grp_sha512_update_128_fu_510_md_curlen_o),
    .md_curlen_o_ap_vld(grp_sha512_update_128_fu_510_md_curlen_o_ap_vld),
    .md_buf_address0(grp_sha512_update_128_fu_510_md_buf_address0),
    .md_buf_ce0(grp_sha512_update_128_fu_510_md_buf_ce0),
    .md_buf_we0(grp_sha512_update_128_fu_510_md_buf_we0),
    .md_buf_d0(grp_sha512_update_128_fu_510_md_buf_d0),
    .md_buf_q0(hash_buf_q0),
    .in_r_address0(grp_sha512_update_128_fu_510_in_r_address0),
    .in_r_ce0(grp_sha512_update_128_fu_510_in_r_ce0),
    .in_r_q0(temp_data_q0)
);

sha512_final grp_sha512_final_fu_511(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_final_fu_511_ap_start),
    .ap_done(grp_sha512_final_fu_511_ap_done),
    .ap_idle(grp_sha512_final_fu_511_ap_idle),
    .ap_ready(grp_sha512_final_fu_511_ap_ready),
    .md_length_i(hash_length_fu_206),
    .md_length_o(grp_sha512_final_fu_511_md_length_o),
    .md_length_o_ap_vld(grp_sha512_final_fu_511_md_length_o_ap_vld),
    .md_state_address0(grp_sha512_final_fu_511_md_state_address0),
    .md_state_ce0(grp_sha512_final_fu_511_md_state_ce0),
    .md_state_we0(grp_sha512_final_fu_511_md_state_we0),
    .md_state_d0(grp_sha512_final_fu_511_md_state_d0),
    .md_state_q0(hash_state_q0),
    .md_curlen_i(hash_curlen_fu_214),
    .md_curlen_o(grp_sha512_final_fu_511_md_curlen_o),
    .md_curlen_o_ap_vld(grp_sha512_final_fu_511_md_curlen_o_ap_vld),
    .md_buf_address0(grp_sha512_final_fu_511_md_buf_address0),
    .md_buf_ce0(grp_sha512_final_fu_511_md_buf_ce0),
    .md_buf_we0(grp_sha512_final_fu_511_md_buf_we0),
    .md_buf_d0(grp_sha512_final_fu_511_md_buf_d0),
    .md_buf_q0(hash_buf_q0),
    .md_buf_address1(grp_sha512_final_fu_511_md_buf_address1),
    .md_buf_ce1(grp_sha512_final_fu_511_md_buf_ce1),
    .md_buf_we1(grp_sha512_final_fu_511_md_buf_we1),
    .md_buf_d1(grp_sha512_final_fu_511_md_buf_d1),
    .md_buf_q1(hash_buf_q1),
    .out_r_address0(grp_sha512_final_fu_511_out_r_address0),
    .out_r_ce0(grp_sha512_final_fu_511_out_r_ce0),
    .out_r_we0(grp_sha512_final_fu_511_out_r_we0),
    .out_r_d0(grp_sha512_final_fu_511_out_r_d0)
);

fe_mul grp_fe_mul_fu_512(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fe_mul_fu_512_ap_start),
    .ap_done(grp_fe_mul_fu_512_ap_done),
    .ap_idle(grp_fe_mul_fu_512_ap_idle),
    .ap_ready(grp_fe_mul_fu_512_ap_ready),
    .f_0_read(grp_fe_mul_fu_512_f_0_read),
    .f_1_read(grp_fe_mul_fu_512_f_1_read),
    .f_2_read(grp_fe_mul_fu_512_f_2_read),
    .f_3_read(grp_fe_mul_fu_512_f_3_read),
    .f_4_read(grp_fe_mul_fu_512_f_4_read),
    .f_5_read(grp_fe_mul_fu_512_f_5_read),
    .f_6_read(grp_fe_mul_fu_512_f_6_read),
    .f_7_read(grp_fe_mul_fu_512_f_7_read),
    .f_8_read(grp_fe_mul_fu_512_f_8_read),
    .f_9_read(grp_fe_mul_fu_512_f_9_read),
    .g_0_read(recip_0_reg_1747),
    .g_1_read(recip_1_reg_1752),
    .g_2_read(recip_2_reg_1757),
    .g_3_read(recip_3_reg_1762),
    .g_4_read(recip_4_reg_1767),
    .g_5_read(recip_5_reg_1772),
    .g_6_read(recip_6_reg_1777),
    .g_7_read(recip_7_reg_1782),
    .g_8_read(recip_8_reg_1787),
    .g_9_read(recip_9_reg_1792),
    .ap_return_0(grp_fe_mul_fu_512_ap_return_0),
    .ap_return_1(grp_fe_mul_fu_512_ap_return_1),
    .ap_return_2(grp_fe_mul_fu_512_ap_return_2),
    .ap_return_3(grp_fe_mul_fu_512_ap_return_3),
    .ap_return_4(grp_fe_mul_fu_512_ap_return_4),
    .ap_return_5(grp_fe_mul_fu_512_ap_return_5),
    .ap_return_6(grp_fe_mul_fu_512_ap_return_6),
    .ap_return_7(grp_fe_mul_fu_512_ap_return_7),
    .ap_return_8(grp_fe_mul_fu_512_ap_return_8),
    .ap_return_9(grp_fe_mul_fu_512_ap_return_9)
);

ge_scalarmult_base grp_ge_scalarmult_base_fu_579(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ge_scalarmult_base_fu_579_ap_start),
    .ap_done(grp_ge_scalarmult_base_fu_579_ap_done),
    .ap_idle(grp_ge_scalarmult_base_fu_579_ap_idle),
    .ap_ready(grp_ge_scalarmult_base_fu_579_ap_ready),
    .a_address0(grp_ge_scalarmult_base_fu_579_a_address0),
    .a_ce0(grp_ge_scalarmult_base_fu_579_a_ce0),
    .a_q0(r_q0),
    .ap_return_0(grp_ge_scalarmult_base_fu_579_ap_return_0),
    .ap_return_1(grp_ge_scalarmult_base_fu_579_ap_return_1),
    .ap_return_2(grp_ge_scalarmult_base_fu_579_ap_return_2),
    .ap_return_3(grp_ge_scalarmult_base_fu_579_ap_return_3),
    .ap_return_4(grp_ge_scalarmult_base_fu_579_ap_return_4),
    .ap_return_5(grp_ge_scalarmult_base_fu_579_ap_return_5),
    .ap_return_6(grp_ge_scalarmult_base_fu_579_ap_return_6),
    .ap_return_7(grp_ge_scalarmult_base_fu_579_ap_return_7),
    .ap_return_8(grp_ge_scalarmult_base_fu_579_ap_return_8),
    .ap_return_9(grp_ge_scalarmult_base_fu_579_ap_return_9),
    .ap_return_10(grp_ge_scalarmult_base_fu_579_ap_return_10),
    .ap_return_11(grp_ge_scalarmult_base_fu_579_ap_return_11),
    .ap_return_12(grp_ge_scalarmult_base_fu_579_ap_return_12),
    .ap_return_13(grp_ge_scalarmult_base_fu_579_ap_return_13),
    .ap_return_14(grp_ge_scalarmult_base_fu_579_ap_return_14),
    .ap_return_15(grp_ge_scalarmult_base_fu_579_ap_return_15),
    .ap_return_16(grp_ge_scalarmult_base_fu_579_ap_return_16),
    .ap_return_17(grp_ge_scalarmult_base_fu_579_ap_return_17),
    .ap_return_18(grp_ge_scalarmult_base_fu_579_ap_return_18),
    .ap_return_19(grp_ge_scalarmult_base_fu_579_ap_return_19),
    .ap_return_20(grp_ge_scalarmult_base_fu_579_ap_return_20),
    .ap_return_21(grp_ge_scalarmult_base_fu_579_ap_return_21),
    .ap_return_22(grp_ge_scalarmult_base_fu_579_ap_return_22),
    .ap_return_23(grp_ge_scalarmult_base_fu_579_ap_return_23),
    .ap_return_24(grp_ge_scalarmult_base_fu_579_ap_return_24),
    .ap_return_25(grp_ge_scalarmult_base_fu_579_ap_return_25),
    .ap_return_26(grp_ge_scalarmult_base_fu_579_ap_return_26),
    .ap_return_27(grp_ge_scalarmult_base_fu_579_ap_return_27),
    .ap_return_28(grp_ge_scalarmult_base_fu_579_ap_return_28),
    .ap_return_29(grp_ge_scalarmult_base_fu_579_ap_return_29)
);

fe_invert grp_fe_invert_fu_646(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fe_invert_fu_646_ap_start),
    .ap_done(grp_fe_invert_fu_646_ap_done),
    .ap_idle(grp_fe_invert_fu_646_ap_idle),
    .ap_ready(grp_fe_invert_fu_646_ap_ready),
    .z_0_read(R_Z_0_reg_1697),
    .z_1_read(R_Z_1_reg_1702),
    .z_2_read(R_Z_2_reg_1707),
    .z_3_read(R_Z_3_reg_1712),
    .z_4_read(R_Z_4_reg_1717),
    .z_5_read(R_Z_5_reg_1722),
    .z_6_read(R_Z_6_reg_1727),
    .z_7_read(R_Z_7_reg_1732),
    .z_8_read(R_Z_8_reg_1737),
    .z_9_read(R_Z_9_reg_1742),
    .ap_return_0(grp_fe_invert_fu_646_ap_return_0),
    .ap_return_1(grp_fe_invert_fu_646_ap_return_1),
    .ap_return_2(grp_fe_invert_fu_646_ap_return_2),
    .ap_return_3(grp_fe_invert_fu_646_ap_return_3),
    .ap_return_4(grp_fe_invert_fu_646_ap_return_4),
    .ap_return_5(grp_fe_invert_fu_646_ap_return_5),
    .ap_return_6(grp_fe_invert_fu_646_ap_return_6),
    .ap_return_7(grp_fe_invert_fu_646_ap_return_7),
    .ap_return_8(grp_fe_invert_fu_646_ap_return_8),
    .ap_return_9(grp_fe_invert_fu_646_ap_return_9)
);

sha512_update_32 grp_sha512_update_32_fu_791(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_update_32_fu_791_ap_start),
    .ap_done(grp_sha512_update_32_fu_791_ap_done),
    .ap_idle(grp_sha512_update_32_fu_791_ap_idle),
    .ap_ready(grp_sha512_update_32_fu_791_ap_ready),
    .md_length_i(hash_length_fu_206),
    .md_length_o(grp_sha512_update_32_fu_791_md_length_o),
    .md_length_o_ap_vld(grp_sha512_update_32_fu_791_md_length_o_ap_vld),
    .md_state_address0(grp_sha512_update_32_fu_791_md_state_address0),
    .md_state_ce0(grp_sha512_update_32_fu_791_md_state_ce0),
    .md_state_we0(grp_sha512_update_32_fu_791_md_state_we0),
    .md_state_d0(grp_sha512_update_32_fu_791_md_state_d0),
    .md_state_q0(hash_state_q0),
    .md_curlen_i(hash_curlen_fu_214),
    .md_curlen_o(grp_sha512_update_32_fu_791_md_curlen_o),
    .md_curlen_o_ap_vld(grp_sha512_update_32_fu_791_md_curlen_o_ap_vld),
    .md_buf_address0(grp_sha512_update_32_fu_791_md_buf_address0),
    .md_buf_ce0(grp_sha512_update_32_fu_791_md_buf_ce0),
    .md_buf_we0(grp_sha512_update_32_fu_791_md_buf_we0),
    .md_buf_d0(grp_sha512_update_32_fu_791_md_buf_d0),
    .md_buf_q0(hash_buf_q0),
    .in_r_address0(grp_sha512_update_32_fu_791_in_r_address0),
    .in_r_ce0(grp_sha512_update_32_fu_791_in_r_ce0),
    .in_r_q0(public_key_q0)
);

sc_muladd grp_sc_muladd_fu_962(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sc_muladd_fu_962_ap_start),
    .ap_done(grp_sc_muladd_fu_962_ap_done),
    .ap_idle(grp_sc_muladd_fu_962_ap_idle),
    .ap_ready(grp_sc_muladd_fu_962_ap_ready),
    .s_address0(grp_sc_muladd_fu_962_s_address0),
    .s_ce0(grp_sc_muladd_fu_962_s_ce0),
    .s_we0(grp_sc_muladd_fu_962_s_we0),
    .s_d0(grp_sc_muladd_fu_962_s_d0),
    .a_address0(grp_sc_muladd_fu_962_a_address0),
    .a_ce0(grp_sc_muladd_fu_962_a_ce0),
    .a_q0(hram_q0),
    .b_address0(grp_sc_muladd_fu_962_b_address0),
    .b_ce0(grp_sc_muladd_fu_962_b_ce0),
    .b_q0(private_key_q0),
    .c_address0(grp_sc_muladd_fu_962_c_address0),
    .c_ce0(grp_sc_muladd_fu_962_c_ce0),
    .c_q0(r_q0)
);

sha512_update_32_2 grp_sha512_update_32_2_fu_972(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_update_32_2_fu_972_ap_start),
    .ap_done(grp_sha512_update_32_2_fu_972_ap_done),
    .ap_idle(grp_sha512_update_32_2_fu_972_ap_idle),
    .ap_ready(grp_sha512_update_32_2_fu_972_ap_ready),
    .md_length_i(hash_length_fu_206),
    .md_length_o(grp_sha512_update_32_2_fu_972_md_length_o),
    .md_length_o_ap_vld(grp_sha512_update_32_2_fu_972_md_length_o_ap_vld),
    .md_state_address0(grp_sha512_update_32_2_fu_972_md_state_address0),
    .md_state_ce0(grp_sha512_update_32_2_fu_972_md_state_ce0),
    .md_state_we0(grp_sha512_update_32_2_fu_972_md_state_we0),
    .md_state_d0(grp_sha512_update_32_2_fu_972_md_state_d0),
    .md_state_q0(hash_state_q0),
    .md_curlen_i(hash_curlen_fu_214),
    .md_curlen_o(grp_sha512_update_32_2_fu_972_md_curlen_o),
    .md_curlen_o_ap_vld(grp_sha512_update_32_2_fu_972_md_curlen_o_ap_vld),
    .md_buf_address0(grp_sha512_update_32_2_fu_972_md_buf_address0),
    .md_buf_ce0(grp_sha512_update_32_2_fu_972_md_buf_ce0),
    .md_buf_we0(grp_sha512_update_32_2_fu_972_md_buf_we0),
    .md_buf_d0(grp_sha512_update_32_2_fu_972_md_buf_d0),
    .md_buf_q0(hash_buf_q0),
    .in_r_address0(grp_sha512_update_32_2_fu_972_in_r_address0),
    .in_r_ce0(grp_sha512_update_32_2_fu_972_in_r_ce0),
    .in_r_q0(private_key_q0)
);

sha512_update_32_1 grp_sha512_update_32_1_fu_984(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_update_32_1_fu_984_ap_start),
    .ap_done(grp_sha512_update_32_1_fu_984_ap_done),
    .ap_idle(grp_sha512_update_32_1_fu_984_ap_idle),
    .ap_ready(grp_sha512_update_32_1_fu_984_ap_ready),
    .md_length_i(hash_length_fu_206),
    .md_length_o(grp_sha512_update_32_1_fu_984_md_length_o),
    .md_length_o_ap_vld(grp_sha512_update_32_1_fu_984_md_length_o_ap_vld),
    .md_state_address0(grp_sha512_update_32_1_fu_984_md_state_address0),
    .md_state_ce0(grp_sha512_update_32_1_fu_984_md_state_ce0),
    .md_state_we0(grp_sha512_update_32_1_fu_984_md_state_we0),
    .md_state_d0(grp_sha512_update_32_1_fu_984_md_state_d0),
    .md_state_q0(hash_state_q0),
    .md_curlen_i(hash_curlen_fu_214),
    .md_curlen_o(grp_sha512_update_32_1_fu_984_md_curlen_o),
    .md_curlen_o_ap_vld(grp_sha512_update_32_1_fu_984_md_curlen_o_ap_vld),
    .md_buf_address0(grp_sha512_update_32_1_fu_984_md_buf_address0),
    .md_buf_ce0(grp_sha512_update_32_1_fu_984_md_buf_ce0),
    .md_buf_we0(grp_sha512_update_32_1_fu_984_md_buf_we0),
    .md_buf_d0(grp_sha512_update_32_1_fu_984_md_buf_d0),
    .md_buf_q0(hash_buf_q0),
    .in_r_address0(grp_sha512_update_32_1_fu_984_in_r_address0),
    .in_r_ce0(grp_sha512_update_32_1_fu_984_in_r_ce0),
    .in_r_q0(signature_q0)
);

sc_reduce grp_sc_reduce_fu_996(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sc_reduce_fu_996_ap_start),
    .ap_done(grp_sc_reduce_fu_996_ap_done),
    .ap_idle(grp_sc_reduce_fu_996_ap_idle),
    .ap_ready(grp_sc_reduce_fu_996_ap_ready),
    .s_address0(grp_sc_reduce_fu_996_s_address0),
    .s_ce0(grp_sc_reduce_fu_996_s_ce0),
    .s_we0(grp_sc_reduce_fu_996_s_we0),
    .s_d0(grp_sc_reduce_fu_996_s_d0),
    .s_q0(grp_sc_reduce_fu_996_s_q0)
);

fe_tobytes_1 grp_fe_tobytes_1_fu_1001(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fe_tobytes_1_fu_1001_ap_start),
    .ap_done(grp_fe_tobytes_1_fu_1001_ap_done),
    .ap_idle(grp_fe_tobytes_1_fu_1001_ap_idle),
    .ap_ready(grp_fe_tobytes_1_fu_1001_ap_ready),
    .s_address0(grp_fe_tobytes_1_fu_1001_s_address0),
    .s_ce0(grp_fe_tobytes_1_fu_1001_s_ce0),
    .s_we0(grp_fe_tobytes_1_fu_1001_s_we0),
    .s_d0(grp_fe_tobytes_1_fu_1001_s_d0),
    .p_read(reg_1043),
    .p_read1(y_1_reg_1797),
    .p_read2(y_2_reg_1802),
    .p_read3(y_3_reg_1807),
    .p_read4(y_4_reg_1812),
    .p_read5(y_5_reg_1817),
    .p_read6(y_6_reg_1822),
    .p_read7(y_7_reg_1827),
    .p_read8(y_8_reg_1832),
    .p_read9(reg_1049)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_fe_invert_fu_646_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state21) & (grp_ge_scalarmult_base_fu_579_ap_done == 1'b1))) begin
            ap_reg_grp_fe_invert_fu_646_ap_start <= 1'b1;
        end else if ((1'b1 == grp_fe_invert_fu_646_ap_ready)) begin
            ap_reg_grp_fe_invert_fu_646_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_fe_mul_fu_512_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (grp_fe_mul_fu_512_ap_done == 1'b1)) | (1'b1 == ap_CS_fsm_state23))) begin
            ap_reg_grp_fe_mul_fu_512_ap_start <= 1'b1;
        end else if ((1'b1 == grp_fe_mul_fu_512_ap_ready)) begin
            ap_reg_grp_fe_mul_fu_512_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_fe_tobytes_1_fu_1001_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state24) & (grp_fe_mul_fu_512_ap_done == 1'b1))) begin
            ap_reg_grp_fe_tobytes_1_fu_1001_ap_start <= 1'b1;
        end else if ((1'b1 == grp_fe_tobytes_1_fu_1001_ap_ready)) begin
            ap_reg_grp_fe_tobytes_1_fu_1001_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_ge_scalarmult_base_fu_579_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_reg_grp_ge_scalarmult_base_fu_579_ap_start <= 1'b1;
        end else if ((1'b1 == grp_ge_scalarmult_base_fu_579_ap_ready)) begin
            ap_reg_grp_ge_scalarmult_base_fu_579_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sc_muladd_fu_962_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state53)) begin
            ap_reg_grp_sc_muladd_fu_962_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sc_muladd_fu_962_ap_ready)) begin
            ap_reg_grp_sc_muladd_fu_962_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sc_reduce_fu_996_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state51))) begin
            ap_reg_grp_sc_reduce_fu_996_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sc_reduce_fu_996_ap_ready)) begin
            ap_reg_grp_sc_reduce_fu_996_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_final_fu_511_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0) & (grp_fu_939_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state40) & (ap_block_state40_io == 1'b0) & (grp_fu_939_p2 == 1'd0)))) begin
            ap_reg_grp_sha512_final_fu_511_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_final_fu_511_ap_ready)) begin
            ap_reg_grp_sha512_final_fu_511_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_update_128_fu_510_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state14) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID)) & (1'd1 == grp_fu_949_p2)) | ((1'b1 == ap_CS_fsm_state47) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID)) & (1'd1 == grp_fu_949_p2)))) begin
            ap_reg_grp_sha512_update_128_fu_510_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_update_128_fu_510_ap_ready)) begin
            ap_reg_grp_sha512_update_128_fu_510_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_update_32_1_fu_984_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state36)) begin
            ap_reg_grp_sha512_update_32_1_fu_984_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_update_32_1_fu_984_ap_ready)) begin
            ap_reg_grp_sha512_update_32_1_fu_984_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_update_32_2_fu_972_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_reg_grp_sha512_update_32_2_fu_972_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_update_32_2_fu_972_ap_ready)) begin
            ap_reg_grp_sha512_update_32_2_fu_972_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_update_32_fu_791_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_reg_grp_sha512_update_32_fu_791_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_update_32_fu_791_ap_ready)) begin
            ap_reg_grp_sha512_update_32_fu_791_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_microblaze_mem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state7) & (grp_fu_939_p2 == 1'd1) & (ap_block_state7_io == 1'b0)) | ((grp_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (ap_block_state40_io == 1'b0)))) begin
            ap_reg_ioackin_microblaze_mem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state7) & (grp_fu_939_p2 == 1'd1) & (1'b1 == microblaze_mem_ARREADY)) | ((grp_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (1'b1 == microblaze_mem_ARREADY)))) begin
            ap_reg_ioackin_microblaze_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        blocks_in_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state54) & (grp_sc_muladd_fu_962_ap_done == 1'b1))) begin
            blocks_in_ap_vld_preg <= 1'b0;
        end else if (((1'b1 == blocks_in_ap_vld) & ~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
            blocks_in_ap_vld_preg <= blocks_in_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        blocks_in_preg <= 64'd0;
    end else begin
        if (((1'b1 == blocks_in_ap_vld) & ~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
            blocks_in_preg <= blocks_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state18))) begin
        hash_curlen_fu_214 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state37) & (1'b1 == grp_sha512_update_32_1_fu_984_md_curlen_o_ap_vld))) begin
        hash_curlen_fu_214 <= grp_sha512_update_32_1_fu_984_md_curlen_o;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_sha512_update_32_2_fu_972_md_curlen_o_ap_vld))) begin
        hash_curlen_fu_214 <= grp_sha512_update_32_2_fu_972_md_curlen_o;
    end else if (((1'b1 == ap_CS_fsm_state39) & (1'b1 == grp_sha512_update_32_fu_791_md_curlen_o_ap_vld))) begin
        hash_curlen_fu_214 <= grp_sha512_update_32_fu_791_md_curlen_o;
    end else if ((((1'b1 == ap_CS_fsm_state17) & (1'b1 == grp_sha512_final_fu_511_md_curlen_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state50) & (1'b1 == grp_sha512_final_fu_511_md_curlen_o_ap_vld)))) begin
        hash_curlen_fu_214 <= grp_sha512_final_fu_511_md_curlen_o;
    end else if ((((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_sha512_update_128_fu_510_md_curlen_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state49) & (1'b1 == grp_sha512_update_128_fu_510_md_curlen_o_ap_vld)))) begin
        hash_curlen_fu_214 <= grp_sha512_update_128_fu_510_md_curlen_o;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state18))) begin
        hash_length_fu_206 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state37) & (1'b1 == grp_sha512_update_32_1_fu_984_md_length_o_ap_vld))) begin
        hash_length_fu_206 <= grp_sha512_update_32_1_fu_984_md_length_o;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == grp_sha512_update_32_2_fu_972_md_length_o_ap_vld))) begin
        hash_length_fu_206 <= grp_sha512_update_32_2_fu_972_md_length_o;
    end else if (((1'b1 == ap_CS_fsm_state39) & (1'b1 == grp_sha512_update_32_fu_791_md_length_o_ap_vld))) begin
        hash_length_fu_206 <= grp_sha512_update_32_fu_791_md_length_o;
    end else if ((((1'b1 == ap_CS_fsm_state17) & (1'b1 == grp_sha512_final_fu_511_md_length_o_ap_vld)) | ((1'b1 == grp_sha512_final_fu_511_md_length_o_ap_vld) & (1'b1 == ap_CS_fsm_state50)))) begin
        hash_length_fu_206 <= grp_sha512_final_fu_511_md_length_o;
    end else if ((((1'b1 == ap_CS_fsm_state16) & (1'b1 == grp_sha512_update_128_fu_510_md_length_o_ap_vld)) | ((1'b1 == ap_CS_fsm_state49) & (1'b1 == grp_sha512_update_128_fu_510_md_length_o_ap_vld)))) begin
        hash_length_fu_206 <= grp_sha512_update_128_fu_510_md_length_o;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_sha512_update_128_fu_510_ap_done == 1'b1))) begin
        reg_364 <= reg_387;
    end else if (((1'b1 == ap_CS_fsm_state6) & ~((1'b0 == blocks_in_ap_vld_in_sig) | (1'b0 == grp_sha512_update_32_2_fu_972_ap_done)))) begin
        reg_364 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state40) & (ap_block_state40_io == 1'b0))) begin
        reg_364 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        reg_375 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        reg_375 <= reg_398;
    end else if (((1'b1 == ap_CS_fsm_state47) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID)))) begin
        reg_375 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_sha512_update_128_fu_510_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        reg_387 <= reg_364;
    end else if (((1'b1 == ap_CS_fsm_state39) & (grp_sha512_update_32_fu_791_ap_done == 1'b1))) begin
        reg_387 <= 32'd0;
    end else if ((((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0)) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_387 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_398 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_398 <= reg_375;
    end else if (((1'b1 == ap_CS_fsm_state14) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID)))) begin
        reg_398 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (grp_ge_scalarmult_base_fu_579_ap_done == 1'b1))) begin
        R_X_0_reg_1597 <= grp_ge_scalarmult_base_fu_579_ap_return_0;
        R_X_1_reg_1602 <= grp_ge_scalarmult_base_fu_579_ap_return_1;
        R_X_2_reg_1607 <= grp_ge_scalarmult_base_fu_579_ap_return_2;
        R_X_3_reg_1612 <= grp_ge_scalarmult_base_fu_579_ap_return_3;
        R_X_4_reg_1617 <= grp_ge_scalarmult_base_fu_579_ap_return_4;
        R_X_5_reg_1622 <= grp_ge_scalarmult_base_fu_579_ap_return_5;
        R_X_6_reg_1627 <= grp_ge_scalarmult_base_fu_579_ap_return_6;
        R_X_7_reg_1632 <= grp_ge_scalarmult_base_fu_579_ap_return_7;
        R_X_8_reg_1637 <= grp_ge_scalarmult_base_fu_579_ap_return_8;
        R_X_9_reg_1642 <= grp_ge_scalarmult_base_fu_579_ap_return_9;
        R_Y_0_reg_1647 <= grp_ge_scalarmult_base_fu_579_ap_return_10;
        R_Y_1_reg_1652 <= grp_ge_scalarmult_base_fu_579_ap_return_11;
        R_Y_2_reg_1657 <= grp_ge_scalarmult_base_fu_579_ap_return_12;
        R_Y_3_reg_1662 <= grp_ge_scalarmult_base_fu_579_ap_return_13;
        R_Y_4_reg_1667 <= grp_ge_scalarmult_base_fu_579_ap_return_14;
        R_Y_5_reg_1672 <= grp_ge_scalarmult_base_fu_579_ap_return_15;
        R_Y_6_reg_1677 <= grp_ge_scalarmult_base_fu_579_ap_return_16;
        R_Y_7_reg_1682 <= grp_ge_scalarmult_base_fu_579_ap_return_17;
        R_Y_8_reg_1687 <= grp_ge_scalarmult_base_fu_579_ap_return_18;
        R_Y_9_reg_1692 <= grp_ge_scalarmult_base_fu_579_ap_return_19;
        R_Z_0_reg_1697 <= grp_ge_scalarmult_base_fu_579_ap_return_20;
        R_Z_1_reg_1702 <= grp_ge_scalarmult_base_fu_579_ap_return_21;
        R_Z_2_reg_1707 <= grp_ge_scalarmult_base_fu_579_ap_return_22;
        R_Z_3_reg_1712 <= grp_ge_scalarmult_base_fu_579_ap_return_23;
        R_Z_4_reg_1717 <= grp_ge_scalarmult_base_fu_579_ap_return_24;
        R_Z_5_reg_1722 <= grp_ge_scalarmult_base_fu_579_ap_return_25;
        R_Z_6_reg_1727 <= grp_ge_scalarmult_base_fu_579_ap_return_26;
        R_Z_7_reg_1732 <= grp_ge_scalarmult_base_fu_579_ap_return_27;
        R_Z_8_reg_1737 <= grp_ge_scalarmult_base_fu_579_ap_return_28;
        R_Z_9_reg_1742 <= grp_ge_scalarmult_base_fu_579_ap_return_29;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (ap_block_state25_on_subcall_done == 1'b0))) begin
        fe_mul_ret1_i_reg_1837_1 <= grp_fe_mul_fu_512_ap_return_1;
        fe_mul_ret1_i_reg_1837_2 <= grp_fe_mul_fu_512_ap_return_2;
        fe_mul_ret1_i_reg_1837_3 <= grp_fe_mul_fu_512_ap_return_3;
        fe_mul_ret1_i_reg_1837_4 <= grp_fe_mul_fu_512_ap_return_4;
        fe_mul_ret1_i_reg_1837_5 <= grp_fe_mul_fu_512_ap_return_5;
        fe_mul_ret1_i_reg_1837_6 <= grp_fe_mul_fu_512_ap_return_6;
        fe_mul_ret1_i_reg_1837_7 <= grp_fe_mul_fu_512_ap_return_7;
        fe_mul_ret1_i_reg_1837_8 <= grp_fe_mul_fu_512_ap_return_8;
        tmp_561_i_i_i_reg_1849 <= {{grp_fu_410_p2[31:25]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (grp_fe_invert_fu_646_ap_done == 1'b1))) begin
        recip_0_reg_1747 <= grp_fe_invert_fu_646_ap_return_0;
        recip_1_reg_1752 <= grp_fe_invert_fu_646_ap_return_1;
        recip_2_reg_1757 <= grp_fe_invert_fu_646_ap_return_2;
        recip_3_reg_1762 <= grp_fe_invert_fu_646_ap_return_3;
        recip_4_reg_1767 <= grp_fe_invert_fu_646_ap_return_4;
        recip_5_reg_1772 <= grp_fe_invert_fu_646_ap_return_5;
        recip_6_reg_1777 <= grp_fe_invert_fu_646_ap_return_6;
        recip_7_reg_1782 <= grp_fe_invert_fu_646_ap_return_7;
        recip_8_reg_1787 <= grp_fe_invert_fu_646_ap_return_8;
        recip_9_reg_1792 <= grp_fe_invert_fu_646_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (grp_fu_949_p2 == 1'd0) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID))) | ((grp_fu_949_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID))))) begin
        reg_1038 <= microblaze_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (grp_fe_mul_fu_512_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (ap_block_state25_on_subcall_done == 1'b0)))) begin
        reg_1043 <= grp_fe_mul_fu_512_ap_return_0;
        reg_1049 <= grp_fe_mul_fu_512_ap_return_9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_579_i_i_i_reg_1854 <= {{grp_fu_410_p2[31:26]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (grp_fe_mul_fu_512_ap_done == 1'b1))) begin
        y_1_reg_1797 <= grp_fe_mul_fu_512_ap_return_1;
        y_2_reg_1802 <= grp_fe_mul_fu_512_ap_return_2;
        y_3_reg_1807 <= grp_fe_mul_fu_512_ap_return_3;
        y_4_reg_1812 <= grp_fe_mul_fu_512_ap_return_4;
        y_5_reg_1817 <= grp_fe_mul_fu_512_ap_return_5;
        y_6_reg_1822 <= grp_fe_mul_fu_512_ap_return_6;
        y_7_reg_1827 <= grp_fe_mul_fu_512_ap_return_7;
        y_8_reg_1832 <= grp_fe_mul_fu_512_ap_return_8;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) & (grp_sc_muladd_fu_962_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) & (grp_sc_muladd_fu_962_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_microblaze_mem_ARREADY)) begin
        ap_sig_ioackin_microblaze_mem_ARREADY = microblaze_mem_ARREADY;
    end else begin
        ap_sig_ioackin_microblaze_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == blocks_in_ap_vld)) begin
        blocks_in_ap_vld_in_sig = blocks_in_ap_vld;
    end else begin
        blocks_in_ap_vld_in_sig = blocks_in_ap_vld_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        blocks_in_blk_n = blocks_in_ap_vld;
    end else begin
        blocks_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == blocks_in_ap_vld)) begin
        blocks_in_in_sig = blocks_in;
    end else begin
        blocks_in_in_sig = blocks_in_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_0_read = R_X_0_reg_1597;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_0_read = R_Y_0_reg_1647;
    end else begin
        grp_fe_mul_fu_512_f_0_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_1_read = R_X_1_reg_1602;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_1_read = R_Y_1_reg_1652;
    end else begin
        grp_fe_mul_fu_512_f_1_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_2_read = R_X_2_reg_1607;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_2_read = R_Y_2_reg_1657;
    end else begin
        grp_fe_mul_fu_512_f_2_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_3_read = R_X_3_reg_1612;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_3_read = R_Y_3_reg_1662;
    end else begin
        grp_fe_mul_fu_512_f_3_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_4_read = R_X_4_reg_1617;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_4_read = R_Y_4_reg_1667;
    end else begin
        grp_fe_mul_fu_512_f_4_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_5_read = R_X_5_reg_1622;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_5_read = R_Y_5_reg_1672;
    end else begin
        grp_fe_mul_fu_512_f_5_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_6_read = R_X_6_reg_1627;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_6_read = R_Y_6_reg_1677;
    end else begin
        grp_fe_mul_fu_512_f_6_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_7_read = R_X_7_reg_1632;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_7_read = R_Y_7_reg_1682;
    end else begin
        grp_fe_mul_fu_512_f_7_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_8_read = R_X_8_reg_1637;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_8_read = R_Y_8_reg_1687;
    end else begin
        grp_fe_mul_fu_512_f_8_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fe_mul_fu_512_f_9_read = R_X_9_reg_1642;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fe_mul_fu_512_f_9_read = R_Y_9_reg_1692;
    end else begin
        grp_fe_mul_fu_512_f_9_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_410_p0 = reg_398;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_410_p0 = reg_387;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_410_p0 = q_18_fu_1462_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_410_p0 = q_17_fu_1447_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_410_p0 = q_16_fu_1428_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_410_p0 = q_15_fu_1409_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_410_p0 = q_14_fu_1390_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_410_p0 = q_13_fu_1371_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_410_p0 = q_12_fu_1352_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_410_p0 = q_11_fu_1333_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_410_p0 = q_10_fu_1314_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_410_p0 = q_fu_1296_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_410_p0 = 32'd16777216;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_410_p0 = reg_375;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_410_p0 = reg_364;
    end else begin
        grp_fu_410_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_410_p1 = reg_1049;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_410_p1 = fe_mul_ret1_i_reg_1837_8;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_410_p1 = fe_mul_ret1_i_reg_1837_7;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_410_p1 = fe_mul_ret1_i_reg_1837_6;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_410_p1 = fe_mul_ret1_i_reg_1837_5;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_410_p1 = fe_mul_ret1_i_reg_1837_4;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_410_p1 = fe_mul_ret1_i_reg_1837_3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_410_p1 = fe_mul_ret1_i_reg_1837_2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_410_p1 = fe_mul_ret1_i_reg_1837_1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_410_p1 = reg_1043;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_410_p1 = tmp_i_i_i_fu_496_p2;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state47))) begin
        grp_fu_410_p1 = 8'd1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state40))) begin
        grp_fu_410_p1 = 32'd1;
    end else begin
        grp_fu_410_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_939_p0 = tmp_1679_fu_1499_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_939_p0 = tmp_fu_1055_p1;
    end else begin
        grp_fu_939_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_949_p0 = reg_398;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_949_p0 = reg_375;
    end else begin
        grp_fu_949_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_sc_reduce_fu_996_s_q0 = hram_q0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_sc_reduce_fu_996_s_q0 = r_q0;
    end else begin
        grp_sc_reduce_fu_996_s_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        hash_buf_address0 = grp_sha512_update_32_1_fu_984_md_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hash_buf_address0 = grp_sha512_update_32_2_fu_972_md_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        hash_buf_address0 = grp_sha512_update_32_fu_791_md_buf_address0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_buf_address0 = grp_sha512_final_fu_511_md_buf_address0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        hash_buf_address0 = grp_sha512_update_128_fu_510_md_buf_address0;
    end else begin
        hash_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        hash_buf_ce0 = grp_sha512_update_32_1_fu_984_md_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hash_buf_ce0 = grp_sha512_update_32_2_fu_972_md_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        hash_buf_ce0 = grp_sha512_update_32_fu_791_md_buf_ce0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_buf_ce0 = grp_sha512_final_fu_511_md_buf_ce0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        hash_buf_ce0 = grp_sha512_update_128_fu_510_md_buf_ce0;
    end else begin
        hash_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_buf_ce1 = grp_sha512_final_fu_511_md_buf_ce1;
    end else begin
        hash_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        hash_buf_d0 = grp_sha512_update_32_1_fu_984_md_buf_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hash_buf_d0 = grp_sha512_update_32_2_fu_972_md_buf_d0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        hash_buf_d0 = grp_sha512_update_32_fu_791_md_buf_d0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_buf_d0 = grp_sha512_final_fu_511_md_buf_d0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        hash_buf_d0 = grp_sha512_update_128_fu_510_md_buf_d0;
    end else begin
        hash_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        hash_buf_we0 = grp_sha512_update_32_1_fu_984_md_buf_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hash_buf_we0 = grp_sha512_update_32_2_fu_972_md_buf_we0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        hash_buf_we0 = grp_sha512_update_32_fu_791_md_buf_we0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_buf_we0 = grp_sha512_final_fu_511_md_buf_we0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        hash_buf_we0 = grp_sha512_update_128_fu_510_md_buf_we0;
    end else begin
        hash_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_buf_we1 = grp_sha512_final_fu_511_md_buf_we1;
    end else begin
        hash_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        hash_state_address0 = hash_state_addr_6_reg_1570;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        hash_state_address0 = hash_state_addr_4_reg_1560;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        hash_state_address0 = hash_state_addr_2_reg_1550;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        hash_state_address0 = hash_state_addr_reg_1540;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hash_state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hash_state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        hash_state_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        hash_state_address0 = grp_sha512_update_32_1_fu_984_md_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hash_state_address0 = grp_sha512_update_32_2_fu_972_md_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        hash_state_address0 = grp_sha512_update_32_fu_791_md_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_state_address0 = grp_sha512_final_fu_511_md_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        hash_state_address0 = grp_sha512_update_128_fu_510_md_state_address0;
    end else begin
        hash_state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        hash_state_address1 = hash_state_addr_7_reg_1575;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        hash_state_address1 = hash_state_addr_5_reg_1565;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        hash_state_address1 = hash_state_addr_3_reg_1555;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        hash_state_address1 = hash_state_addr_1_reg_1545;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hash_state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hash_state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        hash_state_address1 = 64'd1;
    end else begin
        hash_state_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state21) & (grp_ge_scalarmult_base_fu_579_ap_done == 1'b1)) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state19) & (grp_sc_reduce_fu_996_ap_done == 1'b1)))) begin
        hash_state_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        hash_state_ce0 = grp_sha512_update_32_1_fu_984_md_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hash_state_ce0 = grp_sha512_update_32_2_fu_972_md_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        hash_state_ce0 = grp_sha512_update_32_fu_791_md_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_state_ce0 = grp_sha512_final_fu_511_md_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        hash_state_ce0 = grp_sha512_update_128_fu_510_md_state_ce0;
    end else begin
        hash_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state21) & (grp_ge_scalarmult_base_fu_579_ap_done == 1'b1)) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state19) & (grp_sc_reduce_fu_996_ap_done == 1'b1)))) begin
        hash_state_ce1 = 1'b1;
    end else begin
        hash_state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state21))) begin
        hash_state_d0 = 64'd2270897969802886507;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state20))) begin
        hash_state_d0 = 64'd5840696475078001361;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state19))) begin
        hash_state_d0 = 64'd4354685564936845355;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state18))) begin
        hash_state_d0 = 64'd7640891576956012808;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        hash_state_d0 = grp_sha512_update_32_1_fu_984_md_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hash_state_d0 = grp_sha512_update_32_2_fu_972_md_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        hash_state_d0 = grp_sha512_update_32_fu_791_md_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_state_d0 = grp_sha512_final_fu_511_md_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        hash_state_d0 = grp_sha512_update_128_fu_510_md_state_d0;
    end else begin
        hash_state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state21))) begin
        hash_state_d1 = 64'd6620516959819538809;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state20))) begin
        hash_state_d1 = 64'd11170449401992604703;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state19))) begin
        hash_state_d1 = 64'd11912009170470909681;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state18))) begin
        hash_state_d1 = 64'd13503953896175478587;
    end else begin
        hash_state_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state21) & (grp_ge_scalarmult_base_fu_579_ap_done == 1'b1)) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state19) & (grp_sc_reduce_fu_996_ap_done == 1'b1)))) begin
        hash_state_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        hash_state_we0 = grp_sha512_update_32_1_fu_984_md_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hash_state_we0 = grp_sha512_update_32_2_fu_972_md_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        hash_state_we0 = grp_sha512_update_32_fu_791_md_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        hash_state_we0 = grp_sha512_final_fu_511_md_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        hash_state_we0 = grp_sha512_update_128_fu_510_md_state_we0;
    end else begin
        hash_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state21) & (grp_ge_scalarmult_base_fu_579_ap_done == 1'b1)) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state19) & (grp_sc_reduce_fu_996_ap_done == 1'b1)))) begin
        hash_state_we1 = 1'b1;
    end else begin
        hash_state_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        hram_address0 = grp_sc_reduce_fu_996_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        hram_address0 = grp_sc_muladd_fu_962_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        hram_address0 = grp_sha512_final_fu_511_out_r_address0;
    end else begin
        hram_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        hram_ce0 = grp_sc_reduce_fu_996_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        hram_ce0 = grp_sc_muladd_fu_962_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        hram_ce0 = grp_sha512_final_fu_511_out_r_ce0;
    end else begin
        hram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        hram_d0 = grp_sc_reduce_fu_996_s_d0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        hram_d0 = grp_sha512_final_fu_511_out_r_d0;
    end else begin
        hram_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        hram_we0 = grp_sc_reduce_fu_996_s_we0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        hram_we0 = grp_sha512_final_fu_511_out_r_we0;
    end else begin
        hram_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fu_939_p2 == 1'd1) & (1'b0 == ap_reg_ioackin_microblaze_mem_ARREADY))) begin
        if ((1'b1 == ap_CS_fsm_state40)) begin
            microblaze_mem_ARADDR = tmp_1727_fu_1504_p1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            microblaze_mem_ARADDR = tmp_1240_fu_1060_p1;
        end else begin
            microblaze_mem_ARADDR = 'bx;
        end
    end else begin
        microblaze_mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (grp_fu_939_p2 == 1'd1) & (1'b0 == ap_reg_ioackin_microblaze_mem_ARREADY)) | ((grp_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (1'b0 == ap_reg_ioackin_microblaze_mem_ARREADY)))) begin
        microblaze_mem_ARVALID = 1'b1;
    end else begin
        microblaze_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (grp_fu_949_p2 == 1'd0) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID))) | ((grp_fu_949_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID))))) begin
        microblaze_mem_RREADY = 1'b1;
    end else begin
        microblaze_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (grp_fu_939_p2 == 1'd1)) | ((grp_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40)))) begin
        microblaze_mem_blk_n_AR = m_axi_microblaze_mem_ARREADY;
    end else begin
        microblaze_mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state14) & (grp_fu_949_p2 == 1'd0)) | ((grp_fu_949_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47)))) begin
        microblaze_mem_blk_n_R = m_axi_microblaze_mem_RVALID;
    end else begin
        microblaze_mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        private_key_address0 = grp_sha512_update_32_2_fu_972_in_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        private_key_address0 = grp_sc_muladd_fu_962_b_address0;
    end else begin
        private_key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        private_key_ce0 = grp_sha512_update_32_2_fu_972_in_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        private_key_ce0 = grp_sc_muladd_fu_962_b_ce0;
    end else begin
        private_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r_address0 = grp_sc_reduce_fu_996_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        r_address0 = grp_sc_muladd_fu_962_c_address0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        r_address0 = grp_ge_scalarmult_base_fu_579_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        r_address0 = grp_sha512_final_fu_511_out_r_address0;
    end else begin
        r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r_ce0 = grp_sc_reduce_fu_996_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        r_ce0 = grp_sc_muladd_fu_962_c_ce0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        r_ce0 = grp_ge_scalarmult_base_fu_579_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        r_ce0 = grp_sha512_final_fu_511_out_r_ce0;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r_d0 = grp_sc_reduce_fu_996_s_d0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        r_d0 = grp_sha512_final_fu_511_out_r_d0;
    end else begin
        r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        r_we0 = grp_sc_reduce_fu_996_s_we0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        r_we0 = grp_sha512_final_fu_511_out_r_we0;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        signature_address0 = signature_addr_reg_1859;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        signature_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        signature_address0 = grp_fe_tobytes_1_fu_1001_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        signature_address0 = grp_sha512_update_32_1_fu_984_in_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        signature_address0 = grp_sc_muladd_fu_962_s_address0;
    end else begin
        signature_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        signature_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        signature_ce0 = grp_fe_tobytes_1_fu_1001_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        signature_ce0 = grp_sha512_update_32_1_fu_984_in_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        signature_ce0 = grp_sc_muladd_fu_962_s_ce0;
    end else begin
        signature_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        signature_d0 = tmp_1490_i_fu_1492_p2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        signature_d0 = grp_fe_tobytes_1_fu_1001_s_d0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        signature_d0 = grp_sc_muladd_fu_962_s_d0;
    end else begin
        signature_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        signature_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        signature_we0 = grp_fe_tobytes_1_fu_1001_s_we0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        signature_we0 = grp_sc_muladd_fu_962_s_we0;
    end else begin
        signature_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        temp_data_address0 = tmp_1683_fu_1515_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_data_address0 = tmp_1681_fu_1071_p1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        temp_data_address0 = grp_sha512_update_128_fu_510_in_r_address0;
    end else begin
        temp_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state48))) begin
        temp_data_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        temp_data_ce0 = grp_sha512_update_128_fu_510_in_r_ce0;
    end else begin
        temp_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state48))) begin
        temp_data_we0 = 1'b1;
    end else begin
        temp_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ~((1'b0 == blocks_in_ap_vld_in_sig) | (1'b0 == grp_sha512_update_32_2_fu_972_ap_done)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (ap_block_state7_io == 1'b0) & (grp_fu_939_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((1'b1 == ap_CS_fsm_state7) & (grp_fu_939_p2 == 1'd1) & (ap_block_state7_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID)) & (1'd1 == grp_fu_949_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b1 == ap_CS_fsm_state14) & (grp_fu_949_p2 == 1'd0) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_sha512_update_128_fu_510_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (grp_sha512_final_fu_511_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (grp_sc_reduce_fu_996_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (grp_ge_scalarmult_base_fu_579_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (grp_fe_invert_fu_646_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (grp_fe_mul_fu_512_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (ap_block_state25_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (grp_sha512_update_32_1_fu_984_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (grp_sha512_update_32_fu_791_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (ap_block_state40_io == 1'b0) & (grp_fu_939_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else if (((grp_fu_939_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (ap_block_state40_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID)) & (1'd1 == grp_fu_949_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else if (((grp_fu_949_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state47) & ~((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state49 : begin
            if (((grp_sha512_update_128_fu_510_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (grp_sha512_final_fu_511_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (grp_sc_reduce_fu_996_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (grp_sc_muladd_fu_962_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state14 = ((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID));
end

always @ (*) begin
    ap_block_state14_ignore_call0 = ((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID));
end

always @ (*) begin
    ap_block_state25_on_subcall_done = ((1'b0 == grp_fe_mul_fu_512_ap_done) | (1'b0 == grp_fe_tobytes_1_fu_1001_ap_done));
end

always @ (*) begin
    ap_block_state40_io = ((grp_fu_939_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_microblaze_mem_ARREADY));
end

always @ (*) begin
    ap_block_state47 = ((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID));
end

always @ (*) begin
    ap_block_state47_ignore_call0 = ((grp_fu_949_p2 == 1'd0) & (1'b0 == microblaze_mem_RVALID));
end

always @ (*) begin
    ap_block_state7_io = ((grp_fu_939_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_microblaze_mem_ARREADY));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fe_invert_fu_646_ap_start = ap_reg_grp_fe_invert_fu_646_ap_start;

assign grp_fe_mul_fu_512_ap_start = ap_reg_grp_fe_mul_fu_512_ap_start;

assign grp_fe_tobytes_1_fu_1001_ap_start = ap_reg_grp_fe_tobytes_1_fu_1001_ap_start;

assign grp_fu_410_p2 = (grp_fu_410_p0 + grp_fu_410_p1);

assign grp_fu_939_p2 = ((grp_fu_939_p0 < blocks_in_in_sig) ? 1'b1 : 1'b0);

assign grp_fu_949_p2 = ((grp_fu_949_p0 == 8'd128) ? 1'b1 : 1'b0);

assign grp_ge_scalarmult_base_fu_579_ap_start = ap_reg_grp_ge_scalarmult_base_fu_579_ap_start;

assign grp_sc_muladd_fu_962_ap_start = ap_reg_grp_sc_muladd_fu_962_ap_start;

assign grp_sc_reduce_fu_996_ap_start = ap_reg_grp_sc_reduce_fu_996_ap_start;

assign grp_sha512_final_fu_511_ap_start = ap_reg_grp_sha512_final_fu_511_ap_start;

assign grp_sha512_update_128_fu_510_ap_start = ap_reg_grp_sha512_update_128_fu_510_ap_start;

assign grp_sha512_update_32_1_fu_984_ap_start = ap_reg_grp_sha512_update_32_1_fu_984_ap_start;

assign grp_sha512_update_32_2_fu_972_ap_start = ap_reg_grp_sha512_update_32_2_fu_972_ap_start;

assign grp_sha512_update_32_fu_791_ap_start = ap_reg_grp_sha512_update_32_fu_791_ap_start;

assign hash_state_addr_1_reg_1545 = 64'd1;

assign hash_state_addr_2_reg_1550 = 64'd2;

assign hash_state_addr_3_reg_1555 = 64'd3;

assign hash_state_addr_4_reg_1560 = 64'd4;

assign hash_state_addr_5_reg_1565 = 64'd5;

assign hash_state_addr_6_reg_1570 = 64'd6;

assign hash_state_addr_7_reg_1575 = 64'd7;

assign hash_state_addr_reg_1540 = 64'd0;

assign q_10_fu_1314_p1 = $signed(tmp_563_i_i_i_fu_1304_p4);

assign q_11_fu_1333_p1 = $signed(tmp_565_i_i_i_fu_1323_p4);

assign q_12_fu_1352_p1 = $signed(tmp_567_i_i_i_fu_1342_p4);

assign q_13_fu_1371_p1 = $signed(tmp_569_i_i_i_fu_1361_p4);

assign q_14_fu_1390_p1 = $signed(tmp_571_i_i_i_fu_1380_p4);

assign q_15_fu_1409_p1 = $signed(tmp_573_i_i_i_fu_1399_p4);

assign q_16_fu_1428_p1 = $signed(tmp_575_i_i_i_fu_1418_p4);

assign q_17_fu_1447_p1 = $signed(tmp_577_i_i_i_fu_1437_p4);

assign q_18_fu_1462_p1 = $signed(tmp_579_i_i_i_reg_1854);

assign q_fu_1296_p1 = $signed(tmp_561_i_i_i_reg_1849);

assign s_0_i_i_i_fu_1478_p2 = (tmp_1724_fu_1466_p3 ^ tmp_1725_fu_1474_p1);

assign signature_addr_reg_1859 = 64'd31;

assign tmp_1240_fu_1060_p1 = tmp_1723_fu_943_p2;

assign tmp_1489_i_fu_1484_p3 = {{s_0_i_i_i_fu_1478_p2}, {7'd0}};

assign tmp_1490_i_fu_1492_p2 = (signature_q0 ^ tmp_1489_i_fu_1484_p3);

assign tmp_1679_fu_1499_p1 = reg_387;

assign tmp_1681_fu_1071_p1 = reg_375;

assign tmp_1683_fu_1515_p1 = reg_398;

assign tmp_1723_fu_943_p2 = reg_364 << 32'd7;

assign tmp_1724_fu_1466_p3 = grp_fu_410_p2[32'd25];

assign tmp_1725_fu_1474_p1 = reg_1043[0:0];

assign tmp_1726_fu_955_p2 = reg_387 << 32'd7;

assign tmp_1727_fu_1504_p1 = tmp_1726_fu_955_p2;

assign tmp_563_i_i_i_fu_1304_p4 = {{reg_387[31:26]}};

assign tmp_565_i_i_i_fu_1323_p4 = {{reg_387[31:25]}};

assign tmp_567_i_i_i_fu_1342_p4 = {{reg_387[31:26]}};

assign tmp_569_i_i_i_fu_1361_p4 = {{reg_387[31:25]}};

assign tmp_571_i_i_i_fu_1380_p4 = {{reg_387[31:26]}};

assign tmp_573_i_i_i_fu_1399_p4 = {{reg_387[31:25]}};

assign tmp_575_i_i_i_fu_1418_p4 = {{reg_387[31:26]}};

assign tmp_577_i_i_i_fu_1437_p4 = {{reg_387[31:25]}};

assign tmp_fu_1055_p1 = reg_364;

assign tmp_i_i_i_fu_496_p1 = grp_fe_mul_fu_512_ap_return_9;

assign tmp_i_i_i_fu_496_p2 = ($signed({{1'b0}, {32'd19}}) * $signed(tmp_i_i_i_fu_496_p1));

endmodule //ed25519_sign
