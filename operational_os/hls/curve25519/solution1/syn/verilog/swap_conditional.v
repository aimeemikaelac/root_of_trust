// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module swap_conditional (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_q0,
        b_address0,
        b_ce0,
        b_we0,
        b_d0,
        b_q0,
        iswap
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] a_address0;
output   a_ce0;
output   a_we0;
output  [63:0] a_d0;
input  [63:0] a_q0;
output  [4:0] b_address0;
output   b_ce0;
output   b_we0;
output  [63:0] b_d0;
input  [63:0] b_q0;
input  [0:0] iswap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] a_address0;
reg a_ce0;
reg a_we0;
reg[4:0] b_address0;
reg b_ce0;
reg b_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] swap_cast_fu_65_p3;
reg   [31:0] swap_cast_reg_132;
wire   [3:0] i_1_fu_79_p2;
reg   [3:0] i_1_reg_140;
wire    ap_CS_fsm_state2;
reg   [4:0] a_addr_reg_145;
wire   [0:0] tmp_1_fu_73_p2;
reg   [4:0] b_addr_reg_150;
reg   [3:0] i_reg_54;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_2_fu_85_p1;
wire   [31:0] tmp_3_fu_95_p1;
wire   [31:0] tmp_fu_91_p1;
wire   [31:0] tmp_5_fu_99_p2;
wire   [31:0] x_fu_105_p2;
wire   [31:0] tmp_6_fu_110_p2;
wire   [31:0] tmp_9_fu_121_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_54 <= i_1_reg_140;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_54 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_73_p2 == 1'd0))) begin
        a_addr_reg_145[3 : 0] <= tmp_2_fu_85_p1[3 : 0];
        b_addr_reg_150[3 : 0] <= tmp_2_fu_85_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_140 <= i_1_fu_79_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        swap_cast_reg_132 <= swap_cast_fu_65_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = a_addr_reg_145;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = tmp_2_fu_85_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_73_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_73_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address0 = b_addr_reg_150;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = tmp_2_fu_85_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_73_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_d0 = $signed(tmp_6_fu_110_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign b_d0 = $signed(tmp_9_fu_121_p2);

assign i_1_fu_79_p2 = (i_reg_54 + 4'd1);

assign swap_cast_fu_65_p3 = ((iswap[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign tmp_1_fu_73_p2 = ((i_reg_54 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_2_fu_85_p1 = i_reg_54;

assign tmp_3_fu_95_p1 = b_q0[31:0];

assign tmp_5_fu_99_p2 = (tmp_3_fu_95_p1 ^ tmp_fu_91_p1);

assign tmp_6_fu_110_p2 = (x_fu_105_p2 ^ tmp_fu_91_p1);

assign tmp_9_fu_121_p2 = (tmp_3_fu_95_p1 ^ x_fu_105_p2);

assign tmp_fu_91_p1 = a_q0[31:0];

assign x_fu_105_p2 = (tmp_5_fu_99_p2 & swap_cast_reg_132);

always @ (posedge ap_clk) begin
    a_addr_reg_145[4] <= 1'b0;
    b_addr_reg_150[4] <= 1'b0;
end

endmodule //swap_conditional
