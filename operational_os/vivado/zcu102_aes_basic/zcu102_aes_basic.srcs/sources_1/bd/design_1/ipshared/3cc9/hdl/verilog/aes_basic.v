// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes_basic,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i-es2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.330000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=100,HLS_SYN_DSP=0,HLS_SYN_FF=1639,HLS_SYN_LUT=13467}" *)

module aes_basic (
        ap_clk,
        ap_rst_n,
        extern_key_in_V,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'b1;
parameter    ap_ST_fsm_state2 = 11'b10;
parameter    ap_ST_fsm_state3 = 11'b100;
parameter    ap_ST_fsm_state4 = 11'b1000;
parameter    ap_ST_fsm_state5 = 11'b10000;
parameter    ap_ST_fsm_state6 = 11'b100000;
parameter    ap_ST_fsm_state7 = 11'b1000000;
parameter    ap_ST_fsm_state8 = 11'b10000000;
parameter    ap_ST_fsm_state9 = 11'b100000000;
parameter    ap_ST_fsm_state10 = 11'b1000000000;
parameter    ap_ST_fsm_state11 = 11'b10000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv128_lc_1 = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_10 = 32'b10000;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [127:0] extern_key_in_V;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [127:0] data_in_V;
reg   [127:0] data_in_V_preg;
wire    data_in_V_ap_vld;
reg   [127:0] data_in_V_in_sig;
reg    data_in_V_ap_vld_preg;
reg    data_in_V_ap_vld_in_sig;
reg    data_out_V_ap_vld;
reg    data_in_V_blk_n;
reg    grp_aes_fu_93_ap_start;
wire    grp_aes_fu_93_ap_done;
wire    grp_aes_fu_93_ap_idle;
wire    grp_aes_fu_93_ap_ready;
wire   [127:0] grp_aes_fu_93_ap_return;
reg   [10:0] ap_NS_fsm;
wire   [0:0] ap_CS_fsm_state11;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'b1;
#0 data_in_V_preg = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
#0 data_in_V_ap_vld_preg = 1'b0;
end

aes_basic_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
aes_basic_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_const_lv32_10),
    .data_in_V(data_in_V),
    .data_in_V_ap_vld(data_in_V_ap_vld),
    .data_out_V(grp_aes_fu_93_ap_return),
    .data_out_V_ap_vld(data_out_V_ap_vld)
);

aes grp_aes_fu_93(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_fu_93_ap_start),
    .ap_done(grp_aes_fu_93_ap_done),
    .ap_idle(grp_aes_fu_93_ap_idle),
    .ap_ready(grp_aes_fu_93_ap_ready),
    .inptext_V_read(data_in_V_in_sig),
    .key_V_read(extern_key_in_V),
    .ap_return(grp_aes_fu_93_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_ap_vld_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            data_in_V_ap_vld_preg <= 1'b0;
        end else if (((1'b1 == data_in_V_ap_vld) & ~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)))) begin
            data_in_V_ap_vld_preg <= data_in_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_preg <= ap_const_lv128_lc_1;
    end else begin
        if (((1'b1 == data_in_V_ap_vld) & ~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)))) begin
            data_in_V_preg <= data_in_V;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == data_in_V_ap_vld)) begin
        data_in_V_ap_vld_in_sig = data_in_V_ap_vld;
    end else begin
        data_in_V_ap_vld_in_sig = data_in_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        data_in_V_blk_n = data_in_V_ap_vld;
    end else begin
        data_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == data_in_V_ap_vld)) begin
        data_in_V_in_sig = data_in_V;
    end else begin
        data_in_V_in_sig = data_in_V_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_out_V_ap_vld = 1'b1;
    end else begin
        data_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0) & ~((ap_start == 1'b0) | (data_in_V_ap_vld_in_sig == 1'b0)))) begin
        grp_aes_fu_93_ap_start = 1'b1;
    end else begin
        grp_aes_fu_93_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (data_in_V_ap_vld_in_sig == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

endmodule //aes_basic
