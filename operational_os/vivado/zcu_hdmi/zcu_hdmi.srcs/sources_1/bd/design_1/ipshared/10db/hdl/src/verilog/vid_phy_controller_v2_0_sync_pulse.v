////////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor: Xilinx
// \   \   \/     Version : 3.3
//  \   \         Application : 7 Series FPGAs Transceivers  Wizard
//  /   /         Filename : hdmi_gt_sync_pulse.v
// /___/   /\
// \   \  /  \
//  \___\/\___\
//
//
// Description: Used on signals crossing from faster clock domain
//
//
//
// Module hdmi_gt_sync_pulse
// Generated by Xilinx 7 Series FPGAs Transceivers Wizard
//
//
// (c) Copyright 2010-2012 Xilinx, Inc. All rights reserved.
//
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.



//------------------------------------------------------------------------------



`timescale 1 ns/1 ps

module vid_phy_controller_v2_0_4_sync_pulse
#(
  parameter   C_NUM_SRETCH_REGS = 3,
  parameter   C_NUM_SYNC_REGS = 3
)

(
  // User Interface
  output reg      USER_DONE = 0,

  // GT Interface
  input           GT_DONE,

  // Clock and Reset
  input           CLK
);

// ---------------------------------------------------------------------------
// Wire and Register Declaration
// ---------------------------------------------------------------------------
reg  [C_NUM_SRETCH_REGS-1:0]  stretch_r = {C_NUM_SRETCH_REGS{1'b0}};
(* shreg_extract = "no", ASYNC_REG = "TRUE" *) reg  [C_NUM_SYNC_REGS-1:0]    sync1_r = {C_NUM_SYNC_REGS{1'b0}};
(* shreg_extract = "no", ASYNC_REG = "TRUE" *) reg  [C_NUM_SYNC_REGS-1:0]    sync2_r = {C_NUM_SYNC_REGS{1'b0}};


//----------------------------------------------------------------------------
// Stretch GT_DONE Signal
//----------------------------------------------------------------------------
always @(posedge CLK or negedge GT_DONE) begin
  if (~GT_DONE)
    stretch_r <= {C_NUM_SRETCH_REGS{1'b0}};
  else
    stretch_r <= {1'b1, stretch_r[C_NUM_SRETCH_REGS-1:1]};
end

//----------------------------------------------------------------------------
// Synchronizers
//----------------------------------------------------------------------------
always @(posedge CLK) begin
  sync1_r <= {stretch_r[0], sync1_r[C_NUM_SYNC_REGS-1:1]};
end

always @(posedge CLK) begin
  sync2_r <= {GT_DONE, sync2_r[C_NUM_SYNC_REGS-1:1]};
end

//----------------------------------------------------------------------------
// Final Flop Stage with AND of both synchronizers - keeps USER_DONE low
// when input is low for many cycles...
//----------------------------------------------------------------------------
always @(posedge CLK) begin
  USER_DONE <= sync1_r[0] & sync2_r[0];
end

endmodule

