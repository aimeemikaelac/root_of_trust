

================================================================
== Vivado HLS Report for 'transform_1'
================================================================
* Date:           Sat May  6 21:35:28 2017

* Version:        2017.1 (Build 1846317 on Fri Apr 14 19:19:38 MDT 2017)
* Project:        sha256_mem
* Solution:       solution1
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-1-i-es1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      4.73|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    1|  743|    1|  743|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------+-----+-----+----------+-----------+-----------+-------+----------+
        |             |  Latency  | Iteration|  Initiation Interval  |  Trip |          |
        |  Loop Name  | min | max |  Latency |  achieved |   target  | Count | Pipelined|
        +-------------+-----+-----+----------+-----------+-----------+-------+----------+
        |- Loop 1     |    0|  742|       742|          -|          -| 0 ~ 1 |    no    |
        | + Loop 1.1  |   48|   48|         3|          -|          -|     16|    no    |
        | + Loop 1.2  |  144|  144|         3|          -|          -|     48|    no    |
        | + Loop 1.3  |   16|   16|         2|          -|          -|      8|    no    |
        | + Loop 1.4  |  512|  512|         8|          -|          -|     64|    no    |
        | + Loop 1.5  |   16|   16|         2|          -|          -|      8|    no    |
        +-------------+-----+-----+----------+-----------+-----------+-------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 20
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (tmp)
3 --> 
	4  / (!exitcond1)
	6  / (exitcond1)
4 --> 
	5  / true
5 --> 
	3  / true
6 --> 
	7  / (!exitcond9)
	9  / (exitcond9)
7 --> 
	8  / true
8 --> 
	6  / true
9 --> 
	10  / (!exitcond8)
	11  / (exitcond8)
10 --> 
	9  / true
11 --> 
	12  / (!exitcond7)
	19  / (exitcond7)
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	11  / true
19 --> 
	20  / (!exitcond)
	2  / (exitcond)
20 --> 
	19  / true
* FSM state operations: 

 <State 1>: 0.76ns
ST_1: block_nb_read (6)  [1/1] 0.00ns
:0  %block_nb_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %block_nb)

ST_1: tmp_1_read (7)  [1/1] 0.00ns
:1  %tmp_1_read = call i7 @_ssdm_op_Read.ap_auto.i7(i7 %tmp_1)

ST_1: w (8)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:37
:2  %w = alloca [64 x i32], align 16

ST_1: wv (9)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:38
:3  %wv = alloca [8 x i32], align 16

ST_1: wv_addr (10)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55
:4  %wv_addr = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 7

ST_1: wv_addr_1 (11)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55
:5  %wv_addr_1 = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 4

ST_1: wv_addr_2 (12)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55
:6  %wv_addr_2 = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 5

ST_1: wv_addr_3 (13)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55
:7  %wv_addr_3 = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 6

ST_1: wv_addr_4 (14)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57
:8  %wv_addr_4 = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 0

ST_1: wv_addr_5 (15)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57
:9  %wv_addr_5 = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 1

ST_1: wv_addr_6 (16)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57
:10  %wv_addr_6 = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 2

ST_1: wv_addr_7 (17)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:61
:11  %wv_addr_7 = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 3

ST_1: StgValue_33 (18)  [1/1] 0.76ns  loc: sha256_mem/src/sha256_mem.cpp:43
:12  br label %.loopexit


 <State 2>: 0.76ns
ST_2: i (20)  [1/1] 0.00ns
.loopexit:0  %i = phi i1 [ false, %0 ], [ true, %.loopexit.loopexit ]

ST_2: tmptmp (21)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:43 (grouped into LUT with out node tmp)
.loopexit:1  %tmptmp = xor i1 %i, true

ST_2: tmp (22)  [1/1] 0.06ns  loc: sha256_mem/src/sha256_mem.cpp:43 (out node of the LUT)
.loopexit:2  %tmp = and i1 %block_nb_read, %tmptmp

ST_2: empty (23)  [1/1] 0.00ns
.loopexit:3  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 1, i64 0)

ST_2: StgValue_38 (24)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:43
.loopexit:4  br i1 %tmp, label %.preheader3.preheader, label %6

ST_2: StgValue_39 (26)  [1/1] 0.76ns  loc: sha256_mem/src/sha256_mem.cpp:45
.preheader3.preheader:0  br label %.preheader3

ST_2: StgValue_40 (220)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:71
:0  ret void


 <State 3>: 2.06ns
ST_3: j (28)  [1/1] 0.00ns
.preheader3:0  %j = phi i5 [ %j_5, %1 ], [ 0, %.preheader3.preheader ]

ST_3: exitcond1 (29)  [1/1] 0.47ns  loc: sha256_mem/src/sha256_mem.cpp:45
.preheader3:1  %exitcond1 = icmp eq i5 %j, -16

ST_3: empty_14 (30)  [1/1] 0.00ns
.preheader3:2  %empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)

ST_3: j_5 (31)  [1/1] 1.26ns  loc: sha256_mem/src/sha256_mem.cpp:45
.preheader3:3  %j_5 = add i5 %j, 1

ST_3: StgValue_45 (32)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:45
.preheader3:4  br i1 %exitcond1, label %.preheader13.preheader, label %1

ST_3: tmp_20 (34)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:45
:0  %tmp_20 = trunc i5 %j to i4

ST_3: tmp_8 (35)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:1  %tmp_8 = call i6 @_ssdm_op_BitConcatenate.i6.i4.i2(i4 %tmp_20, i2 0)

ST_3: sub_block_0_sum (36)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:2  %sub_block_0_sum = call i6 @_ssdm_op_BitConcatenate.i6.i4.i1.i1(i4 %tmp_20, i1 false, i1 %i)

ST_3: sub_block_0_sum_cast (37)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:3  %sub_block_0_sum_cast = zext i6 %sub_block_0_sum to i7

ST_3: p_sum1 (38)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46 (grouped into LUT with out node sum)
:4  %p_sum1 = or i6 %tmp_8, 3

ST_3: p_sum1_cast (39)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46 (grouped into LUT with out node sum)
:5  %p_sum1_cast = zext i6 %p_sum1 to i7

ST_3: sum (40)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:46 (out node of the LUT)
:6  %sum = add i7 %tmp_1_read, %p_sum1_cast

ST_3: sum_cast (41)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:7  %sum_cast = zext i7 %sum to i64

ST_3: message_addr (42)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:8  %message_addr = getelementptr [64 x i8]* %message, i64 0, i64 %sum_cast

ST_3: message_load (43)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:46
:9  %message_load = load i8* %message_addr, align 1

ST_3: p_sum3 (44)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46 (grouped into LUT with out node sum2)
:10  %p_sum3 = or i6 %sub_block_0_sum, 2

ST_3: p_sum3_cast (45)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46 (grouped into LUT with out node sum2)
:11  %p_sum3_cast = zext i6 %p_sum3 to i7

ST_3: sum2 (46)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:46 (out node of the LUT)
:12  %sum2 = add i7 %tmp_1_read, %p_sum3_cast

ST_3: sum2_cast (47)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:13  %sum2_cast = zext i7 %sum2 to i64

ST_3: message_addr_1 (48)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:14  %message_addr_1 = getelementptr [64 x i8]* %message, i64 0, i64 %sum2_cast

ST_3: message_load_1 (49)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:46
:15  %message_load_1 = load i8* %message_addr_1, align 1

ST_3: p_sum5 (50)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46 (grouped into LUT with out node sum4)
:16  %p_sum5 = or i6 %tmp_8, 1

ST_3: p_sum5_cast (51)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46 (grouped into LUT with out node sum4)
:17  %p_sum5_cast = zext i6 %p_sum5 to i7

ST_3: sum4 (52)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:46 (out node of the LUT)
:18  %sum4 = add i7 %tmp_1_read, %p_sum5_cast

ST_3: sum6 (56)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:46
:22  %sum6 = add i7 %tmp_1_read, %sub_block_0_sum_cast

ST_3: StgValue_66 (66)  [1/1] 0.76ns  loc: sha256_mem/src/sha256_mem.cpp:48
.preheader13.preheader:0  br label %.preheader13


 <State 4>: 0.79ns
ST_4: message_load (43)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:46
:9  %message_load = load i8* %message_addr, align 1

ST_4: message_load_1 (49)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:46
:15  %message_load_1 = load i8* %message_addr_1, align 1

ST_4: sum4_cast (53)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:19  %sum4_cast = zext i7 %sum4 to i64

ST_4: message_addr_2 (54)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:20  %message_addr_2 = getelementptr [64 x i8]* %message, i64 0, i64 %sum4_cast

ST_4: message_load_2 (55)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:46
:21  %message_load_2 = load i8* %message_addr_2, align 1

ST_4: sum6_cast (57)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:23  %sum6_cast = zext i7 %sum6 to i64

ST_4: message_addr_3 (58)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:24  %message_addr_3 = getelementptr [64 x i8]* %message, i64 0, i64 %sum6_cast

ST_4: message_load_3 (59)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:46
:25  %message_load_3 = load i8* %message_addr_3, align 1


 <State 5>: 2.14ns
ST_5: message_load_2 (55)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:46
:21  %message_load_2 = load i8* %message_addr_2, align 1

ST_5: message_load_3 (59)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:46
:25  %message_load_3 = load i8* %message_addr_3, align 1

ST_5: tmp_2 (60)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:26  %tmp_2 = call i32 @_ssdm_op_BitConcatenate.i32.i8.i8.i8.i8(i8 %message_load_3, i8 %message_load_2, i8 %message_load_1, i8 %message_load)

ST_5: tmp_3 (61)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:27  %tmp_3 = zext i5 %j to i64

ST_5: w_addr (62)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:46
:28  %w_addr = getelementptr inbounds [64 x i32]* %w, i64 0, i64 %tmp_3

ST_5: StgValue_80 (63)  [1/1] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:46
:29  store i32 %tmp_2, i32* %w_addr, align 4

ST_5: StgValue_81 (64)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:45
:30  br label %.preheader3


 <State 6>: 2.63ns
ST_6: j_1 (68)  [1/1] 0.00ns
.preheader13:0  %j_1 = phi i7 [ %j_6, %2 ], [ 16, %.preheader13.preheader ]

ST_6: exitcond9 (69)  [1/1] 0.66ns  loc: sha256_mem/src/sha256_mem.cpp:48
.preheader13:1  %exitcond9 = icmp eq i7 %j_1, -64

ST_6: empty_15 (70)  [1/1] 0.00ns
.preheader13:2  %empty_15 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 48, i64 48, i64 48)

ST_6: StgValue_85 (71)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:48
.preheader13:3  br i1 %exitcond9, label %.preheader12.preheader, label %2

ST_6: tmp_4 (73)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:49
:0  %tmp_4 = add i7 -2, %j_1

ST_6: tmp_5 (74)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:1  %tmp_5 = zext i7 %tmp_4 to i64

ST_6: w_addr_1 (75)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:2  %w_addr_1 = getelementptr inbounds [64 x i32]* %w, i64 0, i64 %tmp_5

ST_6: w_load (76)  [2/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:49
:3  %w_load = load i32* %w_addr_1, align 4

ST_6: tmp_13 (87)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:49
:14  %tmp_13 = add i7 -7, %j_1

ST_6: tmp_14 (88)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:15  %tmp_14 = zext i7 %tmp_13 to i64

ST_6: w_addr_2 (89)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:16  %w_addr_2 = getelementptr inbounds [64 x i32]* %w, i64 0, i64 %tmp_14

ST_6: w_load_1 (90)  [2/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:49
:17  %w_load_1 = load i32* %w_addr_2, align 4

ST_6: StgValue_94 (118)  [1/1] 0.76ns  loc: sha256_mem/src/sha256_mem.cpp:51
.preheader12.preheader:0  br label %.preheader12


 <State 7>: 2.63ns
ST_7: w_load (76)  [1/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:49
:3  %w_load = load i32* %w_addr_1, align 4

ST_7: w_load_1 (90)  [1/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:49
:17  %w_load_1 = load i32* %w_addr_2, align 4

ST_7: tmp_15 (91)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:49
:18  %tmp_15 = add i7 -15, %j_1

ST_7: tmp_16 (92)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:19  %tmp_16 = zext i7 %tmp_15 to i64

ST_7: w_addr_3 (93)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:20  %w_addr_3 = getelementptr inbounds [64 x i32]* %w, i64 0, i64 %tmp_16

ST_7: w_load_2 (94)  [2/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:49
:21  %w_load_2 = load i32* %w_addr_3, align 4

ST_7: tmp_26 (105)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:49
:32  %tmp_26 = add i7 -16, %j_1

ST_7: tmp_27 (106)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:33  %tmp_27 = zext i7 %tmp_26 to i64

ST_7: w_addr_4 (107)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:34  %w_addr_4 = getelementptr inbounds [64 x i32]* %w, i64 0, i64 %tmp_27

ST_7: w_load_3 (108)  [2/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:49
:35  %w_load_3 = load i32* %w_addr_4, align 4


 <State 8>: 4.73ns
ST_8: tmp_6 (77)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:4  %tmp_6 = call i15 @_ssdm_op_PartSelect.i15.i32.i32.i32(i32 %w_load, i32 17, i32 31)

ST_8: tmp_23 (78)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:5  %tmp_23 = trunc i32 %w_load to i17

ST_8: tmp_9 (79)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:6  %tmp_9 = call i32 @_ssdm_op_BitConcatenate.i32.i17.i15(i17 %tmp_23, i15 %tmp_6)

ST_8: tmp_s (80)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:7  %tmp_s = call i13 @_ssdm_op_PartSelect.i13.i32.i32.i32(i32 %w_load, i32 19, i32 31)

ST_8: tmp_36 (81)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:8  %tmp_36 = trunc i32 %w_load to i19

ST_8: tmp_7 (82)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:9  %tmp_7 = call i32 @_ssdm_op_BitConcatenate.i32.i19.i13(i19 %tmp_36, i13 %tmp_s)

ST_8: tmp_10 (83)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:10  %tmp_10 = call i22 @_ssdm_op_PartSelect.i22.i32.i32.i32(i32 %w_load, i32 10, i32 31)

ST_8: tmp_11 (84)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:11  %tmp_11 = zext i22 %tmp_10 to i32

ST_8: tmp1 (85)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:12  %tmp1 = xor i32 %tmp_11, %tmp_7

ST_8: tmp_12 (86)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:13  %tmp_12 = xor i32 %tmp1, %tmp_9

ST_8: w_load_2 (94)  [1/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:49
:21  %w_load_2 = load i32* %w_addr_3, align 4

ST_8: tmp_17 (95)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:22  %tmp_17 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %w_load_2, i32 7, i32 31)

ST_8: tmp_39 (96)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:23  %tmp_39 = trunc i32 %w_load_2 to i7

ST_8: tmp_18 (97)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:24  %tmp_18 = call i32 @_ssdm_op_BitConcatenate.i32.i7.i25(i7 %tmp_39, i25 %tmp_17)

ST_8: tmp_19 (98)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:25  %tmp_19 = call i14 @_ssdm_op_PartSelect.i14.i32.i32.i32(i32 %w_load_2, i32 18, i32 31)

ST_8: tmp_51 (99)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:26  %tmp_51 = trunc i32 %w_load_2 to i18

ST_8: tmp_21 (100)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:27  %tmp_21 = call i32 @_ssdm_op_BitConcatenate.i32.i18.i14(i18 %tmp_51, i14 %tmp_19)

ST_8: tmp_22 (101)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:28  %tmp_22 = call i29 @_ssdm_op_PartSelect.i29.i32.i32.i32(i32 %w_load_2, i32 3, i32 31)

ST_8: tmp_24 (102)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:29  %tmp_24 = zext i29 %tmp_22 to i32

ST_8: tmp2 (103)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:30  %tmp2 = xor i32 %tmp_24, %tmp_21

ST_8: tmp_25 (104)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49 (grouped into LUT with out node tmp4)
:31  %tmp_25 = xor i32 %tmp2, %tmp_18

ST_8: w_load_3 (108)  [1/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:49
:35  %w_load_3 = load i32* %w_addr_4, align 4

ST_8: tmp3 (109)  [1/1] 0.44ns  loc: sha256_mem/src/sha256_mem.cpp:49
:36  %tmp3 = add i32 %w_load_1, %w_load_3

ST_8: tmp4 (110)  [1/1] 1.58ns  loc: sha256_mem/src/sha256_mem.cpp:49 (out node of the LUT)
:37  %tmp4 = add i32 %tmp_12, %tmp_25

ST_8: tmp_28 (111)  [1/1] 0.44ns  loc: sha256_mem/src/sha256_mem.cpp:49
:38  %tmp_28 = add i32 %tmp4, %tmp3

ST_8: tmp_29 (112)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:39  %tmp_29 = zext i7 %j_1 to i64

ST_8: w_addr_5 (113)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:49
:40  %w_addr_5 = getelementptr inbounds [64 x i32]* %w, i64 0, i64 %tmp_29

ST_8: StgValue_132 (114)  [1/1] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:49
:41  store i32 %tmp_28, i32* %w_addr_5, align 4

ST_8: j_6 (115)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:48
:42  %j_6 = add i7 1, %j_1

ST_8: StgValue_134 (116)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:48
:43  br label %.preheader13


 <State 9>: 1.25ns
ST_9: j_2 (120)  [1/1] 0.00ns
.preheader12:0  %j_2 = phi i4 [ %j_7, %3 ], [ 0, %.preheader12.preheader ]

ST_9: exitcond8 (121)  [1/1] 0.52ns  loc: sha256_mem/src/sha256_mem.cpp:51
.preheader12:1  %exitcond8 = icmp eq i4 %j_2, -8

ST_9: empty_16 (122)  [1/1] 0.00ns
.preheader12:2  %empty_16 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_9: j_7 (123)  [1/1] 1.25ns  loc: sha256_mem/src/sha256_mem.cpp:51
.preheader12:3  %j_7 = add i4 %j_2, 1

ST_9: StgValue_139 (124)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:51
.preheader12:4  br i1 %exitcond8, label %.preheader11.preheader, label %3

ST_9: tmp_30 (126)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:52
:0  %tmp_30 = zext i4 %j_2 to i64

ST_9: SHA256_m_h_addr (127)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:52
:1  %SHA256_m_h_addr = getelementptr [8 x i32]* %SHA256_m_h, i64 0, i64 %tmp_30

ST_9: SHA256_m_h_load (128)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:52
:2  %SHA256_m_h_load = load i32* %SHA256_m_h_addr, align 4

ST_9: StgValue_143 (133)  [1/1] 0.76ns  loc: sha256_mem/src/sha256_mem.cpp:54
.preheader11.preheader:0  br label %.preheader11


 <State 10>: 1.58ns
ST_10: SHA256_m_h_load (128)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:52
:2  %SHA256_m_h_load = load i32* %SHA256_m_h_addr, align 4

ST_10: wv_addr_8 (129)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:52
:3  %wv_addr_8 = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 %tmp_30

ST_10: StgValue_146 (130)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:52
:4  store i32 %SHA256_m_h_load, i32* %wv_addr_8, align 4

ST_10: StgValue_147 (131)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:51
:5  br label %.preheader12


 <State 11>: 1.27ns
ST_11: j_3 (135)  [1/1] 0.00ns
.preheader11:0  %j_3 = phi i7 [ %j_8, %4 ], [ 0, %.preheader11.preheader ]

ST_11: exitcond7 (136)  [1/1] 0.66ns  loc: sha256_mem/src/sha256_mem.cpp:54
.preheader11:1  %exitcond7 = icmp eq i7 %j_3, -64

ST_11: empty_17 (137)  [1/1] 0.00ns
.preheader11:2  %empty_17 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)

ST_11: j_8 (138)  [1/1] 1.27ns  loc: sha256_mem/src/sha256_mem.cpp:54
.preheader11:3  %j_8 = add i7 %j_3, 1

ST_11: StgValue_152 (139)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:54
.preheader11:4  br i1 %exitcond7, label %.preheader.preheader, label %4

ST_11: wv_load (141)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:55
:0  %wv_load = load i32* %wv_addr, align 4

ST_11: wv_load_1 (142)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:55
:1  %wv_load_1 = load i32* %wv_addr_1, align 16

ST_11: StgValue_155 (201)  [1/1] 0.76ns  loc: sha256_mem/src/sha256_mem.cpp:67
.preheader.preheader:0  br label %.preheader


 <State 12>: 1.35ns
ST_12: wv_load (141)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:55
:0  %wv_load = load i32* %wv_addr, align 4

ST_12: wv_load_1 (142)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:55
:1  %wv_load_1 = load i32* %wv_addr_1, align 16

ST_12: tmp_31 (143)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:2  %tmp_31 = call i26 @_ssdm_op_PartSelect.i26.i32.i32.i32(i32 %wv_load_1, i32 6, i32 31)

ST_12: tmp_54 (144)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:3  %tmp_54 = trunc i32 %wv_load_1 to i6

ST_12: tmp_32 (145)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:4  %tmp_32 = call i32 @_ssdm_op_BitConcatenate.i32.i6.i26(i6 %tmp_54, i26 %tmp_31)

ST_12: tmp_33 (146)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:5  %tmp_33 = call i21 @_ssdm_op_PartSelect.i21.i32.i32.i32(i32 %wv_load_1, i32 11, i32 31)

ST_12: tmp_64 (147)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:6  %tmp_64 = trunc i32 %wv_load_1 to i11

ST_12: tmp_34 (148)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:7  %tmp_34 = call i32 @_ssdm_op_BitConcatenate.i32.i11.i21(i11 %tmp_64, i21 %tmp_33)

ST_12: tmp_35 (149)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:8  %tmp_35 = call i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32 %wv_load_1, i32 25, i32 31)

ST_12: tmp_65 (150)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:9  %tmp_65 = trunc i32 %wv_load_1 to i25

ST_12: tmp_37 (151)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:10  %tmp_37 = call i32 @_ssdm_op_BitConcatenate.i32.i25.i7(i25 %tmp_65, i7 %tmp_35)

ST_12: tmp5 (152)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_38)
:11  %tmp5 = xor i32 %tmp_37, %tmp_34

ST_12: tmp_38 (153)  [1/1] 0.06ns  loc: sha256_mem/src/sha256_mem.cpp:55 (out node of the LUT)
:12  %tmp_38 = xor i32 %tmp5, %tmp_32

ST_12: wv_load_2 (154)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:55
:13  %wv_load_2 = load i32* %wv_addr_2, align 4

ST_12: wv_load_3 (157)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:55
:16  %wv_load_3 = load i32* %wv_addr_3, align 8

ST_12: tmp_44 (160)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55
:19  %tmp_44 = zext i7 %j_3 to i64

ST_12: SHA256_sha256_k_add (161)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55
:20  %SHA256_sha256_k_add = getelementptr inbounds [64 x i32]* @SHA256_sha256_k, i64 0, i64 %tmp_44

ST_12: SHA256_sha256_k_loa (162)  [2/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:55
:21  %SHA256_sha256_k_loa = load i32* %SHA256_sha256_k_add, align 4

ST_12: w_addr_6 (163)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55
:22  %w_addr_6 = getelementptr inbounds [64 x i32]* %w, i64 0, i64 %tmp_44

ST_12: w_load_4 (164)  [2/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:55
:23  %w_load_4 = load i32* %w_addr_6, align 4


 <State 13>: 2.24ns
ST_13: wv_load_2 (154)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:55
:13  %wv_load_2 = load i32* %wv_addr_2, align 4

ST_13: tmp_40 (155)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_43)
:14  %tmp_40 = and i32 %wv_load_2, %wv_load_1

ST_13: tmp_41 (156)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_43)
:15  %tmp_41 = xor i32 %wv_load_1, -1

ST_13: wv_load_3 (157)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:55
:16  %wv_load_3 = load i32* %wv_addr_3, align 8

ST_13: tmp_42 (158)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:55 (grouped into LUT with out node tmp_43)
:17  %tmp_42 = and i32 %wv_load_3, %tmp_41

ST_13: tmp_43 (159)  [1/1] 0.06ns  loc: sha256_mem/src/sha256_mem.cpp:55 (out node of the LUT)
:18  %tmp_43 = xor i32 %tmp_42, %tmp_40

ST_13: SHA256_sha256_k_loa (162)  [1/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:55
:21  %SHA256_sha256_k_loa = load i32* %SHA256_sha256_k_add, align 4

ST_13: w_load_4 (164)  [1/2] 1.35ns  loc: sha256_mem/src/sha256_mem.cpp:55
:23  %w_load_4 = load i32* %w_addr_6, align 4

ST_13: tmp8 (165)  [1/1] 0.44ns  loc: sha256_mem/src/sha256_mem.cpp:55
:24  %tmp8 = add i32 %SHA256_sha256_k_loa, %wv_load

ST_13: tmp10 (166)  [1/1] 0.44ns  loc: sha256_mem/src/sha256_mem.cpp:55
:25  %tmp10 = add i32 %tmp_38, %tmp_43

ST_13: tmp9 (167)  [1/1] 0.44ns  loc: sha256_mem/src/sha256_mem.cpp:55
:26  %tmp9 = add i32 %tmp10, %w_load_4

ST_13: t1 (168)  [1/1] 0.44ns  loc: sha256_mem/src/sha256_mem.cpp:55
:27  %t1 = add i32 %tmp9, %tmp8

ST_13: wv_load_4 (169)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:57
:28  %wv_load_4 = load i32* %wv_addr_4, align 16

ST_13: wv_load_5 (181)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:57
:40  %wv_load_5 = load i32* %wv_addr_5, align 4


 <State 14>: 0.85ns
ST_14: wv_load_4 (169)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:57
:28  %wv_load_4 = load i32* %wv_addr_4, align 16

ST_14: tmp_45 (170)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:29  %tmp_45 = call i30 @_ssdm_op_PartSelect.i30.i32.i32.i32(i32 %wv_load_4, i32 2, i32 31)

ST_14: tmp_66 (171)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:30  %tmp_66 = trunc i32 %wv_load_4 to i2

ST_14: tmp_46 (172)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:31  %tmp_46 = call i32 @_ssdm_op_BitConcatenate.i32.i2.i30(i2 %tmp_66, i30 %tmp_45)

ST_14: tmp_47 (173)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:32  %tmp_47 = call i19 @_ssdm_op_PartSelect.i19.i32.i32.i32(i32 %wv_load_4, i32 13, i32 31)

ST_14: tmp_67 (174)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:33  %tmp_67 = trunc i32 %wv_load_4 to i13

ST_14: tmp_48 (175)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:34  %tmp_48 = call i32 @_ssdm_op_BitConcatenate.i32.i13.i19(i13 %tmp_67, i19 %tmp_47)

ST_14: tmp_49 (176)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:35  %tmp_49 = call i10 @_ssdm_op_PartSelect.i10.i32.i32.i32(i32 %wv_load_4, i32 22, i32 31)

ST_14: tmp_68 (177)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:36  %tmp_68 = trunc i32 %wv_load_4 to i22

ST_14: tmp_50 (178)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:37  %tmp_50 = call i32 @_ssdm_op_BitConcatenate.i32.i22.i10(i22 %tmp_68, i10 %tmp_49)

ST_14: tmp11 (179)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_52)
:38  %tmp11 = xor i32 %tmp_50, %tmp_48

ST_14: tmp_52 (180)  [1/1] 0.06ns  loc: sha256_mem/src/sha256_mem.cpp:57 (out node of the LUT)
:39  %tmp_52 = xor i32 %tmp11, %tmp_46

ST_14: wv_load_5 (181)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:57
:40  %wv_load_5 = load i32* %wv_addr_5, align 4

ST_14: wv_load_6 (182)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:57
:41  %wv_load_6 = load i32* %wv_addr_6, align 8

ST_14: wv_load_7 (190)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:61
:49  %wv_load_7 = load i32* %wv_addr_7, align 4


 <State 15>: 2.37ns
ST_15: wv_load_6 (182)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:57
:41  %wv_load_6 = load i32* %wv_addr_6, align 8

ST_15: tmp_53 (183)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_57)
:42  %tmp_53 = and i32 %wv_load_6, %wv_load_5

ST_15: tmp_55 (184)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_57)
:43  %tmp_55 = xor i32 %wv_load_6, %wv_load_5

ST_15: tmp_56 (185)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:57 (grouped into LUT with out node tmp_57)
:44  %tmp_56 = and i32 %wv_load_4, %tmp_55

ST_15: tmp_57 (186)  [1/1] 0.06ns  loc: sha256_mem/src/sha256_mem.cpp:57 (out node of the LUT)
:45  %tmp_57 = xor i32 %tmp_56, %tmp_53

ST_15: StgValue_210 (187)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:58
:46  store i32 %wv_load_3, i32* %wv_addr, align 4

ST_15: StgValue_211 (188)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:59
:47  store i32 %wv_load_2, i32* %wv_addr_3, align 8

ST_15: wv_load_7 (190)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:61
:49  %wv_load_7 = load i32* %wv_addr_7, align 4

ST_15: tmp_58 (191)  [1/1] 1.58ns  loc: sha256_mem/src/sha256_mem.cpp:61
:50  %tmp_58 = add i32 %wv_load_7, %t1

ST_15: tmp12 (196)  [1/1] 0.44ns  loc: sha256_mem/src/sha256_mem.cpp:65
:55  %tmp12 = add i32 %tmp_52, %tmp_57

ST_15: tmp_59 (197)  [1/1] 0.44ns  loc: sha256_mem/src/sha256_mem.cpp:65
:56  %tmp_59 = add i32 %tmp12, %t1


 <State 16>: 0.79ns
ST_16: StgValue_216 (189)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:60
:48  store i32 %wv_load_1, i32* %wv_addr_2, align 4

ST_16: StgValue_217 (192)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:61
:51  store i32 %tmp_58, i32* %wv_addr_1, align 16


 <State 17>: 0.79ns
ST_17: StgValue_218 (193)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:62
:52  store i32 %wv_load_6, i32* %wv_addr_7, align 4

ST_17: StgValue_219 (194)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:63
:53  store i32 %wv_load_5, i32* %wv_addr_6, align 8


 <State 18>: 0.79ns
ST_18: StgValue_220 (195)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:64
:54  store i32 %wv_load_4, i32* %wv_addr_5, align 4

ST_18: StgValue_221 (198)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:65
:57  store i32 %tmp_59, i32* %wv_addr_4, align 16

ST_18: StgValue_222 (199)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:54
:58  br label %.preheader11


 <State 19>: 1.25ns
ST_19: j_4 (203)  [1/1] 0.00ns
.preheader:0  %j_4 = phi i4 [ %j_9, %5 ], [ 0, %.preheader.preheader ]

ST_19: exitcond (204)  [1/1] 0.52ns  loc: sha256_mem/src/sha256_mem.cpp:67
.preheader:1  %exitcond = icmp eq i4 %j_4, -8

ST_19: empty_18 (205)  [1/1] 0.00ns
.preheader:2  %empty_18 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)

ST_19: j_9 (206)  [1/1] 1.25ns  loc: sha256_mem/src/sha256_mem.cpp:67
.preheader:3  %j_9 = add i4 %j_4, 1

ST_19: StgValue_227 (207)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:67
.preheader:4  br i1 %exitcond, label %.loopexit.loopexit, label %5

ST_19: tmp_60 (209)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:68
:0  %tmp_60 = zext i4 %j_4 to i64

ST_19: wv_addr_9 (210)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:68
:1  %wv_addr_9 = getelementptr inbounds [8 x i32]* %wv, i64 0, i64 %tmp_60

ST_19: wv_load_8 (211)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:68
:2  %wv_load_8 = load i32* %wv_addr_9, align 4

ST_19: SHA256_m_h_addr_1 (212)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:68
:3  %SHA256_m_h_addr_1 = getelementptr [8 x i32]* %SHA256_m_h, i64 0, i64 %tmp_60

ST_19: SHA256_m_h_load_1 (213)  [2/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:68
:4  %SHA256_m_h_load_1 = load i32* %SHA256_m_h_addr_1, align 4

ST_19: StgValue_233 (218)  [1/1] 0.00ns
.loopexit.loopexit:0  br label %.loopexit


 <State 20>: 3.16ns
ST_20: wv_load_8 (211)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:68
:2  %wv_load_8 = load i32* %wv_addr_9, align 4

ST_20: SHA256_m_h_load_1 (213)  [1/2] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:68
:4  %SHA256_m_h_load_1 = load i32* %SHA256_m_h_addr_1, align 4

ST_20: tmp_61 (214)  [1/1] 1.58ns  loc: sha256_mem/src/sha256_mem.cpp:68
:5  %tmp_61 = add i32 %wv_load_8, %SHA256_m_h_load_1

ST_20: StgValue_237 (215)  [1/1] 0.79ns  loc: sha256_mem/src/sha256_mem.cpp:68
:6  store i32 %tmp_61, i32* %SHA256_m_h_addr_1, align 4

ST_20: StgValue_238 (216)  [1/1] 0.00ns  loc: sha256_mem/src/sha256_mem.cpp:67
:7  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 0.755ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') [20]  (0.755 ns)

 <State 2>: 0.755ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('j') with incoming values : ('j', sha256_mem/src/sha256_mem.cpp:45) [28]  (0.755 ns)

 <State 3>: 2.06ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', sha256_mem/src/sha256_mem.cpp:45) [28]  (0 ns)
	'or' operation ('p_sum3', sha256_mem/src/sha256_mem.cpp:46) [44]  (0 ns)
	'add' operation ('sum2', sha256_mem/src/sha256_mem.cpp:46) [46]  (1.27 ns)
	'getelementptr' operation ('message_addr_1', sha256_mem/src/sha256_mem.cpp:46) [48]  (0 ns)
	'load' operation ('message_load_1', sha256_mem/src/sha256_mem.cpp:46) on array 'message' [49]  (0.79 ns)

 <State 4>: 0.79ns
The critical path consists of the following:
	'load' operation ('message_load', sha256_mem/src/sha256_mem.cpp:46) on array 'message' [43]  (0.79 ns)

 <State 5>: 2.14ns
The critical path consists of the following:
	'load' operation ('message_load_2', sha256_mem/src/sha256_mem.cpp:46) on array 'message' [55]  (0.79 ns)
	'store' operation (sha256_mem/src/sha256_mem.cpp:46) of variable 'tmp_2', sha256_mem/src/sha256_mem.cpp:46 on array 'w', sha256_mem/src/sha256_mem.cpp:37 [63]  (1.35 ns)

 <State 6>: 2.63ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', sha256_mem/src/sha256_mem.cpp:48) [68]  (0 ns)
	'add' operation ('tmp_4', sha256_mem/src/sha256_mem.cpp:49) [73]  (1.27 ns)
	'getelementptr' operation ('w_addr_1', sha256_mem/src/sha256_mem.cpp:49) [75]  (0 ns)
	'load' operation ('w_load', sha256_mem/src/sha256_mem.cpp:49) on array 'w', sha256_mem/src/sha256_mem.cpp:37 [76]  (1.35 ns)

 <State 7>: 2.63ns
The critical path consists of the following:
	'add' operation ('tmp_15', sha256_mem/src/sha256_mem.cpp:49) [91]  (1.27 ns)
	'getelementptr' operation ('w_addr_3', sha256_mem/src/sha256_mem.cpp:49) [93]  (0 ns)
	'load' operation ('w_load_2', sha256_mem/src/sha256_mem.cpp:49) on array 'w', sha256_mem/src/sha256_mem.cpp:37 [94]  (1.35 ns)

 <State 8>: 4.73ns
The critical path consists of the following:
	'load' operation ('w_load_2', sha256_mem/src/sha256_mem.cpp:49) on array 'w', sha256_mem/src/sha256_mem.cpp:37 [94]  (1.35 ns)
	'xor' operation ('tmp_25', sha256_mem/src/sha256_mem.cpp:49) [104]  (0 ns)
	'add' operation ('tmp4', sha256_mem/src/sha256_mem.cpp:49) [110]  (1.58 ns)
	'add' operation ('tmp_28', sha256_mem/src/sha256_mem.cpp:49) [111]  (0.445 ns)
	'store' operation (sha256_mem/src/sha256_mem.cpp:49) of variable 'tmp_28', sha256_mem/src/sha256_mem.cpp:49 on array 'w', sha256_mem/src/sha256_mem.cpp:37 [114]  (1.35 ns)

 <State 9>: 1.25ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', sha256_mem/src/sha256_mem.cpp:51) [120]  (0 ns)
	'add' operation ('j', sha256_mem/src/sha256_mem.cpp:51) [123]  (1.25 ns)

 <State 10>: 1.58ns
The critical path consists of the following:
	'load' operation ('SHA256_m_h_load', sha256_mem/src/sha256_mem.cpp:52) on array 'SHA256_m_h' [128]  (0.79 ns)
	'store' operation (sha256_mem/src/sha256_mem.cpp:52) of variable 'SHA256_m_h_load', sha256_mem/src/sha256_mem.cpp:52 on array 'wv', sha256_mem/src/sha256_mem.cpp:38 [130]  (0.79 ns)

 <State 11>: 1.27ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', sha256_mem/src/sha256_mem.cpp:54) [135]  (0 ns)
	'add' operation ('j', sha256_mem/src/sha256_mem.cpp:54) [138]  (1.27 ns)

 <State 12>: 1.35ns
The critical path consists of the following:
	'getelementptr' operation ('SHA256_sha256_k_add', sha256_mem/src/sha256_mem.cpp:55) [161]  (0 ns)
	'load' operation ('SHA256_sha256_k_loa', sha256_mem/src/sha256_mem.cpp:55) on array 'SHA256_sha256_k' [162]  (1.35 ns)

 <State 13>: 2.24ns
The critical path consists of the following:
	'load' operation ('SHA256_sha256_k_loa', sha256_mem/src/sha256_mem.cpp:55) on array 'SHA256_sha256_k' [162]  (1.35 ns)
	'add' operation ('tmp8', sha256_mem/src/sha256_mem.cpp:55) [165]  (0.445 ns)
	'add' operation ('t1', sha256_mem/src/sha256_mem.cpp:55) [168]  (0.445 ns)

 <State 14>: 0.854ns
The critical path consists of the following:
	'load' operation ('wv_load_4', sha256_mem/src/sha256_mem.cpp:57) on array 'wv', sha256_mem/src/sha256_mem.cpp:38 [169]  (0.79 ns)
	'xor' operation ('tmp_52', sha256_mem/src/sha256_mem.cpp:57) [180]  (0.064 ns)

 <State 15>: 2.37ns
The critical path consists of the following:
	'load' operation ('wv_load_7', sha256_mem/src/sha256_mem.cpp:61) on array 'wv', sha256_mem/src/sha256_mem.cpp:38 [190]  (0.79 ns)
	'add' operation ('tmp_58', sha256_mem/src/sha256_mem.cpp:61) [191]  (1.58 ns)

 <State 16>: 0.79ns
The critical path consists of the following:
	'store' operation (sha256_mem/src/sha256_mem.cpp:60) of variable 'wv_load_1', sha256_mem/src/sha256_mem.cpp:55 on array 'wv', sha256_mem/src/sha256_mem.cpp:38 [189]  (0.79 ns)

 <State 17>: 0.79ns
The critical path consists of the following:
	'store' operation (sha256_mem/src/sha256_mem.cpp:62) of variable 'wv_load_6', sha256_mem/src/sha256_mem.cpp:57 on array 'wv', sha256_mem/src/sha256_mem.cpp:38 [193]  (0.79 ns)

 <State 18>: 0.79ns
The critical path consists of the following:
	'store' operation (sha256_mem/src/sha256_mem.cpp:64) of variable 'wv_load_4', sha256_mem/src/sha256_mem.cpp:57 on array 'wv', sha256_mem/src/sha256_mem.cpp:38 [195]  (0.79 ns)

 <State 19>: 1.25ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', sha256_mem/src/sha256_mem.cpp:67) [203]  (0 ns)
	'add' operation ('j', sha256_mem/src/sha256_mem.cpp:67) [206]  (1.25 ns)

 <State 20>: 3.16ns
The critical path consists of the following:
	'load' operation ('wv_load_8', sha256_mem/src/sha256_mem.cpp:68) on array 'wv', sha256_mem/src/sha256_mem.cpp:38 [211]  (0.79 ns)
	'add' operation ('tmp_61', sha256_mem/src/sha256_mem.cpp:68) [214]  (1.58 ns)
	'store' operation (sha256_mem/src/sha256_mem.cpp:68) of variable 'tmp_61', sha256_mem/src/sha256_mem.cpp:68 on array 'SHA256_m_h' [215]  (0.79 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
