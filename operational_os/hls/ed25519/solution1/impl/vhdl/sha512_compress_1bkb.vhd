-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity sha512_compress_1bkb_rom is 
    generic(
             dwidth     : integer := 64; 
             awidth     : integer := 7; 
             mem_size    : integer := 80
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of sha512_compress_1bkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0100001010001010001011111001100011010111001010001010111000100010", 
    1 => "0111000100110111010001001001000100100011111011110110010111001101", 
    2 => "1011010111000000111110111100111111101100010011010011101100101111", 
    3 => "1110100110110101110110111010010110000001100010011101101110111100", 
    4 => "0011100101010110110000100101101111110011010010001011010100111000", 
    5 => "0101100111110001000100011111000110110110000001011101000000011001", 
    6 => "1001001000111111100000101010010010101111000110010100111110011011", 
    7 => "1010101100011100010111101101010111011010011011011000000100011000", 
    8 => "1101100000000111101010101001100010100011000000110000001001000010", 
    9 => "0001001010000011010110110000000101000101011100000110111110111110", 
    10 => "0010010000110001100001011011111001001110111001001011001010001100", 
    11 => "0101010100001100011111011100001111010101111111111011010011100010", 
    12 => "0111001010111110010111010111010011110010011110111000100101101111", 
    13 => "1000000011011110101100011111111000111011000101101001011010110001", 
    14 => "1001101111011100000001101010011100100101110001110001001000110101", 
    15 => "1100000110011011111100010111010011001111011010010010011010010100", 
    16 => "1110010010011011011010011100000110011110111100010100101011010010", 
    17 => "1110111110111110010001111000011000111000010011110010010111100011", 
    18 => "0000111111000001100111011100011010001011100011001101010110110101", 
    19 => "0010010000001100101000011100110001110111101011001001110001100101", 
    20 => "0010110111101001001011000110111101011001001010110000001001110101", 
    21 => "0100101001110100100001001010101001101110101001101110010010000011", 
    22 => "0101110010110000101010011101110010111101010000011111101111010100", 
    23 => "0111011011111001100010001101101010000011000100010101001110110101", 
    24 => "1001100000111110010100010101001011101110011001101101111110101011", 
    25 => "1010100000110001110001100110110100101101101101000011001000010000", 
    26 => "1011000000000011001001111100100010011000111110110010000100111111", 
    27 => "1011111101011001011111111100011110111110111011110000111011100100", 
    28 => "1100011011100000000010111111001100111101101010001000111111000010", 
    29 => "1101010110100111100100010100011110010011000010101010011100100101", 
    30 => "0000011011001010011000110101000111100000000000111000001001101111", 
    31 => "0001010000101001001010010110011100001010000011100110111001110000", 
    32 => "0010011110110111000010101000010101000110110100100010111111111100", 
    33 => "0010111000011011001000010011100001011100001001101100100100100110", 
    34 => "0100110100101100011011011111110001011010110001000010101011101101", 
    35 => "0101001100111000000011010001001110011101100101011011001111011111", 
    36 => "0110010100001010011100110101010010001011101011110110001111011110", 
    37 => "0111011001101010000010101011101100111100011101111011001010101000", 
    38 => "1000000111000010110010010010111001000111111011011010111011100110", 
    39 => "1001001001110010001011001000010100010100100000100011010100111011", 
    40 => "1010001010111111111010001010000101001100111100010000001101100100", 
    41 => "1010100000011010011001100100101110111100010000100011000000000001", 
    42 => "1100001001001011100010110111000011010000111110001001011110010001", 
    43 => "1100011101101100010100011010001100000110010101001011111000110000", 
    44 => "1101000110010010111010000001100111010110111011110101001000011000", 
    45 => "1101011010011001000001100010010001010101011001011010100100010000", 
    46 => "1111010000001110001101011000010101010111011100010010000000101010", 
    47 => "0001000001101010101000000111000000110010101110111101000110111000", 
    48 => "0001100110100100110000010001011010111000110100101101000011001000", 
    49 => "0001111000110111011011000000100001010001010000011010101101010011", 
    50 => "0010011101001000011101110100110011011111100011101110101110011001", 
    51 => "0011010010110000101111001011010111100001100110110100100010101000", 
    52 => "0011100100011100000011001011001111000101110010010101101001100011", 
    53 => "0100111011011000101010100100101011100011010000011000101011001011", 
    54 => "0101101110011100110010100100111101110111011000111110001101110011", 
    55 => "0110100000101110011011111111001111010110101100101011100010100011", 
    56 => "0111010010001111100000101110111001011101111011111011001011111100", 
    57 => "0111100010100101011000110110111101000011000101110010111101100000", 
    58 => "1000010011001000011110000001010010100001111100001010101101110010", 
    59 => "1000110011000111000000100000100000011010011001000011100111101100", 
    60 => "1001000010111110111111111111101000100011011000110001111000101000", 
    61 => "1010010001010000011011001110101111011110100000101011110111101001", 
    62 => "1011111011111001101000111111011110110010110001100111100100010101", 
    63 => "1100011001110001011110001111001011100011011100100101001100101011", 
    64 => "1100101000100111001111101100111011101010001001100110000110011100", 
    65 => "1101000110000110101110001100011100100001110000001100001000000111", 
    66 => "1110101011011010011111011101011011001101111000001110101100011110", 
    67 => "1111010101111101010011110111111111101110011011101101000101111000", 
    68 => "0000011011110000011001111010101001110010000101110110111110111010", 
    69 => "0000101001100011011111011100010110100010110010001001100010100110", 
    70 => "0001000100111111100110000000010010111110111110010000110110101110", 
    71 => "0001101101110001000010110011010100010011000111000100011100011011", 
    72 => "0010100011011011011101111111010100100011000001000111110110000100", 
    73 => "0011001011001010101010110111101101000000110001110010010010010011", 
    74 => "0011110010011110101111100000101000010101110010011011111010111100", 
    75 => "0100001100011101011001111100010010011100000100000000110101001100", 
    76 => "0100110011000101110101001011111011001011001111100100001010110110", 
    77 => "0101100101111111001010011001110011111100011001010111111000101010", 
    78 => "0101111111001011011011111010101100111010110101101111101011101100", 
    79 => "0110110001000100000110011000110001001010010001110101100000010111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity sha512_compress_1bkb is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 80;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of sha512_compress_1bkb is
    component sha512_compress_1bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    sha512_compress_1bkb_rom_U :  component sha512_compress_1bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


