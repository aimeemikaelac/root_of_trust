// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transform_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        SHA256_m_h_address0,
        SHA256_m_h_ce0,
        SHA256_m_h_we0,
        SHA256_m_h_d0,
        SHA256_m_h_q0,
        message_address0,
        message_ce0,
        message_q0,
        message_address1,
        message_ce1,
        message_q1,
        tmp_1,
        block_nb
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] SHA256_m_h_address0;
output   SHA256_m_h_ce0;
output   SHA256_m_h_we0;
output  [31:0] SHA256_m_h_d0;
input  [31:0] SHA256_m_h_q0;
output  [5:0] message_address0;
output   message_ce0;
input  [7:0] message_q0;
output  [5:0] message_address1;
output   message_ce1;
input  [7:0] message_q1;
input  [6:0] tmp_1;
input  [0:0] block_nb;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] SHA256_m_h_address0;
reg SHA256_m_h_ce0;
reg SHA256_m_h_we0;
reg[5:0] message_address0;
reg message_ce0;
reg[5:0] message_address1;
reg message_ce1;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] SHA256_sha256_k_address0;
reg    SHA256_sha256_k_ce0;
wire   [31:0] SHA256_sha256_k_q0;
wire   [31:0] wv_q0;
reg   [31:0] reg_463;
wire    ap_CS_fsm_state12;
wire   [31:0] wv_q1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire   [4:0] j_5_fu_487_p2;
reg   [4:0] j_5_reg_1179;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond1_fu_481_p2;
wire   [6:0] sum4_fu_569_p2;
reg   [6:0] sum4_reg_1194;
wire   [6:0] sum6_fu_574_p2;
reg   [6:0] sum6_reg_1199;
reg   [7:0] message_load_reg_1204;
wire    ap_CS_fsm_state4;
reg   [7:0] message_load_1_reg_1209;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond9_fu_603_p2;
wire   [31:0] w_q0;
reg   [31:0] w_load_reg_1237;
wire    ap_CS_fsm_state7;
wire   [31:0] w_q1;
reg   [31:0] w_load_1_reg_1246;
wire   [6:0] j_6_fu_811_p2;
wire    ap_CS_fsm_state8;
wire   [3:0] j_7_fu_823_p2;
reg   [3:0] j_7_reg_1269;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_30_fu_829_p1;
reg   [63:0] tmp_30_reg_1274;
wire   [0:0] exitcond8_fu_817_p2;
wire   [6:0] j_8_fu_840_p2;
reg   [6:0] j_8_reg_1287;
wire    ap_CS_fsm_state11;
reg   [31:0] wv_load_1_reg_1292;
wire   [31:0] tmp_38_fu_918_p2;
reg   [31:0] tmp_38_reg_1299;
reg   [31:0] wv_load_3_reg_1314;
wire   [31:0] t1_fu_969_p2;
reg   [31:0] t1_reg_1319;
reg   [31:0] wv_load_4_reg_1325;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_52_fu_1047_p2;
reg   [31:0] tmp_52_reg_1331;
reg   [31:0] wv_load_5_reg_1336;
wire   [31:0] tmp_58_fu_1074_p2;
reg   [31:0] tmp_58_reg_1343;
wire   [31:0] tmp_59_fu_1084_p2;
reg   [31:0] tmp_59_reg_1348;
wire   [3:0] j_9_fu_1095_p2;
reg   [3:0] j_9_reg_1356;
wire    ap_CS_fsm_state19;
wire   [0:0] exitcond_fu_1089_p2;
reg   [2:0] SHA256_m_h_addr_1_reg_1366;
reg   [5:0] w_address0;
reg    w_ce0;
reg    w_we0;
wire   [31:0] w_d0;
reg   [5:0] w_address1;
reg    w_ce1;
reg    w_we1;
wire   [31:0] w_d1;
reg   [2:0] wv_address0;
reg    wv_ce0;
reg    wv_we0;
reg   [31:0] wv_d0;
reg   [2:0] wv_address1;
reg    wv_ce1;
reg    wv_we1;
reg   [31:0] wv_d1;
reg   [0:0] i_reg_391;
reg   [4:0] j_reg_405;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_476_p2;
reg   [6:0] j_1_reg_417;
reg   [3:0] j_2_reg_429;
wire    ap_CS_fsm_state10;
reg   [6:0] j_3_reg_440;
wire    ap_CS_fsm_state18;
reg   [3:0] j_4_reg_452;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond7_fu_834_p2;
wire   [63:0] sum_cast_fu_534_p1;
wire   [63:0] sum2_cast_fu_554_p1;
wire   [63:0] sum4_cast_fu_579_p1;
wire   [63:0] sum6_cast_fu_583_p1;
wire   [63:0] tmp_3_fu_598_p1;
wire   [63:0] tmp_5_fu_615_p1;
wire   [63:0] tmp_14_fu_626_p1;
wire   [63:0] tmp_16_fu_637_p1;
wire   [63:0] tmp_27_fu_648_p1;
wire   [63:0] tmp_29_fu_806_p1;
wire   [63:0] tmp_44_fu_924_p1;
wire   [63:0] tmp_60_fu_1101_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [0:0] tmptmp_fu_470_p2;
wire   [3:0] tmp_20_fu_493_p1;
wire   [5:0] sub_block_0_sum_fu_505_p4;
wire   [5:0] tmp_8_fu_497_p3;
wire   [5:0] p_sum1_fu_519_p2;
wire   [6:0] p_sum1_cast_fu_525_p1;
wire   [6:0] sum_fu_529_p2;
wire   [5:0] p_sum3_fu_539_p2;
wire   [6:0] p_sum3_cast_fu_545_p1;
wire   [6:0] sum2_fu_549_p2;
wire   [5:0] p_sum5_fu_559_p2;
wire   [6:0] p_sum5_cast_fu_565_p1;
wire   [6:0] sub_block_0_sum_cast_fu_515_p1;
wire   [6:0] tmp_4_fu_609_p2;
wire   [6:0] tmp_13_fu_620_p2;
wire   [6:0] tmp_15_fu_631_p2;
wire   [6:0] tmp_26_fu_642_p2;
wire   [16:0] tmp_23_fu_662_p1;
wire   [14:0] tmp_6_fu_653_p4;
wire   [18:0] tmp_36_fu_682_p1;
wire   [12:0] tmp_s_fu_673_p4;
wire   [21:0] tmp_10_fu_693_p4;
wire   [31:0] tmp_11_fu_702_p1;
wire   [31:0] tmp_7_fu_685_p3;
wire   [31:0] tmp1_fu_706_p2;
wire   [31:0] tmp_9_fu_665_p3;
wire   [6:0] tmp_39_fu_728_p1;
wire   [24:0] tmp_17_fu_718_p4;
wire   [17:0] tmp_51_fu_750_p1;
wire   [13:0] tmp_19_fu_740_p4;
wire   [28:0] tmp_22_fu_762_p4;
wire   [31:0] tmp_24_fu_772_p1;
wire   [31:0] tmp_21_fu_754_p3;
wire   [31:0] tmp2_fu_776_p2;
wire   [31:0] tmp_18_fu_732_p3;
wire   [31:0] tmp_12_fu_712_p2;
wire   [31:0] tmp_25_fu_782_p2;
wire   [31:0] tmp4_fu_793_p2;
wire   [31:0] tmp3_fu_788_p2;
wire   [5:0] tmp_54_fu_856_p1;
wire   [25:0] tmp_31_fu_846_p4;
wire   [10:0] tmp_64_fu_878_p1;
wire   [20:0] tmp_33_fu_868_p4;
wire   [24:0] tmp_65_fu_900_p1;
wire   [6:0] tmp_35_fu_890_p4;
wire   [31:0] tmp_37_fu_904_p3;
wire   [31:0] tmp_34_fu_882_p3;
wire   [31:0] tmp5_fu_912_p2;
wire   [31:0] tmp_32_fu_860_p3;
wire   [31:0] tmp_41_fu_935_p2;
wire   [31:0] tmp_42_fu_940_p2;
wire   [31:0] tmp_40_fu_930_p2;
wire   [31:0] tmp_43_fu_946_p2;
wire   [31:0] tmp10_fu_958_p2;
wire   [31:0] tmp9_fu_963_p2;
wire   [31:0] tmp8_fu_952_p2;
wire   [1:0] tmp_66_fu_985_p1;
wire   [29:0] tmp_45_fu_975_p4;
wire   [12:0] tmp_67_fu_1007_p1;
wire   [18:0] tmp_47_fu_997_p4;
wire   [21:0] tmp_68_fu_1029_p1;
wire   [9:0] tmp_49_fu_1019_p4;
wire   [31:0] tmp_50_fu_1033_p3;
wire   [31:0] tmp_48_fu_1011_p3;
wire   [31:0] tmp11_fu_1041_p2;
wire   [31:0] tmp_46_fu_989_p3;
wire   [31:0] tmp_55_fu_1058_p2;
wire   [31:0] tmp_56_fu_1063_p2;
wire   [31:0] tmp_53_fu_1053_p2;
wire   [31:0] tmp_57_fu_1068_p2;
wire   [31:0] tmp12_fu_1079_p2;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

transform_SHA256_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
SHA256_sha256_k_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SHA256_sha256_k_address0),
    .ce0(SHA256_sha256_k_ce0),
    .q0(SHA256_sha256_k_q0)
);

transform_w #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
w_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_address0),
    .ce0(w_ce0),
    .we0(w_we0),
    .d0(w_d0),
    .q0(w_q0),
    .address1(w_address1),
    .ce1(w_ce1),
    .we1(w_we1),
    .d1(w_d1),
    .q1(w_q1)
);

transform_wv #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
wv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wv_address0),
    .ce0(wv_ce0),
    .we0(wv_we0),
    .d0(wv_d0),
    .q0(wv_q0),
    .address1(wv_address1),
    .ce1(wv_ce1),
    .we1(wv_we1),
    .d1(wv_d1),
    .q1(wv_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond_fu_1089_p2 == 1'd1))) begin
        i_reg_391 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_391 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_481_p2 == 1'd1))) begin
        j_1_reg_417 <= 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_1_reg_417 <= j_6_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond9_fu_603_p2 == 1'd1))) begin
        j_2_reg_429 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_2_reg_429 <= j_7_reg_1269;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_817_p2 == 1'd1))) begin
        j_3_reg_440 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_3_reg_440 <= j_8_reg_1287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond7_fu_834_p2))) begin
        j_4_reg_452 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        j_4_reg_452 <= j_9_reg_1356;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_476_p2))) begin
        j_reg_405 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_405 <= j_5_reg_1179;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_463 <= wv_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_463 <= wv_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (1'd0 == exitcond_fu_1089_p2))) begin
        SHA256_m_h_addr_1_reg_1366 <= tmp_60_fu_1101_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_5_reg_1179 <= j_5_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_7_reg_1269 <= j_7_fu_823_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_8_reg_1287 <= j_8_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_9_reg_1356 <= j_9_fu_1095_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        message_load_1_reg_1209 <= message_q1;
        message_load_reg_1204 <= message_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_481_p2 == 1'd0))) begin
        sum4_reg_1194 <= sum4_fu_569_p2;
        sum6_reg_1199 <= sum6_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        t1_reg_1319 <= t1_fu_969_p2;
        wv_load_3_reg_1314 <= wv_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond8_fu_817_p2))) begin
        tmp_30_reg_1274[3 : 0] <= tmp_30_fu_829_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_38_reg_1299 <= tmp_38_fu_918_p2;
        wv_load_1_reg_1292 <= wv_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_52_reg_1331 <= tmp_52_fu_1047_p2;
        wv_load_4_reg_1325 <= wv_q1;
        wv_load_5_reg_1336 <= wv_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_58_reg_1343 <= tmp_58_fu_1074_p2;
        tmp_59_reg_1348 <= tmp_59_fu_1084_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        w_load_1_reg_1246 <= w_q1;
        w_load_reg_1237 <= w_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        SHA256_m_h_address0 = SHA256_m_h_addr_1_reg_1366;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        SHA256_m_h_address0 = tmp_60_fu_1101_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SHA256_m_h_address0 = tmp_30_fu_829_p1;
    end else begin
        SHA256_m_h_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20))) begin
        SHA256_m_h_ce0 = 1'b1;
    end else begin
        SHA256_m_h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        SHA256_m_h_we0 = 1'b1;
    end else begin
        SHA256_m_h_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        SHA256_sha256_k_ce0 = 1'b1;
    end else begin
        SHA256_sha256_k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_476_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_476_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        message_address0 = sum4_cast_fu_579_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        message_address0 = sum_cast_fu_534_p1;
    end else begin
        message_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        message_address1 = sum6_cast_fu_583_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        message_address1 = sum2_cast_fu_554_p1;
    end else begin
        message_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        message_ce0 = 1'b1;
    end else begin
        message_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        message_ce1 = 1'b1;
    end else begin
        message_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        w_address0 = tmp_44_fu_924_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        w_address0 = tmp_27_fu_648_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        w_address0 = tmp_5_fu_615_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_address0 = tmp_3_fu_598_p1;
    end else begin
        w_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        w_address1 = tmp_29_fu_806_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        w_address1 = tmp_16_fu_637_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        w_address1 = tmp_14_fu_626_p1;
    end else begin
        w_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        w_ce0 = 1'b1;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        w_ce1 = 1'b1;
    end else begin
        w_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        w_we0 = 1'b1;
    end else begin
        w_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        w_we1 = 1'b1;
    end else begin
        w_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        wv_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        wv_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        wv_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        wv_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        wv_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        wv_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        wv_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        wv_address0 = tmp_30_reg_1274;
    end else begin
        wv_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        wv_address1 = tmp_60_fu_1101_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        wv_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        wv_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        wv_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        wv_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        wv_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state16))) begin
        wv_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        wv_address1 = 64'd4;
    end else begin
        wv_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        wv_ce0 = 1'b1;
    end else begin
        wv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        wv_ce1 = 1'b1;
    end else begin
        wv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        wv_d0 = tmp_59_reg_1348;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        wv_d0 = wv_load_5_reg_1336;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        wv_d0 = tmp_58_reg_1343;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        wv_d0 = reg_463;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        wv_d0 = SHA256_m_h_q0;
    end else begin
        wv_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        wv_d1 = wv_load_4_reg_1325;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        wv_d1 = reg_463;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        wv_d1 = wv_load_1_reg_1292;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        wv_d1 = wv_load_3_reg_1314;
    end else begin
        wv_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        wv_we0 = 1'b1;
    end else begin
        wv_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        wv_we1 = 1'b1;
    end else begin
        wv_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_476_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_481_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond9_fu_603_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_817_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond7_fu_834_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (exitcond_fu_1089_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SHA256_m_h_d0 = (wv_q1 + SHA256_m_h_q0);

assign SHA256_sha256_k_address0 = tmp_44_fu_924_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_481_p2 = ((j_reg_405 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond7_fu_834_p2 = ((j_3_reg_440 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond8_fu_817_p2 = ((j_2_reg_429 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond9_fu_603_p2 = ((j_1_reg_417 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_1089_p2 = ((j_4_reg_452 == 4'd8) ? 1'b1 : 1'b0);

assign j_5_fu_487_p2 = (j_reg_405 + 5'd1);

assign j_6_fu_811_p2 = (7'd1 + j_1_reg_417);

assign j_7_fu_823_p2 = (j_2_reg_429 + 4'd1);

assign j_8_fu_840_p2 = (j_3_reg_440 + 7'd1);

assign j_9_fu_1095_p2 = (j_4_reg_452 + 4'd1);

assign p_sum1_cast_fu_525_p1 = p_sum1_fu_519_p2;

assign p_sum1_fu_519_p2 = (tmp_8_fu_497_p3 | 6'd3);

assign p_sum3_cast_fu_545_p1 = p_sum3_fu_539_p2;

assign p_sum3_fu_539_p2 = (sub_block_0_sum_fu_505_p4 | 6'd2);

assign p_sum5_cast_fu_565_p1 = p_sum5_fu_559_p2;

assign p_sum5_fu_559_p2 = (tmp_8_fu_497_p3 | 6'd1);

assign sub_block_0_sum_cast_fu_515_p1 = sub_block_0_sum_fu_505_p4;

assign sub_block_0_sum_fu_505_p4 = {{{tmp_20_fu_493_p1}, {1'd0}}, {i_reg_391}};

assign sum2_cast_fu_554_p1 = sum2_fu_549_p2;

assign sum2_fu_549_p2 = (tmp_1 + p_sum3_cast_fu_545_p1);

assign sum4_cast_fu_579_p1 = sum4_reg_1194;

assign sum4_fu_569_p2 = (tmp_1 + p_sum5_cast_fu_565_p1);

assign sum6_cast_fu_583_p1 = sum6_reg_1199;

assign sum6_fu_574_p2 = (tmp_1 + sub_block_0_sum_cast_fu_515_p1);

assign sum_cast_fu_534_p1 = sum_fu_529_p2;

assign sum_fu_529_p2 = (tmp_1 + p_sum1_cast_fu_525_p1);

assign t1_fu_969_p2 = (tmp9_fu_963_p2 + tmp8_fu_952_p2);

assign tmp10_fu_958_p2 = (tmp_38_reg_1299 + tmp_43_fu_946_p2);

assign tmp11_fu_1041_p2 = (tmp_50_fu_1033_p3 ^ tmp_48_fu_1011_p3);

assign tmp12_fu_1079_p2 = (tmp_52_reg_1331 + tmp_57_fu_1068_p2);

assign tmp1_fu_706_p2 = (tmp_11_fu_702_p1 ^ tmp_7_fu_685_p3);

assign tmp2_fu_776_p2 = (tmp_24_fu_772_p1 ^ tmp_21_fu_754_p3);

assign tmp3_fu_788_p2 = (w_load_1_reg_1246 + w_q0);

assign tmp4_fu_793_p2 = (tmp_12_fu_712_p2 + tmp_25_fu_782_p2);

assign tmp5_fu_912_p2 = (tmp_37_fu_904_p3 ^ tmp_34_fu_882_p3);

assign tmp8_fu_952_p2 = (SHA256_sha256_k_q0 + reg_463);

assign tmp9_fu_963_p2 = (tmp10_fu_958_p2 + w_q0);

assign tmp_10_fu_693_p4 = {{w_load_reg_1237[31:10]}};

assign tmp_11_fu_702_p1 = tmp_10_fu_693_p4;

assign tmp_12_fu_712_p2 = (tmp1_fu_706_p2 ^ tmp_9_fu_665_p3);

assign tmp_13_fu_620_p2 = ($signed(7'd121) + $signed(j_1_reg_417));

assign tmp_14_fu_626_p1 = tmp_13_fu_620_p2;

assign tmp_15_fu_631_p2 = ($signed(7'd113) + $signed(j_1_reg_417));

assign tmp_16_fu_637_p1 = tmp_15_fu_631_p2;

assign tmp_17_fu_718_p4 = {{w_q1[31:7]}};

assign tmp_18_fu_732_p3 = {{tmp_39_fu_728_p1}, {tmp_17_fu_718_p4}};

assign tmp_19_fu_740_p4 = {{w_q1[31:18]}};

assign tmp_20_fu_493_p1 = j_reg_405[3:0];

assign tmp_21_fu_754_p3 = {{tmp_51_fu_750_p1}, {tmp_19_fu_740_p4}};

assign tmp_22_fu_762_p4 = {{w_q1[31:3]}};

assign tmp_23_fu_662_p1 = w_load_reg_1237[16:0];

assign tmp_24_fu_772_p1 = tmp_22_fu_762_p4;

assign tmp_25_fu_782_p2 = (tmp2_fu_776_p2 ^ tmp_18_fu_732_p3);

assign tmp_26_fu_642_p2 = ($signed(7'd112) + $signed(j_1_reg_417));

assign tmp_27_fu_648_p1 = tmp_26_fu_642_p2;

assign tmp_29_fu_806_p1 = j_1_reg_417;

assign tmp_30_fu_829_p1 = j_2_reg_429;

assign tmp_31_fu_846_p4 = {{wv_q1[31:6]}};

assign tmp_32_fu_860_p3 = {{tmp_54_fu_856_p1}, {tmp_31_fu_846_p4}};

assign tmp_33_fu_868_p4 = {{wv_q1[31:11]}};

assign tmp_34_fu_882_p3 = {{tmp_64_fu_878_p1}, {tmp_33_fu_868_p4}};

assign tmp_35_fu_890_p4 = {{wv_q1[31:25]}};

assign tmp_36_fu_682_p1 = w_load_reg_1237[18:0];

assign tmp_37_fu_904_p3 = {{tmp_65_fu_900_p1}, {tmp_35_fu_890_p4}};

assign tmp_38_fu_918_p2 = (tmp5_fu_912_p2 ^ tmp_32_fu_860_p3);

assign tmp_39_fu_728_p1 = w_q1[6:0];

assign tmp_3_fu_598_p1 = j_reg_405;

assign tmp_40_fu_930_p2 = (wv_q1 & wv_load_1_reg_1292);

assign tmp_41_fu_935_p2 = (wv_load_1_reg_1292 ^ 32'd4294967295);

assign tmp_42_fu_940_p2 = (wv_q0 & tmp_41_fu_935_p2);

assign tmp_43_fu_946_p2 = (tmp_42_fu_940_p2 ^ tmp_40_fu_930_p2);

assign tmp_44_fu_924_p1 = j_3_reg_440;

assign tmp_45_fu_975_p4 = {{wv_q1[31:2]}};

assign tmp_46_fu_989_p3 = {{tmp_66_fu_985_p1}, {tmp_45_fu_975_p4}};

assign tmp_47_fu_997_p4 = {{wv_q1[31:13]}};

assign tmp_48_fu_1011_p3 = {{tmp_67_fu_1007_p1}, {tmp_47_fu_997_p4}};

assign tmp_49_fu_1019_p4 = {{wv_q1[31:22]}};

assign tmp_4_fu_609_p2 = ($signed(7'd126) + $signed(j_1_reg_417));

assign tmp_50_fu_1033_p3 = {{tmp_68_fu_1029_p1}, {tmp_49_fu_1019_p4}};

assign tmp_51_fu_750_p1 = w_q1[17:0];

assign tmp_52_fu_1047_p2 = (tmp11_fu_1041_p2 ^ tmp_46_fu_989_p3);

assign tmp_53_fu_1053_p2 = (wv_q1 & wv_load_5_reg_1336);

assign tmp_54_fu_856_p1 = wv_q1[5:0];

assign tmp_55_fu_1058_p2 = (wv_q1 ^ wv_load_5_reg_1336);

assign tmp_56_fu_1063_p2 = (wv_load_4_reg_1325 & tmp_55_fu_1058_p2);

assign tmp_57_fu_1068_p2 = (tmp_56_fu_1063_p2 ^ tmp_53_fu_1053_p2);

assign tmp_58_fu_1074_p2 = (wv_q0 + t1_reg_1319);

assign tmp_59_fu_1084_p2 = (tmp12_fu_1079_p2 + t1_reg_1319);

assign tmp_5_fu_615_p1 = tmp_4_fu_609_p2;

assign tmp_60_fu_1101_p1 = j_4_reg_452;

assign tmp_64_fu_878_p1 = wv_q1[10:0];

assign tmp_65_fu_900_p1 = wv_q1[24:0];

assign tmp_66_fu_985_p1 = wv_q1[1:0];

assign tmp_67_fu_1007_p1 = wv_q1[12:0];

assign tmp_68_fu_1029_p1 = wv_q1[21:0];

assign tmp_6_fu_653_p4 = {{w_load_reg_1237[31:17]}};

assign tmp_7_fu_685_p3 = {{tmp_36_fu_682_p1}, {tmp_s_fu_673_p4}};

assign tmp_8_fu_497_p3 = {{tmp_20_fu_493_p1}, {2'd0}};

assign tmp_9_fu_665_p3 = {{tmp_23_fu_662_p1}, {tmp_6_fu_653_p4}};

assign tmp_fu_476_p2 = (block_nb & tmptmp_fu_470_p2);

assign tmp_s_fu_673_p4 = {{w_load_reg_1237[31:19]}};

assign tmptmp_fu_470_p2 = (i_reg_391 ^ 1'd1);

assign w_d0 = {{{{message_q1}, {message_q0}}, {message_load_1_reg_1209}}, {message_load_reg_1204}};

assign w_d1 = (tmp4_fu_793_p2 + tmp3_fu_788_p2);

always @ (posedge ap_clk) begin
    tmp_30_reg_1274[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //transform_1
