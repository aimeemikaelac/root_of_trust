// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256_mem,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i-es1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=0,HLS_SYN_FF=2997,HLS_SYN_LUT=7162}" *)

module sha256_mem (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        digest_out_address0,
        digest_out_ce0,
        digest_out_we0,
        digest_out_d0,
        digest_out_address1,
        digest_out_ce1,
        digest_out_we1,
        digest_out_d1,
        digest_valid,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
output  [4:0] digest_out_address0;
output   digest_out_ce0;
output   digest_out_we0;
output  [7:0] digest_out_d0;
output  [4:0] digest_out_address1;
output   digest_out_ce1;
output   digest_out_we1;
output  [7:0] digest_out_d1;
output   digest_valid;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] message_addr;
reg   [31:0] message_addr_preg;
wire    message_addr_ap_vld;
reg   [31:0] message_addr_in_sig;
reg    message_addr_ap_vld_preg;
reg    message_addr_ap_vld_in_sig;
wire   [31:0] num_blocks;
reg   [31:0] num_blocks_preg;
wire    num_blocks_ap_vld;
reg   [31:0] num_blocks_in_sig;
reg    num_blocks_ap_vld_preg;
reg    num_blocks_ap_vld_in_sig;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state7;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state14;
reg    message_addr_blk_n;
wire    ap_CS_fsm_state4;
reg    num_blocks_blk_n;
wire    mem_AWREADY;
wire    mem_WREADY;
reg    mem_ARVALID;
wire    mem_ARREADY;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [7:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
reg    ap_block_state4;
wire   [31:0] block_counter_1_fu_343_p2;
reg   [31:0] block_counter_1_reg_420;
wire    ap_CS_fsm_state5;
wire   [31:0] data_index_2_fu_349_p2;
reg   [31:0] data_index_2_reg_425;
wire   [0:0] exitcond2_fu_338_p2;
wire   [6:0] buffer_index_1_fu_361_p2;
reg   [6:0] buffer_index_1_reg_433;
wire    ap_CS_fsm_state6;
reg   [31:0] mem_addr_reg_438;
wire   [0:0] exitcond_fu_355_p2;
wire   [31:0] tmp_3_fu_382_p2;
reg   [31:0] tmp_3_reg_444;
wire   [31:0] indvars_iv_next_fu_388_p2;
reg   [31:0] indvars_iv_next_reg_449;
reg   [7:0] mem_addr_read_reg_454;
wire    ap_CS_fsm_state16;
wire    grp_update_fu_311_ap_done;
reg   [5:0] data_buffer_address0;
reg    data_buffer_ce0;
reg    data_buffer_we0;
wire   [7:0] data_buffer_q0;
reg    data_buffer_ce1;
wire   [7:0] data_buffer_q1;
reg   [6:0] cipher_m_block_address0;
reg    cipher_m_block_ce0;
reg    cipher_m_block_we0;
reg   [7:0] cipher_m_block_d0;
wire   [7:0] cipher_m_block_q0;
reg   [6:0] cipher_m_block_address1;
reg    cipher_m_block_ce1;
wire   [7:0] cipher_m_block_q1;
reg   [2:0] cipher_m_h_address0;
reg    cipher_m_h_ce0;
reg    cipher_m_h_we0;
reg   [31:0] cipher_m_h_d0;
wire   [31:0] cipher_m_h_q0;
reg   [2:0] cipher_m_h_address1;
reg    cipher_m_h_ce1;
reg    cipher_m_h_we1;
reg   [31:0] cipher_m_h_d1;
wire    grp_update_fu_311_ap_start;
wire    grp_update_fu_311_ap_idle;
wire    grp_update_fu_311_ap_ready;
wire   [6:0] grp_update_fu_311_SHA256_m_block_address0;
wire    grp_update_fu_311_SHA256_m_block_ce0;
wire    grp_update_fu_311_SHA256_m_block_we0;
wire   [7:0] grp_update_fu_311_SHA256_m_block_d0;
wire   [6:0] grp_update_fu_311_SHA256_m_block_address1;
wire    grp_update_fu_311_SHA256_m_block_ce1;
wire   [2:0] grp_update_fu_311_SHA256_m_h_address0;
wire    grp_update_fu_311_SHA256_m_h_ce0;
wire    grp_update_fu_311_SHA256_m_h_we0;
wire   [31:0] grp_update_fu_311_SHA256_m_h_d0;
wire   [5:0] grp_update_fu_311_message_address0;
wire    grp_update_fu_311_message_ce0;
wire   [5:0] grp_update_fu_311_message_address1;
wire    grp_update_fu_311_message_ce1;
wire   [31:0] grp_update_fu_311_ap_return_0;
wire   [31:0] grp_update_fu_311_ap_return_1;
wire    grp_final_fu_324_ap_start;
wire    grp_final_fu_324_ap_done;
wire    grp_final_fu_324_ap_idle;
wire    grp_final_fu_324_ap_ready;
wire   [6:0] grp_final_fu_324_SHA256_m_block_address0;
wire    grp_final_fu_324_SHA256_m_block_ce0;
wire    grp_final_fu_324_SHA256_m_block_we0;
wire   [7:0] grp_final_fu_324_SHA256_m_block_d0;
wire   [6:0] grp_final_fu_324_SHA256_m_block_address1;
wire    grp_final_fu_324_SHA256_m_block_ce1;
wire   [2:0] grp_final_fu_324_SHA256_m_h_address0;
wire    grp_final_fu_324_SHA256_m_h_ce0;
wire    grp_final_fu_324_SHA256_m_h_we0;
wire   [31:0] grp_final_fu_324_SHA256_m_h_d0;
wire   [4:0] grp_final_fu_324_digest_address0;
wire    grp_final_fu_324_digest_ce0;
wire    grp_final_fu_324_digest_we0;
wire   [7:0] grp_final_fu_324_digest_d0;
wire   [4:0] grp_final_fu_324_digest_address1;
wire    grp_final_fu_324_digest_ce1;
wire    grp_final_fu_324_digest_we1;
wire   [7:0] grp_final_fu_324_digest_d1;
reg   [31:0] cipher_m_len_reg_230;
reg   [31:0] cipher_m_tot_len_reg_242;
reg   [31:0] indvars_iv_reg_254;
reg   [31:0] block_counter_reg_266;
reg   [31:0] data_index_reg_277;
reg   [31:0] data_index_1_reg_289;
wire    ap_CS_fsm_state15;
reg   [6:0] buffer_index_reg_299;
reg    ap_reg_grp_update_fu_311_ap_start;
reg    ap_reg_grp_final_fu_324_ap_start;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_2_fu_394_p1;
wire   [63:0] tmp_1_fu_372_p1;
reg    ap_reg_ioackin_mem_ARREADY;
reg    ap_sig_ioackin_mem_ARREADY;
wire   [31:0] tmp_fu_367_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 message_addr_preg = 32'd0;
#0 message_addr_ap_vld_preg = 1'b0;
#0 num_blocks_preg = 32'd0;
#0 num_blocks_ap_vld_preg = 1'b0;
#0 ap_reg_grp_update_fu_311_ap_start = 1'b0;
#0 ap_reg_grp_final_fu_324_ap_start = 1'b0;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
end

sha256_mem_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sha256_mem_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .message_addr(message_addr),
    .message_addr_ap_vld(message_addr_ap_vld),
    .num_blocks(num_blocks),
    .num_blocks_ap_vld(num_blocks_ap_vld)
);

sha256_mem_mem_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
sha256_mem_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_addr_reg_438),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(mem_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(mem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

sha256_mem_data_bdEe #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
data_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_buffer_address0),
    .ce0(data_buffer_ce0),
    .we0(data_buffer_we0),
    .d0(mem_addr_read_reg_454),
    .q0(data_buffer_q0),
    .address1(grp_update_fu_311_message_address1),
    .ce1(data_buffer_ce1),
    .q1(data_buffer_q1)
);

sha256_mem_ciphereOg #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
cipher_m_block_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cipher_m_block_address0),
    .ce0(cipher_m_block_ce0),
    .we0(cipher_m_block_we0),
    .d0(cipher_m_block_d0),
    .q0(cipher_m_block_q0),
    .address1(cipher_m_block_address1),
    .ce1(cipher_m_block_ce1),
    .q1(cipher_m_block_q1)
);

sha256_mem_cipherfYi #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
cipher_m_h_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cipher_m_h_address0),
    .ce0(cipher_m_h_ce0),
    .we0(cipher_m_h_we0),
    .d0(cipher_m_h_d0),
    .q0(cipher_m_h_q0),
    .address1(cipher_m_h_address1),
    .ce1(cipher_m_h_ce1),
    .we1(cipher_m_h_we1),
    .d1(cipher_m_h_d1)
);

update grp_update_fu_311(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_update_fu_311_ap_start),
    .ap_done(grp_update_fu_311_ap_done),
    .ap_idle(grp_update_fu_311_ap_idle),
    .ap_ready(grp_update_fu_311_ap_ready),
    .SHA256_m_tot_len_read(cipher_m_tot_len_reg_242),
    .SHA256_m_len_read(cipher_m_len_reg_230),
    .SHA256_m_block_address0(grp_update_fu_311_SHA256_m_block_address0),
    .SHA256_m_block_ce0(grp_update_fu_311_SHA256_m_block_ce0),
    .SHA256_m_block_we0(grp_update_fu_311_SHA256_m_block_we0),
    .SHA256_m_block_d0(grp_update_fu_311_SHA256_m_block_d0),
    .SHA256_m_block_q0(cipher_m_block_q0),
    .SHA256_m_block_address1(grp_update_fu_311_SHA256_m_block_address1),
    .SHA256_m_block_ce1(grp_update_fu_311_SHA256_m_block_ce1),
    .SHA256_m_block_q1(cipher_m_block_q1),
    .SHA256_m_h_address0(grp_update_fu_311_SHA256_m_h_address0),
    .SHA256_m_h_ce0(grp_update_fu_311_SHA256_m_h_ce0),
    .SHA256_m_h_we0(grp_update_fu_311_SHA256_m_h_we0),
    .SHA256_m_h_d0(grp_update_fu_311_SHA256_m_h_d0),
    .SHA256_m_h_q0(cipher_m_h_q0),
    .message_address0(grp_update_fu_311_message_address0),
    .message_ce0(grp_update_fu_311_message_ce0),
    .message_q0(data_buffer_q0),
    .message_address1(grp_update_fu_311_message_address1),
    .message_ce1(grp_update_fu_311_message_ce1),
    .message_q1(data_buffer_q1),
    .ap_return_0(grp_update_fu_311_ap_return_0),
    .ap_return_1(grp_update_fu_311_ap_return_1)
);

final grp_final_fu_324(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_final_fu_324_ap_start),
    .ap_done(grp_final_fu_324_ap_done),
    .ap_idle(grp_final_fu_324_ap_idle),
    .ap_ready(grp_final_fu_324_ap_ready),
    .SHA256_m_tot_len_read(cipher_m_tot_len_reg_242),
    .SHA256_m_len_read(cipher_m_len_reg_230),
    .SHA256_m_block_address0(grp_final_fu_324_SHA256_m_block_address0),
    .SHA256_m_block_ce0(grp_final_fu_324_SHA256_m_block_ce0),
    .SHA256_m_block_we0(grp_final_fu_324_SHA256_m_block_we0),
    .SHA256_m_block_d0(grp_final_fu_324_SHA256_m_block_d0),
    .SHA256_m_block_q0(cipher_m_block_q0),
    .SHA256_m_block_address1(grp_final_fu_324_SHA256_m_block_address1),
    .SHA256_m_block_ce1(grp_final_fu_324_SHA256_m_block_ce1),
    .SHA256_m_block_q1(cipher_m_block_q1),
    .SHA256_m_h_address0(grp_final_fu_324_SHA256_m_h_address0),
    .SHA256_m_h_ce0(grp_final_fu_324_SHA256_m_h_ce0),
    .SHA256_m_h_we0(grp_final_fu_324_SHA256_m_h_we0),
    .SHA256_m_h_d0(grp_final_fu_324_SHA256_m_h_d0),
    .SHA256_m_h_q0(cipher_m_h_q0),
    .digest_address0(grp_final_fu_324_digest_address0),
    .digest_ce0(grp_final_fu_324_digest_ce0),
    .digest_we0(grp_final_fu_324_digest_we0),
    .digest_d0(grp_final_fu_324_digest_d0),
    .digest_address1(grp_final_fu_324_digest_address1),
    .digest_ce1(grp_final_fu_324_digest_ce1),
    .digest_we1(grp_final_fu_324_digest_we1),
    .digest_d1(grp_final_fu_324_digest_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_final_fu_324_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_338_p2 == 1'd1))) begin
            ap_reg_grp_final_fu_324_ap_start <= 1'b1;
        end else if ((1'b1 == grp_final_fu_324_ap_ready)) begin
            ap_reg_grp_final_fu_324_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_update_fu_311_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_355_p2 == 1'd1))) begin
            ap_reg_grp_update_fu_311_ap_start <= 1'b1;
        end else if ((1'b1 == grp_update_fu_311_ap_ready)) begin
            ap_reg_grp_update_fu_311_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((ap_sig_ioackin_mem_ARREADY == 1'b1)) begin
                ap_reg_ioackin_mem_ARREADY <= 1'b0;
            end else if ((1'b1 == mem_ARREADY)) begin
                ap_reg_ioackin_mem_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        message_addr_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state17) & (grp_final_fu_324_ap_done == 1'b1))) begin
            message_addr_ap_vld_preg <= 1'b0;
        end else if (((1'b1 == message_addr_ap_vld) & ~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
            message_addr_ap_vld_preg <= message_addr_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        message_addr_preg <= 32'd0;
    end else begin
        if (((1'b1 == message_addr_ap_vld) & ~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
            message_addr_preg <= message_addr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        num_blocks_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state17) & (grp_final_fu_324_ap_done == 1'b1))) begin
            num_blocks_ap_vld_preg <= 1'b0;
        end else if ((~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == num_blocks_ap_vld))) begin
            num_blocks_ap_vld_preg <= num_blocks_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        num_blocks_preg <= 32'd0;
    end else begin
        if ((~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == num_blocks_ap_vld))) begin
            num_blocks_preg <= num_blocks;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_update_fu_311_ap_done == 1'b1))) begin
        block_counter_reg_266 <= block_counter_1_reg_420;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig)))) begin
        block_counter_reg_266 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        buffer_index_reg_299 <= buffer_index_1_reg_433;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_338_p2 == 1'd0))) begin
        buffer_index_reg_299 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_update_fu_311_ap_done == 1'b1))) begin
        cipher_m_len_reg_230 <= grp_update_fu_311_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig)))) begin
        cipher_m_len_reg_230 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_update_fu_311_ap_done == 1'b1))) begin
        cipher_m_tot_len_reg_242 <= grp_update_fu_311_ap_return_0;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig)))) begin
        cipher_m_tot_len_reg_242 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        data_index_1_reg_289 <= tmp_3_reg_444;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_338_p2 == 1'd0))) begin
        data_index_1_reg_289 <= data_index_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_update_fu_311_ap_done == 1'b1))) begin
        data_index_reg_277 <= data_index_2_reg_425;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig)))) begin
        data_index_reg_277 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_update_fu_311_ap_done == 1'b1))) begin
        indvars_iv_reg_254 <= indvars_iv_next_reg_449;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig)))) begin
        indvars_iv_reg_254 <= 32'd64;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_counter_1_reg_420 <= block_counter_1_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_index_1_reg_433 <= buffer_index_1_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_338_p2 == 1'd0))) begin
        data_index_2_reg_425 <= data_index_2_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_355_p2 == 1'd1))) begin
        indvars_iv_next_reg_449 <= indvars_iv_next_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (mem_RVALID == 1'b1))) begin
        mem_addr_read_reg_454 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_355_p2))) begin
        mem_addr_reg_438 <= tmp_1_fu_372_p1;
        tmp_3_reg_444 <= tmp_3_fu_382_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_final_fu_324_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_final_fu_324_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_block_address0 = grp_final_fu_324_SHA256_m_block_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_block_address0 = grp_update_fu_311_SHA256_m_block_address0;
    end else begin
        cipher_m_block_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_block_address1 = grp_final_fu_324_SHA256_m_block_address1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_block_address1 = grp_update_fu_311_SHA256_m_block_address1;
    end else begin
        cipher_m_block_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_block_ce0 = grp_final_fu_324_SHA256_m_block_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_block_ce0 = grp_update_fu_311_SHA256_m_block_ce0;
    end else begin
        cipher_m_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_block_ce1 = grp_final_fu_324_SHA256_m_block_ce1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_block_ce1 = grp_update_fu_311_SHA256_m_block_ce1;
    end else begin
        cipher_m_block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_block_d0 = grp_final_fu_324_SHA256_m_block_d0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_block_d0 = grp_update_fu_311_SHA256_m_block_d0;
    end else begin
        cipher_m_block_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_block_we0 = grp_final_fu_324_SHA256_m_block_we0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_block_we0 = grp_update_fu_311_SHA256_m_block_we0;
    end else begin
        cipher_m_block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_m_h_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_m_h_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_m_h_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cipher_m_h_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_h_address0 = grp_final_fu_324_SHA256_m_h_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_h_address0 = grp_update_fu_311_SHA256_m_h_address0;
    end else begin
        cipher_m_h_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_m_h_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_m_h_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_m_h_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cipher_m_h_address1 = 64'd1;
    end else begin
        cipher_m_h_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig))) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cipher_m_h_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_h_ce0 = grp_final_fu_324_SHA256_m_h_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_h_ce0 = grp_update_fu_311_SHA256_m_h_ce0;
    end else begin
        cipher_m_h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig))) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cipher_m_h_ce1 = 1'b1;
    end else begin
        cipher_m_h_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_m_h_d0 = 32'd528734635;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_m_h_d0 = 32'd1359893119;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_m_h_d0 = 32'd1013904242;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cipher_m_h_d0 = 32'd1779033703;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_h_d0 = grp_final_fu_324_SHA256_m_h_d0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_h_d0 = grp_update_fu_311_SHA256_m_h_d0;
    end else begin
        cipher_m_h_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_m_h_d1 = 32'd1541459225;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_m_h_d1 = 32'd2600822924;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_m_h_d1 = 32'd2773480762;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cipher_m_h_d1 = 32'd3144134277;
    end else begin
        cipher_m_h_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig))) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cipher_m_h_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        cipher_m_h_we0 = grp_final_fu_324_SHA256_m_h_we0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cipher_m_h_we0 = grp_update_fu_311_SHA256_m_h_we0;
    end else begin
        cipher_m_h_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig))) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cipher_m_h_we1 = 1'b1;
    end else begin
        cipher_m_h_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        data_buffer_address0 = tmp_2_fu_394_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        data_buffer_address0 = grp_update_fu_311_message_address0;
    end else begin
        data_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        data_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        data_buffer_ce0 = grp_update_fu_311_message_ce0;
    end else begin
        data_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        data_buffer_ce1 = grp_update_fu_311_message_ce1;
    end else begin
        data_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        data_buffer_we0 = 1'b1;
    end else begin
        data_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_reg_ioackin_mem_ARREADY))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (mem_RVALID == 1'b1))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == message_addr_ap_vld)) begin
        message_addr_ap_vld_in_sig = message_addr_ap_vld;
    end else begin
        message_addr_ap_vld_in_sig = message_addr_ap_vld_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        message_addr_blk_n = message_addr_ap_vld;
    end else begin
        message_addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == message_addr_ap_vld)) begin
        message_addr_in_sig = message_addr;
    end else begin
        message_addr_in_sig = message_addr_preg;
    end
end

always @ (*) begin
    if ((1'b1 == num_blocks_ap_vld)) begin
        num_blocks_ap_vld_in_sig = num_blocks_ap_vld;
    end else begin
        num_blocks_ap_vld_in_sig = num_blocks_ap_vld_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        num_blocks_blk_n = num_blocks_ap_vld;
    end else begin
        num_blocks_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == num_blocks_ap_vld)) begin
        num_blocks_in_sig = num_blocks;
    end else begin
        num_blocks_in_sig = num_blocks_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ~((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_338_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_355_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_update_fu_311_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (grp_final_fu_324_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state4 = ((1'b0 == num_blocks_ap_vld_in_sig) | (1'b0 == message_addr_ap_vld_in_sig));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign block_counter_1_fu_343_p2 = (block_counter_reg_266 + 32'd1);

assign buffer_index_1_fu_361_p2 = (buffer_index_reg_299 + 7'd1);

assign data_index_2_fu_349_p2 = (data_index_reg_277 + 32'd64);

assign digest_out_address0 = grp_final_fu_324_digest_address0;

assign digest_out_address1 = grp_final_fu_324_digest_address1;

assign digest_out_ce0 = grp_final_fu_324_digest_ce0;

assign digest_out_ce1 = grp_final_fu_324_digest_ce1;

assign digest_out_d0 = grp_final_fu_324_digest_d0;

assign digest_out_d1 = grp_final_fu_324_digest_d1;

assign digest_out_we0 = grp_final_fu_324_digest_we0;

assign digest_out_we1 = grp_final_fu_324_digest_we1;

assign digest_valid = 1'd1;

assign exitcond2_fu_338_p2 = ((block_counter_reg_266 == num_blocks_in_sig) ? 1'b1 : 1'b0);

assign exitcond_fu_355_p2 = ((data_index_1_reg_289 == indvars_iv_reg_254) ? 1'b1 : 1'b0);

assign grp_final_fu_324_ap_start = ap_reg_grp_final_fu_324_ap_start;

assign grp_update_fu_311_ap_start = ap_reg_grp_update_fu_311_ap_start;

assign indvars_iv_next_fu_388_p2 = (indvars_iv_reg_254 + 32'd64);

assign tmp_1_fu_372_p1 = tmp_fu_367_p2;

assign tmp_2_fu_394_p1 = buffer_index_reg_299;

assign tmp_3_fu_382_p2 = (data_index_1_reg_289 + 32'd1);

assign tmp_fu_367_p2 = (data_index_1_reg_289 + message_addr_in_sig);

endmodule //sha256_mem
