-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity transform_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SHA256_m_h_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    SHA256_m_h_ce0 : OUT STD_LOGIC;
    SHA256_m_h_we0 : OUT STD_LOGIC;
    SHA256_m_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    SHA256_m_h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    message_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    message_ce0 : OUT STD_LOGIC;
    message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    message_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    message_ce1 : OUT STD_LOGIC;
    message_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    tmp_1 : IN STD_LOGIC_VECTOR (6 downto 0);
    block_nb : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of transform_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_79 : STD_LOGIC_VECTOR (6 downto 0) := "1111001";
    constant ap_const_lv7_71 : STD_LOGIC_VECTOR (6 downto 0) := "1110001";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SHA256_sha256_k_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal SHA256_sha256_k_ce0 : STD_LOGIC;
    signal SHA256_sha256_k_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal wv_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal j_5_fu_487_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_reg_1179 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum4_fu_569_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum4_reg_1194 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum6_fu_574_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum6_reg_1199 : STD_LOGIC_VECTOR (6 downto 0);
    signal message_load_reg_1204 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal message_load_1_reg_1209 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond9_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_load_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal w_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_load_1_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_6_fu_811_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_7_fu_823_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_7_reg_1269 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_30_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_reg_1274 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond8_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_8_fu_840_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_8_reg_1287 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal wv_load_1_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_918_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_load_3_reg_1314 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_969_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_1319 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_load_4_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_52_fu_1047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_reg_1331 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_load_5_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_1074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_1343 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_9_fu_1095_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_9_reg_1356 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal exitcond_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal SHA256_m_h_addr_1_reg_1366 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_ce0 : STD_LOGIC;
    signal w_we0 : STD_LOGIC;
    signal w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_ce1 : STD_LOGIC;
    signal w_we1 : STD_LOGIC;
    signal w_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal wv_ce0 : STD_LOGIC;
    signal wv_we0 : STD_LOGIC;
    signal wv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal wv_ce1 : STD_LOGIC;
    signal wv_we1 : STD_LOGIC;
    signal wv_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_405 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_417 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_reg_429 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_3_reg_440 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal j_4_reg_452 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond7_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_cast_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_1101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmptmp_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_493_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_block_0_sum_fu_505_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_497_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_sum1_fu_519_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_sum1_cast_fu_525_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_fu_529_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_sum3_fu_539_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_sum3_cast_fu_545_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum2_fu_549_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_sum5_fu_559_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_sum5_cast_fu_565_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_block_0_sum_cast_fu_515_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_609_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_620_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_631_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_642_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_662_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_653_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_36_fu_682_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_s_fu_673_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_fu_693_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_11_fu_702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_665_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_728_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_718_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_51_fu_750_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_fu_740_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_22_fu_762_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_24_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_732_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_856_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_846_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_64_fu_878_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_868_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_65_fu_900_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_35_fu_890_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_904_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_882_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_860_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_935_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_930_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_958_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_963_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_985_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_45_fu_975_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_67_fu_1007_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_47_fu_997_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_68_fu_1029_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_49_fu_1019_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_fu_1033_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_1011_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_1041_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_989_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_1058_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_1063_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_1053_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_1068_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_1079_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component transform_SHA256_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transform_w IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transform_wv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    SHA256_sha256_k_U : component transform_SHA256_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SHA256_sha256_k_address0,
        ce0 => SHA256_sha256_k_ce0,
        q0 => SHA256_sha256_k_q0);

    w_U : component transform_w
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_address0,
        ce0 => w_ce0,
        we0 => w_we0,
        d0 => w_d0,
        q0 => w_q0,
        address1 => w_address1,
        ce1 => w_ce1,
        we1 => w_we1,
        d1 => w_d1,
        q1 => w_q1);

    wv_U : component transform_wv
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wv_address0,
        ce0 => wv_ce0,
        we0 => wv_we0,
        d0 => wv_d0,
        q0 => wv_q0,
        address1 => wv_address1,
        ce1 => wv_ce1,
        we1 => wv_we1,
        d1 => wv_d1,
        q1 => wv_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_fu_1089_p2 = ap_const_lv1_1))) then 
                i_reg_391 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_391 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    j_1_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_481_p2 = ap_const_lv1_1))) then 
                j_1_reg_417 <= ap_const_lv7_10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_1_reg_417 <= j_6_fu_811_p2;
            end if; 
        end if;
    end process;

    j_2_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond9_fu_603_p2 = ap_const_lv1_1))) then 
                j_2_reg_429 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_2_reg_429 <= j_7_reg_1269;
            end if; 
        end if;
    end process;

    j_3_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_817_p2 = ap_const_lv1_1))) then 
                j_3_reg_440 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_3_reg_440 <= j_8_reg_1287;
            end if; 
        end if;
    end process;

    j_4_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond7_fu_834_p2))) then 
                j_4_reg_452 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_4_reg_452 <= j_9_reg_1356;
            end if; 
        end if;
    end process;

    j_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_476_p2))) then 
                j_reg_405 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_405 <= j_5_reg_1179;
            end if; 
        end if;
    end process;

    reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                reg_463 <= wv_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_463 <= wv_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond_fu_1089_p2))) then
                SHA256_m_h_addr_1_reg_1366 <= tmp_60_fu_1101_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_5_reg_1179 <= j_5_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_7_reg_1269 <= j_7_fu_823_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_8_reg_1287 <= j_8_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                j_9_reg_1356 <= j_9_fu_1095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                message_load_1_reg_1209 <= message_q1;
                message_load_reg_1204 <= message_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_481_p2 = ap_const_lv1_0))) then
                sum4_reg_1194 <= sum4_fu_569_p2;
                sum6_reg_1199 <= sum6_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                t1_reg_1319 <= t1_fu_969_p2;
                wv_load_3_reg_1314 <= wv_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond8_fu_817_p2))) then
                    tmp_30_reg_1274(3 downto 0) <= tmp_30_fu_829_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_38_reg_1299 <= tmp_38_fu_918_p2;
                wv_load_1_reg_1292 <= wv_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_52_reg_1331 <= tmp_52_fu_1047_p2;
                wv_load_4_reg_1325 <= wv_q1;
                wv_load_5_reg_1336 <= wv_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_58_reg_1343 <= tmp_58_fu_1074_p2;
                tmp_59_reg_1348 <= tmp_59_fu_1084_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                w_load_1_reg_1246 <= w_q1;
                w_load_reg_1237 <= w_q0;
            end if;
        end if;
    end process;
    tmp_30_reg_1274(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond1_fu_481_p2, ap_CS_fsm_state6, exitcond9_fu_603_p2, ap_CS_fsm_state9, exitcond8_fu_817_p2, ap_CS_fsm_state11, ap_CS_fsm_state19, exitcond_fu_1089_p2, ap_CS_fsm_state2, tmp_fu_476_p2, exitcond7_fu_834_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_476_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_481_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond9_fu_603_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_817_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond7_fu_834_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_fu_1089_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SHA256_m_h_address0_assign_proc : process(ap_CS_fsm_state9, tmp_30_fu_829_p1, ap_CS_fsm_state19, SHA256_m_h_addr_1_reg_1366, ap_CS_fsm_state20, tmp_60_fu_1101_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            SHA256_m_h_address0 <= SHA256_m_h_addr_1_reg_1366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            SHA256_m_h_address0 <= tmp_60_fu_1101_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            SHA256_m_h_address0 <= tmp_30_fu_829_p1(3 - 1 downto 0);
        else 
            SHA256_m_h_address0 <= "XXX";
        end if; 
    end process;


    SHA256_m_h_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            SHA256_m_h_ce0 <= ap_const_logic_1;
        else 
            SHA256_m_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SHA256_m_h_d0 <= std_logic_vector(unsigned(wv_q1) + unsigned(SHA256_m_h_q0));

    SHA256_m_h_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            SHA256_m_h_we0 <= ap_const_logic_1;
        else 
            SHA256_m_h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    SHA256_sha256_k_address0 <= tmp_44_fu_924_p1(6 - 1 downto 0);

    SHA256_sha256_k_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            SHA256_sha256_k_ce0 <= ap_const_logic_1;
        else 
            SHA256_sha256_k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_476_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_476_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_476_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_476_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_481_p2 <= "1" when (j_reg_405 = ap_const_lv5_10) else "0";
    exitcond7_fu_834_p2 <= "1" when (j_3_reg_440 = ap_const_lv7_40) else "0";
    exitcond8_fu_817_p2 <= "1" when (j_2_reg_429 = ap_const_lv4_8) else "0";
    exitcond9_fu_603_p2 <= "1" when (j_1_reg_417 = ap_const_lv7_40) else "0";
    exitcond_fu_1089_p2 <= "1" when (j_4_reg_452 = ap_const_lv4_8) else "0";
    j_5_fu_487_p2 <= std_logic_vector(unsigned(j_reg_405) + unsigned(ap_const_lv5_1));
    j_6_fu_811_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(j_1_reg_417));
    j_7_fu_823_p2 <= std_logic_vector(unsigned(j_2_reg_429) + unsigned(ap_const_lv4_1));
    j_8_fu_840_p2 <= std_logic_vector(unsigned(j_3_reg_440) + unsigned(ap_const_lv7_1));
    j_9_fu_1095_p2 <= std_logic_vector(unsigned(j_4_reg_452) + unsigned(ap_const_lv4_1));

    message_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, sum_cast_fu_534_p1, sum4_cast_fu_579_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            message_address0 <= sum4_cast_fu_579_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            message_address0 <= sum_cast_fu_534_p1(6 - 1 downto 0);
        else 
            message_address0 <= "XXXXXX";
        end if; 
    end process;


    message_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, sum2_cast_fu_554_p1, sum6_cast_fu_583_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            message_address1 <= sum6_cast_fu_583_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            message_address1 <= sum2_cast_fu_554_p1(6 - 1 downto 0);
        else 
            message_address1 <= "XXXXXX";
        end if; 
    end process;


    message_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            message_ce0 <= ap_const_logic_1;
        else 
            message_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    message_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            message_ce1 <= ap_const_logic_1;
        else 
            message_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_sum1_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum1_fu_519_p2),7));
    p_sum1_fu_519_p2 <= (tmp_8_fu_497_p3 or ap_const_lv6_3);
    p_sum3_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum3_fu_539_p2),7));
    p_sum3_fu_539_p2 <= (sub_block_0_sum_fu_505_p4 or ap_const_lv6_2);
    p_sum5_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum5_fu_559_p2),7));
    p_sum5_fu_559_p2 <= (tmp_8_fu_497_p3 or ap_const_lv6_1);
    sub_block_0_sum_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_block_0_sum_fu_505_p4),7));
    sub_block_0_sum_fu_505_p4 <= ((tmp_20_fu_493_p1 & ap_const_lv1_0) & i_reg_391);
    sum2_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_549_p2),64));
    sum2_fu_549_p2 <= std_logic_vector(unsigned(tmp_1) + unsigned(p_sum3_cast_fu_545_p1));
    sum4_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_reg_1194),64));
    sum4_fu_569_p2 <= std_logic_vector(unsigned(tmp_1) + unsigned(p_sum5_cast_fu_565_p1));
    sum6_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_reg_1199),64));
    sum6_fu_574_p2 <= std_logic_vector(unsigned(tmp_1) + unsigned(sub_block_0_sum_cast_fu_515_p1));
    sum_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_529_p2),64));
    sum_fu_529_p2 <= std_logic_vector(unsigned(tmp_1) + unsigned(p_sum1_cast_fu_525_p1));
    t1_fu_969_p2 <= std_logic_vector(unsigned(tmp9_fu_963_p2) + unsigned(tmp8_fu_952_p2));
    tmp10_fu_958_p2 <= std_logic_vector(unsigned(tmp_38_reg_1299) + unsigned(tmp_43_fu_946_p2));
    tmp11_fu_1041_p2 <= (tmp_50_fu_1033_p3 xor tmp_48_fu_1011_p3);
    tmp12_fu_1079_p2 <= std_logic_vector(unsigned(tmp_52_reg_1331) + unsigned(tmp_57_fu_1068_p2));
    tmp1_fu_706_p2 <= (tmp_11_fu_702_p1 xor tmp_7_fu_685_p3);
    tmp2_fu_776_p2 <= (tmp_24_fu_772_p1 xor tmp_21_fu_754_p3);
    tmp3_fu_788_p2 <= std_logic_vector(unsigned(w_load_1_reg_1246) + unsigned(w_q0));
    tmp4_fu_793_p2 <= std_logic_vector(unsigned(tmp_12_fu_712_p2) + unsigned(tmp_25_fu_782_p2));
    tmp5_fu_912_p2 <= (tmp_37_fu_904_p3 xor tmp_34_fu_882_p3);
    tmp8_fu_952_p2 <= std_logic_vector(unsigned(SHA256_sha256_k_q0) + unsigned(reg_463));
    tmp9_fu_963_p2 <= std_logic_vector(unsigned(tmp10_fu_958_p2) + unsigned(w_q0));
    tmp_10_fu_693_p4 <= w_load_reg_1237(31 downto 10);
    tmp_11_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_693_p4),32));
    tmp_12_fu_712_p2 <= (tmp1_fu_706_p2 xor tmp_9_fu_665_p3);
    tmp_13_fu_620_p2 <= std_logic_vector(signed(ap_const_lv7_79) + signed(j_1_reg_417));
    tmp_14_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_620_p2),64));
    tmp_15_fu_631_p2 <= std_logic_vector(signed(ap_const_lv7_71) + signed(j_1_reg_417));
    tmp_16_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_631_p2),64));
    tmp_17_fu_718_p4 <= w_q1(31 downto 7);
    tmp_18_fu_732_p3 <= (tmp_39_fu_728_p1 & tmp_17_fu_718_p4);
    tmp_19_fu_740_p4 <= w_q1(31 downto 18);
    tmp_20_fu_493_p1 <= j_reg_405(4 - 1 downto 0);
    tmp_21_fu_754_p3 <= (tmp_51_fu_750_p1 & tmp_19_fu_740_p4);
    tmp_22_fu_762_p4 <= w_q1(31 downto 3);
    tmp_23_fu_662_p1 <= w_load_reg_1237(17 - 1 downto 0);
    tmp_24_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_762_p4),32));
    tmp_25_fu_782_p2 <= (tmp2_fu_776_p2 xor tmp_18_fu_732_p3);
    tmp_26_fu_642_p2 <= std_logic_vector(signed(ap_const_lv7_70) + signed(j_1_reg_417));
    tmp_27_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_642_p2),64));
    tmp_29_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_417),64));
    tmp_30_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_429),64));
    tmp_31_fu_846_p4 <= wv_q1(31 downto 6);
    tmp_32_fu_860_p3 <= (tmp_54_fu_856_p1 & tmp_31_fu_846_p4);
    tmp_33_fu_868_p4 <= wv_q1(31 downto 11);
    tmp_34_fu_882_p3 <= (tmp_64_fu_878_p1 & tmp_33_fu_868_p4);
    tmp_35_fu_890_p4 <= wv_q1(31 downto 25);
    tmp_36_fu_682_p1 <= w_load_reg_1237(19 - 1 downto 0);
    tmp_37_fu_904_p3 <= (tmp_65_fu_900_p1 & tmp_35_fu_890_p4);
    tmp_38_fu_918_p2 <= (tmp5_fu_912_p2 xor tmp_32_fu_860_p3);
    tmp_39_fu_728_p1 <= w_q1(7 - 1 downto 0);
    tmp_3_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_405),64));
    tmp_40_fu_930_p2 <= (wv_q1 and wv_load_1_reg_1292);
    tmp_41_fu_935_p2 <= (wv_load_1_reg_1292 xor ap_const_lv32_FFFFFFFF);
    tmp_42_fu_940_p2 <= (wv_q0 and tmp_41_fu_935_p2);
    tmp_43_fu_946_p2 <= (tmp_42_fu_940_p2 xor tmp_40_fu_930_p2);
    tmp_44_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_440),64));
    tmp_45_fu_975_p4 <= wv_q1(31 downto 2);
    tmp_46_fu_989_p3 <= (tmp_66_fu_985_p1 & tmp_45_fu_975_p4);
    tmp_47_fu_997_p4 <= wv_q1(31 downto 13);
    tmp_48_fu_1011_p3 <= (tmp_67_fu_1007_p1 & tmp_47_fu_997_p4);
    tmp_49_fu_1019_p4 <= wv_q1(31 downto 22);
    tmp_4_fu_609_p2 <= std_logic_vector(signed(ap_const_lv7_7E) + signed(j_1_reg_417));
    tmp_50_fu_1033_p3 <= (tmp_68_fu_1029_p1 & tmp_49_fu_1019_p4);
    tmp_51_fu_750_p1 <= w_q1(18 - 1 downto 0);
    tmp_52_fu_1047_p2 <= (tmp11_fu_1041_p2 xor tmp_46_fu_989_p3);
    tmp_53_fu_1053_p2 <= (wv_q1 and wv_load_5_reg_1336);
    tmp_54_fu_856_p1 <= wv_q1(6 - 1 downto 0);
    tmp_55_fu_1058_p2 <= (wv_q1 xor wv_load_5_reg_1336);
    tmp_56_fu_1063_p2 <= (wv_load_4_reg_1325 and tmp_55_fu_1058_p2);
    tmp_57_fu_1068_p2 <= (tmp_56_fu_1063_p2 xor tmp_53_fu_1053_p2);
    tmp_58_fu_1074_p2 <= std_logic_vector(unsigned(wv_q0) + unsigned(t1_reg_1319));
    tmp_59_fu_1084_p2 <= std_logic_vector(unsigned(tmp12_fu_1079_p2) + unsigned(t1_reg_1319));
    tmp_5_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_609_p2),64));
    tmp_60_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_452),64));
    tmp_64_fu_878_p1 <= wv_q1(11 - 1 downto 0);
    tmp_65_fu_900_p1 <= wv_q1(25 - 1 downto 0);
    tmp_66_fu_985_p1 <= wv_q1(2 - 1 downto 0);
    tmp_67_fu_1007_p1 <= wv_q1(13 - 1 downto 0);
    tmp_68_fu_1029_p1 <= wv_q1(22 - 1 downto 0);
    tmp_6_fu_653_p4 <= w_load_reg_1237(31 downto 17);
    tmp_7_fu_685_p3 <= (tmp_36_fu_682_p1 & tmp_s_fu_673_p4);
    tmp_8_fu_497_p3 <= (tmp_20_fu_493_p1 & ap_const_lv2_0);
    tmp_9_fu_665_p3 <= (tmp_23_fu_662_p1 & tmp_6_fu_653_p4);
    tmp_fu_476_p2 <= (block_nb and tmptmp_fu_470_p2);
    tmp_s_fu_673_p4 <= w_load_reg_1237(31 downto 19);
    tmptmp_fu_470_p2 <= (i_reg_391 xor ap_const_lv1_1);

    w_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5, tmp_3_fu_598_p1, tmp_5_fu_615_p1, tmp_27_fu_648_p1, tmp_44_fu_924_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            w_address0 <= tmp_44_fu_924_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_address0 <= tmp_27_fu_648_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            w_address0 <= tmp_5_fu_615_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w_address0 <= tmp_3_fu_598_p1(6 - 1 downto 0);
        else 
            w_address0 <= "XXXXXX";
        end if; 
    end process;


    w_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_14_fu_626_p1, tmp_16_fu_637_p1, tmp_29_fu_806_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            w_address1 <= tmp_29_fu_806_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_address1 <= tmp_16_fu_637_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            w_address1 <= tmp_14_fu_626_p1(6 - 1 downto 0);
        else 
            w_address1 <= "XXXXXX";
        end if; 
    end process;


    w_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            w_ce1 <= ap_const_logic_1;
        else 
            w_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    w_d0 <= (((message_q1 & message_q0) & message_load_1_reg_1209) & message_load_reg_1204);
    w_d1 <= std_logic_vector(unsigned(tmp4_fu_793_p2) + unsigned(tmp3_fu_788_p2));

    w_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w_we0 <= ap_const_logic_1;
        else 
            w_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            w_we1 <= ap_const_logic_1;
        else 
            w_we1 <= ap_const_logic_0;
        end if; 
    end process;


    wv_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, tmp_30_reg_1274, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            wv_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            wv_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            wv_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            wv_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            wv_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            wv_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            wv_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            wv_address0 <= tmp_30_reg_1274(3 - 1 downto 0);
        else 
            wv_address0 <= "XXX";
        end if; 
    end process;


    wv_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state18, tmp_60_fu_1101_p1, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            wv_address1 <= tmp_60_fu_1101_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            wv_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            wv_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            wv_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            wv_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            wv_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            wv_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            wv_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        else 
            wv_address1 <= "XXX";
        end if; 
    end process;


    wv_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            wv_ce0 <= ap_const_logic_1;
        else 
            wv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wv_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            wv_ce1 <= ap_const_logic_1;
        else 
            wv_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wv_d0_assign_proc : process(SHA256_m_h_q0, reg_463, ap_CS_fsm_state15, wv_load_5_reg_1336, tmp_58_reg_1343, tmp_59_reg_1348, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            wv_d0 <= tmp_59_reg_1348;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            wv_d0 <= wv_load_5_reg_1336;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            wv_d0 <= tmp_58_reg_1343;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            wv_d0 <= reg_463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            wv_d0 <= SHA256_m_h_q0;
        else 
            wv_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wv_d1_assign_proc : process(reg_463, ap_CS_fsm_state15, wv_load_1_reg_1292, wv_load_3_reg_1314, wv_load_4_reg_1325, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            wv_d1 <= wv_load_4_reg_1325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            wv_d1 <= reg_463;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            wv_d1 <= wv_load_1_reg_1292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            wv_d1 <= wv_load_3_reg_1314;
        else 
            wv_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wv_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            wv_we0 <= ap_const_logic_1;
        else 
            wv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wv_we1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            wv_we1 <= ap_const_logic_1;
        else 
            wv_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
