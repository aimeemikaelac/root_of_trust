// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_sign_ed25519_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_v_address0,
        r_v_ce0,
        r_v_we0,
        r_v_d0,
        r_v_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] r_v_address0;
output   r_v_ce0;
output   r_v_we0;
output  [31:0] r_v_d0;
input  [31:0] r_v_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] r_v_address0;
reg r_v_ce0;
reg r_v_we0;
reg[31:0] r_v_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] r_v_addr_reg_252;
reg   [31:0] r_v_load_reg_257;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_fu_124_p2;
wire   [4:0] i_29_fu_135_p2;
reg   [4:0] i_29_reg_275;
wire   [4:0] r_v_addr_9_reg_280;
wire   [0:0] m_1_fu_161_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] m_1_1_fu_187_p2;
reg   [0:0] m_1_1_reg_290;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_886_cast_cast_fu_207_p3;
reg   [31:0] tmp_886_cast_cast_reg_295;
reg   [4:0] r_v_addr_10_reg_303;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_753_fu_215_p2;
wire   [4:0] i_30_fu_226_p2;
reg   [4:0] i_30_reg_308;
reg   [4:0] i_reg_72;
reg   [0:0] m1_reg_83;
reg   [4:0] i_1_reg_93;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_s_fu_130_p1;
wire   [63:0] tmp_755_fu_221_p1;
wire   [31:0] tmp_752_fu_201_p2;
wire   [31:0] tmp_756_fu_232_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_754_fu_245_p2;
wire   [31:0] x_fu_104_p2;
wire   [31:0] x_2_fu_110_p2;
wire   [31:0] x_6_fu_141_p2;
wire   [31:0] x_7_fu_147_p2;
wire   [0:0] tmp_765_fu_153_p3;
wire   [31:0] x_4_fu_167_p2;
wire   [0:0] tmp_764_fu_173_p3;
wire   [0:0] x_5_fu_181_p2;
wire   [31:0] tmp_884_cast_cast_fu_193_p3;
wire   [31:0] tmp_890_cast_cast_fu_238_p3;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_93 <= i_30_reg_308;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_93 <= 5'd30;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_72 <= i_29_reg_275;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_72 <= 5'd30;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m1_reg_83 <= m_1_fu_161_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m1_reg_83 <= x_2_fu_110_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd0))) begin
        i_29_reg_275 <= i_29_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_753_fu_215_p2))) begin
        i_30_reg_308 <= i_30_fu_226_p2;
        r_v_addr_10_reg_303 <= tmp_755_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_1_reg_290 <= m_1_1_fu_187_p2;
        tmp_886_cast_cast_reg_295[7 : 0] <= tmp_886_cast_cast_fu_207_p3[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_v_load_reg_257 <= r_v_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_v_address0 = r_v_addr_10_reg_303;
    end else if ((((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_753_fu_215_p2)) | (1'b1 == ap_CS_fsm_state8))) begin
        r_v_address0 = r_v_addr_9_reg_280;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_753_fu_215_p2))) begin
        r_v_address0 = tmp_755_fu_221_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_v_address0 = r_v_addr_reg_252;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd1))) begin
        r_v_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd0))) begin
        r_v_address0 = tmp_s_fu_130_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        r_v_address0 = 64'd31;
    end else begin
        r_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_753_fu_215_p2)) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_753_fu_215_p2)) | (1'b1 == ap_CS_fsm_state8))) begin
        r_v_ce0 = 1'b1;
    end else begin
        r_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_v_d0 = tmp_754_fu_245_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_v_d0 = tmp_756_fu_232_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_v_d0 = tmp_752_fu_201_p2;
    end else begin
        r_v_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        r_v_we0 = 1'b1;
    end else begin
        r_v_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_753_fu_215_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i_29_fu_135_p2 = ($signed(i_reg_72) + $signed(5'd31));

assign i_30_fu_226_p2 = ($signed(i_1_reg_93) + $signed(5'd31));

assign m_1_1_fu_187_p2 = (m1_reg_83 & x_5_fu_181_p2);

assign m_1_fu_161_p2 = (tmp_765_fu_153_p3 & m1_reg_83);

assign r_v_addr_9_reg_280 = 64'd0;

assign r_v_addr_reg_252 = 64'd31;

assign tmp_752_fu_201_p2 = (r_v_load_reg_257 - tmp_884_cast_cast_fu_193_p3);

assign tmp_753_fu_215_p2 = ((i_1_reg_93 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_754_fu_245_p2 = (r_v_q0 - tmp_890_cast_cast_fu_238_p3);

assign tmp_755_fu_221_p1 = i_1_reg_93;

assign tmp_756_fu_232_p2 = (r_v_q0 - tmp_886_cast_cast_reg_295);

assign tmp_764_fu_173_p3 = x_4_fu_167_p2[32'd31];

assign tmp_765_fu_153_p3 = x_7_fu_147_p2[32'd31];

assign tmp_884_cast_cast_fu_193_p3 = ((m_1_1_fu_187_p2[0:0] === 1'b1) ? 32'd127 : 32'd0);

assign tmp_886_cast_cast_fu_207_p3 = ((m_1_1_fu_187_p2[0:0] === 1'b1) ? 32'd255 : 32'd0);

assign tmp_890_cast_cast_fu_238_p3 = ((m_1_1_reg_290[0:0] === 1'b1) ? 32'd237 : 32'd0);

assign tmp_fu_124_p2 = ((i_reg_72 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_130_p1 = i_reg_72;

assign x_2_fu_110_p2 = ($signed(x_fu_104_p2) + $signed(32'd4294967295));

assign x_4_fu_167_p2 = ($signed(r_v_q0) + $signed(32'd4294967059));

assign x_5_fu_181_p2 = (tmp_764_fu_173_p3 ^ 1'd1);

assign x_6_fu_141_p2 = (r_v_q0 ^ 32'd255);

assign x_7_fu_147_p2 = ($signed(x_6_fu_141_p2) + $signed(32'd4294967295));

assign x_fu_104_p2 = (r_v_q0 ^ 32'd127);

always @ (posedge ap_clk) begin
    tmp_886_cast_cast_reg_295[31:8] <= 24'b000000000000000000000000;
end

endmodule //crypto_sign_ed25519_21
