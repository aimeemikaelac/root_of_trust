; ModuleID = '/home/michael/hardware_security/zcu102/root_of_trust/operational_os/hls/ed25519_ref/solution1/.autopilot/db/a.o.2.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@mu = internal unnamed_addr constant [33 x i8] c"\1B\13,\0A\A3\E5\9C\ED\A7)c\08]!\06!\EB\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\0F"
@memset_signature_str = internal unnamed_addr constant [17 x i8] c"memset_signature\00"
@m = internal unnamed_addr constant [32 x i8] c"\ED\D3\F5\5C\1Ac\12X\D6\9C\F7\A2\DE\F9\DE\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10"
@ge25519_ec2d_v = internal constant [32 x i32] [i32 89, i32 241, i32 178, i32 38, i32 148, i32 155, i32 214, i32 235, i32 86, i32 177, i32 131, i32 130, i32 154, i32 20, i32 224, i32 0, i32 48, i32 209, i32 243, i32 238, i32 242, i32 128, i32 142, i32 25, i32 231, i32 252, i32 223, i32 86, i32 220, i32 217, i32 6, i32 36]
@ge25519_base_multipl_1 = internal constant [13600 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 26, i32 213, i32 37, i32 143, i32 96, i32 45, i32 86, i32 201, i32 178, i32 167, i32 37, i32 149, i32 96, i32 199, i32 44, i32 105, i32 92, i32 220, i32 214, i32 253, i32 49, i32 226, i32 164, i32 192, i32 254, i32 83, i32 110, i32 205, i32 211, i32 54, i32 105, i32 33, i32 14, i32 206, i32 67, i32 40, i32 78, i32 161, i32 197, i32 131, i32 95, i32 164, i32 215, i32 21, i32 69, i32 142, i32 13, i32 8, i32 172, i32 231, i32 51, i32 24, i32 125, i32 59, i32 4, i32 61, i32 108, i32 4, i32 90, i32 159, i32 76, i32 56, i32 171, i32 54, i32 92, i32 226, i32 248, i32 211, i32 95, i32 72, i32 98, i32 172, i32 134, i32 72, i32 98, i32 129, i32 25, i32 152, i32 67, i32 99, i32 58, i32 200, i32 218, i32 62, i32 116, i32 174, i32 244, i32 31, i32 73, i32 143, i32 146, i32 34, i32 74, i32 156, i32 174, i32 103, i32 112, i32 248, i32 201, i32 196, i32 87, i32 166, i32 58, i32 73, i32 71, i32 21, i32 206, i32 147, i32 193, i32 158, i32 115, i32 26, i32 249, i32 32, i32 53, i32 122, i32 184, i32 212, i32 37, i32 131, i32 70, i32 241, i32 207, i32 86, i32 219, i32 168, i32 61, i32 32, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 200, i32 132, i32 165, i32 8, i32 188, i32 253, i32 135, i32 59, i32 153, i32 139, i32 105, i32 128, i32 123, i32 198, i32 58, i32 235, i32 147, i32 207, i32 78, i32 248, i32 92, i32 45, i32 134, i32 66, i32 182, i32 113, i32 215, i32 151, i32 95, i32 225, i32 66, i32 103, i32 248, i32 249, i32 40, i32 108, i32 109, i32 89, i32 178, i32 89, i32 116, i32 35, i32 191, i32 231, i32 51, i32 141, i32 87, i32 9, i32 145, i32 156, i32 36, i32 8, i32 21, i32 43, i32 226, i32 184, i32 238, i32 58, i32 229, i32 39, i32 6, i32 134, i32 164, i32 35, i32 129, i32 107, i32 136, i32 232, i32 30, i32 199, i32 119, i32 150, i32 14, i32 161, i32 169, i32 82, i32 224, i32 216, i32 14, i32 97, i32 158, i32 121, i32 45, i32 149, i32 156, i32 141, i32 150, i32 224, i32 6, i32 64, i32 93, i32 135, i32 40, i32 95, i32 152, i32 112, i32 38, i32 79, i32 126, i32 151, i32 246, i32 64, i32 221, i32 79, i32 252, i32 82, i32 120, i32 249, i32 144, i32 49, i32 3, i32 230, i32 125, i32 86, i32 57, i32 11, i32 29, i32 86, i32 130, i32 133, i32 249, i32 26, i32 66, i32 23, i32 105, i32 108, i32 207, i32 57, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 164, i32 60, i32 176, i32 15, i32 122, i32 81, i32 241, i32 120, i32 214, i32 217, i32 106, i32 253, i32 70, i32 232, i32 184, i32 168, i32 121, i32 29, i32 135, i32 249, i32 144, i32 242, i32 156, i32 19, i32 41, i32 248, i32 11, i32 32, i32 100, i32 250, i32 5, i32 135, i32 221, i32 207, i32 240, i32 91, i32 73, i32 162, i32 93, i32 64, i32 122, i32 35, i32 38, i32 164, i32 122, i32 131, i32 138, i32 183, i32 139, i32 210, i32 26, i32 191, i32 234, i32 2, i32 36, i32 8, i32 95, i32 123, i32 169, i32 177, i32 190, i32 157, i32 55, i32 71, i32 252, i32 171, i32 90, i32 23, i32 240, i32 133, i32 86, i32 58, i32 48, i32 134, i32 32, i32 40, i32 75, i32 142, i32 68, i32 116, i32 58, i32 110, i32 2, i32 241, i32 50, i32 143, i32 159, i32 63, i32 8, i32 53, i32 233, i32 202, i32 22, i32 95, i32 110, i32 86, i32 165, i32 194, i32 12, i32 221, i32 188, i32 184, i32 32, i32 109, i32 87, i32 97, i32 181, i32 251, i32 120, i32 181, i32 212, i32 73, i32 84, i32 144, i32 38, i32 193, i32 203, i32 233, i32 230, i32 191, i32 236, i32 29, i32 78, i32 237, i32 7, i32 126, i32 94, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10, i32 52, i32 205, i32 130, i32 60, i32 51, i32 9, i32 84, i32 210, i32 97, i32 57, i32 48, i32 155, i32 253, i32 239, i32 33, i32 38, i32 212, i32 112, i32 250, i32 238, i32 249, i32 49, i32 51, i32 115, i32 132, i32 208, i32 179, i32 129, i32 191, i32 236, i32 46, i32 104, i32 43, i32 74, i32 91, i32 213, i32 199, i32 81, i32 145, i32 29, i32 225, i32 42, i32 75, i32 196, i32 71, i32 241, i32 188, i32 122, i32 179, i32 203, i32 200, i32 182, i32 124, i32 172, i32 144, i32 5, i32 253, i32 243, i32 249, i32 82, i32 58, i32 17, i32 107, i32 21, i32 6, i32 73, i32 182, i32 138, i32 60, i32 234, i32 47, i32 52, i32 32, i32 20, i32 195, i32 170, i32 214, i32 175, i32 44, i32 62, i32 189, i32 101, i32 32, i32 226, i32 77, i32 75, i32 59, i32 235, i32 159, i32 74, i32 195, i32 173, i32 164, i32 59, i32 96, i32 247, i32 23, i32 19, i32 189, i32 251, i32 188, i32 210, i32 236, i32 69, i32 179, i32 21, i32 49, i32 233, i32 175, i32 130, i32 132, i32 61, i32 40, i32 198, i32 252, i32 17, i32 245, i32 65, i32 181, i32 139, i32 211, i32 18, i32 118, i32 82, i32 231, i32 26, i32 60, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 234, i32 214, i32 222, i32 41, i32 58, i32 0, i32 185, i32 2, i32 89, i32 203, i32 38, i32 196, i32 186, i32 153, i32 177, i32 151, i32 47, i32 142, i32 0, i32 146, i32 38, i32 79, i32 82, i32 235, i32 71, i32 27, i32 137, i32 139, i32 36, i32 192, i32 19, i32 125, i32 222, i32 201, i32 177, i32 49, i32 16, i32 22, i32 170, i32 53, i32 20, i32 106, i32 212, i32 181, i32 52, i32 130, i32 113, i32 210, i32 74, i32 93, i32 154, i32 31, i32 83, i32 38, i32 60, i32 229, i32 142, i32 141, i32 51, i32 127, i32 255, i32 169, i32 213, i32 23, i32 100, i32 29, i32 73, i32 19, i32 47, i32 113, i32 236, i32 105, i32 135, i32 208, i32 66, i32 238, i32 19, i32 236, i32 227, i32 237, i32 86, i32 123, i32 191, i32 189, i32 140, i32 47, i32 125, i32 123, i32 157, i32 40, i32 236, i32 142, i32 118, i32 47, i32 111, i32 8, i32 138, i32 75, i32 231, i32 56, i32 188, i32 218, i32 194, i32 176, i32 133, i32 225, i32 74, i32 254, i32 45, i32 68, i32 132, i32 203, i32 32, i32 107, i32 45, i32 191, i32 17, i32 156, i32 215, i32 190, i32 211, i32 62, i32 95, i32 191, i32 104, i32 188, i32 168, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 255, i32 50, i32 43, i32 92, i32 147, i32 84, i32 50, i32 232, i32 87, i32 84, i32 26, i32 139, i32 51, i32 96, i32 101, i32 211, i32 103, i32 164, i32 193, i32 38, i32 196, i32 164, i32 52, i32 31, i32 155, i32 167, i32 169, i32 244, i32 217, i32 79, i32 91, i32 101, i32 165, i32 17, i32 132, i32 138, i32 103, i32 157, i32 158, i32 209, i32 68, i32 104, i32 122, i32 52, i32 225, i32 159, i32 163, i32 84, i32 205, i32 7, i32 202, i32 121, i32 31, i32 84, i32 47, i32 19, i32 112, i32 78, i32 238, i32 162, i32 250, i32 231, i32 93, i32 167, i32 214, i32 46, i32 213, i32 204, i32 212, i32 203, i32 90, i32 59, i32 167, i32 249, i32 70, i32 3, i32 29, i32 173, i32 43, i32 52, i32 49, i32 144, i32 0, i32 70, i32 8, i32 130, i32 20, i32 196, i32 224, i32 156, i32 240, i32 227, i32 85, i32 67, i32 49, i32 39, i32 79, i32 208, i32 114, i32 177, i32 17, i32 20, i32 39, i32 21, i32 148, i32 72, i32 129, i32 126, i32 116, i32 216, i32 50, i32 213, i32 209, i32 17, i32 40, i32 96, i32 99, i32 54, i32 50, i32 55, i32 181, i32 19, i32 28, i32 160, i32 55, i32 227, i32 116, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 52, i32 148, i32 242, i32 100, i32 84, i32 71, i32 55, i32 7, i32 64, i32 138, i32 32, i32 186, i32 74, i32 85, i32 215, i32 63, i32 71, i32 186, i32 37, i32 35, i32 20, i32 176, i32 44, i32 232, i32 85, i32 168, i32 166, i32 239, i32 81, i32 189, i32 111, i32 106, i32 52, i32 150, i32 154, i32 246, i32 197, i32 224, i32 20, i32 3, i32 36, i32 14, i32 76, i32 173, i32 158, i32 154, i32 112, i32 35, i32 150, i32 178, i32 241, i32 46, i32 157, i32 195, i32 50, i32 155, i32 84, i32 165, i32 115, i32 222, i32 136, i32 177, i32 62, i32 36, i32 116, i32 222, i32 18, i32 243, i32 104, i32 183, i32 102, i32 195, i32 238, i32 104, i32 220, i32 129, i32 181, i32 85, i32 153, i32 171, i32 217, i32 40, i32 99, i32 109, i32 139, i32 64, i32 105, i32 117, i32 108, i32 205, i32 92, i32 42, i32 126, i32 50, i32 123, i32 41, i32 237, i32 181, i32 154, i32 140, i32 154, i32 221, i32 39, i32 244, i32 127, i32 71, i32 217, i32 82, i32 167, i32 205, i32 101, i32 165, i32 49, i32 34, i32 237, i32 166, i32 99, i32 91, i32 128, i32 74, i32 173, i32 77, i32 237, i32 191, i32 238, i32 73, i32 179, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 125, i32 79, i32 156, i32 25, i32 192, i32 74, i32 49, i32 236, i32 249, i32 170, i32 235, i32 178, i32 22, i32 156, i32 163, i32 102, i32 95, i32 209, i32 212, i32 237, i32 184, i32 146, i32 28, i32 171, i32 218, i32 234, i32 217, i32 87, i32 223, i32 76, i32 42, i32 72, i32 60, i32 143, i32 159, i32 51, i32 42, i32 31, i32 67, i32 51, i32 143, i32 104, i32 255, i32 31, i32 61, i32 115, i32 107, i32 191, i32 104, i32 204, i32 125, i32 19, i32 108, i32 36, i32 75, i32 204, i32 77, i32 36, i32 13, i32 254, i32 222, i32 134, i32 173, i32 59, i32 6, i32 249, i32 41, i32 90, i32 219, i32 61, i32 132, i32 82, i32 171, i32 204, i32 107, i32 96, i32 157, i32 183, i32 74, i32 14, i32 54, i32 99, i32 145, i32 173, i32 160, i32 149, i32 176, i32 151, i32 137, i32 78, i32 207, i32 125, i32 60, i32 229, i32 124, i32 40, i32 84, i32 190, i32 117, i32 203, i32 5, i32 176, i32 84, i32 183, i32 231, i32 38, i32 134, i32 74, i32 252, i32 25, i32 207, i32 39, i32 70, i32 212, i32 34, i32 150, i32 90, i32 17, i32 232, i32 213, i32 27, i32 237, i32 113, i32 197, i32 93, i32 200, i32 175, i32 69, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 119, i32 58, i32 212, i32 216, i32 39, i32 207, i32 232, i32 161, i32 114, i32 157, i32 202, i32 221, i32 13, i32 150, i32 218, i32 121, i32 237, i32 86, i32 66, i32 21, i32 96, i32 199, i32 28, i32 107, i32 38, i32 48, i32 246, i32 106, i32 149, i32 103, i32 243, i32 10, i32 51, i32 13, i32 231, i32 186, i32 79, i32 7, i32 223, i32 141, i32 234, i32 125, i32 160, i32 197, i32 214, i32 177, i32 176, i32 229, i32 87, i32 27, i32 91, i32 245, i32 69, i32 19, i32 20, i32 100, i32 90, i32 235, i32 92, i32 252, i32 84, i32 1, i32 118, i32 43, i32 216, i32 185, i32 17, i32 232, i32 54, i32 63, i32 66, i32 193, i32 202, i32 220, i32 211, i32 241, i32 200, i32 35, i32 61, i32 79, i32 81, i32 123, i32 157, i32 141, i32 216, i32 228, i32 160, i32 170, i32 243, i32 4, i32 214, i32 17, i32 147, i32 200, i32 53, i32 69, i32 107, i32 219, i32 91, i32 156, i32 198, i32 146, i32 188, i32 35, i32 175, i32 197, i32 184, i32 117, i32 248, i32 66, i32 250, i32 214, i32 182, i32 132, i32 148, i32 99, i32 152, i32 147, i32 72, i32 120, i32 56, i32 205, i32 187, i32 24, i32 52, i32 195, i32 219, i32 103, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 121, i32 132, i32 68, i32 25, i32 189, i32 233, i32 84, i32 196, i32 192, i32 110, i32 42, i32 168, i32 168, i32 155, i32 67, i32 213, i32 113, i32 34, i32 95, i32 220, i32 1, i32 250, i32 223, i32 179, i32 184, i32 71, i32 75, i32 10, i32 165, i32 68, i32 234, i32 41, i32 43, i32 190, i32 175, i32 161, i32 109, i32 47, i32 11, i32 177, i32 143, i32 227, i32 224, i32 56, i32 205, i32 11, i32 65, i32 27, i32 74, i32 21, i32 7, i32 243, i32 111, i32 220, i32 184, i32 233, i32 222, i32 178, i32 163, i32 64, i32 1, i32 166, i32 69, i32 30, i32 253, i32 103, i32 107, i32 113, i32 155, i32 129, i32 83, i32 57, i32 57, i32 244, i32 184, i32 213, i32 195, i32 48, i32 155, i32 59, i32 124, i32 163, i32 240, i32 208, i32 132, i32 33, i32 214, i32 191, i32 183, i32 76, i32 135, i32 19, i32 69, i32 45, i32 167, i32 85, i32 93, i32 147, i32 201, i32 190, i32 170, i32 144, i32 205, i32 155, i32 251, i32 115, i32 126, i32 176, i32 100, i32 152, i32 87, i32 68, i32 66, i32 65, i32 177, i32 175, i32 234, i32 193, i32 195, i32 34, i32 255, i32 96, i32 70, i32 203, i32 97, i32 129, i32 112, i32 97, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 145, i32 247, i32 81, i32 217, i32 239, i32 125, i32 66, i32 1, i32 19, i32 233, i32 184, i32 127, i32 166, i32 73, i32 23, i32 100, i32 33, i32 128, i32 131, i32 44, i32 99, i32 76, i32 96, i32 9, i32 89, i32 145, i32 146, i32 119, i32 57, i32 81, i32 244, i32 72, i32 216, i32 206, i32 220, i32 249, i32 60, i32 75, i32 162, i32 29, i32 44, i32 47, i32 54, i32 190, i32 122, i32 252, i32 205, i32 188, i32 220, i32 249, i32 48, i32 189, i32 255, i32 5, i32 199, i32 228, i32 142, i32 23, i32 98, i32 248, i32 77, i32 160, i32 86, i32 121, i32 131, i32 225, i32 110, i32 169, i32 7, i32 51, i32 62, i32 131, i32 255, i32 203, i32 28, i32 159, i32 177, i32 163, i32 180, i32 201, i32 225, i32 7, i32 151, i32 255, i32 248, i32 35, i32 143, i32 206, i32 64, i32 253, i32 46, i32 94, i32 219, i32 22, i32 67, i32 45, i32 187, i32 12, i32 188, i32 106, i32 164, i32 151, i32 23, i32 147, i32 45, i32 111, i32 222, i32 114, i32 16, i32 28, i32 8, i32 44, i32 15, i32 128, i32 50, i32 104, i32 39, i32 212, i32 171, i32 221, i32 197, i32 88, i32 97, i32 19, i32 109, i32 17, i32 30, i32 77, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 21, i32 125, i32 18, i32 72, i32 130, i32 20, i32 66, i32 205, i32 50, i32 212, i32 75, i32 193, i32 114, i32 97, i32 42, i32 140, i32 236, i32 226, i32 248, i32 36, i32 69, i32 148, i32 227, i32 190, i32 221, i32 103, i32 168, i32 119, i32 90, i32 174, i32 91, i32 75, i32 223, i32 252, i32 105, i32 40, i32 35, i32 63, i32 91, i32 248, i32 59, i32 36, i32 55, i32 243, i32 29, i32 213, i32 34, i32 107, i32 208, i32 152, i32 168, i32 108, i32 207, i32 255, i32 6, i32 225, i32 19, i32 223, i32 185, i32 193, i32 12, i32 169, i32 191, i32 51, i32 103, i32 2, i32 232, i32 173, i32 169, i32 52, i32 212, i32 240, i32 21, i32 129, i32 170, i32 199, i32 77, i32 135, i32 148, i32 234, i32 117, i32 231, i32 76, i32 148, i32 4, i32 14, i32 105, i32 135, i32 231, i32 81, i32 145, i32 16, i32 3, i32 199, i32 190, i32 86, i32 198, i32 239, i32 185, i32 192, i32 43, i32 34, i32 8, i32 30, i32 113, i32 112, i32 179, i32 53, i32 156, i32 122, i32 1, i32 146, i32 68, i32 154, i32 246, i32 176, i32 88, i32 149, i32 193, i32 155, i32 2, i32 237, i32 45, i32 124, i32 52, i32 41, i32 73, i32 68, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 208, i32 211, i32 66, i32 237, i32 29, i32 0, i32 60, i32 21, i32 44, i32 156, i32 119, i32 129, i32 210, i32 115, i32 209, i32 6, i32 213, i32 196, i32 127, i32 148, i32 187, i32 146, i32 45, i32 44, i32 75, i32 69, i32 75, i32 233, i32 42, i32 137, i32 107, i32 43, i32 180, i32 4, i32 46, i32 66, i32 203, i32 31, i32 43, i32 17, i32 81, i32 123, i32 8, i32 172, i32 170, i32 62, i32 158, i32 82, i32 96, i32 183, i32 194, i32 97, i32 87, i32 140, i32 132, i32 213, i32 24, i32 166, i32 25, i32 252, i32 183, i32 117, i32 145, i32 27, i32 227, i32 174, i32 200, i32 193, i32 113, i32 117, i32 49, i32 0, i32 55, i32 65, i32 92, i32 14, i32 57, i32 218, i32 115, i32 160, i32 199, i32 151, i32 54, i32 108, i32 91, i32 242, i32 238, i32 100, i32 10, i32 61, i32 137, i32 30, i32 29, i32 73, i32 140, i32 55, i32 135, i32 238, i32 166, i32 86, i32 158, i32 194, i32 154, i32 86, i32 36, i32 66, i32 133, i32 77, i32 152, i32 49, i32 30, i32 96, i32 77, i32 135, i32 133, i32 4, i32 174, i32 70, i32 18, i32 249, i32 142, i32 127, i32 228, i32 127, i32 246, i32 28, i32 55, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 114, i32 211, i32 174, i32 166, i32 202, i32 143, i32 205, i32 204, i32 120, i32 142, i32 25, i32 77, i32 167, i32 210, i32 39, i32 233, i32 164, i32 60, i32 22, i32 91, i32 132, i32 128, i32 249, i32 208, i32 204, i32 106, i32 30, i32 202, i32 30, i32 103, i32 189, i32 99, i32 229, i32 16, i32 71, i32 59, i32 250, i32 144, i32 252, i32 48, i32 181, i32 234, i32 111, i32 86, i32 143, i32 251, i32 14, i32 167, i32 59, i32 200, i32 178, i32 255, i32 2, i32 122, i32 51, i32 148, i32 147, i32 42, i32 3, i32 224, i32 150, i32 58, i32 108, i32 15, i32 63, i32 117, i32 142, i32 180, i32 255, i32 216, i32 221, i32 214, i32 55, i32 87, i32 157, i32 109, i32 59, i32 189, i32 213, i32 96, i32 136, i32 101, i32 154, i32 185, i32 74, i32 104, i32 132, i32 162, i32 103, i32 221, i32 23, i32 37, i32 151, i32 4, i32 139, i32 94, i32 64, i32 180, i32 171, i32 230, i32 173, i32 159, i32 70, i32 105, i32 74, i32 179, i32 142, i32 170, i32 234, i32 156, i32 138, i32 32, i32 22, i32 93, i32 140, i32 19, i32 189, i32 246, i32 29, i32 197, i32 36, i32 189, i32 144, i32 42, i32 28, i32 199, i32 19, i32 59, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32, i32 168, i32 136, i32 227, i32 145, i32 192, i32 110, i32 187, i32 138, i32 39, i32 130, i32 81, i32 131, i32 178, i32 40, i32 169, i32 131, i32 235, i32 166, i32 169, i32 77, i32 23, i32 89, i32 34, i32 84, i32 0, i32 80, i32 69, i32 203, i32 72, i32 75, i32 24, i32 52, i32 92, i32 19, i32 251, i32 192, i32 227, i32 120, i32 43, i32 84, i32 88, i32 34, i32 155, i32 118, i32 129, i32 127, i32 147, i32 156, i32 37, i32 60, i32 210, i32 233, i32 150, i32 33, i32 38, i32 8, i32 245, i32 237, i32 149, i32 17, i32 174, i32 4, i32 90, i32 179, i32 64, i32 41, i32 209, i32 203, i32 27, i32 8, i32 158, i32 156, i32 183, i32 83, i32 185, i32 59, i32 113, i32 8, i32 149, i32 18, i32 26, i32 88, i32 175, i32 126, i32 130, i32 82, i32 67, i32 79, i32 17, i32 57, i32 244, i32 147, i32 26, i32 38, i32 5, i32 62, i32 168, i32 56, i32 194, i32 87, i32 86, i32 66, i32 154, i32 177, i32 226, i32 248, i32 69, i32 170, i32 17, i32 72, i32 95, i32 23, i32 196, i32 84, i32 39, i32 220, i32 93, i32 170, i32 221, i32 65, i32 188, i32 223, i32 129, i32 185, i32 83, i32 238, i32 82, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 37, i32 36, i32 29, i32 138, i32 103, i32 32, i32 238, i32 66, i32 235, i32 56, i32 237, i32 11, i32 139, i32 205, i32 70, i32 157, i32 94, i32 107, i32 30, i32 36, i32 157, i32 18, i32 5, i32 26, i32 204, i32 5, i32 78, i32 146, i32 56, i32 225, i32 31, i32 80, i32 104, i32 59, i32 10, i32 57, i32 29, i32 106, i32 21, i32 87, i32 252, i32 240, i32 99, i32 84, i32 219, i32 57, i32 219, i32 232, i32 92, i32 100, i32 255, i32 160, i32 9, i32 79, i32 59, i32 183, i32 50, i32 96, i32 153, i32 148, i32 253, i32 148, i32 130, i32 45, i32 120, i32 82, i32 135, i32 201, i32 151, i32 99, i32 177, i32 221, i32 84, i32 95, i32 193, i32 248, i32 241, i32 6, i32 166, i32 168, i32 163, i32 136, i32 130, i32 212, i32 203, i32 166, i32 25, i32 221, i32 209, i32 17, i32 135, i32 8, i32 23, i32 76, i32 55, i32 42, i32 29, i32 218, i32 228, i32 97, i32 3, i32 80, i32 169, i32 139, i32 104, i32 24, i32 239, i32 178, i32 28, i32 132, i32 59, i32 162, i32 68, i32 149, i32 163, i32 4, i32 59, i32 214, i32 153, i32 0, i32 175, i32 118, i32 66, i32 103, i32 2, i32 125, i32 133, i32 86, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 82, i32 253, i32 4, i32 197, i32 251, i32 153, i32 231, i32 232, i32 251, i32 140, i32 225, i32 66, i32 3, i32 239, i32 157, i32 217, i32 158, i32 77, i32 247, i32 128, i32 207, i32 46, i32 204, i32 155, i32 69, i32 201, i32 123, i32 122, i32 188, i32 55, i32 168, i32 82, i32 83, i32 205, i32 243, i32 134, i32 64, i32 230, i32 57, i32 66, i32 149, i32 214, i32 203, i32 69, i32 26, i32 32, i32 200, i32 69, i32 75, i32 50, i32 105, i32 4, i32 177, i32 175, i32 32, i32 70, i32 199, i32 107, i32 35, i32 91, i32 105, i32 238, i32 48, i32 63, i32 202, i32 252, i32 136, i32 107, i32 150, i32 120, i32 10, i32 139, i32 131, i32 220, i32 188, i32 175, i32 64, i32 182, i32 141, i32 127, i32 239, i32 180, i32 209, i32 63, i32 204, i32 162, i32 116, i32 201, i32 194, i32 146, i32 85, i32 0, i32 171, i32 219, i32 191, i32 79, i32 228, i32 230, i32 109, i32 48, i32 125, i32 48, i32 53, i32 194, i32 120, i32 135, i32 249, i32 252, i32 107, i32 90, i32 195, i32 183, i32 101, i32 216, i32 46, i32 199, i32 165, i32 12, i32 198, i32 220, i32 18, i32 170, i32 214, i32 79, i32 197, i32 56, i32 188, i32 14, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 219, i32 73, i32 14, i32 230, i32 88, i32 16, i32 122, i32 82, i32 218, i32 181, i32 125, i32 55, i32 106, i32 62, i32 161, i32 120, i32 206, i32 199, i32 28, i32 36, i32 35, i32 219, i32 125, i32 251, i32 140, i32 141, i32 220, i32 48, i32 103, i32 105, i32 117, i32 59, i32 164, i32 235, i32 4, i32 164, i32 140, i32 143, i32 113, i32 39, i32 149, i32 133, i32 93, i32 85, i32 75, i32 177, i32 38, i32 38, i32 200, i32 174, i32 106, i32 125, i32 162, i32 33, i32 202, i32 206, i32 56, i32 171, i32 15, i32 208, i32 213, i32 43, i32 107, i32 0, i32 132, i32 86, i32 130, i32 182, i32 18, i32 112, i32 127, i32 247, i32 240, i32 189, i32 91, i32 169, i32 213, i32 197, i32 95, i32 89, i32 191, i32 127, i32 179, i32 85, i32 34, i32 2, i32 201, i32 68, i32 85, i32 135, i32 143, i32 150, i32 152, i32 100, i32 109, i32 21, i32 216, i32 43, i32 91, i32 22, i32 234, i32 32, i32 241, i32 211, i32 104, i32 143, i32 174, i32 91, i32 208, i32 169, i32 26, i32 25, i32 168, i32 54, i32 251, i32 43, i32 87, i32 136, i32 125, i32 144, i32 213, i32 166, i32 243, i32 220, i32 56, i32 137, i32 78, i32 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 37, i32 185, i32 194, i32 240, i32 114, i32 184, i32 21, i32 22, i32 204, i32 141, i32 60, i32 111, i32 37, i32 237, i32 244, i32 70, i32 46, i32 12, i32 96, i32 15, i32 226, i32 132, i32 52, i32 85, i32 137, i32 89, i32 52, i32 27, i32 245, i32 141, i32 254, i32 8, i32 116, i32 28, i32 20, i32 155, i32 212, i32 100, i32 97, i32 113, i32 90, i32 182, i32 33, i32 51, i32 79, i32 247, i32 142, i32 186, i32 165, i32 72, i32 154, i32 199, i32 250, i32 154, i32 240, i32 180, i32 98, i32 173, i32 242, i32 94, i32 204, i32 3, i32 36, i32 26, i32 21, i32 190, i32 154, i32 13, i32 186, i32 56, i32 114, i32 32, i32 138, i32 245, i32 190, i32 89, i32 147, i32 121, i32 183, i32 246, i32 106, i32 12, i32 56, i32 39, i32 26, i32 96, i32 244, i32 134, i32 59, i32 171, i32 90, i32 0, i32 160, i32 206, i32 33, i32 125, i32 228, i32 13, i32 244, i32 189, i32 238, i32 49, i32 16, i32 237, i32 203, i32 18, i32 134, i32 173, i32 212, i32 47, i32 144, i32 55, i32 50, i32 195, i32 11, i32 115, i32 236, i32 151, i32 133, i32 164, i32 1, i32 28, i32 118, i32 53, i32 254, i32 117, i32 221, i32 113, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 144, i32 112, i32 88, i32 32, i32 3, i32 30, i32 103, i32 178, i32 200, i32 155, i32 88, i32 197, i32 177, i32 235, i32 45, i32 74, i32 222, i32 130, i32 140, i32 242, i32 210, i32 20, i32 184, i32 112, i32 97, i32 78, i32 115, i32 214, i32 11, i32 107, i32 13, i32 48, i32 249, i32 200, i32 190, i32 140, i32 22, i32 129, i32 57, i32 150, i32 246, i32 23, i32 88, i32 200, i32 48, i32 88, i32 251, i32 194, i32 3, i32 69, i32 210, i32 82, i32 118, i32 224, i32 106, i32 38, i32 40, i32 92, i32 136, i32 89, i32 106, i32 90, i32 84, i32 66, i32 65, i32 250, i32 140, i32 225, i32 137, i32 143, i32 39, i32 200, i32 37, i32 143, i32 111, i32 95, i32 85, i32 248, i32 222, i32 149, i32 109, i32 47, i32 117, i32 22, i32 43, i32 78, i32 68, i32 253, i32 134, i32 110, i32 233, i32 112, i32 57, i32 118, i32 151, i32 126, i32 2, i32 58, i32 112, i32 65, i32 228, i32 17, i32 87, i32 35, i32 172, i32 230, i32 252, i32 84, i32 126, i32 205, i32 215, i32 34, i32 203, i32 118, i32 159, i32 32, i32 206, i32 160, i32 115, i32 118, i32 81, i32 59, i32 164, i32 248, i32 227, i32 98, i32 18, i32 108, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 245, i32 108, i32 212, i32 47, i32 15, i32 105, i32 15, i32 135, i32 63, i32 97, i32 101, i32 30, i32 53, i32 52, i32 133, i32 186, i32 2, i32 48, i32 172, i32 37, i32 61, i32 226, i32 98, i32 241, i32 204, i32 233, i32 27, i32 194, i32 239, i32 106, i32 66, i32 87, i32 245, i32 72, i32 11, i32 3, i32 197, i32 34, i32 125, i32 128, i32 8, i32 83, i32 254, i32 50, i32 177, i32 161, i32 138, i32 116, i32 111, i32 189, i32 63, i32 133, i32 244, i32 207, i32 245, i32 96, i32 175, i32 65, i32 126, i32 62, i32 70, i32 163, i32 90, i32 32, i32 179, i32 16, i32 69, i32 2, i32 105, i32 89, i32 46, i32 151, i32 217, i32 100, i32 248, i32 219, i32 37, i32 128, i32 220, i32 196, i32 213, i32 98, i32 60, i32 237, i32 101, i32 145, i32 173, i32 209, i32 87, i32 129, i32 148, i32 170, i32 161, i32 41, i32 252, i32 104, i32 55, i32 234, i32 254, i32 101, i32 59, i32 37, i32 232, i32 225, i32 194, i32 197, i32 2, i32 164, i32 190, i32 152, i32 10, i32 43, i32 97, i32 193, i32 155, i32 226, i32 213, i32 146, i32 230, i32 158, i32 125, i32 31, i32 202, i32 67, i32 136, i32 139, i32 44, i32 89, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 34, i32 175, i32 19, i32 55, i32 189, i32 55, i32 113, i32 172, i32 4, i32 70, i32 99, i32 172, i32 164, i32 119, i32 237, i32 37, i32 56, i32 224, i32 21, i32 168, i32 100, i32 0, i32 13, i32 206, i32 81, i32 1, i32 169, i32 188, i32 15, i32 3, i32 28, i32 4, i32 2, i32 162, i32 237, i32 244, i32 143, i32 107, i32 11, i32 62, i32 235, i32 53, i32 26, i32 213, i32 126, i32 219, i32 120, i32 0, i32 150, i32 138, i32 160, i32 180, i32 207, i32 96, i32 75, i32 212, i32 213, i32 249, i32 45, i32 191, i32 136, i32 189, i32 34, i32 98, i32 81, i32 22, i32 80, i32 124, i32 213, i32 93, i32 246, i32 153, i32 232, i32 119, i32 114, i32 78, i32 250, i32 98, i32 203, i32 118, i32 117, i32 12, i32 226, i32 113, i32 152, i32 146, i32 213, i32 250, i32 69, i32 223, i32 92, i32 111, i32 30, i32 158, i32 40, i32 105, i32 151, i32 165, i32 219, i32 139, i32 45, i32 170, i32 66, i32 17, i32 9, i32 242, i32 147, i32 187, i32 217, i32 6, i32 132, i32 78, i32 17, i32 168, i32 160, i32 37, i32 43, i32 166, i32 95, i32 174, i32 196, i32 180, i32 76, i32 200, i32 171, i32 199, i32 59, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 105, i32 209, i32 57, i32 189, i32 251, i32 51, i32 190, i32 196, i32 240, i32 92, i32 239, i32 240, i32 86, i32 104, i32 252, i32 151, i32 71, i32 200, i32 114, i32 182, i32 83, i32 164, i32 10, i32 152, i32 165, i32 180, i32 55, i32 113, i32 207, i32 102, i32 80, i32 109, i32 169, i32 98, i32 147, i32 133, i32 190, i32 232, i32 115, i32 74, i32 14, i32 176, i32 181, i32 45, i32 148, i32 80, i32 170, i32 211, i32 178, i32 234, i32 157, i32 98, i32 118, i32 59, i32 7, i32 52, i32 78, i32 45, i32 112, i32 200, i32 154, i32 21, i32 102, i32 107, i32 77, i32 194, i32 23, i32 117, i32 161, i32 104, i32 205, i32 195, i32 198, i32 3, i32 68, i32 227, i32 120, i32 9, i32 145, i32 71, i32 63, i32 15, i32 228, i32 146, i32 88, i32 250, i32 125, i32 31, i32 32, i32 148, i32 88, i32 94, i32 188, i32 25, i32 2, i32 111, i32 38, i32 162, i32 80, i32 2, i32 36, i32 114, i32 241, i32 240, i32 78, i32 45, i32 147, i32 213, i32 8, i32 231, i32 174, i32 56, i32 247, i32 24, i32 165, i32 50, i32 52, i32 194, i32 240, i32 166, i32 236, i32 185, i32 97, i32 123, i32 100, i32 153, i32 172, i32 113, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 43, i32 119, i32 69, i32 236, i32 103, i32 118, i32 50, i32 76, i32 185, i32 223, i32 37, i32 50, i32 107, i32 203, i32 231, i32 20, i32 97, i32 67, i32 238, i32 186, i32 155, i32 113, i32 239, i32 210, i32 72, i32 101, i32 187, i32 27, i32 138, i32 19, i32 27, i32 34, i32 40, i32 92, i32 63, i32 219, i32 107, i32 24, i32 59, i32 92, i32 209, i32 4, i32 40, i32 222, i32 133, i32 82, i32 49, i32 181, i32 187, i32 246, i32 169, i32 237, i32 190, i32 40, i32 79, i32 179, i32 126, i32 5, i32 106, i32 219, i32 149, i32 13, i32 27, i32 28, i32 204, i32 33, i32 39, i32 206, i32 253, i32 169, i32 148, i32 142, i32 225, i32 171, i32 73, i32 224, i32 70, i32 38, i32 161, i32 168, i32 140, i32 161, i32 153, i32 29, i32 180, i32 39, i32 109, i32 45, i32 200, i32 57, i32 48, i32 94, i32 55, i32 82, i32 196, i32 110, i32 71, i32 159, i32 124, i32 86, i32 124, i32 67, i32 145, i32 28, i32 187, i32 78, i32 114, i32 62, i32 100, i32 171, i32 160, i32 160, i32 223, i32 180, i32 216, i32 135, i32 58, i32 189, i32 168, i32 72, i32 201, i32 184, i32 239, i32 46, i32 173, i32 111, i32 132, i32 79, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 159, i32 62, i32 242, i32 178, i32 144, i32 206, i32 219, i32 100, i32 62, i32 3, i32 221, i32 55, i32 54, i32 84, i32 112, i32 118, i32 36, i32 181, i32 105, i32 3, i32 252, i32 160, i32 43, i32 116, i32 178, i32 5, i32 14, i32 204, i32 216, i32 31, i32 106, i32 31, i32 108, i32 50, i32 79, i32 253, i32 187, i32 92, i32 187, i32 141, i32 100, i32 102, i32 74, i32 113, i32 31, i32 121, i32 163, i32 173, i32 141, i32 249, i32 212, i32 236, i32 207, i32 103, i32 112, i32 250, i32 5, i32 74, i32 15, i32 110, i32 175, i32 135, i32 10, i32 111, i32 244, i32 21, i32 205, i32 15, i32 10, i32 175, i32 78, i32 107, i32 81, i32 253, i32 20, i32 196, i32 46, i32 19, i32 134, i32 116, i32 68, i32 203, i32 102, i32 107, i32 182, i32 157, i32 116, i32 86, i32 50, i32 172, i32 141, i32 142, i32 140, i32 140, i32 140, i32 57, i32 100, i32 5, i32 122, i32 132, i32 74, i32 19, i32 195, i32 246, i32 176, i32 110, i32 154, i32 107, i32 83, i32 107, i32 50, i32 218, i32 217, i32 116, i32 117, i32 196, i32 186, i32 100, i32 61, i32 59, i32 8, i32 221, i32 16, i32 70, i32 239, i32 199, i32 144, i32 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 78, i32 211, i32 45, i32 9, i32 51, i32 14, i32 210, i32 13, i32 190, i32 62, i32 231, i32 228, i32 170, i32 183, i32 0, i32 139, i32 232, i32 173, i32 170, i32 122, i32 141, i32 52, i32 40, i32 169, i32 129, i32 148, i32 197, i32 231, i32 66, i32 172, i32 71, i32 204, i32 213, i32 57, i32 252, i32 165, i32 164, i32 173, i32 50, i32 21, i32 206, i32 25, i32 232, i32 52, i32 43, i32 28, i32 96, i32 145, i32 252, i32 5, i32 169, i32 179, i32 220, i32 128, i32 41, i32 196, i32 32, i32 121, i32 6, i32 57, i32 192, i32 226, i32 34, i32 43, i32 140, i32 45, i32 154, i32 139, i32 132, i32 242, i32 86, i32 251, i32 173, i32 46, i32 127, i32 183, i32 252, i32 48, i32 225, i32 53, i32 137, i32 186, i32 77, i32 168, i32 109, i32 206, i32 140, i32 139, i32 48, i32 224, i32 218, i32 41, i32 24, i32 17, i32 23, i32 61, i32 213, i32 154, i32 100, i32 115, i32 54, i32 177, i32 214, i32 134, i32 152, i32 66, i32 63, i32 138, i32 241, i32 199, i32 245, i32 66, i32 168, i32 156, i32 82, i32 168, i32 220, i32 249, i32 36, i32 63, i32 74, i32 161, i32 164, i32 91, i32 232, i32 98, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 234, i32 249, i32 228, i32 233, i32 225, i32 82, i32 63, i32 81, i32 25, i32 13, i32 221, i32 217, i32 157, i32 147, i32 49, i32 135, i32 35, i32 9, i32 213, i32 131, i32 235, i32 146, i32 9, i32 118, i32 110, i32 227, i32 248, i32 192, i32 162, i32 102, i32 181, i32 54, i32 178, i32 231, i32 143, i32 227, i32 163, i32 197, i32 203, i32 114, i32 238, i32 121, i32 65, i32 248, i32 223, i32 238, i32 101, i32 197, i32 69, i32 119, i32 39, i32 60, i32 189, i32 88, i32 211, i32 117, i32 226, i32 4, i32 75, i32 187, i32 101, i32 243, i32 200, i32 15, i32 22, i32 223, i32 209, i32 90, i32 213, i32 233, i32 78, i32 88, i32 149, i32 147, i32 95, i32 81, i32 9, i32 195, i32 42, i32 201, i32 212, i32 85, i32 72, i32 121, i32 164, i32 163, i32 178, i32 195, i32 98, i32 170, i32 140, i32 232, i32 173, i32 71, i32 57, i32 27, i32 244, i32 16, i32 70, i32 190, i32 183, i32 210, i32 209, i32 206, i32 94, i32 118, i32 162, i32 215, i32 3, i32 220, i32 228, i32 129, i32 90, i32 246, i32 60, i32 222, i32 174, i32 122, i32 157, i32 33, i32 52, i32 165, i32 246, i32 169, i32 115, i32 226, i32 141, i32 96, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 129, i32 213, i32 52, i32 22, i32 1, i32 163, i32 147, i32 234, i32 82, i32 148, i32 236, i32 147, i32 183, i32 129, i32 17, i32 45, i32 88, i32 249, i32 181, i32 10, i32 170, i32 79, i32 246, i32 46, i32 63, i32 54, i32 191, i32 51, i32 90, i32 231, i32 209, i32 8, i32 111, i32 201, i32 81, i32 109, i32 28, i32 170, i32 245, i32 165, i32 144, i32 63, i32 20, i32 226, i32 110, i32 142, i32 100, i32 253, i32 172, i32 224, i32 78, i32 34, i32 229, i32 193, i32 188, i32 41, i32 10, i32 106, i32 158, i32 161, i32 96, i32 203, i32 47, i32 11, i32 31, i32 154, i32 82, i32 100, i32 151, i32 217, i32 28, i32 8, i32 81, i32 111, i32 38, i32 157, i32 170, i32 147, i32 51, i32 67, i32 250, i32 119, i32 233, i32 98, i32 155, i32 93, i32 24, i32 117, i32 235, i32 120, i32 247, i32 135, i32 143, i32 65, i32 180, i32 77, i32 39, i32 174, i32 211, i32 13, i32 76, i32 143, i32 52, i32 234, i32 125, i32 60, i32 229, i32 138, i32 207, i32 91, i32 146, i32 216, i32 48, i32 22, i32 180, i32 163, i32 117, i32 255, i32 235, i32 39, i32 200, i32 92, i32 108, i32 194, i32 238, i32 108, i32 33, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 254, i32 84, i32 18, i32 24, i32 202, i32 125, i32 165, i32 104, i32 67, i32 163, i32 109, i32 20, i32 42, i32 106, i32 165, i32 142, i32 50, i32 231, i32 99, i32 79, i32 227, i32 198, i32 68, i32 62, i32 171, i32 99, i32 202, i32 23, i32 134, i32 116, i32 63, i32 243, i32 60, i32 140, i32 128, i32 131, i32 16, i32 138, i32 55, i32 80, i32 156, i32 180, i32 223, i32 63, i32 140, i32 247, i32 35, i32 7, i32 214, i32 255, i32 160, i32 130, i32 108, i32 117, i32 59, i32 228, i32 181, i32 187, i32 228, i32 230, i32 80, i32 240, i32 8, i32 81, i32 21, i32 157, i32 195, i32 149, i32 209, i32 57, i32 187, i32 100, i32 157, i32 21, i32 129, i32 193, i32 104, i32 208, i32 182, i32 164, i32 44, i32 125, i32 94, i32 2, i32 57, i32 0, i32 224, i32 59, i32 164, i32 204, i32 202, i32 29, i32 129, i32 36, i32 16, i32 189, i32 0, i32 185, i32 4, i32 125, i32 53, i32 252, i32 235, i32 208, i32 11, i32 5, i32 50, i32 82, i32 122, i32 137, i32 36, i32 117, i32 80, i32 225, i32 99, i32 2, i32 130, i32 142, i32 231, i32 133, i32 12, i32 242, i32 86, i32 68, i32 55, i32 131, i32 37, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 29, i32 136, i32 152, i32 91, i32 78, i32 252, i32 65, i32 36, i32 5, i32 230, i32 80, i32 43, i32 174, i32 150, i32 81, i32 217, i32 107, i32 114, i32 178, i32 51, i32 66, i32 152, i32 104, i32 187, i32 16, i32 90, i32 122, i32 140, i32 157, i32 7, i32 180, i32 5, i32 229, i32 28, i32 248, i32 10, i32 253, i32 45, i32 126, i32 245, i32 245, i32 112, i32 125, i32 65, i32 107, i32 17, i32 254, i32 190, i32 153, i32 209, i32 85, i32 41, i32 49, i32 191, i32 192, i32 151, i32 108, i32 213, i32 53, i32 204, i32 94, i32 139, i32 217, i32 105, i32 15, i32 147, i32 156, i32 17, i32 231, i32 219, i32 241, i32 240, i32 133, i32 67, i32 40, i32 21, i32 55, i32 221, i32 222, i32 39, i32 223, i32 173, i32 62, i32 73, i32 79, i32 224, i32 91, i32 246, i32 128, i32 89, i32 21, i32 60, i32 133, i32 183, i32 62, i32 18, i32 217, i32 182, i32 212, i32 157, i32 212, i32 106, i32 175, i32 112, i32 7, i32 44, i32 16, i32 158, i32 189, i32 17, i32 173, i32 228, i32 38, i32 51, i32 112, i32 146, i32 120, i32 28, i32 116, i32 159, i32 117, i32 96, i32 86, i32 244, i32 57, i32 168, i32 168, i32 98, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 126, i32 14, i32 80, i32 178, i32 204, i32 13, i32 107, i32 166, i32 113, i32 91, i32 66, i32 237, i32 189, i32 175, i32 172, i32 240, i32 252, i32 18, i32 162, i32 63, i32 78, i32 218, i32 232, i32 17, i32 243, i32 35, i32 225, i32 4, i32 98, i32 3, i32 28, i32 78, i32 111, i32 45, i32 85, i32 248, i32 47, i32 142, i32 240, i32 24, i32 59, i32 234, i32 221, i32 38, i32 114, i32 209, i32 245, i32 254, i32 229, i32 184, i32 230, i32 211, i32 16, i32 72, i32 70, i32 73, i32 58, i32 159, i32 94, i32 69, i32 107, i32 144, i32 232, i32 127, i32 122, i32 219, i32 18, i32 210, i32 138, i32 130, i32 3, i32 27, i32 30, i32 175, i32 249, i32 75, i32 156, i32 190, i32 174, i32 124, i32 228, i32 148, i32 42, i32 35, i32 179, i32 98, i32 134, i32 231, i32 253, i32 35, i32 170, i32 153, i32 189, i32 43, i32 17, i32 108, i32 34, i32 214, i32 181, i32 23, i32 132, i32 191, i32 18, i32 204, i32 35, i32 20, i32 74, i32 223, i32 20, i32 49, i32 188, i32 161, i32 172, i32 110, i32 171, i32 250, i32 87, i32 17, i32 83, i32 179, i32 39, i32 230, i32 249, i32 71, i32 51, i32 68, i32 52, i32 30, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 86, i32 225, i32 245, i32 241, i32 213, i32 171, i32 168, i32 43, i32 174, i32 137, i32 243, i32 207, i32 86, i32 159, i32 242, i32 75, i32 49, i32 188, i32 24, i32 169, i32 6, i32 91, i32 190, i32 180, i32 97, i32 248, i32 178, i32 6, i32 156, i32 129, i32 171, i32 76, i32 131, i32 240, i32 13, i32 99, i32 239, i32 83, i32 107, i32 181, i32 107, i32 249, i32 131, i32 207, i32 222, i32 4, i32 34, i32 155, i32 44, i32 10, i32 224, i32 165, i32 216, i32 199, i32 156, i32 165, i32 163, i32 246, i32 111, i32 207, i32 144, i32 107, i32 104, i32 124, i32 204, i32 72, i32 131, i32 144, i32 229, i32 253, i32 63, i32 132, i32 170, i32 249, i32 139, i32 130, i32 89, i32 36, i32 52, i32 104, i32 79, i32 28, i32 35, i32 217, i32 204, i32 113, i32 225, i32 127, i32 140, i32 175, i32 241, i32 238, i32 0, i32 182, i32 160, i32 119, i32 44, i32 58, i32 229, i32 173, i32 244, i32 221, i32 45, i32 247, i32 92, i32 68, i32 181, i32 91, i32 33, i32 163, i32 137, i32 95, i32 150, i32 69, i32 202, i32 77, i32 164, i32 33, i32 153, i32 112, i32 218, i32 196, i32 196, i32 160, i32 229, i32 244, i32 236, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 208, i32 117, i32 87, i32 59, i32 235, i32 92, i32 20, i32 86, i32 80, i32 201, i32 79, i32 184, i32 184, i32 30, i32 163, i32 244, i32 171, i32 245, i32 169, i32 32, i32 21, i32 148, i32 130, i32 218, i32 150, i32 28, i32 155, i32 89, i32 140, i32 255, i32 244, i32 81, i32 65, i32 151, i32 191, i32 113, i32 106, i32 155, i32 114, i32 236, i32 243, i32 248, i32 107, i32 230, i32 14, i32 108, i32 105, i32 165, i32 47, i32 104, i32 82, i32 216, i32 97, i32 129, i32 192, i32 99, i32 63, i32 166, i32 60, i32 19, i32 144, i32 230, i32 141, i32 86, i32 133, i32 87, i32 159, i32 181, i32 200, i32 6, i32 178, i32 159, i32 71, i32 63, i32 240, i32 250, i32 230, i32 169, i32 177, i32 155, i32 111, i32 150, i32 125, i32 249, i32 164, i32 101, i32 9, i32 117, i32 50, i32 166, i32 108, i32 127, i32 71, i32 75, i32 47, i32 79, i32 218, i32 3, i32 52, i32 102, i32 196, i32 12, i32 115, i32 110, i32 188, i32 36, i32 181, i32 249, i32 112, i32 129, i32 82, i32 233, i32 244, i32 124, i32 35, i32 221, i32 159, i32 184, i32 70, i32 239, i32 29, i32 34, i32 85, i32 125, i32 113, i32 196, i32 66, i32 51, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 154, i32 77, i32 66, i32 41, i32 93, i32 164, i32 107, i32 111, i32 168, i32 138, i32 77, i32 145, i32 123, i32 210, i32 223, i32 54, i32 239, i32 1, i32 34, i32 197, i32 204, i32 141, i32 235, i32 88, i32 61, i32 179, i32 80, i32 252, i32 139, i32 151, i32 150, i32 51, i32 69, i32 184, i32 65, i32 215, i32 171, i32 7, i32 21, i32 0, i32 142, i32 206, i32 223, i32 178, i32 67, i32 92, i32 1, i32 220, i32 244, i32 1, i32 81, i32 149, i32 16, i32 90, i32 246, i32 36, i32 36, i32 160, i32 25, i32 58, i32 9, i32 42, i32 170, i32 63, i32 137, i32 239, i32 191, i32 3, i32 117, i32 208, i32 41, i32 80, i32 203, i32 125, i32 214, i32 190, i32 173, i32 95, i32 123, i32 0, i32 50, i32 170, i32 152, i32 237, i32 63, i32 143, i32 146, i32 203, i32 129, i32 86, i32 1, i32 99, i32 100, i32 163, i32 56, i32 57, i32 197, i32 227, i32 232, i32 174, i32 23, i32 39, i32 227, i32 100, i32 96, i32 113, i32 71, i32 41, i32 2, i32 15, i32 146, i32 93, i32 16, i32 147, i32 200, i32 14, i32 161, i32 237, i32 186, i32 169, i32 150, i32 28, i32 197, i32 118, i32 48, i32 205, i32 249, i32 48, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 144, i32 110, i32 126, i32 75, i32 113, i32 147, i32 192, i32 114, i32 237, i32 235, i32 113, i32 36, i32 151, i32 38, i32 156, i32 254, i32 203, i32 62, i32 89, i32 25, i32 168, i32 15, i32 117, i32 125, i32 190, i32 24, i32 230, i32 150, i32 30, i32 149, i32 112, i32 96, i32 61, i32 112, i32 39, i32 157, i32 217, i32 175, i32 177, i32 39, i32 175, i32 227, i32 93, i32 30, i32 58, i32 48, i32 84, i32 97, i32 96, i32 232, i32 195, i32 38, i32 58, i32 188, i32 126, i32 245, i32 129, i32 221, i32 100, i32 1, i32 4, i32 235, i32 192, i32 30, i32 100, i32 170, i32 181, i32 136, i32 121, i32 101, i32 56, i32 140, i32 148, i32 214, i32 98, i32 55, i32 125, i32 100, i32 205, i32 58, i32 235, i32 255, i32 232, i32 129, i32 9, i32 199, i32 106, i32 80, i32 9, i32 13, i32 40, i32 3, i32 13, i32 154, i32 147, i32 10, i32 15, i32 169, i32 213, i32 1, i32 170, i32 72, i32 79, i32 40, i32 102, i32 50, i32 26, i32 186, i32 124, i32 234, i32 17, i32 128, i32 23, i32 24, i32 155, i32 86, i32 136, i32 37, i32 6, i32 105, i32 18, i32 44, i32 234, i32 86, i32 105, i32 65, i32 36, i32 25, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 147, i32 68, i32 151, i32 206, i32 40, i32 255, i32 58, i32 64, i32 196, i32 245, i32 246, i32 155, i32 244, i32 107, i32 7, i32 132, i32 251, i32 152, i32 216, i32 236, i32 140, i32 3, i32 87, i32 236, i32 73, i32 237, i32 99, i32 182, i32 170, i32 255, i32 152, i32 40, i32 90, i32 247, i32 107, i32 1, i32 18, i32 79, i32 81, i32 193, i32 112, i32 132, i32 148, i32 71, i32 178, i32 1, i32 108, i32 113, i32 215, i32 204, i32 23, i32 102, i32 15, i32 89, i32 93, i32 93, i32 16, i32 1, i32 87, i32 17, i32 245, i32 221, i32 226, i32 52, i32 182, i32 234, i32 14, i32 64, i32 147, i32 32, i32 121, i32 53, i32 106, i32 97, i32 132, i32 90, i32 7, i32 109, i32 249, i32 119, i32 111, i32 237, i32 105, i32 28, i32 13, i32 37, i32 118, i32 204, i32 240, i32 219, i32 187, i32 197, i32 173, i32 226, i32 38, i32 87, i32 200, i32 92, i32 22, i32 254, i32 237, i32 159, i32 38, i32 86, i32 246, i32 75, i32 159, i32 167, i32 10, i32 133, i32 254, i32 165, i32 140, i32 135, i32 221, i32 152, i32 206, i32 78, i32 195, i32 88, i32 85, i32 178, i32 123, i32 61, i32 216, i32 107, i32 181, i32 76, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 172, i32 143, i32 188, i32 30, i32 125, i32 139, i32 90, i32 11, i32 141, i32 175, i32 118, i32 46, i32 113, i32 227, i32 59, i32 111, i32 83, i32 47, i32 62, i32 144, i32 149, i32 212, i32 53, i32 20, i32 79, i32 140, i32 60, i32 206, i32 87, i32 28, i32 118, i32 73, i32 169, i32 96, i32 220, i32 15, i32 100, i32 229, i32 29, i32 226, i32 141, i32 79, i32 121, i32 47, i32 14, i32 36, i32 2, i32 0, i32 5, i32 119, i32 67, i32 37, i32 61, i32 106, i32 199, i32 183, i32 191, i32 4, i32 8, i32 101, i32 244, i32 57, i32 75, i32 101, i32 65, i32 33, i32 48, i32 83, i32 27, i32 71, i32 1, i32 183, i32 24, i32 216, i32 130, i32 87, i32 189, i32 163, i32 96, i32 240, i32 50, i32 246, i32 91, i32 240, i32 48, i32 136, i32 145, i32 89, i32 253, i32 144, i32 162, i32 185, i32 85, i32 147, i32 33, i32 52, i32 15, i32 125, i32 99, i32 140, i32 110, i32 92, i32 222, i32 48, i32 223, i32 101, i32 250, i32 46, i32 176, i32 163, i32 37, i32 5, i32 84, i32 189, i32 37, i32 186, i32 6, i32 174, i32 223, i32 139, i32 217, i32 27, i32 234, i32 56, i32 179, i32 5, i32 22, i32 9, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 170, i32 31, i32 187, i32 235, i32 254, i32 228, i32 135, i32 252, i32 177, i32 44, i32 183, i32 136, i32 244, i32 198, i32 185, i32 245, i32 36, i32 70, i32 242, i32 165, i32 159, i32 143, i32 138, i32 147, i32 112, i32 105, i32 212, i32 86, i32 236, i32 253, i32 6, i32 70, i32 123, i32 117, i32 58, i32 252, i32 100, i32 211, i32 41, i32 126, i32 221, i32 73, i32 154, i32 89, i32 83, i32 191, i32 180, i32 167, i32 82, i32 179, i32 5, i32 171, i32 195, i32 175, i32 22, i32 26, i32 133, i32 66, i32 50, i32 162, i32 134, i32 250, i32 57, i32 67, i32 195, i32 241, i32 198, i32 147, i32 101, i32 238, i32 11, i32 188, i32 234, i32 20, i32 240, i32 193, i32 248, i32 132, i32 137, i32 194, i32 201, i32 215, i32 234, i32 52, i32 202, i32 167, i32 196, i32 153, i32 213, i32 80, i32 105, i32 203, i32 214, i32 33, i32 99, i32 124, i32 235, i32 1, i32 199, i32 54, i32 151, i32 78, i32 182, i32 171, i32 95, i32 13, i32 44, i32 186, i32 103, i32 100, i32 85, i32 222, i32 188, i32 255, i32 166, i32 236, i32 4, i32 211, i32 141, i32 57, i32 86, i32 94, i32 238, i32 248, i32 228, i32 46, i32 51, i32 98, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 47, i32 139, i32 200, i32 64, i32 81, i32 209, i32 172, i32 26, i32 11, i32 228, i32 169, i32 162, i32 66, i32 33, i32 25, i32 47, i32 123, i32 151, i32 191, i32 247, i32 87, i32 109, i32 63, i32 61, i32 79, i32 15, i32 226, i32 178, i32 129, i32 0, i32 158, i32 123, i32 64, i32 41, i32 116, i32 168, i32 47, i32 94, i32 249, i32 121, i32 164, i32 243, i32 62, i32 185, i32 253, i32 51, i32 49, i32 172, i32 154, i32 105, i32 136, i32 30, i32 119, i32 33, i32 45, i32 243, i32 145, i32 82, i32 38, i32 21, i32 178, i32 166, i32 207, i32 126, i32 98, i32 228, i32 13, i32 3, i32 180, i32 215, i32 205, i32 250, i32 189, i32 70, i32 223, i32 147, i32 113, i32 16, i32 44, i32 168, i32 59, i32 182, i32 9, i32 5, i32 112, i32 132, i32 67, i32 41, i32 168, i32 89, i32 245, i32 142, i32 16, i32 228, i32 215, i32 32, i32 251, i32 149, i32 146, i32 99, i32 80, i32 252, i32 98, i32 240, i32 164, i32 94, i32 140, i32 24, i32 194, i32 23, i32 36, i32 183, i32 120, i32 194, i32 169, i32 231, i32 106, i32 50, i32 214, i32 41, i32 133, i32 175, i32 203, i32 141, i32 145, i32 19, i32 218, i32 107, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 74, i32 177, i32 112, i32 138, i32 169, i32 232, i32 99, i32 121, i32 0, i32 226, i32 37, i32 22, i32 202, i32 75, i32 15, i32 164, i32 102, i32 173, i32 25, i32 159, i32 136, i32 103, i32 12, i32 139, i32 194, i32 74, i32 91, i32 43, i32 109, i32 149, i32 175, i32 25, i32 241, i32 185, i32 135, i32 53, i32 197, i32 187, i32 185, i32 207, i32 245, i32 214, i32 205, i32 213, i32 12, i32 124, i32 14, i32 230, i32 144, i32 52, i32 251, i32 81, i32 66, i32 30, i32 109, i32 172, i32 154, i32 70, i32 196, i32 151, i32 41, i32 50, i32 191, i32 69, i32 198, i32 150, i32 72, i32 52, i32 42, i32 6, i32 175, i32 148, i32 61, i32 244, i32 26, i32 207, i32 242, i32 192, i32 33, i32 194, i32 66, i32 94, i32 200, i32 47, i32 53, i32 162, i32 62, i32 41, i32 250, i32 12, i32 132, i32 229, i32 137, i32 114, i32 124, i32 6, i32 7, i32 198, i32 34, i32 21, i32 226, i32 156, i32 96, i32 162, i32 25, i32 217, i32 39, i32 174, i32 55, i32 78, i32 166, i32 201, i32 128, i32 166, i32 145, i32 143, i32 18, i32 73, i32 229, i32 0, i32 24, i32 71, i32 209, i32 215, i32 40, i32 34, i32 99, i32 57, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 36, i32 100, i32 110, i32 155, i32 53, i32 113, i32 120, i32 206, i32 51, i32 3, i32 33, i32 51, i32 54, i32 241, i32 115, i32 155, i32 185, i32 21, i32 139, i32 44, i32 105, i32 207, i32 77, i32 237, i32 79, i32 77, i32 87, i32 20, i32 19, i32 130, i32 164, i32 77, i32 76, i32 115, i32 109, i32 21, i32 189, i32 161, i32 77, i32 92, i32 19, i32 11, i32 36, i32 6, i32 152, i32 120, i32 28, i32 91, i32 235, i32 31, i32 24, i32 84, i32 67, i32 217, i32 85, i32 102, i32 218, i32 41, i32 33, i32 232, i32 184, i32 60, i32 66, i32 34, i32 146, i32 91, i32 252, i32 114, i32 253, i32 186, i32 241, i32 253, i32 166, i32 124, i32 149, i32 227, i32 97, i32 63, i32 233, i32 3, i32 212, i32 43, i32 212, i32 32, i32 217, i32 219, i32 77, i32 50, i32 62, i32 245, i32 17, i32 100, i32 227, i32 180, i32 190, i32 50, i32 180, i32 11, i32 50, i32 171, i32 220, i32 4, i32 81, i32 85, i32 33, i32 30, i32 11, i32 117, i32 153, i32 137, i32 115, i32 53, i32 58, i32 145, i32 43, i32 254, i32 231, i32 73, i32 234, i32 118, i32 193, i32 249, i32 70, i32 185, i32 83, i32 2, i32 35, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 192, i32 215, i32 86, i32 151, i32 88, i32 145, i32 222, i32 9, i32 79, i32 159, i32 190, i32 99, i32 176, i32 131, i32 134, i32 67, i32 93, i32 188, i32 224, i32 243, i32 192, i32 117, i32 191, i32 139, i32 142, i32 170, i32 247, i32 139, i32 100, i32 110, i32 176, i32 99, i32 134, i32 85, i32 55, i32 142, i32 195, i32 56, i32 72, i32 20, i32 181, i32 151, i32 210, i32 167, i32 84, i32 69, i32 241, i32 53, i32 68, i32 56, i32 158, i32 241, i32 27, i32 182, i32 52, i32 0, i32 60, i32 150, i32 238, i32 41, i32 0, i32 234, i32 44, i32 11, i32 208, i32 128, i32 186, i32 25, i32 174, i32 29, i32 169, i32 121, i32 246, i32 63, i32 172, i32 93, i32 111, i32 150, i32 31, i32 42, i32 206, i32 41, i32 178, i32 255, i32 55, i32 241, i32 148, i32 143, i32 12, i32 181, i32 40, i32 186, i32 154, i32 33, i32 246, i32 102, i32 189, i32 170, i32 19, i32 230, i32 205, i32 69, i32 74, i32 164, i32 89, i32 10, i32 100, i32 177, i32 152, i32 214, i32 52, i32 19, i32 4, i32 230, i32 151, i32 148, i32 6, i32 203, i32 212, i32 78, i32 187, i32 150, i32 205, i32 209, i32 87, i32 209, i32 227, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 36, i32 234, i32 35, i32 125, i32 86, i32 44, i32 226, i32 89, i32 14, i32 133, i32 96, i32 4, i32 136, i32 90, i32 116, i32 30, i32 75, i32 239, i32 19, i32 218, i32 76, i32 255, i32 131, i32 69, i32 133, i32 63, i32 8, i32 149, i32 44, i32 32, i32 19, i32 31, i32 147, i32 3, i32 54, i32 129, i32 172, i32 228, i32 32, i32 9, i32 53, i32 76, i32 69, i32 178, i32 30, i32 76, i32 20, i32 33, i32 230, i32 233, i32 138, i32 123, i32 141, i32 254, i32 30, i32 198, i32 62, i32 193, i32 53, i32 250, i32 231, i32 112, i32 78, i32 29, i32 187, i32 113, i32 20, i32 94, i32 38, i32 140, i32 61, i32 200, i32 233, i32 124, i32 211, i32 214, i32 209, i32 47, i32 7, i32 109, i32 230, i32 223, i32 251, i32 121, i32 214, i32 153, i32 89, i32 150, i32 72, i32 64, i32 15, i32 58, i32 123, i32 178, i32 160, i32 114, i32 36, i32 232, i32 183, i32 96, i32 174, i32 71, i32 128, i32 252, i32 229, i32 35, i32 231, i32 194, i32 201, i32 133, i32 230, i32 152, i32 160, i32 41, i32 78, i32 225, i32 132, i32 57, i32 45, i32 149, i32 44, i32 243, i32 69, i32 60, i32 255, i32 175, i32 39, i32 76, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 133, i32 224, i32 36, i32 50, i32 180, i32 209, i32 239, i32 252, i32 105, i32 162, i32 191, i32 143, i32 114, i32 44, i32 149, i32 246, i32 228, i32 110, i32 125, i32 144, i32 247, i32 87, i32 129, i32 160, i32 247, i32 218, i32 239, i32 51, i32 7, i32 227, i32 107, i32 120, i32 19, i32 170, i32 46, i32 76, i32 240, i32 34, i32 184, i32 108, i32 179, i32 25, i32 77, i32 235, i32 107, i32 208, i32 164, i32 198, i32 156, i32 221, i32 200, i32 91, i32 129, i32 87, i32 137, i32 223, i32 51, i32 169, i32 104, i32 73, i32 128, i32 228, i32 254, i32 33, i32 100, i32 52, i32 236, i32 192, i32 158, i32 68, i32 65, i32 175, i32 160, i32 54, i32 5, i32 109, i32 234, i32 48, i32 37, i32 70, i32 53, i32 36, i32 157, i32 134, i32 189, i32 149, i32 241, i32 106, i32 70, i32 215, i32 148, i32 84, i32 249, i32 59, i32 189, i32 93, i32 223, i32 179, i32 70, i32 17, i32 110, i32 19, i32 183, i32 40, i32 78, i32 86, i32 221, i32 241, i32 172, i32 173, i32 88, i32 195, i32 248, i32 136, i32 148, i32 94, i32 6, i32 152, i32 161, i32 228, i32 106, i32 251, i32 10, i32 73, i32 93, i32 138, i32 254, i32 119, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 52, i32 117, i32 55, i32 31, i32 52, i32 78, i32 169, i32 29, i32 104, i32 103, i32 248, i32 73, i32 152, i32 150, i32 252, i32 76, i32 101, i32 151, i32 247, i32 2, i32 74, i32 82, i32 108, i32 1, i32 189, i32 72, i32 187, i32 27, i32 237, i32 164, i32 226, i32 83, i32 181, i32 176, i32 12, i32 77, i32 179, i32 123, i32 35, i32 200, i32 31, i32 138, i32 57, i32 102, i32 230, i32 186, i32 76, i32 16, i32 55, i32 202, i32 156, i32 124, i32 5, i32 158, i32 255, i32 192, i32 248, i32 142, i32 177, i32 143, i32 111, i32 103, i32 24, i32 38, i32 164, i32 41, i32 71, i32 134, i32 46, i32 146, i32 79, i32 17, i32 79, i32 243, i32 178, i32 92, i32 213, i32 62, i32 166, i32 185, i32 200, i32 226, i32 51, i32 17, i32 31, i32 1, i32 143, i32 176, i32 155, i32 199, i32 165, i32 255, i32 131, i32 15, i32 30, i32 40, i32 10, i32 108, i32 79, i32 188, i32 62, i32 50, i32 231, i32 74, i32 26, i32 19, i32 193, i32 73, i32 56, i32 191, i32 247, i32 194, i32 211, i32 143, i32 107, i32 173, i32 82, i32 247, i32 207, i32 188, i32 39, i32 203, i32 64, i32 103, i32 118, i32 205, i32 109, i32 86, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 136, i32 170, i32 20, i32 36, i32 134, i32 148, i32 17, i32 18, i32 62, i32 26, i32 181, i32 204, i32 187, i32 224, i32 156, i32 213, i32 156, i32 109, i32 186, i32 88, i32 114, i32 141, i32 251, i32 34, i32 123, i32 159, i32 124, i32 148, i32 48, i32 179, i32 81, i32 33, i32 214, i32 227, i32 150, i32 97, i32 58, i32 253, i32 239, i32 155, i32 31, i32 144, i32 164, i32 36, i32 20, i32 91, i32 200, i32 222, i32 80, i32 177, i32 29, i32 175, i32 232, i32 85, i32 138, i32 135, i32 13, i32 254, i32 170, i32 59, i32 130, i32 44, i32 141, i32 123, i32 143, i32 18, i32 234, i32 175, i32 209, i32 31, i32 121, i32 16, i32 11, i32 246, i32 163, i32 123, i32 234, i32 172, i32 139, i32 87, i32 50, i32 98, i32 231, i32 6, i32 18, i32 81, i32 160, i32 59, i32 67, i32 94, i32 164, i32 32, i32 120, i32 49, i32 206, i32 13, i32 136, i32 193, i32 153, i32 208, i32 60, i32 28, i32 93, i32 180, i32 239, i32 19, i32 15, i32 144, i32 185, i32 54, i32 47, i32 149, i32 149, i32 198, i32 220, i32 222, i32 10, i32 81, i32 226, i32 141, i32 243, i32 188, i32 81, i32 236, i32 223, i32 177, i32 162, i32 95, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 251, i32 253, i32 71, i32 123, i32 138, i32 102, i32 158, i32 121, i32 46, i32 100, i32 130, i32 239, i32 247, i32 33, i32 236, i32 246, i32 216, i32 134, i32 9, i32 49, i32 124, i32 221, i32 3, i32 106, i32 88, i32 160, i32 119, i32 183, i32 155, i32 140, i32 135, i32 31, i32 199, i32 202, i32 99, i32 193, i32 73, i32 169, i32 53, i32 69, i32 85, i32 126, i32 218, i32 100, i32 50, i32 7, i32 80, i32 247, i32 50, i32 172, i32 222, i32 117, i32 88, i32 155, i32 17, i32 178, i32 58, i32 31, i32 245, i32 247, i32 121, i32 4, i32 230, i32 8, i32 227, i32 57, i32 98, i32 180, i32 79, i32 49, i32 4, i32 201, i32 218, i32 213, i32 115, i32 81, i32 87, i32 197, i32 184, i32 243, i32 163, i32 67, i32 112, i32 228, i32 97, i32 129, i32 132, i32 226, i32 187, i32 191, i32 79, i32 158, i32 164, i32 94, i32 116, i32 6, i32 254, i32 127, i32 251, i32 53, i32 125, i32 198, i32 1, i32 35, i32 40, i32 196, i32 2, i32 172, i32 31, i32 66, i32 180, i32 157, i32 252, i32 0, i32 148, i32 165, i32 238, i32 202, i32 218, i32 151, i32 9, i32 65, i32 119, i32 135, i32 93, i32 123, i32 135, i32 120, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 255, i32 16, i32 194, i32 9, i32 79, i32 110, i32 244, i32 210, i32 223, i32 126, i32 202, i32 123, i32 28, i32 29, i32 186, i32 163, i32 182, i32 218, i32 103, i32 51, i32 212, i32 135, i32 54, i32 75, i32 17, i32 32, i32 5, i32 166, i32 41, i32 193, i32 135, i32 23, i32 92, i32 229, i32 198, i32 4, i32 142, i32 43, i32 87, i32 190, i32 56, i32 133, i32 35, i32 203, i32 183, i32 190, i32 79, i32 169, i32 211, i32 110, i32 18, i32 170, i32 213, i32 178, i32 46, i32 147, i32 41, i32 154, i32 74, i32 136, i32 24, i32 67, i32 245, i32 1, i32 65, i32 105, i32 1, i32 103, i32 92, i32 211, i32 138, i32 197, i32 207, i32 63, i32 209, i32 87, i32 209, i32 103, i32 62, i32 1, i32 57, i32 181, i32 203, i32 129, i32 86, i32 150, i32 38, i32 182, i32 194, i32 231, i32 92, i32 251, i32 99, i32 151, i32 88, i32 6, i32 63, i32 38, i32 233, i32 64, i32 233, i32 3, i32 173, i32 6, i32 105, i32 145, i32 224, i32 209, i32 137, i32 96, i32 132, i32 121, i32 222, i32 39, i32 109, i32 230, i32 118, i32 189, i32 234, i32 230, i32 174, i32 72, i32 195, i32 103, i32 192, i32 87, i32 205, i32 47, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 145, i32 63, i32 237, i32 94, i32 24, i32 120, i32 63, i32 35, i32 44, i32 13, i32 140, i32 68, i32 0, i32 232, i32 251, i32 233, i32 142, i32 214, i32 209, i32 54, i32 88, i32 87, i32 158, i32 174, i32 75, i32 92, i32 11, i32 7, i32 188, i32 107, i32 85, i32 43, i32 26, i32 111, i32 64, i32 175, i32 68, i32 68, i32 176, i32 67, i32 143, i32 13, i32 208, i32 30, i32 196, i32 11, i32 25, i32 93, i32 142, i32 254, i32 193, i32 243, i32 197, i32 92, i32 145, i32 248, i32 4, i32 78, i32 190, i32 144, i32 180, i32 71, i32 92, i32 63, i32 176, i32 174, i32 193, i32 141, i32 201, i32 143, i32 185, i32 122, i32 119, i32 239, i32 186, i32 121, i32 160, i32 60, i32 168, i32 245, i32 106, i32 226, i32 63, i32 93, i32 0, i32 227, i32 75, i32 69, i32 36, i32 123, i32 67, i32 120, i32 85, i32 29, i32 43, i32 30, i32 93, i32 248, i32 180, i32 168, i32 48, i32 221, i32 204, i32 56, i32 165, i32 211, i32 202, i32 216, i32 209, i32 248, i32 178, i32 49, i32 145, i32 212, i32 114, i32 5, i32 87, i32 74, i32 59, i32 130, i32 74, i32 198, i32 104, i32 32, i32 226, i32 24, i32 65, i32 97, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 177, i32 63, i32 63, i32 239, i32 216, i32 244, i32 252, i32 179, i32 160, i32 96, i32 80, i32 6, i32 43, i32 41, i32 82, i32 112, i32 21, i32 11, i32 36, i32 36, i32 248, i32 95, i32 121, i32 24, i32 204, i32 255, i32 137, i32 153, i32 132, i32 161, i32 174, i32 19, i32 231, i32 196, i32 67, i32 77, i32 201, i32 43, i32 105, i32 93, i32 29, i32 60, i32 175, i32 187, i32 67, i32 56, i32 78, i32 152, i32 61, i32 237, i32 13, i32 33, i32 3, i32 253, i32 240, i32 153, i32 71, i32 4, i32 176, i32 152, i32 105, i32 85, i32 114, i32 15, i32 205, i32 36, i32 198, i32 62, i32 12, i32 130, i32 155, i32 145, i32 43, i32 97, i32 74, i32 178, i32 15, i32 136, i32 85, i32 95, i32 90, i32 87, i32 255, i32 229, i32 116, i32 11, i32 19, i32 67, i32 0, i32 216, i32 107, i32 207, i32 210, i32 21, i32 3, i32 44, i32 27, i32 55, i32 71, i32 227, i32 245, i32 158, i32 234, i32 44, i32 42, i32 231, i32 130, i32 54, i32 244, i32 31, i32 129, i32 71, i32 146, i32 75, i32 105, i32 14, i32 17, i32 140, i32 93, i32 83, i32 91, i32 129, i32 39, i32 8, i32 188, i32 160, i32 174, i32 37, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 217, i32 227, i32 56, i32 6, i32 70, i32 112, i32 130, i32 94, i32 40, i32 73, i32 121, i32 255, i32 37, i32 210, i32 78, i32 41, i32 141, i32 6, i32 176, i32 35, i32 174, i32 155, i32 102, i32 228, i32 125, i32 192, i32 112, i32 145, i32 163, i32 252, i32 236, i32 78, i32 252, i32 249, i32 33, i32 79, i32 46, i32 118, i32 155, i32 31, i32 40, i32 96, i32 119, i32 67, i32 50, i32 157, i32 190, i32 23, i32 48, i32 42, i32 198, i32 24, i32 146, i32 102, i32 98, i32 48, i32 152, i32 64, i32 17, i32 166, i32 127, i32 24, i32 132, i32 40, i32 81, i32 96, i32 27, i32 6, i32 79, i32 138, i32 33, i32 186, i32 56, i32 168, i32 186, i32 214, i32 64, i32 246, i32 233, i32 155, i32 118, i32 77, i32 86, i32 33, i32 91, i32 10, i32 155, i32 46, i32 79, i32 61, i32 129, i32 50, i32 8, i32 159, i32 151, i32 91, i32 26, i32 218, i32 243, i32 165, i32 65, i32 67, i32 40, i32 252, i32 126, i32 231, i32 113, i32 234, i32 198, i32 59, i32 89, i32 204, i32 46, i32 211, i32 64, i32 236, i32 179, i32 19, i32 111, i32 68, i32 205, i32 19, i32 178, i32 55, i32 242, i32 110, i32 217, i32 28, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 24, i32 74, i32 162, i32 151, i32 8, i32 129, i32 45, i32 131, i32 196, i32 204, i32 240, i32 131, i32 126, i32 236, i32 13, i32 149, i32 76, i32 91, i32 251, i32 250, i32 152, i32 128, i32 74, i32 102, i32 86, i32 12, i32 81, i32 179, i32 242, i32 4, i32 93, i32 39, i32 132, i32 79, i32 55, i32 49, i32 125, i32 46, i32 188, i32 173, i32 135, i32 7, i32 42, i32 107, i32 55, i32 252, i32 95, i32 235, i32 78, i32 117, i32 53, i32 166, i32 222, i32 171, i32 10, i32 25, i32 58, i32 183, i32 177, i32 239, i32 146, i32 106, i32 59, i32 60, i32 253, i32 24, i32 120, i32 132, i32 168, i32 76, i32 125, i32 110, i32 89, i32 166, i32 229, i32 116, i32 241, i32 25, i32 166, i32 132, i32 46, i32 81, i32 193, i32 41, i32 19, i32 242, i32 20, i32 107, i32 93, i32 83, i32 81, i32 247, i32 239, i32 191, i32 1, i32 34, i32 85, i32 96, i32 85, i32 91, i32 228, i32 29, i32 113, i32 76, i32 157, i32 91, i32 159, i32 112, i32 166, i32 133, i32 154, i32 44, i32 160, i32 226, i32 50, i32 72, i32 206, i32 158, i32 42, i32 165, i32 7, i32 59, i32 199, i32 108, i32 134, i32 119, i32 222, i32 60, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 70, i32 202, i32 167, i32 85, i32 123, i32 121, i32 243, i32 202, i32 90, i32 101, i32 246, i32 237, i32 80, i32 20, i32 123, i32 228, i32 196, i32 42, i32 101, i32 158, i32 226, i32 249, i32 202, i32 167, i32 34, i32 38, i32 83, i32 203, i32 33, i32 91, i32 167, i32 49, i32 129, i32 33, i32 97, i32 9, i32 246, i32 78, i32 241, i32 146, i32 238, i32 99, i32 97, i32 115, i32 135, i32 199, i32 84, i32 14, i32 66, i32 75, i32 201, i32 71, i32 209, i32 184, i32 126, i32 145, i32 117, i32 55, i32 153, i32 40, i32 184, i32 221, i32 127, i32 80, i32 158, i32 53, i32 133, i32 148, i32 71, i32 31, i32 144, i32 21, i32 38, i32 208, i32 132, i32 237, i32 138, i32 128, i32 247, i32 99, i32 66, i32 134, i32 39, i32 215, i32 244, i32 117, i32 88, i32 220, i32 156, i32 192, i32 34, i32 126, i32 32, i32 53, i32 253, i32 31, i32 163, i32 42, i32 97, i32 55, i32 226, i32 89, i32 18, i32 14, i32 39, i32 186, i32 100, i32 67, i32 174, i32 192, i32 66, i32 105, i32 121, i32 164, i32 30, i32 41, i32 139, i32 21, i32 235, i32 248, i32 175, i32 212, i32 162, i32 104, i32 51, i32 181, i32 122, i32 36, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 160, i32 104, i32 232, i32 65, i32 143, i32 145, i32 248, i32 17, i32 19, i32 144, i32 46, i32 167, i32 171, i32 48, i32 239, i32 173, i32 160, i32 97, i32 0, i32 136, i32 239, i32 219, i32 206, i32 91, i32 92, i32 187, i32 98, i32 200, i32 86, i32 249, i32 0, i32 115, i32 49, i32 64, i32 1, i32 82, i32 86, i32 148, i32 91, i32 40, i32 138, i32 170, i32 82, i32 238, i32 216, i32 10, i32 5, i32 141, i32 205, i32 181, i32 170, i32 46, i32 56, i32 170, i32 183, i32 135, i32 247, i32 43, i32 251, i32 4, i32 203, i32 132, i32 61, i32 84, i32 51, i32 137, i32 201, i32 99, i32 98, i32 28, i32 23, i32 180, i32 96, i32 196, i32 38, i32 104, i32 9, i32 195, i32 46, i32 55, i32 15, i32 123, i32 180, i32 156, i32 182, i32 249, i32 251, i32 212, i32 81, i32 120, i32 200, i32 99, i32 234, i32 119, i32 71, i32 7, i32 161, i32 94, i32 96, i32 79, i32 251, i32 225, i32 112, i32 106, i32 31, i32 85, i32 79, i32 9, i32 180, i32 149, i32 51, i32 54, i32 198, i32 129, i32 1, i32 24, i32 6, i32 37, i32 39, i32 164, i32 180, i32 36, i32 164, i32 134, i32 3, i32 76, i32 172, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 19, i32 197, i32 44, i32 172, i32 211, i32 131, i32 130, i32 124, i32 41, i32 247, i32 5, i32 165, i32 0, i32 182, i32 31, i32 134, i32 85, i32 244, i32 214, i32 47, i32 12, i32 153, i32 208, i32 101, i32 155, i32 107, i32 70, i32 13, i32 67, i32 248, i32 22, i32 40, i32 233, i32 159, i32 220, i32 63, i32 193, i32 137, i32 68, i32 116, i32 39, i32 228, i32 193, i32 144, i32 255, i32 74, i32 167, i32 60, i32 238, i32 205, i32 244, i32 29, i32 37, i32 148, i32 127, i32 99, i32 22, i32 72, i32 188, i32 100, i32 254, i32 149, i32 196, i32 12, i32 212, i32 202, i32 112, i32 61, i32 171, i32 251, i32 95, i32 94, i32 0, i32 12, i32 204, i32 119, i32 34, i32 248, i32 120, i32 85, i32 174, i32 98, i32 53, i32 251, i32 154, i32 198, i32 3, i32 228, i32 12, i32 238, i32 171, i32 199, i32 192, i32 137, i32 135, i32 84, i32 90, i32 32, i32 91, i32 161, i32 165, i32 68, i32 145, i32 36, i32 2, i32 99, i32 18, i32 100, i32 184, i32 85, i32 246, i32 222, i32 44, i32 219, i32 71, i32 184, i32 198, i32 10, i32 195, i32 0, i32 120, i32 147, i32 216, i32 245, i32 245, i32 24, i32 40, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 250, i32 148, i32 247, i32 64, i32 208, i32 215, i32 235, i32 169, i32 130, i32 54, i32 213, i32 21, i32 185, i32 51, i32 122, i32 191, i32 138, i32 242, i32 99, i32 170, i32 55, i32 245, i32 89, i32 172, i32 189, i32 187, i32 50, i32 54, i32 190, i32 115, i32 153, i32 56, i32 151, i32 157, i32 168, i32 205, i32 151, i32 123, i32 157, i32 185, i32 231, i32 165, i32 239, i32 253, i32 168, i32 66, i32 107, i32 195, i32 98, i32 100, i32 125, i32 165, i32 27, i32 201, i32 158, i32 210, i32 69, i32 185, i32 238, i32 3, i32 176, i32 191, i32 192, i32 104, i32 57, i32 97, i32 5, i32 237, i32 37, i32 137, i32 139, i32 93, i32 27, i32 203, i32 12, i32 85, i32 244, i32 106, i32 0, i32 138, i32 70, i32 232, i32 30, i32 198, i32 131, i32 200, i32 90, i32 118, i32 219, i32 204, i32 25, i32 122, i32 204, i32 103, i32 70, i32 11, i32 34, i32 140, i32 107, i32 190, i32 252, i32 77, i32 112, i32 98, i32 110, i32 82, i32 119, i32 153, i32 136, i32 126, i32 123, i32 87, i32 122, i32 13, i32 254, i32 220, i32 114, i32 146, i32 241, i32 104, i32 29, i32 151, i32 215, i32 124, i32 141, i32 83, i32 16, i32 55, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 138, i32 100, i32 30, i32 20, i32 10, i32 87, i32 212, i32 218, i32 92, i32 150, i32 155, i32 1, i32 76, i32 103, i32 191, i32 139, i32 48, i32 254, i32 8, i32 219, i32 13, i32 213, i32 168, i32 215, i32 9, i32 17, i32 133, i32 162, i32 211, i32 69, i32 251, i32 126, i32 24, i32 50, i32 152, i32 44, i32 143, i32 145, i32 174, i32 18, i32 240, i32 140, i32 234, i32 243, i32 60, i32 185, i32 93, i32 228, i32 105, i32 237, i32 178, i32 71, i32 24, i32 189, i32 206, i32 22, i32 82, i32 92, i32 35, i32 226, i32 165, i32 37, i32 82, i32 93, i32 33, i32 172, i32 139, i32 34, i32 205, i32 195, i32 154, i32 233, i32 94, i32 120, i32 189, i32 222, i32 186, i32 173, i32 171, i32 191, i32 117, i32 65, i32 9, i32 197, i32 88, i32 164, i32 125, i32 146, i32 176, i32 127, i32 242, i32 161, i32 209, i32 192, i32 179, i32 109, i32 96, i32 87, i32 46, i32 154, i32 114, i32 29, i32 107, i32 110, i32 88, i32 51, i32 36, i32 140, i32 72, i32 57, i32 70, i32 142, i32 137, i32 106, i32 136, i32 81, i32 35, i32 98, i32 181, i32 50, i32 9, i32 54, i32 227, i32 87, i32 245, i32 152, i32 222, i32 111, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 162, i32 220, i32 171, i32 169, i32 37, i32 45, i32 172, i32 95, i32 3, i32 51, i32 8, i32 231, i32 126, i32 254, i32 149, i32 54, i32 60, i32 91, i32 58, i32 211, i32 5, i32 130, i32 28, i32 149, i32 45, i32 216, i32 119, i32 126, i32 2, i32 217, i32 91, i32 112, i32 123, i32 170, i32 112, i32 10, i32 75, i32 251, i32 245, i32 191, i32 128, i32 197, i32 207, i32 8, i32 122, i32 221, i32 161, i32 244, i32 157, i32 84, i32 80, i32 83, i32 35, i32 119, i32 35, i32 245, i32 52, i32 165, i32 34, i32 209, i32 13, i32 150, i32 46, i32 71, i32 206, i32 130, i32 240, i32 143, i32 121, i32 2, i32 168, i32 209, i32 218, i32 20, i32 9, i32 72, i32 238, i32 138, i32 64, i32 152, i32 118, i32 96, i32 84, i32 90, i32 222, i32 3, i32 36, i32 245, i32 230, i32 47, i32 225, i32 3, i32 191, i32 104, i32 130, i32 127, i32 139, i32 197, i32 204, i32 61, i32 105, i32 166, i32 161, i32 24, i32 68, i32 188, i32 77, i32 119, i32 55, i32 199, i32 134, i32 236, i32 12, i32 201, i32 214, i32 68, i32 169, i32 35, i32 39, i32 185, i32 3, i32 52, i32 167, i32 10, i32 213, i32 199, i32 52, i32 55, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 239, i32 30, i32 236, i32 247, i32 141, i32 119, i32 242, i32 234, i32 219, i32 96, i32 3, i32 33, i32 192, i32 255, i32 94, i32 103, i32 195, i32 113, i32 11, i32 33, i32 180, i32 65, i32 160, i32 104, i32 56, i32 198, i32 1, i32 163, i32 211, i32 81, i32 60, i32 60, i32 39, i32 82, i32 228, i32 99, i32 170, i32 148, i32 230, i32 195, i32 40, i32 156, i32 198, i32 86, i32 172, i32 250, i32 182, i32 189, i32 226, i32 204, i32 118, i32 198, i32 39, i32 39, i32 162, i32 142, i32 120, i32 43, i32 132, i32 114, i32 16, i32 189, i32 78, i32 42, i32 171, i32 85, i32 54, i32 195, i32 236, i32 99, i32 85, i32 17, i32 85, i32 246, i32 165, i32 199, i32 1, i32 95, i32 254, i32 121, i32 216, i32 10, i32 247, i32 3, i32 216, i32 152, i32 153, i32 245, i32 208, i32 0, i32 84, i32 107, i32 102, i32 40, i32 245, i32 37, i32 106, i32 235, i32 252, i32 154, i32 154, i32 16, i32 206, i32 219, i32 58, i32 28, i32 60, i32 106, i32 157, i32 234, i32 70, i32 188, i32 69, i32 73, i32 172, i32 227, i32 65, i32 18, i32 124, i32 240, i32 247, i32 79, i32 249, i32 247, i32 255, i32 44, i32 137, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 180, i32 72, i32 16, i32 159, i32 138, i32 9, i32 118, i32 250, i32 240, i32 122, i32 176, i32 112, i32 247, i32 131, i32 128, i32 82, i32 132, i32 43, i32 38, i32 162, i32 196, i32 93, i32 79, i32 186, i32 177, i32 200, i32 64, i32 13, i32 120, i32 151, i32 196, i32 96, i32 15, i32 0, i32 63, i32 166, i32 4, i32 25, i32 86, i32 101, i32 49, i32 127, i32 139, i32 235, i32 13, i32 225, i32 71, i32 137, i32 151, i32 22, i32 83, i32 250, i32 129, i32 167, i32 170, i32 178, i32 191, i32 103, i32 235, i32 114, i32 96, i32 129, i32 13, i32 72, i32 233, i32 88, i32 31, i32 255, i32 132, i32 63, i32 147, i32 28, i32 203, i32 225, i32 48, i32 105, i32 165, i32 117, i32 25, i32 126, i32 20, i32 95, i32 248, i32 252, i32 9, i32 221, i32 168, i32 120, i32 157, i32 202, i32 89, i32 139, i32 209, i32 48, i32 1, i32 19, i32 56, i32 6, i32 248, i32 11, i32 172, i32 130, i32 196, i32 151, i32 43, i32 144, i32 224, i32 247, i32 168, i32 171, i32 108, i32 8, i32 128, i32 102, i32 144, i32 70, i32 247, i32 38, i32 45, i32 248, i32 241, i32 196, i32 107, i32 74, i32 130, i32 152, i32 142, i32 55, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 94, i32 168, i32 216, i32 4, i32 155, i32 115, i32 201, i32 201, i32 220, i32 13, i32 115, i32 191, i32 10, i32 10, i32 115, i32 255, i32 24, i32 31, i32 156, i32 81, i32 170, i32 198, i32 241, i32 131, i32 37, i32 253, i32 171, i32 163, i32 17, i32 211, i32 1, i32 36, i32 232, i32 221, i32 173, i32 58, i32 140, i32 234, i32 244, i32 179, i32 178, i32 229, i32 115, i32 242, i32 237, i32 139, i32 191, i32 237, i32 177, i32 12, i32 12, i32 251, i32 43, i32 241, i32 1, i32 72, i32 232, i32 38, i32 3, i32 142, i32 39, i32 77, i32 150, i32 114, i32 111, i32 133, i32 231, i32 239, i32 222, i32 103, i32 48, i32 252, i32 191, i32 90, i32 224, i32 123, i32 122, i32 42, i32 84, i32 107, i32 93, i32 98, i32 133, i32 161, i32 248, i32 22, i32 136, i32 236, i32 97, i32 185, i32 150, i32 181, i32 239, i32 45, i32 67, i32 77, i32 210, i32 142, i32 155, i32 250, i32 66, i32 142, i32 223, i32 143, i32 199, i32 134, i32 249, i32 164, i32 202, i32 112, i32 0, i32 157, i32 33, i32 191, i32 236, i32 87, i32 98, i32 48, i32 88, i32 140, i32 13, i32 53, i32 219, i32 93, i32 139, i32 106, i32 160, i32 90, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 208, i32 233, i32 192, i32 250, i32 149, i32 69, i32 35, i32 150, i32 241, i32 44, i32 121, i32 37, i32 20, i32 206, i32 64, i32 20, i32 68, i32 44, i32 54, i32 80, i32 217, i32 99, i32 86, i32 183, i32 86, i32 59, i32 158, i32 167, i32 239, i32 137, i32 187, i32 14, i32 37, i32 131, i32 230, i32 148, i32 123, i32 129, i32 178, i32 145, i32 174, i32 14, i32 5, i32 201, i32 163, i32 104, i32 45, i32 217, i32 136, i32 37, i32 25, i32 42, i32 97, i32 97, i32 33, i32 151, i32 21, i32 161, i32 53, i32 165, i32 70, i32 200, i32 162, i32 14, i32 186, i32 54, i32 123, i32 109, i32 169, i32 234, i32 20, i32 18, i32 197, i32 250, i32 145, i32 0, i32 186, i32 155, i32 153, i32 204, i32 86, i32 2, i32 233, i32 160, i32 38, i32 64, i32 102, i32 140, i32 196, i32 248, i32 133, i32 51, i32 104, i32 231, i32 3, i32 32, i32 61, i32 95, i32 92, i32 210, i32 188, i32 125, i32 119, i32 14, i32 42, i32 109, i32 34, i32 69, i32 132, i32 6, i32 196, i32 221, i32 198, i32 166, i32 198, i32 215, i32 73, i32 173, i32 109, i32 135, i32 145, i32 14, i32 58, i32 103, i32 29, i32 44, i32 29, i32 86, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 35, i32 21, i32 23, i32 235, i32 211, i32 219, i32 18, i32 94, i32 1, i32 240, i32 145, i32 171, i32 44, i32 65, i32 206, i32 172, i32 237, i32 27, i32 75, i32 45, i32 188, i32 219, i32 23, i32 102, i32 137, i32 70, i32 173, i32 75, i32 30, i32 111, i32 11, i32 20, i32 7, i32 118, i32 97, i32 15, i32 102, i32 178, i32 33, i32 57, i32 126, i32 192, i32 236, i32 69, i32 40, i32 130, i32 161, i32 41, i32 50, i32 68, i32 53, i32 19, i32 94, i32 97, i32 94, i32 84, i32 203, i32 124, i32 239, i32 246, i32 65, i32 207, i32 159, i32 10, i32 139, i32 177, i32 149, i32 229, i32 146, i32 80, i32 53, i32 17, i32 118, i32 172, i32 244, i32 77, i32 36, i32 195, i32 50, i32 230, i32 235, i32 254, i32 44, i32 135, i32 196, i32 241, i32 86, i32 196, i32 117, i32 36, i32 122, i32 86, i32 133, i32 90, i32 58, i32 19, i32 40, i32 193, i32 225, i32 84, i32 115, i32 242, i32 191, i32 118, i32 116, i32 25, i32 25, i32 27, i32 228, i32 185, i32 168, i32 70, i32 101, i32 115, i32 243, i32 119, i32 155, i32 41, i32 116, i32 91, i32 198, i32 137, i32 108, i32 44, i32 124, i32 248, i32 179, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 97, i32 177, i32 70, i32 186, i32 14, i32 49, i32 165, i32 103, i32 108, i32 127, i32 214, i32 217, i32 39, i32 133, i32 15, i32 121, i32 20, i32 200, i32 108, i32 47, i32 95, i32 91, i32 156, i32 53, i32 61, i32 56, i32 134, i32 119, i32 101, i32 85, i32 106, i32 123, i32 94, i32 244, i32 229, i32 23, i32 14, i32 16, i32 159, i32 231, i32 67, i32 95, i32 103, i32 92, i32 172, i32 75, i32 229, i32 20, i32 65, i32 210, i32 191, i32 72, i32 245, i32 20, i32 176, i32 113, i32 198, i32 97, i32 193, i32 178, i32 112, i32 88, i32 210, i32 90, i32 128, i32 186, i32 13, i32 9, i32 64, i32 167, i32 57, i32 166, i32 103, i32 52, i32 126, i32 102, i32 190, i32 86, i32 251, i32 83, i32 120, i32 196, i32 70, i32 232, i32 237, i32 104, i32 108, i32 127, i32 206, i32 232, i32 159, i32 206, i32 162, i32 100, i32 88, i32 83, i32 208, i32 182, i32 86, i32 48, i32 92, i32 174, i32 179, i32 117, i32 68, i32 164, i32 131, i32 81, i32 110, i32 1, i32 101, i32 239, i32 69, i32 118, i32 230, i32 245, i32 162, i32 13, i32 212, i32 22, i32 59, i32 88, i32 47, i32 242, i32 47, i32 54, i32 24, i32 63, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 141, i32 210, i32 218, i32 199, i32 68, i32 214, i32 122, i32 219, i32 38, i32 125, i32 29, i32 184, i32 225, i32 222, i32 157, i32 122, i32 125, i32 23, i32 126, i32 28, i32 55, i32 4, i32 141, i32 45, i32 124, i32 94, i32 24, i32 56, i32 30, i32 175, i32 199, i32 27, i32 84, i32 131, i32 2, i32 24, i32 130, i32 147, i32 153, i32 7, i32 208, i32 167, i32 218, i32 216, i32 117, i32 137, i32 250, i32 242, i32 217, i32 163, i32 184, i32 107, i32 90, i32 53, i32 40, i32 210, i32 107, i32 89, i32 194, i32 248, i32 69, i32 226, i32 188, i32 6, i32 47, i32 102, i32 41, i32 27, i32 4, i32 137, i32 189, i32 126, i32 238, i32 110, i32 221, i32 183, i32 14, i32 239, i32 176, i32 12, i32 180, i32 252, i32 127, i32 194, i32 201, i32 58, i32 60, i32 100, i32 239, i32 69, i32 68, i32 175, i32 138, i32 144, i32 101, i32 118, i32 247, i32 212, i32 22, i32 108, i32 78, i32 149, i32 157, i32 93, i32 15, i32 145, i32 43, i32 82, i32 254, i32 92, i32 52, i32 229, i32 48, i32 230, i32 164, i32 59, i32 243, i32 243, i32 52, i32 8, i32 169, i32 74, i32 160, i32 181, i32 110, i32 179, i32 9, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 219, i32 159, i32 44, i32 252, i32 214, i32 178, i32 30, i32 46, i32 82, i32 122, i32 6, i32 135, i32 45, i32 134, i32 114, i32 43, i32 109, i32 144, i32 119, i32 70, i32 67, i32 181, i32 122, i32 248, i32 96, i32 125, i32 145, i32 96, i32 91, i32 157, i32 158, i32 7, i32 77, i32 74, i32 215, i32 152, i32 113, i32 87, i32 172, i32 125, i32 139, i32 55, i32 189, i32 99, i32 255, i32 135, i32 177, i32 73, i32 149, i32 32, i32 124, i32 207, i32 124, i32 89, i32 196, i32 145, i32 156, i32 239, i32 208, i32 219, i32 96, i32 9, i32 157, i32 70, i32 42, i32 54, i32 104, i32 252, i32 95, i32 182, i32 79, i32 165, i32 227, i32 157, i32 36, i32 47, i32 192, i32 147, i32 97, i32 207, i32 248, i32 10, i32 237, i32 225, i32 219, i32 39, i32 236, i32 14, i32 20, i32 50, i32 95, i32 142, i32 161, i32 98, i32 65, i32 22, i32 146, i32 103, i32 119, i32 86, i32 161, i32 255, i32 196, i32 197, i32 149, i32 240, i32 227, i32 58, i32 10, i32 202, i32 148, i32 77, i32 158, i32 126, i32 61, i32 185, i32 110, i32 182, i32 176, i32 206, i32 164, i32 48, i32 137, i32 153, i32 233, i32 173, i32 17, i32 89, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 50, i32 153, i32 147, i32 209, i32 154, i32 114, i32 243, i32 169, i32 22, i32 189, i32 180, i32 76, i32 221, i32 249, i32 212, i32 178, i32 100, i32 154, i32 211, i32 5, i32 228, i32 163, i32 115, i32 28, i32 203, i32 126, i32 87, i32 103, i32 255, i32 4, i32 179, i32 16, i32 4, i32 253, i32 136, i32 60, i32 12, i32 208, i32 9, i32 82, i32 81, i32 79, i32 6, i32 25, i32 204, i32 195, i32 187, i32 222, i32 128, i32 197, i32 51, i32 188, i32 249, i32 243, i32 23, i32 54, i32 221, i32 198, i32 222, i32 232, i32 155, i32 93, i32 121, i32 27, i32 79, i32 0, i32 178, i32 102, i32 85, i32 237, i32 74, i32 237, i32 141, i32 225, i32 102, i32 24, i32 178, i32 20, i32 116, i32 141, i32 253, i32 26, i32 54, i32 15, i32 38, i32 92, i32 139, i32 137, i32 243, i32 171, i32 242, i32 243, i32 36, i32 103, i32 253, i32 112, i32 235, i32 203, i32 197, i32 112, i32 145, i32 49, i32 16, i32 147, i32 13, i32 200, i32 208, i32 239, i32 98, i32 232, i32 111, i32 130, i32 227, i32 105, i32 61, i32 145, i32 127, i32 49, i32 225, i32 38, i32 53, i32 60, i32 74, i32 47, i32 171, i32 196, i32 154, i32 94, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 246, i32 219, i32 13, i32 34, i32 61, i32 181, i32 20, i32 117, i32 49, i32 240, i32 129, i32 226, i32 185, i32 55, i32 162, i32 169, i32 132, i32 17, i32 154, i32 7, i32 181, i32 83, i32 137, i32 120, i32 169, i32 48, i32 39, i32 161, i32 241, i32 78, i32 92, i32 46, i32 206, i32 36, i32 239, i32 123, i32 134, i32 242, i32 15, i32 119, i32 232, i32 92, i32 125, i32 135, i32 56, i32 45, i32 239, i32 175, i32 242, i32 140, i32 114, i32 46, i32 235, i32 182, i32 85, i32 75, i32 110, i32 241, i32 78, i32 138, i32 14, i32 154, i32 108, i32 76, i32 78, i32 109, i32 195, i32 167, i32 79, i32 34, i32 69, i32 38, i32 162, i32 126, i32 22, i32 247, i32 247, i32 99, i32 220, i32 134, i32 1, i32 42, i32 113, i32 56, i32 92, i32 51, i32 195, i32 206, i32 48, i32 255, i32 249, i32 44, i32 145, i32 113, i32 138, i32 114, i32 146, i32 126, i32 80, i32 39, i32 114, i32 215, i32 12, i32 214, i32 105, i32 150, i32 129, i32 53, i32 132, i32 148, i32 53, i32 139, i32 108, i32 170, i32 98, i32 134, i32 110, i32 28, i32 21, i32 243, i32 108, i32 179, i32 255, i32 101, i32 27, i32 162, i32 155, i32 89, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 241, i32 89, i32 39, i32 216, i32 219, i32 90, i32 17, i32 94, i32 130, i32 243, i32 56, i32 255, i32 28, i32 237, i32 254, i32 63, i32 100, i32 84, i32 63, i32 127, i32 209, i32 129, i32 237, i32 239, i32 101, i32 197, i32 203, i32 253, i32 225, i32 128, i32 205, i32 17, i32 238, i32 243, i32 0, i32 161, i32 80, i32 222, i32 192, i32 182, i32 1, i32 227, i32 140, i32 60, i32 77, i32 49, i32 210, i32 176, i32 88, i32 205, i32 237, i32 16, i32 74, i32 122, i32 239, i32 128, i32 169, i32 25, i32 50, i32 243, i32 216, i32 51, i32 140, i32 6, i32 233, i32 195, i32 188, i32 123, i32 92, i32 252, i32 178, i32 249, i32 201, i32 47, i32 229, i32 186, i32 58, i32 11, i32 171, i32 100, i32 56, i32 111, i32 91, i32 75, i32 147, i32 218, i32 100, i32 236, i32 77, i32 61, i32 160, i32 245, i32 187, i32 186, i32 71, i32 72, i32 135, i32 192, i32 177, i32 240, i32 163, i32 111, i32 12, i32 147, i32 169, i32 10, i32 114, i32 239, i32 92, i32 190, i32 101, i32 53, i32 167, i32 106, i32 78, i32 44, i32 191, i32 33, i32 35, i32 232, i32 47, i32 151, i32 199, i32 62, i32 200, i32 23, i32 172, i32 30, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 150, i32 136, i32 166, i32 171, i32 143, i32 227, i32 58, i32 73, i32 248, i32 254, i32 52, i32 231, i32 106, i32 178, i32 254, i32 64, i32 38, i32 116, i32 87, i32 76, i32 246, i32 212, i32 153, i32 206, i32 93, i32 123, i32 47, i32 103, i32 214, i32 90, i32 228, i32 78, i32 219, i32 250, i32 155, i32 44, i32 212, i32 35, i32 103, i32 44, i32 138, i32 99, i32 108, i32 7, i32 38, i32 72, i32 79, i32 194, i32 3, i32 210, i32 83, i32 32, i32 40, i32 237, i32 101, i32 113, i32 71, i32 169, i32 22, i32 22, i32 18, i32 188, i32 40, i32 51, i32 134, i32 230, i32 140, i32 29, i32 223, i32 202, i32 252, i32 213, i32 248, i32 58, i32 195, i32 68, i32 114, i32 230, i32 120, i32 157, i32 43, i32 151, i32 248, i32 40, i32 69, i32 180, i32 32, i32 201, i32 42, i32 140, i32 103, i32 170, i32 17, i32 197, i32 91, i32 47, i32 51, i32 167, i32 144, i32 124, i32 195, i32 111, i32 23, i32 165, i32 160, i32 103, i32 114, i32 23, i32 234, i32 126, i32 99, i32 20, i32 131, i32 222, i32 193, i32 113, i32 45, i32 65, i32 50, i32 122, i32 243, i32 209, i32 43, i32 216, i32 42, i32 166, i32 70, i32 54, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 156, i32 178, i32 97, i32 10, i32 152, i32 42, i32 165, i32 215, i32 238, i32 169, i32 172, i32 101, i32 203, i32 10, i32 30, i32 226, i32 190, i32 220, i32 133, i32 89, i32 15, i32 156, i32 166, i32 87, i32 52, i32 165, i32 135, i32 235, i32 123, i32 30, i32 12, i32 60, i32 10, i32 103, i32 144, i32 109, i32 12, i32 76, i32 204, i32 192, i32 230, i32 189, i32 167, i32 94, i32 85, i32 140, i32 205, i32 88, i32 155, i32 17, i32 162, i32 187, i32 75, i32 177, i32 67, i32 4, i32 60, i32 85, i32 237, i32 35, i32 254, i32 205, i32 177, i32 83, i32 13, i32 136, i32 26, i32 144, i32 126, i32 220, i32 216, i32 254, i32 193, i32 47, i32 93, i32 103, i32 238, i32 103, i32 47, i32 237, i32 111, i32 85, i32 67, i32 95, i32 135, i32 20, i32 53, i32 66, i32 211, i32 117, i32 174, i32 213, i32 211, i32 133, i32 26, i32 118, i32 152, i32 131, i32 194, i32 55, i32 160, i32 65, i32 168, i32 72, i32 92, i32 95, i32 191, i32 200, i32 250, i32 36, i32 224, i32 89, i32 44, i32 189, i32 246, i32 129, i32 126, i32 136, i32 230, i32 202, i32 4, i32 216, i32 93, i32 96, i32 187, i32 116, i32 167, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 72, i32 213, i32 57, i32 74, i32 11, i32 32, i32 106, i32 67, i32 160, i32 7, i32 130, i32 94, i32 73, i32 124, i32 201, i32 71, i32 241, i32 124, i32 55, i32 185, i32 35, i32 239, i32 107, i32 70, i32 69, i32 140, i32 69, i32 118, i32 223, i32 20, i32 107, i32 110, i32 76, i32 111, i32 254, i32 107, i32 12, i32 98, i32 215, i32 72, i32 113, i32 239, i32 177, i32 133, i32 121, i32 192, i32 237, i32 36, i32 177, i32 8, i32 147, i32 118, i32 142, i32 247, i32 56, i32 142, i32 235, i32 254, i32 128, i32 64, i32 175, i32 144, i32 100, i32 73, i32 61, i32 129, i32 240, i32 235, i32 22, i32 253, i32 88, i32 51, i32 141, i32 124, i32 26, i32 251, i32 32, i32 44, i32 138, i32 238, i32 144, i32 187, i32 51, i32 109, i32 69, i32 233, i32 142, i32 153, i32 133, i32 225, i32 8, i32 31, i32 197, i32 241, i32 181, i32 70, i32 224, i32 103, i32 233, i32 123, i32 219, i32 150, i32 92, i32 176, i32 50, i32 208, i32 89, i32 49, i32 144, i32 220, i32 146, i32 151, i32 172, i32 9, i32 56, i32 49, i32 15, i32 126, i32 214, i32 93, i32 208, i32 6, i32 182, i32 31, i32 234, i32 240, i32 91, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 76, i32 182, i32 105, i32 200, i32 129, i32 149, i32 148, i32 51, i32 146, i32 52, i32 233, i32 60, i32 132, i32 13, i32 61, i32 90, i32 55, i32 156, i32 34, i32 160, i32 170, i32 101, i32 206, i32 180, i32 194, i32 45, i32 102, i32 103, i32 2, i32 255, i32 116, i32 16, i32 51, i32 254, i32 66, i32 42, i32 54, i32 43, i32 46, i32 54, i32 100, i32 92, i32 139, i32 204, i32 129, i32 106, i32 21, i32 8, i32 161, i32 39, i32 232, i32 87, i32 229, i32 120, i32 142, i32 242, i32 88, i32 25, i32 18, i32 66, i32 174, i32 196, i32 99, i32 62, i32 159, i32 4, i32 8, i32 40, i32 190, i32 135, i32 218, i32 128, i32 40, i32 56, i32 222, i32 159, i32 205, i32 228, i32 227, i32 98, i32 251, i32 46, i32 70, i32 141, i32 1, i32 179, i32 6, i32 81, i32 212, i32 25, i32 59, i32 17, i32 250, i32 226, i32 173, i32 30, i32 145, i32 74, i32 7, i32 173, i32 8, i32 117, i32 193, i32 79, i32 164, i32 178, i32 195, i32 111, i32 70, i32 62, i32 177, i32 206, i32 82, i32 171, i32 103, i32 9, i32 84, i32 72, i32 107, i32 108, i32 215, i32 29, i32 113, i32 118, i32 203, i32 255, i32 221, i32 49, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 190, i32 87, i32 189, i32 14, i32 15, i32 172, i32 94, i32 118, i32 163, i32 113, i32 173, i32 43, i32 16, i32 69, i32 2, i32 236, i32 89, i32 213, i32 93, i32 169, i32 68, i32 204, i32 37, i32 76, i32 179, i32 60, i32 91, i32 105, i32 7, i32 85, i32 38, i32 107, i32 53, i32 13, i32 52, i32 10, i32 184, i32 103, i32 86, i32 41, i32 32, i32 243, i32 25, i32 95, i32 226, i32 131, i32 66, i32 115, i32 83, i32 168, i32 197, i32 2, i32 25, i32 51, i32 180, i32 100, i32 189, i32 195, i32 135, i32 140, i32 215, i32 118, i32 237, i32 37, i32 157, i32 35, i32 189, i32 21, i32 254, i32 82, i32 82, i32 21, i32 38, i32 121, i32 134, i32 186, i32 6, i32 86, i32 102, i32 187, i32 140, i32 46, i32 16, i32 17, i32 213, i32 74, i32 24, i32 82, i32 218, i32 132, i32 68, i32 240, i32 62, i32 233, i32 140, i32 53, i32 44, i32 185, i32 66, i32 164, i32 175, i32 59, i32 66, i32 14, i32 194, i32 15, i32 242, i32 234, i32 131, i32 175, i32 154, i32 19, i32 23, i32 176, i32 189, i32 137, i32 23, i32 227, i32 114, i32 203, i32 14, i32 118, i32 126, i32 65, i32 99, i32 4, i32 136, i32 113, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 231, i32 59, i32 101, i32 17, i32 223, i32 178, i32 242, i32 99, i32 148, i32 18, i32 111, i32 92, i32 158, i32 119, i32 193, i32 182, i32 216, i32 171, i32 88, i32 122, i32 29, i32 149, i32 115, i32 221, i32 231, i32 227, i32 111, i32 242, i32 3, i32 29, i32 219, i32 118, i32 197, i32 102, i32 128, i32 19, i32 14, i32 72, i32 140, i32 135, i32 49, i32 132, i32 180, i32 96, i32 237, i32 197, i32 236, i32 182, i32 197, i32 5, i32 51, i32 95, i32 47, i32 125, i32 64, i32 182, i32 50, i32 29, i32 56, i32 116, i32 27, i32 241, i32 9, i32 61, i32 23, i32 190, i32 235, i32 133, i32 237, i32 158, i32 205, i32 86, i32 245, i32 23, i32 69, i32 66, i32 180, i32 31, i32 68, i32 76, i32 5, i32 116, i32 21, i32 71, i32 0, i32 198, i32 106, i32 61, i32 36, i32 9, i32 13, i32 88, i32 177, i32 66, i32 215, i32 4, i32 63, i32 220, i32 5, i32 203, i32 65, i32 60, i32 200, i32 35, i32 4, i32 44, i32 56, i32 153, i32 227, i32 104, i32 85, i32 249, i32 211, i32 50, i32 199, i32 191, i32 250, i32 212, i32 27, i32 93, i32 222, i32 220, i32 16, i32 66, i32 192, i32 66, i32 217, i32 117, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 174, i32 95, i32 136, i32 123, i32 165, i32 144, i32 223, i32 16, i32 178, i32 139, i32 94, i32 36, i32 23, i32 195, i32 163, i32 212, i32 15, i32 146, i32 97, i32 26, i32 25, i32 90, i32 173, i32 118, i32 189, i32 216, i32 28, i32 221, i32 224, i32 18, i32 109, i32 148, i32 213, i32 95, i32 31, i32 162, i32 251, i32 235, i32 225, i32 7, i32 52, i32 248, i32 32, i32 173, i32 129, i32 48, i32 6, i32 45, i32 161, i32 129, i32 149, i32 54, i32 207, i32 17, i32 11, i32 175, i32 193, i32 43, i32 154, i32 108, i32 85, i32 193, i32 22, i32 51, i32 121, i32 231, i32 24, i32 230, i32 15, i32 87, i32 147, i32 21, i32 160, i32 167, i32 170, i32 196, i32 191, i32 79, i32 48, i32 116, i32 149, i32 94, i32 105, i32 74, i32 91, i32 69, i32 228, i32 0, i32 235, i32 35, i32 116, i32 76, i32 223, i32 107, i32 69, i32 34, i32 190, i32 131, i32 182, i32 75, i32 128, i32 107, i32 67, i32 36, i32 94, i32 239, i32 153, i32 155, i32 168, i32 252, i32 37, i32 141, i32 59, i32 3, i32 148, i32 43, i32 62, i32 231, i32 149, i32 118, i32 155, i32 204, i32 21, i32 219, i32 50, i32 230, i32 102, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 42, i32 80, i32 227, i32 7, i32 21, i32 89, i32 242, i32 139, i32 129, i32 242, i32 243, i32 211, i32 108, i32 153, i32 140, i32 112, i32 103, i32 236, i32 204, i32 238, i32 158, i32 89, i32 69, i32 89, i32 125, i32 71, i32 117, i32 105, i32 245, i32 36, i32 147, i32 93, i32 163, i32 219, i32 247, i32 48, i32 216, i32 194, i32 154, i32 225, i32 211, i32 206, i32 34, i32 229, i32 128, i32 30, i32 217, i32 228, i32 31, i32 171, i32 192, i32 113, i32 26, i32 134, i32 14, i32 39, i32 153, i32 91, i32 250, i32 118, i32 153, i32 176, i32 8, i32 60, i32 211, i32 181, i32 109, i32 5, i32 63, i32 159, i32 243, i32 21, i32 141, i32 124, i32 202, i32 201, i32 252, i32 138, i32 124, i32 148, i32 176, i32 99, i32 54, i32 155, i32 120, i32 209, i32 145, i32 31, i32 147, i32 216, i32 87, i32 67, i32 222, i32 118, i32 163, i32 67, i32 178, i32 235, i32 71, i32 70, i32 24, i32 62, i32 31, i32 153, i32 12, i32 204, i32 241, i32 44, i32 224, i32 231, i32 143, i32 224, i32 1, i32 126, i32 101, i32 184, i32 12, i32 208, i32 251, i32 200, i32 185, i32 144, i32 152, i32 51, i32 97, i32 59, i32 216, i32 39, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 152, i32 11, i32 228, i32 222, i32 219, i32 168, i32 250, i32 130, i32 116, i32 6, i32 82, i32 109, i32 8, i32 82, i32 138, i32 255, i32 98, i32 197, i32 106, i32 68, i32 15, i32 81, i32 140, i32 31, i32 110, i32 182, i32 198, i32 44, i32 129, i32 211, i32 118, i32 70, i32 7, i32 238, i32 167, i32 173, i32 183, i32 9, i32 11, i32 73, i32 78, i32 191, i32 202, i32 229, i32 33, i32 230, i32 230, i32 175, i32 213, i32 103, i32 243, i32 206, i32 126, i32 124, i32 147, i32 123, i32 90, i32 16, i32 18, i32 14, i32 108, i32 6, i32 17, i32 117, i32 150, i32 157, i32 49, i32 244, i32 162, i32 190, i32 129, i32 185, i32 165, i32 89, i32 158, i32 186, i32 7, i32 190, i32 116, i32 88, i32 216, i32 235, i32 197, i32 159, i32 61, i32 209, i32 244, i32 174, i32 206, i32 83, i32 223, i32 79, i32 199, i32 42, i32 137, i32 77, i32 7, i32 152, i32 97, i32 232, i32 106, i32 210, i32 129, i32 73, i32 37, i32 213, i32 91, i32 24, i32 199, i32 53, i32 82, i32 81, i32 164, i32 70, i32 173, i32 24, i32 13, i32 201, i32 95, i32 24, i32 145, i32 59, i32 180, i32 192, i32 96, i32 89, i32 141, i32 102, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i32 227, i32 137, i32 3, i32 215, i32 34, i32 149, i32 159, i32 202, i32 180, i32 141, i32 158, i32 109, i32 151, i32 255, i32 141, i32 33, i32 89, i32 7, i32 239, i32 3, i32 45, i32 94, i32 248, i32 68, i32 70, i32 231, i32 133, i32 128, i32 197, i32 137, i32 80, i32 194, i32 91, i32 155, i32 120, i32 35, i32 27, i32 58, i32 136, i32 148, i32 95, i32 10, i32 155, i32 152, i32 43, i32 110, i32 83, i32 17, i32 246, i32 255, i32 198, i32 125, i32 66, i32 204, i32 2, i32 128, i32 64, i32 13, i32 30, i32 251, i32 175, i32 97, i32 7, i32 155, i32 24, i32 128, i32 94, i32 219, i32 5, i32 189, i32 198, i32 183, i32 60, i32 194, i32 64, i32 77, i32 93, i32 206, i32 151, i32 138, i32 52, i32 21, i32 171, i32 40, i32 93, i32 16, i32 240, i32 55, i32 12, i32 204, i32 22, i32 250, i32 31, i32 51, i32 13, i32 38, i32 220, i32 118, i32 59, i32 252, i32 249, i32 156, i32 63, i32 137, i32 11, i32 98, i32 83, i32 175, i32 131, i32 1, i32 46, i32 188, i32 106, i32 198, i32 3, i32 13, i32 117, i32 42, i32 13, i32 230, i32 148, i32 84, i32 207, i32 179, i32 229, i32 150, i32 37, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 37, i32 13, i32 214, i32 199, i32 35, i32 71, i32 16, i32 173, i32 199, i32 8, i32 92, i32 135, i32 135, i32 147, i32 152, i32 24, i32 184, i32 211, i32 156, i32 172, i32 90, i32 61, i32 197, i32 117, i32 248, i32 73, i32 50, i32 20, i32 204, i32 81, i32 150, i32 36, i32 189, i32 89, i32 61, i32 191, i32 92, i32 49, i32 68, i32 44, i32 50, i32 148, i32 4, i32 96, i32 132, i32 15, i32 173, i32 0, i32 182, i32 143, i32 201, i32 29, i32 204, i32 92, i32 162, i32 73, i32 14, i32 80, i32 145, i32 8, i32 154, i32 67, i32 85, i32 5, i32 18, i32 85, i32 249, i32 218, i32 203, i32 68, i32 167, i32 220, i32 87, i32 226, i32 249, i32 154, i32 230, i32 7, i32 35, i32 96, i32 84, i32 167, i32 57, i32 165, i32 155, i32 132, i32 86, i32 110, i32 170, i32 139, i32 143, i32 176, i32 44, i32 135, i32 175, i32 103, i32 23, i32 180, i32 174, i32 114, i32 89, i32 208, i32 170, i32 168, i32 22, i32 139, i32 99, i32 17, i32 179, i32 67, i32 4, i32 218, i32 12, i32 168, i32 183, i32 104, i32 221, i32 78, i32 84, i32 231, i32 175, i32 93, i32 93, i32 5, i32 118, i32 54, i32 236, i32 13, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 135, i32 71, i32 157, i32 233, i32 37, i32 213, i32 227, i32 71, i32 120, i32 223, i32 133, i32 167, i32 133, i32 94, i32 122, i32 76, i32 95, i32 121, i32 26, i32 243, i32 162, i32 178, i32 40, i32 160, i32 156, i32 221, i32 48, i32 64, i32 212, i32 56, i32 189, i32 40, i32 38, i32 225, i32 123, i32 95, i32 229, i32 220, i32 63, i32 125, i32 161, i32 167, i32 38, i32 68, i32 34, i32 35, i32 192, i32 143, i32 125, i32 241, i32 181, i32 17, i32 71, i32 123, i32 25, i32 212, i32 117, i32 111, i32 30, i32 165, i32 39, i32 254, i32 200, i32 14, i32 253, i32 91, i32 78, i32 141, i32 182, i32 126, i32 130, i32 155, i32 239, i32 206, i32 4, i32 105, i32 81, i32 82, i32 255, i32 239, i32 160, i32 82, i32 181, i32 121, i32 23, i32 94, i32 47, i32 222, i32 214, i32 60, i32 45, i32 160, i32 67, i32 180, i32 11, i32 25, i32 229, i32 137, i32 138, i32 118, i32 108, i32 219, i32 77, i32 10, i32 91, i32 114, i32 157, i32 89, i32 110, i32 99, i32 99, i32 24, i32 124, i32 227, i32 250, i32 226, i32 219, i32 161, i32 141, i32 244, i32 165, i32 215, i32 22, i32 178, i32 208, i32 179, i32 63, i32 57, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 233, i32 115, i32 111, i32 33, i32 185, i32 222, i32 34, i32 125, i32 235, i32 151, i32 49, i32 16, i32 163, i32 234, i32 225, i32 198, i32 55, i32 235, i32 143, i32 67, i32 88, i32 222, i32 65, i32 100, i32 14, i32 62, i32 7, i32 153, i32 61, i32 241, i32 223, i32 30, i32 123, i32 52, i32 36, i32 76, i32 207, i32 56, i32 229, i32 108, i32 10, i32 1, i32 44, i32 34, i32 11, i32 36, i32 56, i32 173, i32 36, i32 126, i32 25, i32 240, i32 108, i32 249, i32 49, i32 244, i32 53, i32 17, i32 246, i32 70, i32 51, i32 58, i32 35, i32 89, i32 196, i32 11, i32 75, i32 98, i32 153, i32 55, i32 132, i32 63, i32 116, i32 162, i32 249, i32 206, i32 226, i32 11, i32 15, i32 42, i32 61, i32 163, i32 227, i32 219, i32 90, i32 157, i32 147, i32 204, i32 165, i32 239, i32 130, i32 145, i32 29, i32 230, i32 108, i32 104, i32 26, i32 234, i32 191, i32 253, i32 74, i32 60, i32 142, i32 236, i32 41, i32 126, i32 119, i32 119, i32 18, i32 153, i32 215, i32 132, i32 249, i32 85, i32 127, i32 241, i32 139, i32 180, i32 210, i32 149, i32 163, i32 141, i32 240, i32 138, i32 167, i32 235, i32 130, i32 75, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 193, i32 205, i32 144, i32 102, i32 185, i32 118, i32 160, i32 91, i32 165, i32 133, i32 117, i32 35, i32 249, i32 137, i32 165, i32 130, i32 178, i32 111, i32 177, i32 235, i32 196, i32 105, i32 111, i32 24, i32 90, i32 237, i32 148, i32 61, i32 157, i32 217, i32 44, i32 26, i32 193, i32 86, i32 150, i32 145, i32 95, i32 31, i32 187, i32 84, i32 111, i32 136, i32 137, i32 10, i32 178, i32 214, i32 65, i32 66, i32 106, i32 130, i32 238, i32 20, i32 170, i32 118, i32 48, i32 101, i32 15, i32 103, i32 57, i32 166, i32 81, i32 124, i32 73, i32 36, i32 219, i32 167, i32 157, i32 157, i32 191, i32 160, i32 204, i32 237, i32 83, i32 162, i32 162, i32 25, i32 57, i32 72, i32 131, i32 25, i32 55, i32 88, i32 209, i32 4, i32 40, i32 64, i32 247, i32 138, i32 194, i32 8, i32 183, i32 165, i32 66, i32 207, i32 83, i32 76, i32 31, i32 150, i32 255, i32 52, i32 44, i32 19, i32 33, i32 203, i32 10, i32 137, i32 133, i32 190, i32 179, i32 112, i32 158, i32 30, i32 222, i32 151, i32 175, i32 150, i32 48, i32 247, i32 72, i32 137, i32 64, i32 141, i32 7, i32 241, i32 37, i32 240, i32 48, i32 88, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 43, i32 6, i32 217, i32 161, i32 93, i32 225, i32 244, i32 209, i32 30, i32 60, i32 154, i32 198, i32 41, i32 43, i32 19, i32 19, i32 120, i32 192, i32 216, i32 22, i32 23, i32 45, i32 158, i32 169, i32 201, i32 121, i32 87, i32 171, i32 36, i32 145, i32 146, i32 25, i32 20, i32 137, i32 115, i32 161, i32 55, i32 135, i32 106, i32 122, i32 207, i32 29, i32 217, i32 46, i32 26, i32 103, i32 237, i32 116, i32 192, i32 240, i32 156, i32 51, i32 221, i32 223, i32 8, i32 191, i32 123, i32 209, i32 102, i32 218, i32 230, i32 201, i32 73, i32 8, i32 243, i32 225, i32 43, i32 124, i32 5, i32 134, i32 128, i32 147, i32 74, i32 173, i32 180, i32 143, i32 126, i32 153, i32 12, i32 253, i32 205, i32 239, i32 209, i32 255, i32 44, i32 105, i32 52, i32 19, i32 65, i32 100, i32 207, i32 59, i32 208, i32 144, i32 9, i32 30, i32 231, i32 32, i32 114, i32 124, i32 109, i32 148, i32 95, i32 82, i32 68, i32 84, i32 227, i32 241, i32 178, i32 176, i32 54, i32 70, i32 15, i32 174, i32 146, i32 232, i32 112, i32 157, i32 110, i32 121, i32 177, i32 173, i32 55, i32 169, i32 95, i32 192, i32 222, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 236, i32 211, i32 255, i32 87, i32 11, i32 176, i32 178, i32 220, i32 248, i32 79, i32 226, i32 18, i32 213, i32 54, i32 190, i32 107, i32 9, i32 67, i32 109, i32 163, i32 77, i32 144, i32 45, i32 184, i32 116, i32 232, i32 113, i32 69, i32 25, i32 139, i32 12, i32 106, i32 120, i32 132, i32 225, i32 86, i32 69, i32 105, i32 104, i32 90, i32 79, i32 184, i32 177, i32 41, i32 255, i32 51, i32 3, i32 49, i32 183, i32 203, i32 150, i32 37, i32 230, i32 230, i32 65, i32 152, i32 26, i32 187, i32 3, i32 86, i32 242, i32 178, i32 145, i32 52, i32 139, i32 241, i32 160, i32 245, i32 220, i32 41, i32 180, i32 226, i32 7, i32 198, i32 122, i32 0, i32 208, i32 137, i32 23, i32 81, i32 212, i32 187, i32 212, i32 34, i32 234, i32 126, i32 125, i32 124, i32 36, i32 234, i32 242, i32 232, i32 34, i32 18, i32 149, i32 6, i32 29, i32 134, i32 78, i32 207, i32 247, i32 55, i32 16, i32 37, i32 143, i32 18, i32 251, i32 25, i32 251, i32 224, i32 237, i32 16, i32 200, i32 226, i32 245, i32 117, i32 177, i32 51, i32 192, i32 150, i32 13, i32 251, i32 21, i32 108, i32 13, i32 7, i32 95, i32 5]
@ge25519_base_multipl = internal constant [13600 x i32] [i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 88, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 201, i32 163, i32 248, i32 106, i32 174, i32 70, i32 95, i32 14, i32 86, i32 81, i32 56, i32 100, i32 81, i32 15, i32 57, i32 151, i32 86, i32 31, i32 162, i32 201, i32 232, i32 94, i32 162, i32 29, i32 194, i32 41, i32 35, i32 9, i32 243, i32 205, i32 96, i32 34, i32 212, i32 180, i32 245, i32 120, i32 72, i32 104, i32 195, i32 2, i32 4, i32 3, i32 36, i32 103, i32 23, i32 236, i32 22, i32 159, i32 247, i32 158, i32 38, i32 96, i32 142, i32 161, i32 38, i32 161, i32 171, i32 105, i32 238, i32 119, i32 209, i32 177, i32 103, i32 18, i32 47, i32 17, i32 50, i32 202, i32 97, i32 171, i32 56, i32 223, i32 240, i32 15, i32 47, i32 234, i32 50, i32 40, i32 242, i32 76, i32 108, i32 113, i32 213, i32 128, i32 133, i32 184, i32 14, i32 71, i32 225, i32 149, i32 21, i32 203, i32 39, i32 232, i32 208, i32 71, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 180, i32 185, i32 55, i32 252, i32 169, i32 91, i32 47, i32 30, i32 147, i32 228, i32 30, i32 98, i32 252, i32 60, i32 120, i32 129, i32 143, i32 243, i32 138, i32 102, i32 9, i32 111, i32 173, i32 110, i32 121, i32 115, i32 229, i32 201, i32 0, i32 6, i32 211, i32 33, i32 235, i32 39, i32 103, i32 193, i32 55, i32 171, i32 122, i32 216, i32 39, i32 156, i32 7, i32 142, i32 255, i32 17, i32 106, i32 176, i32 120, i32 110, i32 173, i32 58, i32 46, i32 15, i32 152, i32 159, i32 114, i32 195, i32 127, i32 130, i32 242, i32 150, i32 150, i32 112, i32 241, i32 121, i32 123, i32 237, i32 79, i32 68, i32 178, i32 231, i32 8, i32 13, i32 194, i32 8, i32 18, i32 210, i32 159, i32 223, i32 205, i32 147, i32 32, i32 138, i32 207, i32 51, i32 202, i32 109, i32 137, i32 185, i32 119, i32 200, i32 147, i32 27, i32 78, i32 96, i32 105, i32 210, i32 6, i32 58, i32 79, i32 57, i32 45, i32 249, i32 56, i32 64, i32 140, i32 76, i32 231, i32 5, i32 18, i32 180, i32 120, i32 139, i32 248, i32 192, i32 236, i32 147, i32 222, i32 122, i32 107, i32 206, i32 44, i32 225, i32 14, i32 169, i32 52, i32 68, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 38, i32 9, i32 218, i32 23, i32 175, i32 149, i32 214, i32 251, i32 106, i32 25, i32 13, i32 110, i32 94, i32 18, i32 241, i32 153, i32 76, i32 170, i32 168, i32 111, i32 121, i32 134, i32 244, i32 114, i32 40, i32 0, i32 38, i32 249, i32 234, i32 158, i32 25, i32 61, i32 252, i32 134, i32 75, i32 8, i32 238, i32 231, i32 160, i32 253, i32 33, i32 69, i32 9, i32 52, i32 193, i32 97, i32 50, i32 35, i32 252, i32 155, i32 85, i32 72, i32 83, i32 153, i32 247, i32 99, i32 208, i32 153, i32 206, i32 1, i32 224, i32 159, i32 235, i32 40, i32 28, i32 89, i32 28, i32 101, i32 93, i32 52, i32 164, i32 9, i32 205, i32 19, i32 156, i32 112, i32 125, i32 177, i32 42, i32 197, i32 136, i32 175, i32 11, i32 96, i32 199, i32 159, i32 52, i32 141, i32 214, i32 183, i32 127, i32 234, i32 120, i32 101, i32 141, i32 119, i32 199, i32 246, i32 108, i32 86, i32 49, i32 32, i32 20, i32 14, i32 168, i32 217, i32 39, i32 193, i32 154, i32 61, i32 27, i32 125, i32 14, i32 38, i32 211, i32 129, i32 170, i32 235, i32 245, i32 107, i32 121, i32 2, i32 241, i32 81, i32 92, i32 117, i32 85, i32 15, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 232, i32 147, i32 139, i32 0, i32 100, i32 247, i32 156, i32 184, i32 116, i32 224, i32 230, i32 73, i32 72, i32 77, i32 77, i32 72, i32 182, i32 25, i32 161, i32 64, i32 183, i32 217, i32 50, i32 65, i32 124, i32 130, i32 55, i32 161, i32 45, i32 220, i32 210, i32 84, i32 61, i32 193, i32 39, i32 243, i32 89, i32 67, i32 149, i32 144, i32 197, i32 150, i32 121, i32 245, i32 244, i32 149, i32 101, i32 41, i32 6, i32 156, i32 81, i32 5, i32 24, i32 218, i32 184, i32 46, i32 121, i32 126, i32 105, i32 89, i32 113, i32 1, i32 235, i32 26, i32 188, i32 88, i32 230, i32 192, i32 149, i32 42, i32 42, i32 129, i32 154, i32 122, i32 243, i32 210, i32 6, i32 190, i32 72, i32 188, i32 12, i32 197, i32 70, i32 224, i32 106, i32 212, i32 172, i32 15, i32 217, i32 204, i32 130, i32 52, i32 44, i32 175, i32 219, i32 31, i32 78, i32 54, i32 17, i32 7, i32 162, i32 21, i32 32, i32 81, i32 196, i32 42, i32 195, i32 98, i32 139, i32 94, i32 127, i32 166, i32 15, i32 249, i32 69, i32 133, i32 108, i32 17, i32 134, i32 183, i32 126, i32 229, i32 215, i32 249, i32 195, i32 145, i32 28, i32 5, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 213, i32 32, i32 91, i32 128, i32 166, i32 128, i32 32, i32 149, i32 195, i32 233, i32 159, i32 142, i32 135, i32 158, i32 30, i32 158, i32 122, i32 199, i32 204, i32 117, i32 108, i32 165, i32 241, i32 145, i32 26, i32 168, i32 1, i32 44, i32 171, i32 118, i32 169, i32 89, i32 137, i32 175, i32 246, i32 164, i32 100, i32 213, i32 16, i32 224, i32 29, i32 173, i32 239, i32 68, i32 189, i32 218, i32 131, i32 172, i32 122, i32 168, i32 240, i32 28, i32 7, i32 249, i32 195, i32 67, i32 108, i32 63, i32 183, i32 211, i32 135, i32 34, i32 2, i32 115, i32 34, i32 245, i32 95, i32 77, i32 21, i32 239, i32 252, i32 78, i32 87, i32 3, i32 54, i32 137, i32 240, i32 235, i32 91, i32 145, i32 214, i32 226, i32 202, i32 1, i32 165, i32 238, i32 82, i32 236, i32 160, i32 60, i32 143, i32 51, i32 144, i32 90, i32 148, i32 114, i32 1, i32 137, i32 40, i32 34, i32 106, i32 120, i32 170, i32 41, i32 3, i32 200, i32 116, i32 149, i32 3, i32 62, i32 220, i32 189, i32 7, i32 19, i32 168, i32 162, i32 32, i32 45, i32 179, i32 24, i32 112, i32 66, i32 253, i32 122, i32 196, i32 215, i32 73, i32 114, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 70, i32 141, i32 176, i32 51, i32 84, i32 38, i32 91, i32 104, i32 223, i32 187, i32 197, i32 236, i32 194, i32 249, i32 60, i32 90, i32 55, i32 193, i32 142, i32 39, i32 71, i32 170, i32 73, i32 90, i32 248, i32 251, i32 104, i32 4, i32 35, i32 209, i32 235, i32 64, i32 54, i32 236, i32 84, i32 248, i32 206, i32 228, i32 133, i32 223, i32 246, i32 111, i32 29, i32 144, i32 8, i32 188, i32 232, i32 192, i32 146, i32 45, i32 67, i32 107, i32 146, i32 169, i32 142, i32 171, i32 10, i32 46, i32 28, i32 30, i32 100, i32 35, i32 159, i32 44, i32 96, i32 214, i32 221, i32 120, i32 230, i32 212, i32 34, i32 66, i32 31, i32 0, i32 249, i32 177, i32 106, i32 99, i32 226, i32 146, i32 89, i32 209, i32 26, i32 183, i32 0, i32 84, i32 41, i32 201, i32 193, i32 246, i32 111, i32 122, i32 197, i32 60, i32 95, i32 101, i32 241, i32 37, i32 78, i32 17, i32 150, i32 103, i32 230, i32 28, i32 194, i32 178, i32 83, i32 226, i32 218, i32 133, i32 238, i32 178, i32 159, i32 89, i32 243, i32 186, i32 189, i32 250, i32 207, i32 110, i32 249, i32 218, i32 164, i32 179, i32 2, i32 143, i32 100, i32 8, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 113, i32 214, i32 22, i32 118, i32 178, i32 6, i32 234, i32 121, i32 245, i32 196, i32 195, i32 82, i32 126, i32 97, i32 209, i32 225, i32 173, i32 112, i32 120, i32 29, i32 22, i32 17, i32 248, i32 124, i32 43, i32 252, i32 85, i32 159, i32 82, i32 248, i32 245, i32 22, i32 246, i32 226, i32 76, i32 31, i32 91, i32 178, i32 175, i32 130, i32 165, i32 207, i32 129, i32 16, i32 4, i32 239, i32 219, i32 162, i32 204, i32 36, i32 178, i32 126, i32 11, i32 122, i32 235, i32 1, i32 216, i32 82, i32 244, i32 81, i32 137, i32 41, i32 121, i32 55, i32 2, i32 204, i32 34, i32 116, i32 77, i32 25, i32 7, i32 192, i32 218, i32 181, i32 118, i32 81, i32 42, i32 170, i32 166, i32 10, i32 95, i32 38, i32 212, i32 188, i32 175, i32 72, i32 136, i32 127, i32 2, i32 188, i32 242, i32 225, i32 207, i32 233, i32 221, i32 21, i32 248, i32 100, i32 139, i32 96, i32 144, i32 233, i32 222, i32 68, i32 119, i32 185, i32 7, i32 54, i32 50, i32 194, i32 80, i32 245, i32 101, i32 223, i32 72, i32 76, i32 55, i32 170, i32 104, i32 171, i32 154, i32 31, i32 62, i32 255, i32 137, i32 146, i32 160, i32 7, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 75, i32 176, i32 78, i32 110, i32 17, i32 59, i32 81, i32 189, i32 106, i32 253, i32 228, i32 37, i32 165, i32 95, i32 17, i32 63, i32 152, i32 146, i32 81, i32 20, i32 198, i32 95, i32 60, i32 11, i32 168, i32 247, i32 194, i32 129, i32 67, i32 222, i32 145, i32 115, i32 121, i32 81, i32 129, i32 1, i32 220, i32 115, i32 83, i32 224, i32 110, i32 155, i32 234, i32 104, i32 63, i32 92, i32 20, i32 132, i32 83, i32 141, i32 75, i32 192, i32 159, i32 159, i32 137, i32 43, i32 140, i32 186, i32 134, i32 250, i32 242, i32 205, i32 227, i32 45, i32 46, i32 105, i32 152, i32 253, i32 198, i32 189, i32 204, i32 202, i32 223, i32 154, i32 68, i32 126, i32 157, i32 202, i32 137, i32 109, i32 191, i32 39, i32 194, i32 248, i32 205, i32 70, i32 0, i32 43, i32 181, i32 88, i32 78, i32 183, i32 137, i32 9, i32 233, i32 45, i32 64, i32 123, i32 119, i32 87, i32 73, i32 158, i32 128, i32 57, i32 35, i32 238, i32 129, i32 11, i32 34, i32 207, i32 219, i32 122, i32 47, i32 20, i32 184, i32 87, i32 143, i32 161, i32 57, i32 30, i32 119, i32 252, i32 11, i32 166, i32 191, i32 138, i32 12, i32 108, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 197, i32 8, i32 164, i32 43, i32 47, i32 189, i32 49, i32 129, i32 42, i32 166, i32 182, i32 228, i32 0, i32 145, i32 218, i32 61, i32 178, i32 176, i32 150, i32 206, i32 138, i32 210, i32 141, i32 112, i32 179, i32 211, i32 52, i32 1, i32 144, i32 141, i32 16, i32 33, i32 2, i32 12, i32 194, i32 175, i32 150, i32 54, i32 254, i32 74, i32 226, i32 84, i32 32, i32 106, i32 235, i32 178, i32 159, i32 98, i32 215, i32 206, i32 162, i32 63, i32 32, i32 17, i32 52, i32 55, i32 224, i32 66, i32 237, i32 111, i32 249, i32 26, i32 200, i32 125, i32 97, i32 54, i32 214, i32 8, i32 144, i32 191, i32 167, i32 122, i32 151, i32 108, i32 15, i32 132, i32 213, i32 51, i32 45, i32 55, i32 201, i32 106, i32 128, i32 144, i32 61, i32 10, i32 162, i32 170, i32 225, i32 184, i32 132, i32 186, i32 97, i32 54, i32 221, i32 105, i32 150, i32 243, i32 58, i32 9, i32 86, i32 176, i32 111, i32 124, i32 81, i32 30, i32 27, i32 57, i32 72, i32 234, i32 201, i32 12, i32 37, i32 162, i32 122, i32 202, i32 231, i32 146, i32 252, i32 89, i32 48, i32 163, i32 137, i32 133, i32 223, i32 111, i32 67, i32 56, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 144, i32 80, i32 175, i32 99, i32 95, i32 157, i32 158, i32 225, i32 157, i32 56, i32 151, i32 31, i32 108, i32 172, i32 48, i32 70, i32 178, i32 106, i32 25, i32 209, i32 75, i32 219, i32 187, i32 140, i32 218, i32 46, i32 171, i32 200, i32 90, i32 119, i32 108, i32 118, i32 10, i32 218, i32 141, i32 44, i32 7, i32 63, i32 137, i32 125, i32 4, i32 173, i32 67, i32 80, i32 110, i32 210, i32 71, i32 203, i32 138, i32 230, i32 133, i32 26, i32 36, i32 243, i32 210, i32 96, i32 253, i32 223, i32 115, i32 164, i32 13, i32 115, i32 14, i32 93, i32 4, i32 179, i32 64, i32 40, i32 149, i32 45, i32 48, i32 131, i32 236, i32 94, i32 228, i32 255, i32 117, i32 254, i32 121, i32 38, i32 157, i32 29, i32 54, i32 205, i32 10, i32 21, i32 210, i32 36, i32 20, i32 119, i32 113, i32 215, i32 138, i32 27, i32 4, i32 13, i32 130, i32 185, i32 254, i32 33, i32 205, i32 196, i32 245, i32 152, i32 12, i32 78, i32 114, i32 238, i32 135, i32 73, i32 248, i32 161, i32 149, i32 223, i32 143, i32 45, i32 189, i32 33, i32 6, i32 124, i32 21, i32 232, i32 18, i32 109, i32 147, i32 214, i32 56, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 96, i32 213, i32 34, i32 131, i32 8, i32 47, i32 255, i32 153, i32 62, i32 105, i32 109, i32 136, i32 218, i32 231, i32 91, i32 82, i32 38, i32 49, i32 42, i32 229, i32 137, i32 222, i32 104, i32 144, i32 182, i32 34, i32 90, i32 189, i32 211, i32 133, i32 83, i32 49, i32 130, i32 231, i32 246, i32 186, i32 83, i32 132, i32 10, i32 163, i32 52, i32 255, i32 60, i32 163, i32 106, i32 161, i32 55, i32 234, i32 221, i32 182, i32 149, i32 179, i32 120, i32 25, i32 118, i32 30, i32 85, i32 47, i32 119, i32 46, i32 127, i32 193, i32 234, i32 94, i32 186, i32 56, i32 2, i32 247, i32 129, i32 67, i32 131, i32 163, i32 32, i32 79, i32 1, i32 59, i32 138, i32 4, i32 56, i32 49, i32 198, i32 15, i32 200, i32 223, i32 215, i32 250, i32 47, i32 136, i32 63, i32 252, i32 12, i32 118, i32 196, i32 166, i32 69, i32 114, i32 26, i32 185, i32 201, i32 16, i32 251, i32 30, i32 78, i32 244, i32 132, i32 75, i32 138, i32 94, i32 123, i32 75, i32 232, i32 67, i32 140, i32 143, i32 0, i32 181, i32 84, i32 19, i32 197, i32 92, i32 182, i32 53, i32 78, i32 157, i32 228, i32 91, i32 65, i32 109, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 203, i32 119, i32 154, i32 32, i32 222, i32 184, i32 35, i32 217, i32 160, i32 15, i32 140, i32 123, i32 165, i32 203, i32 174, i32 182, i32 236, i32 66, i32 103, i32 14, i32 88, i32 164, i32 117, i32 152, i32 33, i32 113, i32 132, i32 179, i32 224, i32 118, i32 148, i32 115, i32 217, i32 129, i32 218, i32 178, i32 79, i32 130, i32 157, i32 67, i32 129, i32 9, i32 241, i32 210, i32 1, i32 239, i32 172, i32 244, i32 45, i32 125, i32 1, i32 9, i32 241, i32 255, i32 165, i32 159, i32 229, i32 202, i32 39, i32 99, i32 219, i32 32, i32 177, i32 83, i32 50, i32 251, i32 134, i32 236, i32 51, i32 107, i32 46, i32 81, i32 43, i32 200, i32 250, i32 108, i32 112, i32 71, i32 126, i32 206, i32 5, i32 12, i32 113, i32 243, i32 180, i32 86, i32 166, i32 220, i32 204, i32 120, i32 7, i32 117, i32 208, i32 221, i32 178, i32 106, i32 69, i32 98, i32 29, i32 46, i32 255, i32 42, i32 28, i32 33, i32 164, i32 37, i32 123, i32 13, i32 140, i32 21, i32 57, i32 252, i32 143, i32 124, i32 165, i32 125, i32 30, i32 37, i32 163, i32 69, i32 214, i32 171, i32 189, i32 203, i32 197, i32 94, i32 120, i32 119, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 210, i32 12, i32 136, i32 197, i32 72, i32 77, i32 234, i32 13, i32 74, i32 201, i32 82, i32 106, i32 97, i32 121, i32 233, i32 118, i32 243, i32 133, i32 82, i32 92, i32 27, i32 44, i32 225, i32 214, i32 196, i32 15, i32 24, i32 14, i32 78, i32 246, i32 28, i32 127, i32 232, i32 104, i32 202, i32 68, i32 200, i32 56, i32 56, i32 204, i32 83, i32 10, i32 50, i32 53, i32 204, i32 82, i32 203, i32 14, i32 247, i32 197, i32 231, i32 236, i32 61, i32 133, i32 204, i32 88, i32 226, i32 23, i32 71, i32 255, i32 159, i32 165, i32 48, i32 23, i32 76, i32 230, i32 176, i32 193, i32 165, i32 42, i32 130, i32 9, i32 8, i32 173, i32 121, i32 156, i32 86, i32 246, i32 249, i32 193, i32 215, i32 124, i32 57, i32 127, i32 147, i32 202, i32 17, i32 85, i32 191, i32 7, i32 27, i32 130, i32 41, i32 105, i32 149, i32 92, i32 115, i32 76, i32 182, i32 197, i32 196, i32 233, i32 108, i32 133, i32 72, i32 74, i32 90, i32 172, i32 217, i32 31, i32 67, i32 248, i32 98, i32 91, i32 238, i32 152, i32 42, i32 51, i32 142, i32 121, i32 206, i32 97, i32 6, i32 53, i32 216, i32 215, i32 202, i32 113, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 123, i32 110, i32 42, i32 210, i32 135, i32 72, i32 255, i32 161, i32 202, i32 233, i32 21, i32 133, i32 220, i32 219, i32 44, i32 57, i32 18, i32 145, i32 169, i32 32, i32 170, i32 79, i32 41, i32 244, i32 21, i32 122, i32 210, i32 245, i32 50, i32 204, i32 96, i32 4, i32 90, i32 99, i32 103, i32 225, i32 155, i32 71, i32 120, i32 159, i32 56, i32 121, i32 172, i32 151, i32 102, i32 29, i32 94, i32 81, i32 238, i32 36, i32 66, i32 232, i32 88, i32 75, i32 138, i32 3, i32 117, i32 134, i32 55, i32 134, i32 226, i32 151, i32 78, i32 61, i32 187, i32 64, i32 94, i32 188, i32 22, i32 146, i32 5, i32 196, i32 192, i32 78, i32 114, i32 144, i32 14, i32 171, i32 207, i32 138, i32 237, i32 239, i32 185, i32 45, i32 59, i32 248, i32 67, i32 91, i32 186, i32 45, i32 235, i32 47, i32 82, i32 210, i32 209, i32 90, i32 84, i32 220, i32 22, i32 13, i32 24, i32 190, i32 53, i32 100, i32 97, i32 82, i32 2, i32 128, i32 175, i32 5, i32 247, i32 166, i32 66, i32 211, i32 143, i32 46, i32 121, i32 38, i32 168, i32 187, i32 178, i32 23, i32 72, i32 178, i32 122, i32 10, i32 137, i32 20, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 51, i32 124, i32 231, i32 38, i32 186, i32 77, i32 50, i32 254, i32 83, i32 244, i32 250, i32 131, i32 227, i32 165, i32 121, i32 102, i32 115, i32 239, i32 128, i32 35, i32 104, i32 194, i32 96, i32 221, i32 169, i32 51, i32 220, i32 3, i32 122, i32 224, i32 224, i32 62, i32 185, i32 232, i32 197, i32 18, i32 151, i32 31, i32 131, i32 254, i32 62, i32 148, i32 153, i32 212, i32 45, i32 249, i32 82, i32 89, i32 92, i32 130, i32 166, i32 240, i32 117, i32 126, i32 232, i32 236, i32 204, i32 172, i32 24, i32 33, i32 9, i32 103, i32 102, i32 103, i32 110, i32 68, i32 163, i32 249, i32 100, i32 175, i32 231, i32 109, i32 125, i32 223, i32 30, i32 172, i32 4, i32 234, i32 59, i32 95, i32 155, i32 232, i32 36, i32 157, i32 14, i32 229, i32 46, i32 62, i32 223, i32 169, i32 247, i32 212, i32 80, i32 113, i32 240, i32 120, i32 195, i32 241, i32 167, i32 109, i32 179, i32 95, i32 146, i32 111, i32 204, i32 145, i32 184, i32 149, i32 5, i32 223, i32 60, i32 100, i32 87, i32 57, i32 97, i32 81, i32 173, i32 140, i32 56, i32 123, i32 200, i32 222, i32 0, i32 52, i32 190, i32 161, i32 176, i32 126, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 78, i32 238, i32 28, i32 145, i32 230, i32 17, i32 189, i32 142, i32 85, i32 26, i32 24, i32 117, i32 102, i32 175, i32 77, i32 123, i32 15, i32 174, i32 109, i32 133, i32 202, i32 130, i32 88, i32 33, i32 156, i32 24, i32 224, i32 237, i32 236, i32 34, i32 128, i32 47, i32 36, i32 246, i32 90, i32 68, i32 241, i32 85, i32 44, i32 219, i32 234, i32 124, i32 132, i32 124, i32 1, i32 172, i32 227, i32 253, i32 201, i32 39, i32 193, i32 90, i32 185, i32 222, i32 79, i32 90, i32 144, i32 221, i32 198, i32 103, i32 170, i32 111, i32 138, i32 58, i32 161, i32 12, i32 243, i32 8, i32 67, i32 217, i32 36, i32 30, i32 131, i32 167, i32 223, i32 145, i32 202, i32 189, i32 105, i32 71, i32 141, i32 27, i32 226, i32 185, i32 78, i32 181, i32 225, i32 118, i32 179, i32 28, i32 147, i32 3, i32 206, i32 95, i32 179, i32 90, i32 206, i32 114, i32 14, i32 41, i32 132, i32 178, i32 125, i32 210, i32 69, i32 190, i32 87, i32 6, i32 237, i32 127, i32 207, i32 237, i32 205, i32 239, i32 25, i32 214, i32 188, i32 21, i32 121, i32 100, i32 210, i32 24, i32 227, i32 32, i32 103, i32 58, i32 84, i32 11, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 150, i32 17, i32 65, i32 138, i32 71, i32 145, i32 254, i32 182, i32 218, i32 122, i32 84, i32 99, i32 209, i32 20, i32 53, i32 5, i32 134, i32 140, i32 169, i32 54, i32 63, i32 242, i32 133, i32 84, i32 78, i32 146, i32 216, i32 133, i32 1, i32 70, i32 214, i32 80, i32 112, i32 131, i32 71, i32 192, i32 219, i32 85, i32 8, i32 168, i32 123, i32 24, i32 109, i32 245, i32 4, i32 90, i32 32, i32 12, i32 74, i32 140, i32 96, i32 174, i32 174, i32 15, i32 100, i32 85, i32 85, i32 46, i32 213, i32 29, i32 83, i32 49, i32 66, i32 65, i32 147, i32 28, i32 6, i32 45, i32 102, i32 101, i32 2, i32 164, i32 151, i32 24, i32 253, i32 0, i32 231, i32 171, i32 3, i32 236, i32 206, i32 193, i32 191, i32 55, i32 248, i32 19, i32 83, i32 165, i32 229, i32 12, i32 58, i32 168, i32 85, i32 185, i32 255, i32 104, i32 226, i32 60, i32 118, i32 134, i32 56, i32 242, i32 123, i32 44, i32 22, i32 120, i32 141, i32 245, i32 164, i32 21, i32 218, i32 219, i32 38, i32 133, i32 160, i32 86, i32 221, i32 29, i32 227, i32 179, i32 253, i32 64, i32 239, i32 242, i32 217, i32 161, i32 179, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 169, i32 234, i32 109, i32 22, i32 22, i32 96, i32 244, i32 96, i32 135, i32 25, i32 68, i32 140, i32 74, i32 139, i32 62, i32 251, i32 22, i32 0, i32 0, i32 84, i32 166, i32 158, i32 159, i32 239, i32 207, i32 217, i32 210, i32 76, i32 116, i32 49, i32 208, i32 52, i32 229, i32 103, i32 12, i32 241, i32 58, i32 154, i32 234, i32 9, i32 57, i32 239, i32 209, i32 48, i32 188, i32 51, i32 186, i32 177, i32 106, i32 197, i32 39, i32 8, i32 127, i32 84, i32 128, i32 61, i32 171, i32 246, i32 21, i32 122, i32 194, i32 64, i32 115, i32 114, i32 176, i32 139, i32 170, i32 30, i32 236, i32 199, i32 165, i32 143, i32 31, i32 146, i32 4, i32 198, i32 5, i32 246, i32 223, i32 161, i32 204, i32 31, i32 129, i32 245, i32 14, i32 156, i32 87, i32 220, i32 227, i32 187, i32 6, i32 135, i32 30, i32 254, i32 35, i32 108, i32 204, i32 25, i32 218, i32 155, i32 59, i32 67, i32 72, i32 33, i32 46, i32 35, i32 77, i32 61, i32 174, i32 248, i32 140, i32 252, i32 221, i32 166, i32 116, i32 55, i32 101, i32 202, i32 238, i32 26, i32 25, i32 142, i32 159, i32 100, i32 111, i32 12, i32 139, i32 90, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 248, i32 171, i32 147, i32 188, i32 68, i32 186, i32 27, i32 117, i32 75, i32 73, i32 111, i32 208, i32 84, i32 46, i32 99, i32 186, i32 181, i32 234, i32 237, i32 50, i32 20, i32 201, i32 148, i32 216, i32 197, i32 206, i32 244, i32 16, i32 104, i32 224, i32 56, i32 39, i32 245, i32 118, i32 253, i32 228, i32 175, i32 185, i32 3, i32 89, i32 206, i32 99, i32 210, i32 59, i32 31, i32 205, i32 33, i32 12, i32 173, i32 68, i32 165, i32 151, i32 172, i32 128, i32 17, i32 2, i32 155, i32 12, i32 229, i32 139, i32 205, i32 251, i32 121, i32 119, i32 108, i32 186, i32 20, i32 197, i32 234, i32 18, i32 158, i32 46, i32 130, i32 99, i32 206, i32 155, i32 74, i32 231, i32 29, i32 236, i32 241, i32 46, i32 81, i32 28, i32 244, i32 208, i32 105, i32 21, i32 66, i32 157, i32 163, i32 63, i32 14, i32 191, i32 233, i32 92, i32 17, i32 164, i32 136, i32 159, i32 62, i32 83, i32 105, i32 59, i32 27, i32 224, i32 247, i32 186, i32 155, i32 173, i32 78, i32 129, i32 95, i32 181, i32 92, i32 174, i32 190, i32 103, i32 134, i32 55, i32 52, i32 142, i32 7, i32 50, i32 69, i32 74, i32 103, i32 57, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 129, i32 252, i32 85, i32 92, i32 191, i32 167, i32 196, i32 189, i32 226, i32 240, i32 75, i32 143, i32 233, i32 125, i32 153, i32 250, i32 211, i32 171, i32 188, i32 199, i32 131, i32 43, i32 4, i32 127, i32 12, i32 25, i32 67, i32 3, i32 61, i32 7, i32 202, i32 64, i32 7, i32 181, i32 46, i32 44, i32 103, i32 21, i32 155, i32 251, i32 131, i32 105, i32 30, i32 15, i32 218, i32 214, i32 41, i32 177, i32 96, i32 224, i32 178, i32 186, i32 105, i32 162, i32 158, i32 189, i32 189, i32 224, i32 28, i32 189, i32 205, i32 6, i32 100, i32 112, i32 23, i32 98, i32 107, i32 20, i32 161, i32 124, i32 208, i32 121, i32 110, i32 216, i32 138, i32 165, i32 109, i32 140, i32 147, i32 210, i32 63, i32 236, i32 68, i32 141, i32 110, i32 145, i32 1, i32 140, i32 143, i32 238, i32 1, i32 143, i32 192, i32 180, i32 133, i32 14, i32 127, i32 0, i32 156, i32 38, i32 13, i32 111, i32 72, i32 127, i32 58, i32 1, i32 237, i32 197, i32 150, i32 176, i32 31, i32 79, i32 168, i32 2, i32 98, i32 39, i32 138, i32 80, i32 141, i32 154, i32 139, i32 82, i32 15, i32 30, i32 207, i32 65, i32 56, i32 25, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 52, i32 31, i32 46, i32 172, i32 209, i32 199, i32 4, i32 82, i32 50, i32 102, i32 178, i32 51, i32 115, i32 33, i32 52, i32 84, i32 247, i32 113, i32 237, i32 6, i32 176, i32 255, i32 166, i32 89, i32 111, i32 138, i32 78, i32 251, i32 2, i32 176, i32 69, i32 107, i32 170, i32 53, i32 135, i32 68, i32 99, i32 102, i32 151, i32 248, i32 110, i32 85, i32 12, i32 4, i32 62, i32 53, i32 80, i32 191, i32 147, i32 105, i32 210, i32 139, i32 5, i32 85, i32 153, i32 190, i32 226, i32 83, i32 97, i32 236, i32 232, i32 8, i32 11, i32 50, i32 221, i32 181, i32 125, i32 171, i32 90, i32 33, i32 65, i32 83, i32 187, i32 23, i32 121, i32 13, i32 209, i32 168, i32 12, i32 12, i32 32, i32 136, i32 9, i32 233, i32 132, i32 232, i32 37, i32 17, i32 103, i32 122, i32 139, i32 26, i32 228, i32 93, i32 225, i32 93, i32 224, i32 181, i32 0, i32 29, i32 42, i32 111, i32 175, i32 121, i32 134, i32 47, i32 166, i32 90, i32 147, i32 209, i32 254, i32 174, i32 58, i32 238, i32 219, i32 124, i32 97, i32 190, i32 124, i32 1, i32 249, i32 254, i32 82, i32 220, i32 216, i32 82, i32 163, i32 66, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 137, i32 249, i32 128, i32 7, i32 207, i32 63, i32 179, i32 233, i32 231, i32 69, i32 68, i32 61, i32 42, i32 124, i32 233, i32 228, i32 22, i32 92, i32 94, i32 101, i32 28, i32 199, i32 125, i32 198, i32 122, i32 251, i32 67, i32 238, i32 37, i32 118, i32 70, i32 114, i32 19, i32 83, i32 228, i32 130, i32 87, i32 250, i32 30, i32 143, i32 6, i32 43, i32 144, i32 186, i32 8, i32 182, i32 16, i32 84, i32 79, i32 124, i32 27, i32 38, i32 237, i32 218, i32 107, i32 221, i32 37, i32 208, i32 78, i32 234, i32 66, i32 187, i32 37, i32 3, i32 13, i32 172, i32 102, i32 109, i32 195, i32 139, i32 186, i32 22, i32 181, i32 226, i32 160, i32 13, i32 12, i32 189, i32 164, i32 142, i32 24, i32 108, i32 242, i32 220, i32 249, i32 220, i32 74, i32 134, i32 37, i32 149, i32 20, i32 203, i32 216, i32 26, i32 4, i32 15, i32 238, i32 201, i32 41, i32 15, i32 223, i32 17, i32 133, i32 237, i32 206, i32 13, i32 98, i32 44, i32 143, i32 75, i32 249, i32 4, i32 233, i32 6, i32 114, i32 29, i32 55, i32 32, i32 80, i32 201, i32 20, i32 235, i32 236, i32 57, i32 167, i32 151, i32 43, i32 77, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 23, i32 164, i32 25, i32 82, i32 17, i32 71, i32 179, i32 92, i32 91, i32 169, i32 46, i32 34, i32 180, i32 0, i32 82, i32 249, i32 87, i32 24, i32 184, i32 190, i32 90, i32 227, i32 171, i32 131, i32 200, i32 135, i32 10, i32 42, i32 216, i32 140, i32 187, i32 84, i32 197, i32 150, i32 202, i32 200, i32 34, i32 26, i32 238, i32 95, i32 231, i32 49, i32 96, i32 34, i32 131, i32 8, i32 99, i32 206, i32 185, i32 50, i32 68, i32 88, i32 93, i32 58, i32 155, i32 228, i32 4, i32 213, i32 239, i32 56, i32 239, i32 75, i32 221, i32 25, i32 32, i32 214, i32 216, i32 145, i32 84, i32 167, i32 243, i32 32, i32 75, i32 52, i32 6, i32 250, i32 48, i32 200, i32 111, i32 20, i32 16, i32 101, i32 116, i32 19, i32 78, i32 240, i32 105, i32 38, i32 206, i32 207, i32 144, i32 244, i32 208, i32 197, i32 200, i32 100, i32 37, i32 207, i32 116, i32 85, i32 27, i32 170, i32 169, i32 56, i32 65, i32 64, i32 213, i32 149, i32 149, i32 171, i32 28, i32 94, i32 188, i32 65, i32 126, i32 20, i32 48, i32 190, i32 19, i32 137, i32 244, i32 229, i32 235, i32 40, i32 192, i32 194, i32 150, i32 58, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 132, i32 173, i32 12, i32 24, i32 56, i32 90, i32 186, i32 208, i32 152, i32 89, i32 191, i32 55, i32 176, i32 79, i32 151, i32 96, i32 32, i32 179, i32 155, i32 151, i32 246, i32 8, i32 108, i32 164, i32 255, i32 251, i32 183, i32 250, i32 149, i32 178, i32 81, i32 121, i32 213, i32 197, i32 195, i32 154, i32 10, i32 208, i32 49, i32 62, i32 7, i32 54, i32 142, i32 192, i32 138, i32 98, i32 177, i32 202, i32 214, i32 14, i32 30, i32 157, i32 239, i32 171, i32 152, i32 77, i32 187, i32 108, i32 5, i32 224, i32 228, i32 93, i32 189, i32 87, i32 169, i32 133, i32 244, i32 231, i32 176, i32 21, i32 51, i32 132, i32 27, i32 20, i32 26, i32 2, i32 217, i32 59, i32 173, i32 15, i32 67, i32 108, i32 234, i32 62, i32 15, i32 126, i32 218, i32 221, i32 107, i32 76, i32 127, i32 110, i32 212, i32 107, i32 191, i32 15, i32 45, i32 45, i32 240, i32 27, i32 126, i32 42, i32 108, i32 248, i32 169, i32 106, i32 225, i32 240, i32 153, i32 161, i32 103, i32 154, i32 212, i32 19, i32 202, i32 202, i32 186, i32 39, i32 146, i32 170, i32 161, i32 93, i32 80, i32 222, i32 204, i32 64, i32 38, i32 10, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 25, i32 94, i32 96, i32 105, i32 88, i32 134, i32 160, i32 49, i32 189, i32 50, i32 233, i32 44, i32 92, i32 210, i32 133, i32 186, i32 64, i32 100, i32 168, i32 116, i32 248, i32 14, i32 28, i32 179, i32 169, i32 105, i32 232, i32 30, i32 64, i32 100, i32 153, i32 119, i32 198, i32 54, i32 110, i32 108, i32 140, i32 36, i32 9, i32 96, i32 190, i32 38, i32 210, i32 76, i32 94, i32 23, i32 202, i32 95, i32 29, i32 204, i32 135, i32 232, i32 66, i32 106, i32 203, i32 203, i32 125, i32 146, i32 5, i32 53, i32 129, i32 19, i32 96, i32 107, i32 202, i32 89, i32 116, i32 26, i32 17, i32 239, i32 109, i32 247, i32 57, i32 92, i32 59, i32 31, i32 250, i32 227, i32 64, i32 65, i32 35, i32 158, i32 246, i32 209, i32 33, i32 162, i32 191, i32 173, i32 101, i32 66, i32 107, i32 89, i32 138, i32 232, i32 197, i32 127, i32 123, i32 47, i32 58, i32 206, i32 200, i32 161, i32 121, i32 60, i32 48, i32 18, i32 68, i32 40, i32 246, i32 188, i32 255, i32 253, i32 244, i32 192, i32 151, i32 176, i32 204, i32 195, i32 19, i32 122, i32 185, i32 154, i32 22, i32 228, i32 203, i32 76, i32 52, i32 99, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 36, i32 137, i32 122, i32 143, i32 181, i32 155, i32 240, i32 194, i32 3, i32 100, i32 208, i32 30, i32 245, i32 164, i32 178, i32 243, i32 116, i32 233, i32 26, i32 22, i32 253, i32 203, i32 21, i32 234, i32 235, i32 16, i32 108, i32 53, i32 209, i32 193, i32 166, i32 40, i32 187, i32 168, i32 225, i32 137, i32 112, i32 87, i32 24, i32 84, i32 60, i32 246, i32 13, i32 130, i32 18, i32 5, i32 135, i32 150, i32 6, i32 57, i32 227, i32 248, i32 179, i32 149, i32 229, i32 215, i32 38, i32 191, i32 9, i32 90, i32 148, i32 249, i32 28, i32 99, i32 25, i32 166, i32 90, i32 101, i32 147, i32 195, i32 181, i32 49, i32 34, i32 79, i32 243, i32 246, i32 15, i32 235, i32 40, i32 195, i32 124, i32 235, i32 206, i32 134, i32 236, i32 103, i32 118, i32 110, i32 53, i32 69, i32 123, i32 216, i32 107, i32 146, i32 1, i32 101, i32 197, i32 189, i32 200, i32 20, i32 213, i32 13, i32 235, i32 225, i32 165, i32 230, i32 131, i32 17, i32 9, i32 0, i32 29, i32 85, i32 131, i32 81, i32 126, i32 117, i32 0, i32 129, i32 185, i32 203, i32 216, i32 197, i32 229, i32 161, i32 217, i32 23, i32 109, i32 31, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 58, i32 187, i32 57, i32 237, i32 50, i32 2, i32 231, i32 67, i32 122, i32 56, i32 20, i32 132, i32 227, i32 68, i32 210, i32 94, i32 148, i32 221, i32 120, i32 137, i32 85, i32 76, i32 115, i32 158, i32 225, i32 228, i32 62, i32 67, i32 208, i32 74, i32 222, i32 27, i32 36, i32 123, i32 147, i32 52, i32 181, i32 226, i32 116, i32 72, i32 205, i32 160, i32 11, i32 146, i32 151, i32 102, i32 57, i32 244, i32 176, i32 226, i32 93, i32 57, i32 106, i32 91, i32 69, i32 23, i32 120, i32 30, i32 219, i32 145, i32 129, i32 28, i32 249, i32 22, i32 70, i32 218, i32 158, i32 81, i32 58, i32 230, i32 209, i32 166, i32 187, i32 77, i32 123, i32 8, i32 190, i32 140, i32 213, i32 243, i32 63, i32 253, i32 247, i32 68, i32 128, i32 45, i32 83, i32 75, i32 208, i32 135, i32 104, i32 193, i32 181, i32 216, i32 247, i32 7, i32 250, i32 68, i32 113, i32 246, i32 65, i32 216, i32 198, i32 88, i32 19, i32 55, i32 235, i32 132, i32 15, i32 150, i32 199, i32 220, i32 200, i32 169, i32 122, i32 131, i32 178, i32 47, i32 49, i32 177, i32 26, i32 216, i32 152, i32 63, i32 17, i32 208, i32 49, i32 59, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 26, i32 207, i32 66, i32 174, i32 204, i32 181, i32 119, i32 57, i32 196, i32 91, i32 91, i32 208, i32 38, i32 89, i32 39, i32 208, i32 85, i32 113, i32 18, i32 157, i32 136, i32 61, i32 156, i32 234, i32 65, i32 106, i32 240, i32 80, i32 147, i32 147, i32 221, i32 71, i32 220, i32 57, i32 50, i32 243, i32 161, i32 68, i32 233, i32 197, i32 195, i32 120, i32 251, i32 149, i32 71, i32 52, i32 53, i32 52, i32 232, i32 37, i32 222, i32 147, i32 198, i32 180, i32 118, i32 109, i32 134, i32 19, i32 198, i32 233, i32 104, i32 181, i32 1, i32 99, i32 19, i32 168, i32 130, i32 62, i32 233, i32 19, i32 173, i32 235, i32 1, i32 202, i32 207, i32 218, i32 205, i32 247, i32 108, i32 199, i32 122, i32 220, i32 30, i32 110, i32 200, i32 78, i32 85, i32 98, i32 128, i32 234, i32 120, i32 12, i32 134, i32 185, i32 64, i32 81, i32 195, i32 186, i32 18, i32 83, i32 42, i32 170, i32 119, i32 173, i32 25, i32 120, i32 85, i32 138, i32 46, i32 96, i32 135, i32 194, i32 110, i32 145, i32 56, i32 145, i32 63, i32 122, i32 197, i32 36, i32 143, i32 81, i32 197, i32 222, i32 176, i32 83, i32 48, i32 86, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 30, i32 100, i32 193, i32 125, i32 82, i32 220, i32 19, i32 90, i32 161, i32 156, i32 78, i32 238, i32 153, i32 40, i32 187, i32 76, i32 238, i32 172, i32 169, i32 27, i32 137, i32 162, i32 56, i32 57, i32 123, i32 196, i32 15, i32 66, i32 230, i32 137, i32 237, i32 15, i32 98, i32 238, i32 117, i32 72, i32 146, i32 51, i32 242, i32 244, i32 173, i32 21, i32 122, i32 161, i32 1, i32 70, i32 169, i32 50, i32 6, i32 136, i32 182, i32 54, i32 71, i32 53, i32 185, i32 180, i32 66, i32 133, i32 118, i32 240, i32 72, i32 0, i32 144, i32 56, i32 231, i32 41, i32 249, i32 55, i32 217, i32 70, i32 90, i32 205, i32 112, i32 254, i32 77, i32 91, i32 191, i32 165, i32 207, i32 145, i32 244, i32 239, i32 238, i32 138, i32 41, i32 208, i32 231, i32 196, i32 37, i32 146, i32 138, i32 255, i32 54, i32 252, i32 228, i32 73, i32 143, i32 161, i32 206, i32 203, i32 96, i32 218, i32 18, i32 2, i32 30, i32 41, i32 57, i32 42, i32 3, i32 183, i32 235, i32 119, i32 64, i32 234, i32 201, i32 43, i32 44, i32 213, i32 125, i32 126, i32 44, i32 199, i32 90, i32 253, i32 255, i32 196, i32 209, i32 98, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 47, i32 97, i32 159, i32 215, i32 168, i32 63, i32 131, i32 140, i32 16, i32 105, i32 144, i32 230, i32 207, i32 210, i32 99, i32 163, i32 228, i32 84, i32 126, i32 229, i32 105, i32 19, i32 28, i32 144, i32 87, i32 170, i32 233, i32 83, i32 34, i32 67, i32 41, i32 35, i32 142, i32 78, i32 159, i32 37, i32 248, i32 129, i32 84, i32 45, i32 14, i32 213, i32 84, i32 129, i32 155, i32 166, i32 146, i32 206, i32 75, i32 233, i32 143, i32 36, i32 59, i32 202, i32 224, i32 68, i32 171, i32 54, i32 254, i32 251, i32 135, i32 212, i32 38, i32 62, i32 245, i32 255, i32 204, i32 240, i32 180, i32 18, i32 3, i32 95, i32 201, i32 132, i32 203, i32 29, i32 23, i32 224, i32 188, i32 204, i32 3, i32 98, i32 169, i32 139, i32 148, i32 166, i32 170, i32 24, i32 203, i32 39, i32 141, i32 73, i32 166, i32 23, i32 21, i32 7, i32 59, i32 191, i32 85, i32 53, i32 97, i32 139, i32 68, i32 151, i32 232, i32 58, i32 85, i32 193, i32 200, i32 59, i32 253, i32 149, i32 41, i32 17, i32 96, i32 150, i32 30, i32 203, i32 17, i32 157, i32 194, i32 3, i32 138, i32 27, i32 198, i32 214, i32 69, i32 61, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 200, i32 177, i32 27, i32 111, i32 115, i32 97, i32 61, i32 39, i32 13, i32 125, i32 122, i32 37, i32 95, i32 115, i32 14, i32 47, i32 147, i32 246, i32 36, i32 216, i32 79, i32 144, i32 172, i32 162, i32 98, i32 10, i32 240, i32 97, i32 217, i32 8, i32 89, i32 106, i32 211, i32 118, i32 105, i32 51, i32 123, i32 185, i32 64, i32 112, i32 238, i32 166, i32 41, i32 107, i32 221, i32 208, i32 93, i32 141, i32 193, i32 62, i32 74, i32 234, i32 55, i32 177, i32 3, i32 2, i32 3, i32 53, i32 241, i32 40, i32 157, i32 255, i32 0, i32 19, i32 141, i32 166, i32 213, i32 172, i32 157, i32 204, i32 104, i32 117, i32 127, i32 195, i32 77, i32 75, i32 221, i32 108, i32 187, i32 17, i32 90, i32 96, i32 229, i32 189, i32 125, i32 39, i32 139, i32 218, i32 180, i32 149, i32 246, i32 3, i32 39, i32 164, i32 146, i32 63, i32 121, i32 252, i32 166, i32 180, i32 11, i32 53, i32 32, i32 201, i32 77, i32 34, i32 132, i32 196, i32 169, i32 32, i32 236, i32 137, i32 148, i32 186, i32 102, i32 86, i32 72, i32 185, i32 135, i32 127, i32 202, i32 30, i32 6, i32 237, i32 165, i32 85, i32 89, i32 41, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 31, i32 104, i32 118, i32 1, i32 22, i32 56, i32 43, i32 15, i32 119, i32 151, i32 146, i32 103, i32 78, i32 134, i32 106, i32 139, i32 229, i32 232, i32 12, i32 247, i32 54, i32 57, i32 181, i32 51, i32 230, i32 207, i32 94, i32 189, i32 24, i32 251, i32 16, i32 31, i32 51, i32 21, i32 215, i32 127, i32 26, i32 213, i32 33, i32 88, i32 196, i32 24, i32 165, i32 240, i32 204, i32 115, i32 168, i32 253, i32 250, i32 24, i32 209, i32 3, i32 145, i32 141, i32 82, i32 210, i32 163, i32 164, i32 211, i32 177, i32 234, i32 29, i32 15, i32 0, i32 245, i32 26, i32 97, i32 247, i32 55, i32 157, i32 0, i32 244, i32 242, i32 105, i32 111, i32 75, i32 1, i32 133, i32 25, i32 69, i32 77, i32 127, i32 2, i32 124, i32 106, i32 5, i32 71, i32 108, i32 31, i32 129, i32 32, i32 212, i32 232, i32 80, i32 39, i32 114, i32 7, i32 104, i32 33, i32 101, i32 233, i32 8, i32 160, i32 11, i32 106, i32 74, i32 186, i32 181, i32 128, i32 175, i32 208, i32 27, i32 197, i32 245, i32 75, i32 115, i32 80, i32 96, i32 45, i32 113, i32 105, i32 97, i32 14, i32 192, i32 32, i32 64, i32 48, i32 25, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 193, i32 58, i32 134, i32 215, i32 176, i32 6, i32 132, i32 127, i32 27, i32 189, i32 212, i32 7, i32 120, i32 128, i32 46, i32 177, i32 180, i32 238, i32 82, i32 56, i32 238, i32 154, i32 249, i32 246, i32 243, i32 65, i32 110, i32 212, i32 136, i32 149, i32 172, i32 53, i32 232, i32 57, i32 48, i32 119, i32 35, i32 177, i32 253, i32 27, i32 61, i32 62, i32 116, i32 77, i32 127, i32 174, i32 91, i32 58, i32 180, i32 101, i32 14, i32 58, i32 67, i32 220, i32 220, i32 65, i32 71, i32 230, i32 232, i32 146, i32 9, i32 34, i32 72, i32 76, i32 52, i32 233, i32 89, i32 147, i32 157, i32 38, i32 128, i32 84, i32 242, i32 204, i32 60, i32 194, i32 37, i32 133, i32 227, i32 106, i32 193, i32 98, i32 4, i32 167, i32 8, i32 50, i32 109, i32 161, i32 57, i32 132, i32 138, i32 59, i32 135, i32 95, i32 17, i32 19, i32 197, i32 55, i32 105, i32 91, i32 168, i32 198, i32 157, i32 164, i32 252, i32 97, i32 110, i32 104, i32 70, i32 234, i32 215, i32 28, i32 103, i32 210, i32 125, i32 250, i32 241, i32 204, i32 84, i32 141, i32 54, i32 53, i32 201, i32 0, i32 223, i32 108, i32 103, i32 80, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 147, i32 51, i32 7, i32 200, i32 74, i32 202, i32 208, i32 177, i32 171, i32 189, i32 221, i32 167, i32 124, i32 172, i32 62, i32 69, i32 203, i32 204, i32 7, i32 145, i32 191, i32 53, i32 157, i32 203, i32 125, i32 18, i32 60, i32 17, i32 89, i32 19, i32 207, i32 92, i32 220, i32 142, i32 235, i32 198, i32 191, i32 221, i32 17, i32 123, i32 231, i32 71, i32 230, i32 206, i32 231, i32 182, i32 197, i32 232, i32 138, i32 220, i32 75, i32 87, i32 21, i32 59, i32 102, i32 202, i32 137, i32 163, i32 253, i32 172, i32 13, i32 225, i32 29, i32 122, i32 139, i32 164, i32 214, i32 80, i32 180, i32 170, i32 93, i32 100, i32 100, i32 118, i32 46, i32 161, i32 166, i32 179, i32 184, i32 124, i32 122, i32 86, i32 245, i32 92, i32 78, i32 132, i32 92, i32 251, i32 221, i32 202, i32 72, i32 139, i32 72, i32 185, i32 186, i32 52, i32 149, i32 176, i32 189, i32 140, i32 188, i32 167, i32 79, i32 126, i32 253, i32 78, i32 58, i32 191, i32 95, i32 4, i32 121, i32 128, i32 43, i32 90, i32 159, i32 79, i32 104, i32 33, i32 25, i32 113, i32 198, i32 32, i32 1, i32 66, i32 170, i32 223, i32 174, i32 44, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 137, i32 102, i32 62, i32 29, i32 76, i32 95, i32 254, i32 192, i32 4, i32 67, i32 214, i32 68, i32 25, i32 181, i32 173, i32 199, i32 34, i32 220, i32 113, i32 40, i32 100, i32 222, i32 65, i32 56, i32 39, i32 143, i32 44, i32 107, i32 8, i32 184, i32 184, i32 123, i32 218, i32 44, i32 164, i32 209, i32 161, i32 195, i32 92, i32 110, i32 50, i32 7, i32 31, i32 184, i32 14, i32 25, i32 158, i32 153, i32 41, i32 51, i32 154, i32 174, i32 122, i32 237, i32 104, i32 66, i32 105, i32 124, i32 7, i32 179, i32 56, i32 44, i32 246, i32 61, i32 66, i32 163, i32 241, i32 197, i32 180, i32 15, i32 216, i32 200, i32 141, i32 21, i32 49, i32 189, i32 248, i32 7, i32 139, i32 205, i32 8, i32 138, i32 251, i32 24, i32 7, i32 254, i32 142, i32 82, i32 134, i32 239, i32 190, i32 236, i32 73, i32 82, i32 153, i32 8, i32 222, i32 33, i32 240, i32 218, i32 138, i32 251, i32 177, i32 184, i32 205, i32 200, i32 106, i32 130, i32 25, i32 115, i32 219, i32 199, i32 207, i32 136, i32 235, i32 150, i32 238, i32 111, i32 251, i32 6, i32 210, i32 205, i32 125, i32 123, i32 18, i32 40, i32 142, i32 12, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 61, i32 22, i32 53, i32 243, i32 70, i32 188, i32 179, i32 244, i32 198, i32 182, i32 79, i32 250, i32 244, i32 160, i32 19, i32 230, i32 87, i32 69, i32 147, i32 185, i32 188, i32 214, i32 89, i32 231, i32 119, i32 148, i32 108, i32 171, i32 150, i32 59, i32 79, i32 9, i32 38, i32 217, i32 31, i32 92, i32 88, i32 172, i32 139, i32 3, i32 210, i32 195, i32 133, i32 15, i32 58, i32 195, i32 127, i32 109, i32 142, i32 134, i32 205, i32 82, i32 116, i32 143, i32 85, i32 119, i32 23, i32 183, i32 142, i32 183, i32 136, i32 234, i32 218, i32 27, i32 207, i32 232, i32 14, i32 107, i32 150, i32 125, i32 237, i32 39, i32 209, i32 60, i32 169, i32 217, i32 80, i32 169, i32 152, i32 132, i32 94, i32 134, i32 239, i32 214, i32 240, i32 248, i32 14, i32 137, i32 5, i32 47, i32 217, i32 95, i32 21, i32 95, i32 115, i32 121, i32 101, i32 56, i32 160, i32 21, i32 250, i32 167, i32 180, i32 143, i32 235, i32 196, i32 134, i32 155, i32 48, i32 165, i32 94, i32 77, i32 234, i32 138, i32 154, i32 159, i32 26, i32 216, i32 91, i32 83, i32 20, i32 25, i32 37, i32 99, i32 180, i32 111, i32 31, i32 93, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 168, i32 80, i32 225, i32 97, i32 107, i32 87, i32 53, i32 235, i32 68, i32 11, i32 12, i32 110, i32 249, i32 37, i32 128, i32 116, i32 242, i32 143, i32 111, i32 122, i32 62, i32 127, i32 45, i32 243, i32 78, i32 9, i32 101, i32 16, i32 94, i32 3, i32 37, i32 50, i32 150, i32 25, i32 18, i32 107, i32 106, i32 183, i32 227, i32 220, i32 69, i32 155, i32 219, i32 180, i32 168, i32 174, i32 220, i32 168, i32 20, i32 68, i32 101, i32 98, i32 206, i32 52, i32 154, i32 132, i32 24, i32 18, i32 1, i32 241, i32 226, i32 123, i32 206, i32 80, i32 151, i32 103, i32 158, i32 235, i32 106, i32 249, i32 110, i32 214, i32 115, i32 232, i32 107, i32 41, i32 236, i32 99, i32 130, i32 0, i32 168, i32 153, i32 28, i32 29, i32 48, i32 200, i32 144, i32 82, i32 144, i32 182, i32 106, i32 128, i32 78, i32 255, i32 75, i32 81, i32 199, i32 140, i32 191, i32 100, i32 40, i32 173, i32 248, i32 165, i32 90, i32 111, i32 201, i32 186, i32 213, i32 127, i32 213, i32 214, i32 189, i32 102, i32 47, i32 61, i32 170, i32 84, i32 246, i32 186, i32 50, i32 34, i32 154, i32 30, i32 82, i32 5, i32 244, i32 29, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 78, i32 102, i32 207, i32 78, i32 52, i32 206, i32 12, i32 217, i32 166, i32 80, i32 214, i32 94, i32 149, i32 175, i32 233, i32 88, i32 250, i32 238, i32 155, i32 184, i32 165, i32 15, i32 53, i32 224, i32 67, i32 130, i32 109, i32 101, i32 230, i32 217, i32 0, i32 15, i32 14, i32 75, i32 163, i32 99, i32 138, i32 254, i32 165, i32 88, i32 241, i32 19, i32 189, i32 157, i32 170, i32 127, i32 118, i32 64, i32 112, i32 129, i32 16, i32 117, i32 153, i32 187, i32 190, i32 11, i32 22, i32 233, i32 186, i32 98, i32 52, i32 204, i32 7, i32 109, i32 153, i32 235, i32 124, i32 49, i32 115, i32 100, i32 103, i32 127, i32 12, i32 102, i32 170, i32 140, i32 105, i32 145, i32 226, i32 38, i32 211, i32 35, i32 226, i32 118, i32 93, i32 50, i32 82, i32 223, i32 93, i32 197, i32 143, i32 183, i32 124, i32 132, i32 179, i32 112, i32 101, i32 239, i32 184, i32 159, i32 200, i32 75, i32 167, i32 253, i32 33, i32 73, i32 155, i32 146, i32 53, i32 130, i32 214, i32 10, i32 155, i32 242, i32 121, i32 241, i32 71, i32 47, i32 106, i32 126, i32 159, i32 207, i32 24, i32 2, i32 60, i32 251, i32 27, i32 62, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 140, i32 133, i32 43, i32 196, i32 252, i32 241, i32 171, i32 232, i32 121, i32 34, i32 196, i32 132, i32 23, i32 58, i32 250, i32 134, i32 166, i32 125, i32 249, i32 243, i32 111, i32 3, i32 87, i32 32, i32 77, i32 121, i32 249, i32 110, i32 113, i32 84, i32 56, i32 9, i32 198, i32 32, i32 71, i32 108, i32 164, i32 125, i32 203, i32 99, i32 234, i32 91, i32 3, i32 223, i32 62, i32 136, i32 129, i32 109, i32 206, i32 7, i32 66, i32 24, i32 96, i32 126, i32 123, i32 85, i32 254, i32 106, i32 243, i32 218, i32 92, i32 139, i32 149, i32 16, i32 87, i32 130, i32 28, i32 171, i32 191, i32 98, i32 112, i32 232, i32 196, i32 207, i32 240, i32 40, i32 110, i32 22, i32 60, i32 8, i32 120, i32 137, i32 133, i32 70, i32 15, i32 246, i32 127, i32 207, i32 203, i32 126, i32 184, i32 37, i32 233, i32 90, i32 250, i32 3, i32 54, i32 10, i32 194, i32 182, i32 75, i32 165, i32 93, i32 7, i32 23, i32 65, i32 49, i32 95, i32 98, i32 70, i32 248, i32 146, i32 249, i32 102, i32 72, i32 115, i32 166, i32 151, i32 13, i32 125, i32 136, i32 238, i32 98, i32 177, i32 3, i32 168, i32 63, i32 44, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 139, i32 157, i32 182, i32 204, i32 96, i32 180, i32 114, i32 79, i32 23, i32 105, i32 90, i32 74, i32 104, i32 52, i32 171, i32 161, i32 69, i32 50, i32 60, i32 131, i32 135, i32 114, i32 48, i32 84, i32 119, i32 104, i32 174, i32 251, i32 181, i32 139, i32 34, i32 94, i32 102, i32 158, i32 198, i32 36, i32 192, i32 237, i32 165, i32 93, i32 136, i32 212, i32 240, i32 115, i32 151, i32 123, i32 234, i32 127, i32 66, i32 255, i32 33, i32 160, i32 155, i32 47, i32 154, i32 253, i32 83, i32 87, i32 7, i32 132, i32 72, i32 136, i32 157, i32 82, i32 50, i32 101, i32 3, i32 229, i32 137, i32 166, i32 110, i32 179, i32 91, i32 142, i32 202, i32 235, i32 254, i32 34, i32 86, i32 139, i32 93, i32 20, i32 75, i32 77, i32 249, i32 190, i32 181, i32 245, i32 230, i32 92, i32 123, i32 139, i32 244, i32 19, i32 17, i32 52, i32 232, i32 226, i32 0, i32 126, i32 242, i32 158, i32 30, i32 153, i32 57, i32 149, i32 4, i32 189, i32 30, i32 103, i32 123, i32 178, i32 38, i32 172, i32 230, i32 170, i32 226, i32 70, i32 213, i32 228, i32 232, i32 134, i32 189, i32 171, i32 124, i32 85, i32 89, i32 111, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 101, i32 110, i32 10, i32 164, i32 89, i32 7, i32 23, i32 242, i32 107, i32 74, i32 31, i32 110, i32 246, i32 181, i32 188, i32 98, i32 228, i32 182, i32 218, i32 162, i32 147, i32 188, i32 41, i32 5, i32 210, i32 210, i32 115, i32 70, i32 3, i32 22, i32 64, i32 49, i32 180, i32 205, i32 8, i32 111, i32 21, i32 35, i32 26, i32 11, i32 34, i32 237, i32 209, i32 241, i32 167, i32 199, i32 115, i32 69, i32 243, i32 158, i32 206, i32 118, i32 183, i32 246, i32 57, i32 182, i32 142, i32 121, i32 190, i32 233, i32 155, i32 207, i32 125, i32 98, i32 134, i32 23, i32 144, i32 231, i32 201, i32 31, i32 16, i32 165, i32 106, i32 45, i32 57, i32 208, i32 59, i32 196, i32 166, i32 233, i32 89, i32 19, i32 218, i32 26, i32 230, i32 160, i32 185, i32 60, i32 80, i32 184, i32 64, i32 124, i32 21, i32 54, i32 90, i32 66, i32 252, i32 90, i32 30, i32 29, i32 116, i32 88, i32 149, i32 166, i32 143, i32 123, i32 151, i32 62, i32 23, i32 59, i32 121, i32 45, i32 166, i32 87, i32 239, i32 69, i32 2, i32 11, i32 77, i32 110, i32 158, i32 147, i32 141, i32 47, i32 217, i32 157, i32 219, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 22, i32 174, i32 139, i32 224, i32 155, i32 36, i32 104, i32 92, i32 68, i32 194, i32 208, i32 8, i32 183, i32 123, i32 98, i32 253, i32 127, i32 216, i32 212, i32 183, i32 80, i32 253, i32 44, i32 27, i32 191, i32 65, i32 149, i32 217, i32 142, i32 216, i32 23, i32 27, i32 234, i32 218, i32 153, i32 158, i32 25, i32 131, i32 102, i32 109, i32 233, i32 118, i32 135, i32 80, i32 209, i32 253, i32 60, i32 96, i32 135, i32 198, i32 65, i32 217, i32 142, i32 219, i32 94, i32 222, i32 170, i32 154, i32 211, i32 40, i32 218, i32 149, i32 234, i32 71, i32 2, i32 251, i32 84, i32 184, i32 5, i32 243, i32 129, i32 82, i32 105, i32 52, i32 70, i32 157, i32 134, i32 118, i32 143, i32 215, i32 248, i32 106, i32 102, i32 255, i32 230, i32 167, i32 144, i32 247, i32 94, i32 205, i32 106, i32 155, i32 85, i32 252, i32 157, i32 72, i32 122, i32 108, i32 69, i32 39, i32 196, i32 147, i32 127, i32 125, i32 124, i32 98, i32 80, i32 56, i32 58, i32 107, i32 181, i32 136, i32 198, i32 217, i32 241, i32 120, i32 25, i32 185, i32 57, i32 147, i32 61, i32 201, i32 224, i32 156, i32 60, i32 206, i32 245, i32 114, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 72, i32 95, i32 39, i32 144, i32 92, i32 2, i32 66, i32 173, i32 120, i32 71, i32 92, i32 181, i32 126, i32 8, i32 133, i32 0, i32 250, i32 127, i32 253, i32 253, i32 231, i32 9, i32 17, i32 242, i32 126, i32 27, i32 56, i32 108, i32 53, i32 109, i32 51, i32 102, i32 97, i32 46, i32 194, i32 221, i32 149, i32 87, i32 209, i32 171, i32 128, i32 232, i32 99, i32 23, i32 181, i32 72, i32 228, i32 138, i32 17, i32 158, i32 114, i32 190, i32 133, i32 141, i32 81, i32 10, i32 242, i32 159, i32 224, i32 28, i32 169, i32 7, i32 40, i32 123, i32 78, i32 59, i32 105, i32 200, i32 67, i32 117, i32 81, i32 108, i32 121, i32 86, i32 228, i32 203, i32 247, i32 166, i32 81, i32 194, i32 44, i32 66, i32 11, i32 212, i32 130, i32 32, i32 28, i32 1, i32 8, i32 102, i32 215, i32 191, i32 4, i32 86, i32 252, i32 2, i32 107, i32 166, i32 245, i32 75, i32 17, i32 189, i32 186, i32 91, i32 158, i32 196, i32 164, i32 81, i32 30, i32 190, i32 208, i32 144, i32 58, i32 156, i32 194, i32 38, i32 182, i32 30, i32 241, i32 149, i32 125, i32 200, i32 109, i32 82, i32 230, i32 153, i32 44, i32 95, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 54, i32 39, i32 62, i32 198, i32 18, i32 7, i32 171, i32 78, i32 190, i32 105, i32 157, i32 179, i32 190, i32 8, i32 124, i32 42, i32 71, i32 8, i32 253, i32 212, i32 205, i32 14, i32 39, i32 52, i32 91, i32 152, i32 52, i32 47, i32 119, i32 95, i32 58, i32 101, i32 0, i32 23, i32 144, i32 48, i32 233, i32 211, i32 96, i32 48, i32 49, i32 194, i32 114, i32 137, i32 122, i32 54, i32 165, i32 189, i32 57, i32 131, i32 133, i32 80, i32 161, i32 93, i32 108, i32 65, i32 29, i32 181, i32 44, i32 7, i32 64, i32 119, i32 11, i32 80, i32 119, i32 91, i32 226, i32 55, i32 199, i32 225, i32 124, i32 19, i32 140, i32 159, i32 123, i32 123, i32 42, i32 206, i32 66, i32 163, i32 185, i32 42, i32 153, i32 168, i32 192, i32 216, i32 60, i32 134, i32 176, i32 251, i32 233, i32 118, i32 119, i32 247, i32 245, i32 86, i32 70, i32 2, i32 245, i32 165, i32 175, i32 197, i32 117, i32 109, i32 186, i32 69, i32 53, i32 10, i32 254, i32 201, i32 172, i32 34, i32 145, i32 141, i32 33, i32 149, i32 51, i32 3, i32 192, i32 138, i32 22, i32 243, i32 57, i32 224, i32 1, i32 15, i32 83, i32 60, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 89, i32 213, i32 155, i32 90, i32 162, i32 144, i32 211, i32 184, i32 55, i32 76, i32 85, i32 130, i32 40, i32 8, i32 15, i32 127, i32 170, i32 129, i32 101, i32 224, i32 12, i32 82, i32 201, i32 163, i32 50, i32 39, i32 100, i32 218, i32 253, i32 52, i32 35, i32 90, i32 75, i32 65, i32 19, i32 84, i32 35, i32 26, i32 164, i32 78, i32 169, i32 139, i32 30, i32 75, i32 252, i32 21, i32 36, i32 187, i32 126, i32 203, i32 182, i32 30, i32 27, i32 245, i32 242, i32 200, i32 86, i32 236, i32 50, i32 162, i32 96, i32 91, i32 160, i32 42, i32 29, i32 41, i32 122, i32 161, i32 236, i32 142, i32 181, i32 173, i32 234, i32 2, i32 104, i32 96, i32 116, i32 41, i32 28, i32 165, i32 207, i32 200, i32 59, i32 125, i32 139, i32 43, i32 124, i32 173, i32 164, i32 64, i32 23, i32 81, i32 89, i32 124, i32 46, i32 93, i32 229, i32 176, i32 39, i32 173, i32 190, i32 155, i32 242, i32 181, i32 99, i32 222, i32 58, i32 35, i32 149, i32 183, i32 10, i32 126, i32 243, i32 158, i32 69, i32 111, i32 25, i32 57, i32 117, i32 143, i32 57, i32 61, i32 15, i32 192, i32 159, i32 241, i32 233, i32 81, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 246, i32 116, i32 61, i32 242, i32 175, i32 208, i32 30, i32 3, i32 124, i32 35, i32 107, i32 201, i32 252, i32 37, i32 112, i32 144, i32 220, i32 154, i32 164, i32 251, i32 73, i32 252, i32 61, i32 10, i32 53, i32 56, i32 111, i32 228, i32 126, i32 80, i32 1, i32 42, i32 133, i32 12, i32 175, i32 248, i32 131, i32 68, i32 73, i32 217, i32 69, i32 207, i32 247, i32 72, i32 217, i32 83, i32 180, i32 241, i32 101, i32 160, i32 225, i32 195, i32 179, i32 21, i32 237, i32 137, i32 155, i32 79, i32 98, i32 179, i32 87, i32 165, i32 69, i32 28, i32 132, i32 124, i32 194, i32 166, i32 145, i32 35, i32 206, i32 189, i32 220, i32 249, i32 206, i32 213, i32 117, i32 48, i32 34, i32 230, i32 249, i32 67, i32 98, i32 13, i32 247, i32 117, i32 157, i32 127, i32 140, i32 255, i32 125, i32 228, i32 114, i32 172, i32 159, i32 28, i32 46, i32 104, i32 161, i32 35, i32 125, i32 155, i32 64, i32 105, i32 133, i32 123, i32 66, i32 191, i32 144, i32 75, i32 214, i32 64, i32 47, i32 215, i32 82, i32 82, i32 178, i32 33, i32 222, i32 100, i32 189, i32 136, i32 195, i32 109, i32 165, i32 250, i32 129, i32 63, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 85, i32 71, i32 228, i32 168, i32 61, i32 85, i32 33, i32 52, i32 171, i32 29, i32 174, i32 224, i32 244, i32 234, i32 219, i32 197, i32 185, i32 88, i32 191, i32 196, i32 42, i32 137, i32 49, i32 26, i32 244, i32 45, i32 225, i32 202, i32 55, i32 153, i32 71, i32 89, i32 70, i32 250, i32 34, i32 75, i32 250, i32 225, i32 254, i32 150, i32 252, i32 103, i32 186, i32 103, i32 151, i32 196, i32 231, i32 27, i32 134, i32 144, i32 95, i32 238, i32 244, i32 91, i32 17, i32 178, i32 205, i32 173, i32 238, i32 194, i32 72, i32 108, i32 43, i32 27, i32 41, i32 172, i32 255, i32 39, i32 224, i32 89, i32 190, i32 57, i32 156, i32 13, i32 131, i32 215, i32 16, i32 11, i32 21, i32 183, i32 225, i32 194, i32 44, i32 48, i32 115, i32 128, i32 58, i32 125, i32 93, i32 171, i32 88, i32 107, i32 193, i32 240, i32 244, i32 34, i32 245, i32 251, i32 144, i32 45, i32 129, i32 25, i32 158, i32 47, i32 109, i32 133, i32 136, i32 140, i32 64, i32 92, i32 119, i32 65, i32 77, i32 1, i32 25, i32 118, i32 96, i32 232, i32 76, i32 72, i32 228, i32 51, i32 131, i32 50, i32 108, i32 180, i32 65, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 246, i32 150, i32 202, i32 47, i32 218, i32 56, i32 167, i32 27, i32 252, i32 202, i32 125, i32 254, i32 8, i32 137, i32 226, i32 71, i32 43, i32 106, i32 93, i32 75, i32 250, i32 161, i32 180, i32 222, i32 182, i32 194, i32 49, i32 81, i32 245, i32 224, i32 164, i32 11, i32 80, i32 252, i32 219, i32 162, i32 89, i32 33, i32 141, i32 189, i32 126, i32 51, i32 174, i32 47, i32 135, i32 26, i32 208, i32 151, i32 199, i32 13, i32 77, i32 99, i32 1, i32 239, i32 5, i32 132, i32 236, i32 64, i32 221, i32 168, i32 10, i32 79, i32 112, i32 11, i32 12, i32 14, i32 243, i32 186, i32 240, i32 229, i32 186, i32 178, i32 87, i32 119, i32 198, i32 32, i32 155, i32 137, i32 36, i32 190, i32 242, i32 156, i32 138, i32 186, i32 105, i32 193, i32 241, i32 176, i32 79, i32 42, i32 5, i32 154, i32 238, i32 16, i32 126, i32 54, i32 127, i32 193, i32 220, i32 185, i32 199, i32 188, i32 134, i32 61, i32 85, i32 75, i32 40, i32 122, i32 251, i32 77, i32 199, i32 248, i32 188, i32 103, i32 42, i32 96, i32 77, i32 143, i32 7, i32 11, i32 26, i32 23, i32 191, i32 250, i32 172, i32 167, i32 61, i32 26, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 111, i32 77, i32 23, i32 215, i32 225, i32 132, i32 217, i32 120, i32 177, i32 144, i32 253, i32 46, i32 179, i32 181, i32 25, i32 63, i32 27, i32 250, i32 192, i32 104, i32 179, i32 221, i32 0, i32 46, i32 137, i32 189, i32 126, i32 128, i32 50, i32 19, i32 160, i32 123, i32 176, i32 59, i32 44, i32 243, i32 254, i32 50, i32 113, i32 7, i32 63, i32 170, i32 186, i32 69, i32 96, i32 168, i32 141, i32 234, i32 84, i32 203, i32 57, i32 16, i32 180, i32 242, i32 139, i32 210, i32 20, i32 130, i32 66, i32 7, i32 142, i32 233, i32 124, i32 83, i32 1, i32 184, i32 214, i32 22, i32 103, i32 160, i32 21, i32 185, i32 225, i32 88, i32 164, i32 167, i32 49, i32 55, i32 119, i32 47, i32 139, i32 18, i32 159, i32 244, i32 63, i32 199, i32 54, i32 102, i32 210, i32 168, i32 86, i32 247, i32 127, i32 116, i32 198, i32 65, i32 25, i32 212, i32 141, i32 71, i32 41, i32 18, i32 101, i32 176, i32 17, i32 120, i32 71, i32 181, i32 203, i32 163, i32 165, i32 250, i32 5, i32 133, i32 84, i32 169, i32 51, i32 151, i32 141, i32 43, i32 194, i32 254, i32 153, i32 53, i32 40, i32 229, i32 235, i32 99, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 68, i32 31, i32 184, i32 194, i32 1, i32 193, i32 48, i32 25, i32 85, i32 5, i32 96, i32 16, i32 164, i32 108, i32 45, i32 103, i32 112, i32 229, i32 37, i32 27, i32 242, i32 191, i32 221, i32 251, i32 112, i32 43, i32 161, i32 140, i32 156, i32 148, i32 132, i32 8, i32 94, i32 223, i32 21, i32 83, i32 59, i32 134, i32 128, i32 176, i32 241, i32 112, i32 104, i32 143, i32 102, i32 124, i32 14, i32 73, i32 26, i32 216, i32 107, i32 254, i32 78, i32 239, i32 202, i32 71, i32 212, i32 3, i32 193, i32 55, i32 80, i32 156, i32 193, i32 22, i32 220, i32 255, i32 21, i32 97, i32 47, i32 74, i32 47, i32 98, i32 242, i32 4, i32 47, i32 181, i32 12, i32 183, i32 30, i32 63, i32 116, i32 26, i32 15, i32 215, i32 234, i32 205, i32 217, i32 125, i32 246, i32 18, i32 14, i32 47, i32 219, i32 90, i32 59, i32 22, i32 105, i32 50, i32 161, i32 5, i32 17, i32 66, i32 0, i32 210, i32 89, i32 172, i32 77, i32 98, i32 139, i32 19, i32 226, i32 80, i32 93, i32 160, i32 157, i32 155, i32 253, i32 187, i32 18, i32 65, i32 117, i32 65, i32 158, i32 204, i32 220, i32 199, i32 220, i32 93, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 98, i32 18, i32 55, i32 106, i32 48, i32 246, i32 30, i32 251, i32 20, i32 92, i32 13, i32 14, i32 183, i32 129, i32 106, i32 231, i32 8, i32 5, i32 172, i32 170, i32 56, i32 70, i32 226, i32 115, i32 234, i32 75, i32 7, i32 129, i32 67, i32 124, i32 158, i32 94, i32 63, i32 171, i32 211, i32 244, i32 138, i32 118, i32 161, i32 60, i32 202, i32 45, i32 73, i32 195, i32 234, i32 8, i32 11, i32 133, i32 23, i32 42, i32 195, i32 108, i32 8, i32 253, i32 87, i32 159, i32 61, i32 95, i32 223, i32 103, i32 104, i32 66, i32 0, i32 50, i32 229, i32 68, i32 236, i32 6, i32 157, i32 144, i32 121, i32 159, i32 211, i32 224, i32 121, i32 175, i32 143, i32 16, i32 253, i32 221, i32 4, i32 174, i32 39, i32 151, i32 70, i32 51, i32 121, i32 234, i32 184, i32 78, i32 202, i32 90, i32 89, i32 87, i32 225, i32 14, i32 227, i32 219, i32 96, i32 205, i32 92, i32 74, i32 24, i32 15, i32 239, i32 115, i32 54, i32 113, i32 140, i32 246, i32 17, i32 180, i32 216, i32 206, i32 23, i32 94, i32 79, i32 38, i32 119, i32 151, i32 95, i32 203, i32 239, i32 145, i32 235, i32 106, i32 98, i32 122, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 59, i32 185, i32 184, i32 6, i32 90, i32 46, i32 254, i32 195, i32 130, i32 55, i32 156, i32 163, i32 17, i32 31, i32 156, i32 166, i32 218, i32 99, i32 72, i32 155, i32 173, i32 222, i32 45, i32 166, i32 188, i32 110, i32 50, i32 218, i32 39, i32 101, i32 221, i32 87, i32 59, i32 178, i32 148, i32 109, i32 57, i32 96, i32 172, i32 238, i32 231, i32 129, i32 26, i32 59, i32 118, i32 135, i32 92, i32 5, i32 148, i32 42, i32 69, i32 185, i32 128, i32 233, i32 34, i32 177, i32 7, i32 203, i32 64, i32 158, i32 112, i32 73, i32 109, i32 18, i32 164, i32 75, i32 98, i32 76, i32 230, i32 253, i32 114, i32 7, i32 242, i32 129, i32 252, i32 242, i32 189, i32 18, i32 124, i32 104, i32 118, i32 42, i32 186, i32 245, i32 101, i32 177, i32 31, i32 23, i32 10, i32 56, i32 176, i32 191, i32 192, i32 248, i32 244, i32 42, i32 247, i32 24, i32 122, i32 150, i32 126, i32 67, i32 87, i32 169, i32 85, i32 252, i32 78, i32 182, i32 114, i32 0, i32 242, i32 228, i32 215, i32 82, i32 211, i32 211, i32 182, i32 133, i32 246, i32 113, i32 199, i32 68, i32 63, i32 127, i32 215, i32 179, i32 242, i32 121, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 144, i32 215, i32 197, i32 38, i32 8, i32 189, i32 176, i32 83, i32 99, i32 88, i32 195, i32 49, i32 94, i32 117, i32 70, i32 21, i32 145, i32 166, i32 248, i32 47, i32 26, i32 8, i32 101, i32 136, i32 47, i32 152, i32 4, i32 241, i32 124, i32 110, i32 0, i32 119, i32 137, i32 143, i32 192, i32 190, i32 93, i32 214, i32 159, i32 160, i32 240, i32 157, i32 129, i32 206, i32 58, i32 123, i32 152, i32 88, i32 187, i32 215, i32 120, i32 200, i32 63, i32 19, i32 241, i32 116, i32 25, i32 223, i32 248, i32 152, i32 137, i32 93, i32 250, i32 95, i32 104, i32 14, i32 111, i32 151, i32 186, i32 112, i32 187, i32 163, i32 14, i32 229, i32 11, i32 18, i32 244, i32 162, i32 220, i32 71, i32 248, i32 230, i32 208, i32 35, i32 108, i32 51, i32 168, i32 153, i32 70, i32 110, i32 15, i32 68, i32 186, i32 118, i32 72, i32 15, i32 44, i32 25, i32 51, i32 221, i32 27, i32 171, i32 236, i32 1, i32 176, i32 35, i32 248, i32 66, i32 43, i32 6, i32 136, i32 234, i32 61, i32 45, i32 0, i32 42, i32 120, i32 69, i32 77, i32 56, i32 237, i32 46, i32 46, i32 68, i32 73, i32 237, i32 203, i32 51, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 63, i32 96, i32 193, i32 130, i32 45, i32 163, i32 40, i32 88, i32 36, i32 158, i32 159, i32 227, i32 112, i32 204, i32 9, i32 78, i32 26, i32 63, i32 17, i32 17, i32 21, i32 7, i32 60, i32 164, i32 65, i32 224, i32 101, i32 163, i32 10, i32 65, i32 109, i32 17, i32 32, i32 239, i32 89, i32 222, i32 164, i32 43, i32 147, i32 110, i32 46, i32 236, i32 66, i32 154, i32 212, i32 45, i32 244, i32 70, i32 88, i32 39, i32 43, i32 24, i32 143, i32 131, i32 61, i32 105, i32 158, i32 212, i32 62, i32 182, i32 197, i32 253, i32 88, i32 3, i32 50, i32 180, i32 24, i32 71, i32 121, i32 203, i32 212, i32 90, i32 7, i32 20, i32 15, i32 160, i32 213, i32 172, i32 208, i32 65, i32 64, i32 171, i32 97, i32 35, i32 229, i32 42, i32 42, i32 111, i32 247, i32 168, i32 212, i32 118, i32 239, i32 231, i32 69, i32 108, i32 119, i32 56, i32 222, i32 215, i32 96, i32 72, i32 7, i32 240, i32 116, i32 168, i32 255, i32 84, i32 229, i32 48, i32 67, i32 255, i32 119, i32 251, i32 33, i32 7, i32 255, i32 178, i32 7, i32 107, i32 228, i32 229, i32 48, i32 252, i32 25, i32 108, i32 163, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 30, i32 127, i32 180, i32 116, i32 126, i32 177, i32 137, i32 79, i32 24, i32 90, i32 171, i32 100, i32 6, i32 223, i32 69, i32 135, i32 224, i32 106, i32 198, i32 240, i32 14, i32 201, i32 36, i32 53, i32 56, i32 234, i32 48, i32 84, i32 180, i32 196, i32 82, i32 84, i32 139, i32 25, i32 117, i32 110, i32 3, i32 6, i32 94, i32 106, i32 111, i32 26, i32 140, i32 227, i32 211, i32 40, i32 242, i32 224, i32 185, i32 122, i32 67, i32 105, i32 230, i32 211, i32 192, i32 254, i32 126, i32 151, i32 171, i32 108, i32 123, i32 142, i32 19, i32 66, i32 50, i32 173, i32 174, i32 133, i32 88, i32 67, i32 184, i32 177, i32 230, i32 62, i32 0, i32 156, i32 120, i32 136, i32 86, i32 219, i32 156, i32 252, i32 121, i32 246, i32 249, i32 65, i32 95, i32 183, i32 188, i32 17, i32 249, i32 32, i32 54, i32 28, i32 83, i32 43, i32 214, i32 27, i32 154, i32 108, i32 229, i32 70, i32 234, i32 112, i32 150, i32 141, i32 78, i32 42, i32 82, i32 33, i32 38, i32 75, i32 177, i32 187, i32 15, i32 124, i32 169, i32 155, i32 4, i32 187, i32 81, i32 8, i32 241, i32 154, i32 164, i32 118, i32 124, i32 24, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 44, i32 179, i32 218, i32 122, i32 216, i32 61, i32 153, i32 202, i32 210, i32 244, i32 218, i32 153, i32 142, i32 79, i32 152, i32 183, i32 244, i32 174, i32 62, i32 159, i32 142, i32 53, i32 96, i32 164, i32 51, i32 117, i32 164, i32 4, i32 147, i32 177, i32 107, i32 77, i32 237, i32 183, i32 132, i32 44, i32 246, i32 211, i32 161, i32 107, i32 36, i32 109, i32 135, i32 86, i32 151, i32 89, i32 121, i32 98, i32 159, i32 172, i32 237, i32 243, i32 201, i32 137, i32 33, i32 46, i32 4, i32 179, i32 204, i32 47, i32 190, i32 214, i32 10, i32 75, i32 83, i32 207, i32 194, i32 161, i32 173, i32 106, i32 243, i32 205, i32 143, i32 201, i32 222, i32 28, i32 248, i32 108, i32 143, i32 248, i32 118, i32 66, i32 231, i32 254, i32 178, i32 114, i32 33, i32 10, i32 102, i32 116, i32 143, i32 183, i32 235, i32 228, i32 111, i32 1, i32 83, i32 136, i32 119, i32 2, i32 202, i32 39, i32 168, i32 229, i32 69, i32 226, i32 168, i32 72, i32 42, i32 171, i32 24, i32 202, i32 234, i32 45, i32 42, i32 84, i32 23, i32 55, i32 50, i32 9, i32 220, i32 224, i32 74, i32 183, i32 125, i32 130, i32 16, i32 125, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 218, i32 140, i32 194, i32 208, i32 172, i32 24, i32 232, i32 82, i32 54, i32 212, i32 33, i32 163, i32 221, i32 87, i32 34, i32 121, i32 183, i32 248, i32 113, i32 157, i32 198, i32 145, i32 112, i32 134, i32 86, i32 191, i32 161, i32 17, i32 139, i32 25, i32 225, i32 15, i32 185, i32 177, i32 231, i32 93, i32 78, i32 188, i32 238, i32 187, i32 64, i32 129, i32 119, i32 130, i32 25, i32 171, i32 181, i32 198, i32 238, i32 171, i32 91, i32 107, i32 99, i32 146, i32 138, i32 52, i32 141, i32 205, i32 238, i32 79, i32 73, i32 229, i32 201, i32 126, i32 98, i32 79, i32 208, i32 117, i32 119, i32 186, i32 118, i32 119, i32 215, i32 184, i32 216, i32 146, i32 111, i32 152, i32 52, i32 61, i32 214, i32 78, i32 28, i32 15, i32 240, i32 143, i32 46, i32 241, i32 179, i32 189, i32 177, i32 185, i32 236, i32 153, i32 180, i32 7, i32 139, i32 44, i32 0, i32 72, i32 74, i32 249, i32 91, i32 135, i32 105, i32 82, i32 229, i32 91, i32 209, i32 177, i32 229, i32 37, i32 37, i32 224, i32 156, i32 194, i32 19, i32 68, i32 232, i32 185, i32 10, i32 112, i32 173, i32 189, i32 15, i32 81, i32 148, i32 105, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 194, i32 254, i32 27, i32 12, i32 103, i32 205, i32 214, i32 224, i32 81, i32 142, i32 44, i32 224, i32 121, i32 136, i32 240, i32 207, i32 65, i32 74, i32 173, i32 35, i32 212, i32 70, i32 202, i32 148, i32 161, i32 195, i32 235, i32 40, i32 6, i32 250, i32 23, i32 20, i32 204, i32 183, i32 50, i32 137, i32 87, i32 208, i32 152, i32 117, i32 228, i32 55, i32 153, i32 169, i32 232, i32 186, i32 237, i32 186, i32 235, i32 199, i32 79, i32 21, i32 118, i32 7, i32 12, i32 76, i32 239, i32 159, i32 82, i32 252, i32 4, i32 93, i32 88, i32 16, i32 100, i32 233, i32 40, i32 199, i32 164, i32 207, i32 42, i32 249, i32 144, i32 100, i32 114, i32 44, i32 139, i32 235, i32 236, i32 160, i32 242, i32 125, i32 53, i32 181, i32 144, i32 77, i32 127, i32 91, i32 74, i32 73, i32 228, i32 184, i32 59, i32 200, i32 161, i32 47, i32 249, i32 126, i32 62, i32 102, i32 238, i32 249, i32 153, i32 40, i32 255, i32 173, i32 17, i32 216, i32 226, i32 102, i32 197, i32 205, i32 15, i32 13, i32 11, i32 106, i32 252, i32 124, i32 36, i32 168, i32 79, i32 168, i32 94, i32 128, i32 69, i32 139, i32 108, i32 65, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 146, i32 248, i32 214, i32 75, i32 239, i32 66, i32 19, i32 178, i32 74, i32 196, i32 46, i32 114, i32 63, i32 201, i32 17, i32 189, i32 116, i32 2, i32 14, i32 245, i32 19, i32 157, i32 131, i32 26, i32 27, i32 213, i32 84, i32 222, i32 196, i32 30, i32 22, i32 108, i32 234, i32 167, i32 35, i32 239, i32 4, i32 97, i32 128, i32 80, i32 201, i32 110, i32 165, i32 150, i32 209, i32 209, i32 200, i32 195, i32 24, i32 215, i32 45, i32 253, i32 38, i32 189, i32 203, i32 123, i32 146, i32 81, i32 14, i32 74, i32 101, i32 87, i32 184, i32 73, i32 122, i32 141, i32 161, i32 93, i32 112, i32 93, i32 81, i32 39, i32 238, i32 48, i32 101, i32 86, i32 149, i32 70, i32 222, i32 189, i32 3, i32 117, i32 180, i32 87, i32 89, i32 137, i32 235, i32 2, i32 158, i32 204, i32 137, i32 25, i32 167, i32 203, i32 23, i32 103, i32 48, i32 49, i32 84, i32 26, i32 70, i32 202, i32 230, i32 198, i32 203, i32 226, i32 195, i32 193, i32 139, i32 117, i32 129, i32 190, i32 238, i32 248, i32 163, i32 17, i32 28, i32 37, i32 163, i32 167, i32 53, i32 81, i32 85, i32 226, i32 37, i32 170, i32 226, i32 58, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 212, i32 177, i32 108, i32 8, i32 199, i32 64, i32 56, i32 115, i32 95, i32 11, i32 243, i32 118, i32 93, i32 178, i32 165, i32 47, i32 87, i32 87, i32 7, i32 237, i32 8, i32 162, i32 108, i32 79, i32 8, i32 2, i32 181, i32 14, i32 238, i32 68, i32 250, i32 34, i32 126, i32 19, i32 51, i32 205, i32 168, i32 132, i32 86, i32 30, i32 103, i32 175, i32 107, i32 67, i32 172, i32 23, i32 175, i32 22, i32 192, i32 82, i32 153, i32 73, i32 91, i32 135, i32 115, i32 126, i32 181, i32 67, i32 218, i32 107, i32 29, i32 15, i32 45, i32 85, i32 255, i32 118, i32 3, i32 197, i32 75, i32 137, i32 153, i32 112, i32 0, i32 89, i32 112, i32 156, i32 213, i32 217, i32 17, i32 137, i32 90, i32 70, i32 254, i32 239, i32 220, i32 217, i32 85, i32 43, i32 69, i32 167, i32 176, i32 45, i32 251, i32 36, i32 194, i32 41, i32 142, i32 180, i32 238, i32 184, i32 212, i32 63, i32 178, i32 27, i32 224, i32 10, i32 61, i32 117, i32 52, i32 40, i32 162, i32 142, i32 196, i32 146, i32 123, i32 254, i32 96, i32 110, i32 109, i32 184, i32 49, i32 29, i32 98, i32 13, i32 120, i32 20, i32 66, i32 17, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 77, i32 227, i32 126, i32 56, i32 98, i32 94, i32 100, i32 187, i32 43, i32 83, i32 181, i32 3, i32 104, i32 196, i32 242, i32 43, i32 90, i32 3, i32 50, i32 153, i32 74, i32 65, i32 154, i32 225, i32 26, i32 174, i32 140, i32 72, i32 243, i32 36, i32 50, i32 101, i32 200, i32 9, i32 59, i32 96, i32 201, i32 38, i32 77, i32 124, i32 242, i32 156, i32 212, i32 161, i32 59, i32 38, i32 194, i32 4, i32 51, i32 68, i32 118, i32 60, i32 2, i32 187, i32 17, i32 66, i32 12, i32 34, i32 183, i32 198, i32 225, i32 172, i32 180, i32 14, i32 124, i32 49, i32 51, i32 204, i32 228, i32 207, i32 108, i32 255, i32 128, i32 71, i32 119, i32 209, i32 216, i32 233, i32 105, i32 151, i32 152, i32 127, i32 32, i32 87, i32 29, i32 29, i32 79, i32 8, i32 39, i32 200, i32 53, i32 87, i32 64, i32 198, i32 33, i32 12, i32 193, i32 88, i32 124, i32 13, i32 32, i32 221, i32 17, i32 38, i32 95, i32 137, i32 59, i32 151, i32 88, i32 248, i32 139, i32 227, i32 223, i32 50, i32 226, i32 252, i32 216, i32 103, i32 242, i32 165, i32 55, i32 30, i32 109, i32 236, i32 124, i32 39, i32 32, i32 121, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 206, i32 127, i32 220, i32 10, i32 204, i32 130, i32 28, i32 10, i32 120, i32 113, i32 232, i32 116, i32 141, i32 1, i32 48, i32 15, i32 167, i32 17, i32 76, i32 223, i32 56, i32 215, i32 167, i32 13, i32 248, i32 72, i32 82, i32 0, i32 128, i32 123, i32 95, i32 14, i32 27, i32 3, i32 13, i32 139, i32 90, i32 27, i32 151, i32 75, i32 242, i32 22, i32 49, i32 61, i32 31, i32 51, i32 160, i32 80, i32 58, i32 24, i32 190, i32 19, i32 161, i32 118, i32 193, i32 186, i32 27, i32 241, i32 5, i32 123, i32 51, i32 168, i32 130, i32 59, i32 80, i32 91, i32 255, i32 169, i32 178, i32 241, i32 241, i32 120, i32 207, i32 20, i32 164, i32 169, i32 252, i32 9, i32 70, i32 148, i32 84, i32 101, i32 13, i32 156, i32 95, i32 114, i32 33, i32 226, i32 151, i32 165, i32 45, i32 129, i32 206, i32 74, i32 95, i32 121, i32 254, i32 122, i32 116, i32 207, i32 212, i32 210, i32 229, i32 25, i32 222, i32 208, i32 219, i32 112, i32 35, i32 105, i32 230, i32 109, i32 236, i32 236, i32 204, i32 9, i32 51, i32 106, i32 119, i32 220, i32 107, i32 34, i32 118, i32 93, i32 146, i32 9, i32 172, i32 45, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 17, i32 206, i32 191, i32 182, i32 119, i32 45, i32 72, i32 34, i32 24, i32 79, i32 163, i32 93, i32 74, i32 176, i32 112, i32 18, i32 62, i32 84, i32 215, i32 216, i32 14, i32 43, i32 39, i32 220, i32 83, i32 255, i32 202, i32 140, i32 89, i32 179, i32 78, i32 68, i32 221, i32 249, i32 218, i32 132, i32 195, i32 230, i32 138, i32 159, i32 36, i32 210, i32 150, i32 93, i32 57, i32 111, i32 88, i32 140, i32 193, i32 86, i32 147, i32 171, i32 181, i32 121, i32 59, i32 210, i32 168, i32 115, i32 22, i32 237, i32 250, i32 180, i32 47, i32 115, i32 13, i32 22, i32 172, i32 60, i32 74, i32 88, i32 134, i32 58, i32 70, i32 127, i32 108, i32 163, i32 82, i32 110, i32 55, i32 228, i32 150, i32 156, i32 233, i32 92, i32 102, i32 65, i32 103, i32 228, i32 251, i32 121, i32 12, i32 5, i32 246, i32 100, i32 213, i32 124, i32 247, i32 213, i32 233, i32 116, i32 93, i32 184, i32 37, i32 22, i32 181, i32 48, i32 188, i32 132, i32 197, i32 240, i32 173, i32 202, i32 18, i32 40, i32 188, i32 157, i32 212, i32 250, i32 130, i32 230, i32 227, i32 191, i32 162, i32 21, i32 44, i32 212, i32 52, i32 16, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 211, i32 176, i32 58, i32 102, i32 96, i32 27, i32 67, i32 241, i32 38, i32 88, i32 153, i32 9, i32 143, i32 45, i32 163, i32 20, i32 113, i32 133, i32 219, i32 237, i32 246, i32 38, i32 213, i32 97, i32 154, i32 115, i32 172, i32 14, i32 234, i32 172, i32 183, i32 12, i32 45, i32 186, i32 22, i32 7, i32 146, i32 148, i32 220, i32 189, i32 80, i32 43, i32 201, i32 127, i32 66, i32 0, i32 186, i32 97, i32 237, i32 248, i32 67, i32 237, i32 245, i32 249, i32 64, i32 96, i32 178, i32 176, i32 130, i32 203, i32 237, i32 117, i32 199, i32 101, i32 232, i32 193, i32 169, i32 194, i32 123, i32 89, i32 33, i32 51, i32 226, i32 67, i32 115, i32 43, i32 172, i32 45, i32 193, i32 137, i32 59, i32 21, i32 226, i32 213, i32 192, i32 151, i32 138, i32 253, i32 111, i32 54, i32 51, i32 183, i32 185, i32 195, i32 136, i32 9, i32 253, i32 47, i32 224, i32 155, i32 30, i32 140, i32 197, i32 24, i32 169, i32 202, i32 212, i32 43, i32 53, i32 182, i32 149, i32 10, i32 159, i32 126, i32 251, i32 196, i32 239, i32 136, i32 123, i32 35, i32 67, i32 236, i32 47, i32 13, i32 15, i32 122, i32 252, i32 92, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 51, i32 72, i32 49, i32 0, i32 89, i32 246, i32 242, i32 202, i32 15, i32 39, i32 27, i32 99, i32 18, i32 126, i32 2, i32 29, i32 73, i32 192, i32 93, i32 121, i32 135, i32 239, i32 94, i32 122, i32 47, i32 31, i32 102, i32 85, i32 216, i32 9, i32 217, i32 97, i32 101, i32 192, i32 163, i32 136, i32 81, i32 149, i32 252, i32 150, i32 148, i32 120, i32 232, i32 13, i32 139, i32 65, i32 201, i32 194, i32 88, i32 72, i32 117, i32 16, i32 47, i32 205, i32 42, i32 201, i32 160, i32 109, i32 15, i32 221, i32 156, i32 152, i32 38, i32 61, i32 161, i32 76, i32 112, i32 75, i32 14, i32 160, i32 131, i32 112, i32 19, i32 164, i32 175, i32 184, i32 56, i32 25, i32 34, i32 101, i32 9, i32 180, i32 2, i32 79, i32 6, i32 248, i32 23, i32 206, i32 70, i32 69, i32 218, i32 80, i32 124, i32 138, i32 209, i32 78, i32 38, i32 217, i32 94, i32 163, i32 15, i32 235, i32 162, i32 243, i32 32, i32 59, i32 55, i32 212, i32 228, i32 158, i32 206, i32 6, i32 61, i32 83, i32 237, i32 174, i32 43, i32 235, i32 182, i32 36, i32 10, i32 17, i32 163, i32 15, i32 214, i32 127, i32 164, i32 58, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 151, i32 135, i32 199, i32 4, i32 28, i32 56, i32 1, i32 57, i32 88, i32 199, i32 133, i32 163, i32 252, i32 100, i32 0, i32 100, i32 37, i32 162, i32 191, i32 80, i32 148, i32 202, i32 38, i32 49, i32 69, i32 10, i32 36, i32 210, i32 81, i32 41, i32 81, i32 22, i32 203, i32 120, i32 148, i32 144, i32 228, i32 69, i32 179, i32 246, i32 217, i32 246, i32 87, i32 116, i32 213, i32 248, i32 131, i32 79, i32 57, i32 201, i32 189, i32 136, i32 194, i32 87, i32 33, i32 31, i32 36, i32 50, i32 104, i32 248, i32 199, i32 33, i32 95, i32 11, i32 149, i32 33, i32 1, i32 206, i32 149, i32 91, i32 14, i32 87, i32 199, i32 185, i32 98, i32 181, i32 40, i32 202, i32 17, i32 236, i32 180, i32 70, i32 6, i32 115, i32 38, i32 255, i32 251, i32 102, i32 125, i32 238, i32 95, i32 178, i32 86, i32 253, i32 42, i32 8, i32 246, i32 72, i32 149, i32 161, i32 111, i32 95, i32 183, i32 165, i32 187, i32 48, i32 0, i32 28, i32 210, i32 138, i32 214, i32 37, i32 38, i32 27, i32 178, i32 13, i32 55, i32 106, i32 5, i32 244, i32 157, i32 62, i32 23, i32 42, i32 67, i32 210, i32 58, i32 6, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 185, i32 75, i32 164, i32 173, i32 208, i32 109, i32 97, i32 35, i32 180, i32 175, i32 52, i32 169, i32 170, i32 101, i32 236, i32 217, i32 105, i32 227, i32 133, i32 205, i32 204, i32 231, i32 176, i32 155, i32 65, i32 193, i32 28, i32 249, i32 160, i32 250, i32 183, i32 19, i32 101, i32 10, i32 190, i32 81, i32 87, i32 173, i32 80, i32 121, i32 8, i32 113, i32 155, i32 7, i32 149, i32 143, i32 251, i32 174, i32 75, i32 56, i32 186, i32 207, i32 83, i32 42, i32 134, i32 30, i32 192, i32 80, i32 92, i32 103, i32 27, i32 246, i32 135, i32 108, i32 253, i32 78, i32 42, i32 193, i32 58, i32 202, i32 143, i32 0, i32 216, i32 236, i32 116, i32 103, i32 239, i32 97, i32 224, i32 40, i32 208, i32 150, i32 244, i32 72, i32 222, i32 129, i32 227, i32 239, i32 220, i32 170, i32 125, i32 243, i32 182, i32 85, i32 166, i32 101, i32 171, i32 27, i32 181, i32 229, i32 43, i32 195, i32 14, i32 41, i32 176, i32 208, i32 115, i32 230, i32 79, i32 100, i32 242, i32 188, i32 228, i32 228, i32 225, i32 154, i32 82, i32 51, i32 47, i32 189, i32 204, i32 3, i32 238, i32 138, i32 250, i32 0, i32 95, i32 80, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 139, i32 0, i32 84, i32 251, i32 77, i32 220, i32 203, i32 23, i32 53, i32 64, i32 255, i32 183, i32 140, i32 254, i32 74, i32 228, i32 78, i32 153, i32 78, i32 168, i32 116, i32 84, i32 93, i32 92, i32 150, i32 163, i32 18, i32 85, i32 54, i32 49, i32 23, i32 92, i32 37, i32 234, i32 134, i32 194, i32 209, i32 79, i32 183, i32 62, i32 168, i32 92, i32 141, i32 102, i32 129, i32 37, i32 237, i32 197, i32 76, i32 5, i32 185, i32 216, i32 214, i32 112, i32 190, i32 115, i32 130, i32 232, i32 161, i32 229, i32 30, i32 113, i32 213, i32 38, i32 140, i32 68, i32 9, i32 40, i32 213, i32 35, i32 201, i32 143, i32 243, i32 132, i32 69, i32 198, i32 154, i32 94, i32 255, i32 210, i32 199, i32 87, i32 147, i32 163, i32 193, i32 105, i32 221, i32 98, i32 15, i32 218, i32 92, i32 48, i32 89, i32 93, i32 233, i32 76, i32 226, i32 169, i32 101, i32 136, i32 196, i32 80, i32 250, i32 187, i32 59, i32 110, i32 95, i32 68, i32 1, i32 202, i32 151, i32 212, i32 221, i32 246, i32 205, i32 63, i32 63, i32 229, i32 151, i32 103, i32 43, i32 140, i32 102, i32 15, i32 53, i32 155, i32 245, i32 7, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 224, i32 219, i32 34, i32 40, i32 230, i32 255, i32 97, i32 157, i32 65, i32 20, i32 45, i32 59, i32 38, i32 34, i32 223, i32 241, i32 52, i32 129, i32 233, i32 69, i32 238, i32 15, i32 152, i32 139, i32 166, i32 63, i32 239, i32 247, i32 67, i32 25, i32 241, i32 67, i32 203, i32 125, i32 79, i32 255, i32 48, i32 216, i32 18, i32 59, i32 57, i32 28, i32 6, i32 249, i32 76, i32 52, i32 53, i32 113, i32 181, i32 22, i32 148, i32 103, i32 223, i32 238, i32 17, i32 222, i32 164, i32 29, i32 136, i32 147, i32 53, i32 169, i32 50, i32 16, i32 96, i32 188, i32 69, i32 31, i32 35, i32 162, i32 59, i32 112, i32 118, i32 230, i32 151, i32 153, i32 79, i32 119, i32 84, i32 103, i32 48, i32 154, i32 231, i32 102, i32 214, i32 205, i32 46, i32 81, i32 36, i32 44, i32 66, i32 74, i32 17, i32 254, i32 111, i32 126, i32 123, i32 239, i32 33, i32 229, i32 64, i32 204, i32 30, i32 220, i32 214, i32 189, i32 151, i32 122, i32 124, i32 117, i32 134, i32 122, i32 37, i32 90, i32 110, i32 124, i32 229, i32 81, i32 60, i32 27, i32 91, i32 130, i32 154, i32 7, i32 96, i32 161, i32 25, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 92, i32 130, i32 179, i32 189, i32 85, i32 37, i32 246, i32 106, i32 147, i32 164, i32 2, i32 198, i32 125, i32 92, i32 177, i32 43, i32 91, i32 255, i32 251, i32 86, i32 248, i32 1, i32 65, i32 144, i32 198, i32 182, i32 172, i32 79, i32 254, i32 167, i32 65, i32 112, i32 57, i32 192, i32 250, i32 250, i32 205, i32 51, i32 67, i32 199, i32 151, i32 118, i32 155, i32 147, i32 145, i32 114, i32 235, i32 197, i32 24, i32 103, i32 76, i32 17, i32 240, i32 244, i32 229, i32 115, i32 178, i32 92, i32 27, i32 194, i32 38, i32 63, i32 191, i32 43, i32 23, i32 15, i32 134, i32 82, i32 215, i32 157, i32 195, i32 68, i32 81, i32 118, i32 50, i32 101, i32 180, i32 55, i32 129, i32 153, i32 70, i32 55, i32 98, i32 237, i32 207, i32 100, i32 157, i32 114, i32 64, i32 122, i32 76, i32 11, i32 118, i32 42, i32 251, i32 86, i32 172, i32 204, i32 107, i32 124, i32 249, i32 184, i32 139, i32 8, i32 92, i32 208, i32 125, i32 143, i32 115, i32 234, i32 32, i32 218, i32 134, i32 202, i32 0, i32 199, i32 173, i32 115, i32 77, i32 233, i32 232, i32 169, i32 218, i32 31, i32 3, i32 6, i32 221, i32 36, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 47, i32 189, i32 132, i32 99, i32 13, i32 181, i32 160, i32 240, i32 75, i32 158, i32 147, i32 198, i32 52, i32 154, i32 52, i32 255, i32 115, i32 25, i32 47, i32 110, i32 84, i32 69, i32 44, i32 146, i32 49, i32 118, i32 52, i32 241, i32 178, i32 38, i32 232, i32 116, i32 5, i32 251, i32 117, i32 245, i32 1, i32 175, i32 56, i32 114, i32 88, i32 252, i32 4, i32 41, i32 52, i32 122, i32 103, i32 162, i32 8, i32 80, i32 110, i32 208, i32 43, i32 115, i32 213, i32 184, i32 228, i32 48, i32 150, i32 173, i32 69, i32 223, i32 166, i32 92, i32 135, i32 200, i32 160, i32 110, i32 225, i32 176, i32 173, i32 106, i32 74, i32 52, i32 113, i32 237, i32 124, i32 214, i32 68, i32 3, i32 101, i32 74, i32 92, i32 92, i32 4, i32 245, i32 36, i32 63, i32 176, i32 22, i32 94, i32 140, i32 178, i32 210, i32 197, i32 32, i32 33, i32 19, i32 145, i32 191, i32 119, i32 122, i32 51, i32 188, i32 233, i32 7, i32 57, i32 10, i32 221, i32 125, i32 6, i32 16, i32 154, i32 238, i32 71, i32 115, i32 27, i32 21, i32 90, i32 251, i32 205, i32 77, i32 208, i32 210, i32 58, i32 1, i32 186, i32 84, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 66, i32 201, i32 202, i32 41, i32 76, i32 118, i32 55, i32 218, i32 138, i32 45, i32 124, i32 58, i32 88, i32 242, i32 3, i32 180, i32 181, i32 185, i32 26, i32 19, i32 45, i32 222, i32 95, i32 107, i32 157, i32 186, i32 82, i32 201, i32 93, i32 179, i32 243, i32 48, i32 74, i32 136, i32 218, i32 193, i32 152, i32 68, i32 60, i32 83, i32 78, i32 219, i32 75, i32 185, i32 18, i32 95, i32 205, i32 8, i32 4, i32 239, i32 117, i32 231, i32 177, i32 58, i32 229, i32 7, i32 250, i32 202, i32 101, i32 123, i32 114, i32 16, i32 100, i32 127, i32 228, i32 231, i32 67, i32 75, i32 160, i32 63, i32 43, i32 6, i32 186, i32 23, i32 174, i32 61, i32 230, i32 206, i32 189, i32 184, i32 237, i32 116, i32 17, i32 53, i32 236, i32 150, i32 254, i32 49, i32 227, i32 14, i32 122, i32 78, i32 201, i32 29, i32 203, i32 32, i32 129, i32 159, i32 199, i32 222, i32 107, i32 65, i32 34, i32 53, i32 20, i32 103, i32 119, i32 62, i32 144, i32 129, i32 176, i32 217, i32 133, i32 76, i32 202, i32 155, i32 63, i32 4, i32 89, i32 214, i32 170, i32 23, i32 195, i32 136, i32 52, i32 55, i32 186, i32 67, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 34, i32 176, i32 213, i32 230, i32 199, i32 239, i32 177, i32 167, i32 19, i32 218, i32 96, i32 180, i32 128, i32 193, i32 66, i32 125, i32 16, i32 112, i32 151, i32 4, i32 77, i32 218, i32 35, i32 137, i32 194, i32 14, i32 104, i32 203, i32 222, i32 224, i32 155, i32 41, i32 120, i32 150, i32 156, i32 167, i32 202, i32 128, i32 174, i32 2, i32 133, i32 177, i32 124, i32 4, i32 92, i32 193, i32 91, i32 38, i32 193, i32 186, i32 237, i32 165, i32 89, i32 112, i32 133, i32 140, i32 140, i32 232, i32 135, i32 172, i32 106, i32 40, i32 153, i32 53, i32 160, i32 32, i32 153, i32 105, i32 10, i32 174, i32 163, i32 112, i32 78, i32 100, i32 128, i32 183, i32 133, i32 156, i32 135, i32 84, i32 67, i32 67, i32 85, i32 128, i32 109, i32 141, i32 124, i32 169, i32 100, i32 202, i32 108, i32 46, i32 33, i32 216, i32 200, i32 108, i32 54, i32 136, i32 250, i32 253, i32 240, i32 54, i32 111, i32 7, i32 116, i32 136, i32 80, i32 208, i32 149, i32 56, i32 74, i32 72, i32 46, i32 7, i32 100, i32 151, i32 17, i32 118, i32 1, i32 26, i32 39, i32 77, i32 142, i32 37, i32 154, i32 155, i32 28, i32 34, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 48, i32 107, i32 212, i32 167, i32 81, i32 41, i32 227, i32 249, i32 122, i32 117, i32 42, i32 130, i32 47, i32 214, i32 29, i32 153, i32 43, i32 128, i32 213, i32 103, i32 30, i32 21, i32 157, i32 202, i32 253, i32 235, i32 172, i32 151, i32 53, i32 9, i32 127, i32 63, i32 71, i32 57, i32 55, i32 118, i32 13, i32 29, i32 12, i32 245, i32 90, i32 109, i32 67, i32 136, i32 153, i32 21, i32 180, i32 82, i32 15, i32 42, i32 179, i32 176, i32 63, i32 166, i32 179, i32 38, i32 179, i32 199, i32 69, i32 245, i32 146, i32 95, i32 155, i32 23, i32 173, i32 160, i32 65, i32 236, i32 200, i32 77, i32 185, i32 210, i32 110, i32 150, i32 78, i32 91, i32 197, i32 194, i32 160, i32 27, i32 207, i32 12, i32 191, i32 23, i32 102, i32 87, i32 193, i32 23, i32 144, i32 69, i32 113, i32 194, i32 225, i32 36, i32 235, i32 39, i32 117, i32 120, i32 56, i32 134, i32 87, i32 221, i32 159, i32 238, i32 84, i32 112, i32 101, i32 191, i32 241, i32 44, i32 224, i32 57, i32 13, i32 227, i32 137, i32 253, i32 142, i32 147, i32 79, i32 67, i32 220, i32 213, i32 91, i32 222, i32 249, i32 152, i32 229, i32 123, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 174, i32 6, i32 78, i32 44, i32 82, i32 27, i32 188, i32 90, i32 90, i32 165, i32 190, i32 39, i32 189, i32 235, i32 225, i32 20, i32 23, i32 104, i32 38, i32 7, i32 3, i32 209, i32 24, i32 11, i32 223, i32 241, i32 6, i32 92, i32 166, i32 27, i32 185, i32 36, i32 212, i32 105, i32 130, i32 188, i32 141, i32 248, i32 52, i32 54, i32 117, i32 85, i32 24, i32 85, i32 88, i32 60, i32 121, i32 175, i32 38, i32 128, i32 171, i32 155, i32 149, i32 0, i32 241, i32 203, i32 218, i32 193, i32 159, i32 246, i32 47, i32 162, i32 244, i32 69, i32 141, i32 189, i32 163, i32 196, i32 6, i32 155, i32 31, i32 144, i32 88, i32 96, i32 116, i32 178, i32 0, i32 59, i32 60, i32 210, i32 218, i32 130, i32 187, i32 16, i32 144, i32 105, i32 146, i32 169, i32 180, i32 48, i32 129, i32 227, i32 124, i32 168, i32 137, i32 69, i32 45, i32 171, i32 53, i32 78, i32 135, i32 196, i32 101, i32 151, i32 103, i32 36, i32 164, i32 71, i32 173, i32 63, i32 142, i32 243, i32 203, i32 49, i32 23, i32 119, i32 197, i32 226, i32 215, i32 143, i32 60, i32 193, i32 205, i32 86, i32 72, i32 193, i32 108, i32 105, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 142, i32 189, i32 112, i32 143, i32 2, i32 163, i32 36, i32 77, i32 90, i32 103, i32 196, i32 218, i32 247, i32 32, i32 15, i32 129, i32 91, i32 122, i32 5, i32 36, i32 103, i32 131, i32 11, i32 42, i32 128, i32 231, i32 253, i32 116, i32 75, i32 158, i32 92, i32 13, i32 54, i32 79, i32 241, i32 94, i32 116, i32 53, i32 19, i32 40, i32 215, i32 17, i32 207, i32 184, i32 222, i32 147, i32 179, i32 5, i32 184, i32 181, i32 115, i32 233, i32 235, i32 173, i32 25, i32 30, i32 137, i32 15, i32 139, i32 21, i32 213, i32 140, i32 227, i32 35, i32 151, i32 41, i32 108, i32 196, i32 66, i32 11, i32 221, i32 192, i32 41, i32 92, i32 155, i32 52, i32 151, i32 208, i32 199, i32 121, i32 128, i32 99, i32 116, i32 228, i32 142, i32 55, i32 176, i32 43, i32 124, i32 232, i32 104, i32 108, i32 195, i32 130, i32 151, i32 87, i32 132, i32 240, i32 74, i32 19, i32 166, i32 214, i32 250, i32 147, i32 70, i32 7, i32 246, i32 126, i32 92, i32 109, i32 94, i32 246, i32 166, i32 231, i32 72, i32 240, i32 6, i32 234, i32 255, i32 144, i32 193, i32 204, i32 76, i32 25, i32 156, i32 60, i32 78, i32 83, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 106, i32 79, i32 27, i32 190, i32 107, i32 48, i32 207, i32 117, i32 70, i32 227, i32 123, i32 157, i32 252, i32 205, i32 216, i32 92, i32 31, i32 180, i32 200, i32 226, i32 36, i32 236, i32 26, i32 40, i32 5, i32 50, i32 87, i32 253, i32 60, i32 90, i32 152, i32 16, i32 42, i32 147, i32 210, i32 133, i32 27, i32 106, i32 93, i32 166, i32 238, i32 209, i32 209, i32 51, i32 189, i32 106, i32 54, i32 115, i32 55, i32 58, i32 68, i32 180, i32 236, i32 169, i32 122, i32 222, i32 131, i32 64, i32 215, i32 223, i32 40, i32 186, i32 162, i32 48, i32 155, i32 53, i32 226, i32 169, i32 61, i32 50, i32 30, i32 187, i32 22, i32 40, i32 112, i32 233, i32 69, i32 47, i32 143, i32 112, i32 127, i32 8, i32 126, i32 83, i32 196, i32 122, i32 191, i32 247, i32 225, i32 164, i32 106, i32 216, i32 172, i32 100, i32 27, i32 17, i32 160, i32 190, i32 114, i32 58, i32 80, i32 75, i32 116, i32 171, i32 1, i32 200, i32 147, i32 197, i32 228, i32 199, i32 8, i32 108, i32 180, i32 202, i32 238, i32 235, i32 142, i32 215, i32 78, i32 38, i32 198, i32 29, i32 226, i32 113, i32 175, i32 137, i32 160, i32 42, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 244, i32 41, i32 116, i32 46, i32 128, i32 167, i32 26, i32 143, i32 246, i32 189, i32 214, i32 142, i32 191, i32 193, i32 149, i32 42, i32 235, i32 160, i32 127, i32 69, i32 160, i32 80, i32 20, i32 5, i32 177, i32 87, i32 76, i32 116, i32 183, i32 226, i32 137, i32 125, i32 213, i32 252, i32 134, i32 163, i32 59, i32 163, i32 62, i32 10, i32 251, i32 11, i32 247, i32 54, i32 177, i32 91, i32 218, i32 112, i32 183, i32 0, i32 167, i32 218, i32 136, i32 143, i32 132, i32 168, i32 188, i32 28, i32 57, i32 184, i32 101, i32 243, i32 77, i32 96, i32 41, i32 216, i32 242, i32 170, i32 233, i32 14, i32 247, i32 46, i32 95, i32 157, i32 138, i32 91, i32 9, i32 237, i32 201, i32 36, i32 34, i32 244, i32 15, i32 37, i32 143, i32 28, i32 132, i32 110, i32 52, i32 20, i32 108, i32 234, i32 179, i32 134, i32 93, i32 4, i32 3, i32 27, i32 121, i32 83, i32 110, i32 36, i32 174, i32 87, i32 217, i32 88, i32 9, i32 133, i32 72, i32 162, i32 211, i32 181, i32 226, i32 77, i32 17, i32 130, i32 230, i32 134, i32 60, i32 233, i32 177, i32 0, i32 25, i32 194, i32 87, i32 247, i32 102, i32 122, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 139, i32 216, i32 83, i32 134, i32 36, i32 134, i32 41, i32 82, i32 1, i32 250, i32 32, i32 195, i32 78, i32 149, i32 203, i32 173, i32 123, i32 52, i32 148, i32 48, i32 183, i32 122, i32 250, i32 150, i32 65, i32 96, i32 43, i32 203, i32 89, i32 185, i32 202, i32 80, i32 176, i32 230, i32 47, i32 129, i32 112, i32 161, i32 46, i32 57, i32 4, i32 124, i32 196, i32 44, i32 135, i32 69, i32 74, i32 91, i32 105, i32 151, i32 172, i32 109, i32 44, i32 16, i32 66, i32 124, i32 59, i32 21, i32 112, i32 96, i32 14, i32 17, i32 109, i32 58, i32 25, i32 249, i32 53, i32 170, i32 89, i32 26, i32 12, i32 92, i32 6, i32 252, i32 106, i32 11, i32 151, i32 83, i32 54, i32 252, i32 42, i32 165, i32 90, i32 155, i32 48, i32 239, i32 35, i32 175, i32 57, i32 93, i32 154, i32 107, i32 117, i32 87, i32 72, i32 11, i32 254, i32 130, i32 177, i32 116, i32 49, i32 138, i32 167, i32 111, i32 86, i32 189, i32 141, i32 244, i32 224, i32 148, i32 81, i32 89, i32 222, i32 44, i32 90, i32 244, i32 132, i32 107, i32 74, i32 136, i32 147, i32 192, i32 12, i32 154, i32 172, i32 167, i32 160, i32 104, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 101, i32 156, i32 93, i32 240, i32 55, i32 4, i32 240, i32 52, i32 105, i32 42, i32 240, i32 165, i32 100, i32 202, i32 222, i32 43, i32 91, i32 21, i32 16, i32 210, i32 171, i32 6, i32 221, i32 196, i32 176, i32 182, i32 91, i32 193, i32 23, i32 223, i32 143, i32 2, i32 93, i32 147, i32 85, i32 223, i32 155, i32 18, i32 25, i32 236, i32 147, i32 133, i32 66, i32 158, i32 102, i32 15, i32 157, i32 175, i32 153, i32 175, i32 38, i32 137, i32 188, i32 97, i32 253, i32 255, i32 206, i32 75, i32 244, i32 51, i32 149, i32 201, i32 53, i32 88, i32 0, i32 169, i32 76, i32 178, i32 18, i32 248, i32 50, i32 168, i32 122, i32 0, i32 75, i32 73, i32 50, i32 186, i32 31, i32 93, i32 68, i32 142, i32 68, i32 122, i32 220, i32 17, i32 251, i32 57, i32 8, i32 87, i32 135, i32 165, i32 18, i32 66, i32 147, i32 14, i32 109, i32 124, i32 130, i32 50, i32 56, i32 85, i32 87, i32 116, i32 91, i32 125, i32 195, i32 196, i32 251, i32 6, i32 41, i32 240, i32 19, i32 85, i32 84, i32 198, i32 167, i32 220, i32 76, i32 159, i32 152, i32 73, i32 32, i32 168, i32 195, i32 141, i32 250, i32 72, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 252, i32 187, i32 213, i32 120, i32 109, i32 29, i32 212, i32 153, i32 180, i32 170, i32 68, i32 68, i32 122, i32 27, i32 216, i32 254, i32 180, i32 153, i32 185, i32 204, i32 231, i32 196, i32 211, i32 58, i32 115, i32 131, i32 65, i32 92, i32 64, i32 215, i32 45, i32 85, i32 211, i32 17, i32 61, i32 171, i32 239, i32 44, i32 237, i32 177, i32 61, i32 124, i32 50, i32 129, i32 107, i32 254, i32 248, i32 28, i32 60, i32 123, i32 192, i32 97, i32 223, i32 184, i32 117, i32 118, i32 127, i32 170, i32 216, i32 147, i32 175, i32 61, i32 232, i32 61, i32 192, i32 97, i32 72, i32 72, i32 23, i32 244, i32 158, i32 24, i32 81, i32 45, i32 234, i32 47, i32 242, i32 242, i32 224, i32 163, i32 20, i32 183, i32 139, i32 58, i32 48, i32 245, i32 129, i32 193, i32 93, i32 113, i32 57, i32 98, i32 85, i32 31, i32 96, i32 90, i32 206, i32 96, i32 9, i32 108, i32 245, i32 118, i32 23, i32 36, i32 128, i32 58, i32 150, i32 199, i32 148, i32 46, i32 247, i32 107, i32 239, i32 181, i32 5, i32 150, i32 239, i32 211, i32 123, i32 81, i32 218, i32 5, i32 68, i32 103, i32 188, i32 7, i32 33, i32 78, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 248, i32 173, i32 67, i32 194, i32 23, i32 6, i32 226, i32 228, i32 169, i32 134, i32 205, i32 24, i32 215, i32 120, i32 200, i32 116, i32 102, i32 210, i32 9, i32 24, i32 165, i32 241, i32 202, i32 166, i32 98, i32 146, i32 193, i32 203, i32 0, i32 235, i32 66, i32 46, i32 32, i32 11, i32 161, i32 8, i32 25, i32 173, i32 57, i32 84, i32 234, i32 62, i32 35, i32 9, i32 182, i32 226, i32 210, i32 188, i32 77, i32 252, i32 156, i32 240, i32 19, i32 22, i32 34, i32 63, i32 185, i32 210, i32 17, i32 134, i32 144, i32 85, i32 206, i32 60, i32 163, i32 100, i32 23, i32 155, i32 139, i32 200, i32 58, i32 97, i32 230, i32 157, i32 198, i32 237, i32 123, i32 3, i32 82, i32 38, i32 157, i32 58, i32 179, i32 19, i32 204, i32 138, i32 253, i32 44, i32 26, i32 29, i32 237, i32 19, i32 208, i32 85, i32 87, i32 14, i32 44, i32 40, i32 244, i32 58, i32 246, i32 222, i32 10, i32 224, i32 65, i32 68, i32 35, i32 248, i32 63, i32 3, i32 100, i32 159, i32 195, i32 85, i32 76, i32 198, i32 193, i32 148, i32 28, i32 36, i32 93, i32 95, i32 146, i32 69, i32 150, i32 87, i32 55, i32 20, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 53, i32 176, i32 230, i32 115, i32 6, i32 183, i32 55, i32 224, i32 248, i32 176, i32 34, i32 232, i32 210, i32 237, i32 11, i32 239, i32 230, i32 198, i32 90, i32 153, i32 158, i32 26, i32 159, i32 4, i32 151, i32 228, i32 77, i32 11, i32 190, i32 186, i32 68, i32 64, i32 53, i32 163, i32 120, i32 209, i32 17, i32 15, i32 117, i32 211, i32 112, i32 70, i32 219, i32 32, i32 81, i32 203, i32 146, i32 128, i32 84, i32 16, i32 116, i32 54, i32 134, i32 169, i32 215, i32 163, i32 8, i32 120, i32 241, i32 1, i32 41, i32 248, i32 128, i32 59, i32 167, i32 187, i32 246, i32 142, i32 173, i32 221, i32 247, i32 144, i32 221, i32 95, i32 147, i32 137, i32 174, i32 4, i32 55, i32 230, i32 154, i32 183, i32 232, i32 192, i32 223, i32 22, i32 42, i32 191, i32 196, i32 58, i32 60, i32 65, i32 213, i32 137, i32 114, i32 90, i32 30, i32 212, i32 147, i32 87, i32 226, i32 23, i32 231, i32 157, i32 171, i32 60, i32 85, i32 3, i32 130, i32 47, i32 43, i32 219, i32 86, i32 30, i32 48, i32 46, i32 36, i32 71, i32 110, i32 230, i32 255, i32 51, i32 36, i32 44, i32 117, i32 81, i32 212, i32 103, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 105, i32 251, i32 161, i32 156, i32 166, i32 117, i32 73, i32 125, i32 96, i32 115, i32 64, i32 66, i32 196, i32 19, i32 10, i32 149, i32 121, i32 30, i32 4, i32 131, i32 148, i32 153, i32 155, i32 30, i32 12, i32 232, i32 31, i32 84, i32 239, i32 203, i32 192, i32 82, i32 233, i32 221, i32 94, i32 85, i32 176, i32 10, i32 222, i32 33, i32 76, i32 90, i32 46, i32 212, i32 128, i32 58, i32 87, i32 146, i32 122, i32 241, i32 196, i32 44, i32 64, i32 175, i32 47, i32 201, i32 146, i32 3, i32 229, i32 90, i32 188, i32 220, i32 244, i32 9, i32 157, i32 69, i32 214, i32 128, i32 230, i32 69, i32 170, i32 244, i32 21, i32 170, i32 92, i32 52, i32 135, i32 153, i32 162, i32 140, i32 38, i32 132, i32 98, i32 125, i32 182, i32 41, i32 192, i32 82, i32 234, i32 245, i32 129, i32 24, i32 15, i32 53, i32 169, i32 14, i32 21, i32 85, i32 55, i32 198, i32 28, i32 39, i32 28, i32 109, i32 20, i32 79, i32 202, i32 164, i32 196, i32 136, i32 37, i32 70, i32 57, i32 252, i32 90, i32 229, i32 254, i32 41, i32 17, i32 105, i32 245, i32 114, i32 132, i32 77, i32 120, i32 159, i32 148, i32 21, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 184, i32 66, i32 28, i32 3, i32 173, i32 44, i32 3, i32 142, i32 172, i32 215, i32 152, i32 41, i32 19, i32 198, i32 2, i32 41, i32 181, i32 212, i32 231, i32 207, i32 204, i32 139, i32 131, i32 236, i32 53, i32 199, i32 156, i32 116, i32 183, i32 173, i32 133, i32 95, i32 44, i32 108, i32 247, i32 102, i32 164, i32 98, i32 107, i32 57, i32 179, i32 186, i32 101, i32 211, i32 28, i32 248, i32 17, i32 170, i32 190, i32 220, i32 128, i32 89, i32 135, i32 245, i32 123, i32 229, i32 227, i32 179, i32 62, i32 57, i32 218, i32 190, i32 136, i32 9, i32 218, i32 124, i32 164, i32 12, i32 244, i32 186, i32 110, i32 225, i32 137, i32 181, i32 89, i32 202, i32 241, i32 192, i32 41, i32 54, i32 9, i32 68, i32 226, i32 127, i32 209, i32 99, i32 21, i32 153, i32 234, i32 37, i32 207, i32 12, i32 157, i32 192, i32 68, i32 111, i32 105, i32 62, i32 71, i32 151, i32 44, i32 175, i32 82, i32 124, i32 120, i32 131, i32 173, i32 27, i32 57, i32 130, i32 47, i32 2, i32 111, i32 71, i32 219, i32 42, i32 176, i32 225, i32 145, i32 153, i32 85, i32 184, i32 153, i32 58, i32 160, i32 68, i32 17, i32 81]
@crypto_sign_ed25519_4 = constant [32 x i32] [i32 88, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102, i32 102]
@crypto_sign_ed25519_3 = constant [32 x i32] [i32 26, i32 213, i32 37, i32 143, i32 96, i32 45, i32 86, i32 201, i32 178, i32 167, i32 37, i32 149, i32 96, i32 199, i32 44, i32 105, i32 92, i32 220, i32 214, i32 253, i32 49, i32 226, i32 164, i32 192, i32 254, i32 83, i32 110, i32 205, i32 211, i32 54, i32 105, i32 33]
@crypto_sign_ed25519_1 = constant [32 x i32] [i32 163, i32 221, i32 183, i32 165, i32 179, i32 138, i32 222, i32 109, i32 245, i32 82, i32 81, i32 119, i32 128, i32 159, i32 240, i32 32, i32 125, i32 227, i32 171, i32 100, i32 142, i32 78, i32 234, i32 102, i32 101, i32 118, i32 139, i32 215, i32 15, i32 95, i32 135, i32 103]
@crypto_sign_ed25519_s = constant [32 x i32] [i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0]
@crypto_sign_str = internal unnamed_addr constant [12 x i8] c"crypto_sign\00"
@RAM_1P_str = internal unnamed_addr constant [7 x i8] c"RAM_1P\00"
@K = internal unnamed_addr constant [80 x i64] [i64 4794697086780616226, i64 8158064640168781261, i64 -5349999486874862801, i64 -1606136188198331460, i64 4131703408338449720, i64 6480981068601479193, i64 -7908458776815382629, i64 -6116909921290321640, i64 -2880145864133508542, i64 1334009975649890238, i64 2608012711638119052, i64 6128411473006802146, i64 8268148722764581231, i64 -9160688886553864527, i64 -7215885187991268811, i64 -4495734319001033068, i64 -1973867731355612462, i64 -1171420211273849373, i64 1135362057144423861, i64 2597628984639134821, i64 3308224258029322869, i64 5365058923640841347, i64 6679025012923562964, i64 8573033837759648693, i64 -7476448914759557205, i64 -6327057829258317296, i64 -5763719355590565569, i64 -4658551843659510044, i64 -4116276920077217854, i64 -3051310485924567259, i64 489312712824947311, i64 1452737877330783856, i64 2861767655752347644, i64 3322285676063803686, i64 5560940570517711597, i64 5996557281743188959, i64 7280758554555802590, i64 8532644243296465576, i64 -9096487096722542874, i64 -7894198246740708037, i64 -6719396339535248540, i64 -6333637450476146687, i64 -4446306890439682159, i64 -4076793802049405392, i64 -3345356375505022440, i64 -2983346525034927856, i64 -860691631967231958, i64 1182934255886127544, i64 1847814050463011016, i64 2177327727835720531, i64 2830643537854262169, i64 3796741975233480872, i64 4115178125766777443, i64 5681478168544905931, i64 6601373596472566643, i64 7507060721942968483, i64 8399075790359081724, i64 8693463985226723168, i64 -8878714635349349518, i64 -8302665154208450068, i64 -8016688836872298968, i64 -6606660893046293015, i64 -4685533653050689259, i64 -4147400797238176981, i64 -3880063495543823972, i64 -3348786107499101689, i64 -1523767162380948706, i64 -757361751448694408, i64 500013540394364858, i64 748580250866718886, i64 1242879168328830382, i64 1977374033974150939, i64 2944078676154940804, i64 3659926193048069267, i64 4368137639120453308, i64 4836135668995329356, i64 5532061633213252278, i64 6448918945643986474, i64 6902733635092675308, i64 7801388544844847127], align 16
@p_str816 = private unnamed_addr constant [20 x i8] c"sha512_compress_128\00", align 1
@p_str8 = private unnamed_addr constant [4 x i8] c"mul\00", align 1
@p_str715 = private unnamed_addr constant [4 x i8] c"sub\00", align 1
@p_str7 = private unnamed_addr constant [9 x i8] c"_memmove\00", align 1
@p_str614 = private unnamed_addr constant [5 x i8] c"icmp\00", align 1
@p_str6 = private unnamed_addr constant [12 x i8] c"sha512_init\00", align 1
@p_str513 = private unnamed_addr constant [5 x i8] c"lshr\00", align 1
@p_str5 = private unnamed_addr constant [13 x i8] c"sha512_final\00", align 1
@p_str412 = private unnamed_addr constant [5 x i8] c"ashr\00", align 1
@p_str4 = private unnamed_addr constant [18 x i8] c"sha512_update_128\00", align 1
@p_str311 = private unnamed_addr constant [4 x i8] c"shl\00", align 1
@p_str3 = private unnamed_addr constant [17 x i8] c"sha512_update_32\00", align 1
@p_str210 = private unnamed_addr constant [4 x i8] c"add\00", align 1
@p_str2 = private unnamed_addr constant [6 x i8] c"m_axi\00", align 1
@p_str19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@p_str13 = internal unnamed_addr constant [1 x i8] zeroinitializer
@p_str12 = internal unnamed_addr constant [1 x i8] zeroinitializer
@p_str1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@p_str = private unnamed_addr constant [10 x i8] c"s_axilite\00", align 1

define internal fastcc { i64, i64 } @sha512_update_32.1(i64 %md_length_read, [8 x i64]* nocapture %md_state, i64 %md_curlen_read, [128 x i8]* nocapture %md_buf, [64 x i8]* nocapture %in_r, i7 %in_offset) {
  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([64 x i8]* %in_r, [1 x i8]* @p_str12, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str12, i32 -1, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12)
  %in_offset_read = call i7 @_ssdm_op_Read.ap_auto.i7(i7 %in_offset)
  %md_curlen_read_1 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %md_curlen_read)
  %md_length_read_1 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %md_length_read)
  %in_offset_cast1 = zext i7 %in_offset_read to i64
  %temp_buf = alloca [128 x i8], align 16
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str8, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str210, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str311, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str412, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str513, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str614, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str715, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  %tmp = icmp ugt i64 %md_curlen_read_1, 128
  br i1 %tmp, label %.loopexit, label %.backedge.preheader

.backedge.preheader:                              ; preds = %0
  %p_01_idx = alloca i64
  %inlen = alloca i64
  %md_length = alloca i64
  %md_curlen = alloca i64
  %in_offset_cast = zext i7 %in_offset_read to i8
  store i64 %md_curlen_read_1, i64* %md_curlen
  store i64 %md_length_read_1, i64* %md_length
  store i64 32, i64* %inlen
  store i64 0, i64* %p_01_idx
  br label %.backedge

.backedge:                                        ; preds = %.backedge.backedge, %.backedge.preheader
  %inlen_load = load i64* %inlen
  %md_length_load = load i64* %md_length
  %md_curlen_load = load i64* %md_curlen
  %tmp_1 = icmp eq i64 %inlen_load, 0
  br i1 %tmp_1, label %.loopexit.loopexit, label %1

; <label>:1                                       ; preds = %.backedge
  %tmp_2 = icmp eq i64 %md_curlen_load, 0
  %tmp_3 = call i57 @_ssdm_op_PartSelect.i57.i64.i32.i32(i64 %inlen_load, i32 7, i32 63)
  %icmp = icmp ne i57 %tmp_3, 0
  %or_cond = and i1 %tmp_2, %icmp
  br i1 %or_cond, label %2, label %._crit_edge

; <label>:2                                       ; preds = %1
  %p_01_idx_load = load i64* %p_01_idx
  %sum3 = add i64 %in_offset_cast1, %p_01_idx_load
  call fastcc void @sha512_compress_32([8 x i64]* %md_state, [64 x i8]* %in_r, i64 %sum3)
  %tmp_4 = add i64 %md_length_load, 1024
  %p_01_idx8 = add i64 %p_01_idx_load, 128
  %inlen_1 = add i64 %inlen_load, -128
  store i64 0, i64* %md_curlen
  store i64 %tmp_4, i64* %md_length
  store i64 %inlen_1, i64* %inlen
  store i64 %p_01_idx8, i64* %p_01_idx
  br label %.backedge.backedge

._crit_edge:                                      ; preds = %1
  %tmp_6 = sub i64 128, %md_curlen_load
  %tmp_7 = icmp ult i64 %inlen_load, %tmp_6
  %n = select i1 %tmp_7, i64 %inlen_load, i64 %tmp_6
  br label %3

; <label>:3                                       ; preds = %4, %._crit_edge
  %i = phi i64 [ 0, %._crit_edge ], [ %i_1, %4 ]
  %tmp_12 = trunc i64 %i to i9
  %tmp_13 = trunc i64 %i to i8
  %exitcond3 = icmp eq i64 %i, %n
  %i_1 = add i64 1, %i
  br i1 %exitcond3, label %5, label %4

; <label>:4                                       ; preds = %3
  %p_01_idx_load_2 = load i64* %p_01_idx
  %tmp1 = add i8 %tmp_13, %in_offset_cast
  %tmp_14 = trunc i64 %p_01_idx_load_2 to i8
  %sum2 = add i8 %tmp1, %tmp_14
  %sum2_cast = zext i8 %sum2 to i64
  %in_addr = getelementptr [64 x i8]* %in_r, i64 0, i64 %sum2_cast
  %in_load = load i8* %in_addr, align 1
  %tmp_15 = trunc i64 %md_curlen_load to i9
  %tmp_5 = add i9 %tmp_15, %tmp_12
  %tmp_5_cast = zext i9 %tmp_5 to i64
  %md_buf_addr = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_5_cast
  store i8 %in_load, i8* %md_buf_addr, align 1
  br label %3

; <label>:5                                       ; preds = %3
  %p_01_idx_load_1 = load i64* %p_01_idx
  %tmp_8 = add i64 %n, %md_curlen_load
  %p_01_idx9 = add i64 %n, %p_01_idx_load_1
  %inlen_2 = sub i64 %inlen_load, %n
  %tmp_s = icmp eq i64 %tmp_8, 128
  br i1 %tmp_s, label %.preheader5.preheader, label %.backedge.backedge.pre

.preheader5.preheader:                            ; preds = %5
  br label %.preheader5

.preheader5:                                      ; preds = %.preheader5.preheader, %6
  %temp_index = phi i8 [ %temp_index_2, %6 ], [ 0, %.preheader5.preheader ]
  %exitcond2 = icmp eq i8 %temp_index, -128
  %empty_19 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_2 = add i8 %temp_index, 1
  br i1 %exitcond2, label %7, label %6

; <label>:6                                       ; preds = %.preheader5
  %tmp_9 = zext i8 %temp_index to i64
  %md_buf_addr_1 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_9
  %md_buf_load = load i8* %md_buf_addr_1, align 1
  %temp_buf_addr = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_9
  store i8 %md_buf_load, i8* %temp_buf_addr, align 1
  br label %.preheader5

; <label>:7                                       ; preds = %.preheader5
  call fastcc void @sha512_compress_128([8 x i64]* %md_state, [128 x i8]* %temp_buf)
  br label %.preheader

.preheader:                                       ; preds = %8, %7
  %temp_index_1 = phi i8 [ %temp_index_3, %8 ], [ 0, %7 ]
  %exitcond = icmp eq i8 %temp_index_1, -128
  %empty_20 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_3 = add i8 %temp_index_1, 1
  br i1 %exitcond, label %9, label %8

; <label>:8                                       ; preds = %.preheader
  %tmp_11 = zext i8 %temp_index_1 to i64
  %temp_buf_addr_1 = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_11
  %temp_buf_load = load i8* %temp_buf_addr_1, align 1
  %md_buf_addr_2 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_11
  store i8 %temp_buf_load, i8* %md_buf_addr_2, align 1
  br label %.preheader

; <label>:9                                       ; preds = %.preheader
  %tmp_10 = add i64 %md_length_load, 1024
  store i64 0, i64* %md_curlen
  store i64 %tmp_10, i64* %md_length
  store i64 %inlen_2, i64* %inlen
  store i64 %p_01_idx9, i64* %p_01_idx
  br label %.backedge.backedge

.backedge.backedge.pre:                           ; preds = %5
  store i64 %tmp_8, i64* %md_curlen
  store i64 %inlen_2, i64* %inlen
  store i64 %p_01_idx9, i64* %p_01_idx
  br label %.backedge.backedge

.backedge.backedge:                               ; preds = %.backedge.backedge.pre, %9, %2
  br label %.backedge

.loopexit.loopexit:                               ; preds = %.backedge
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %0
  %md_length_2 = phi i64 [ %md_length_read_1, %0 ], [ %md_length_load, %.loopexit.loopexit ]
  %md_curlen_2 = phi i64 [ %md_curlen_read_1, %0 ], [ %md_curlen_load, %.loopexit.loopexit ]
  %mrv = insertvalue { i64, i64 } undef, i64 %md_length_2, 0
  %mrv_1 = insertvalue { i64, i64 } %mrv, i64 %md_curlen_2, 1
  ret { i64, i64 } %mrv_1
}

define internal fastcc { i64, i64 } @sha512_update_32([8 x i64]* nocapture %md_state, [128 x i8]* nocapture %md_buf, [64 x i8]* nocapture %in_r) {
  %p_01_idx = alloca i64
  %inlen = alloca i64
  %md_curlen = alloca i64
  %md_length = alloca i64
  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([64 x i8]* %in_r, [1 x i8]* @p_str12, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str12, i32 -1, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12)
  %temp_buf = alloca [128 x i8], align 16
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str8, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str210, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str311, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str412, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str513, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str614, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str715, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  store i64 0, i64* %md_length
  store i64 0, i64* %md_curlen
  store i64 32, i64* %inlen
  store i64 0, i64* %p_01_idx
  br label %.backedge

.backedge:                                        ; preds = %.backedge.backedge, %0
  %inlen_load = load i64* %inlen
  %tmp_1 = icmp eq i64 %inlen_load, 0
  br i1 %tmp_1, label %.loopexit, label %1

; <label>:1                                       ; preds = %.backedge
  %md_curlen_load_2 = load i64* %md_curlen
  %tmp_2 = icmp eq i64 %md_curlen_load_2, 0
  %tmp = call i57 @_ssdm_op_PartSelect.i57.i64.i32.i32(i64 %inlen_load, i32 7, i32 63)
  %icmp = icmp ne i57 %tmp, 0
  %or_cond = and i1 %tmp_2, %icmp
  br i1 %or_cond, label %2, label %._crit_edge

; <label>:2                                       ; preds = %1
  %p_01_idx_load = load i64* %p_01_idx
  %md_length_load = load i64* %md_length
  call fastcc void @sha512_compress_32([8 x i64]* %md_state, [64 x i8]* %in_r, i64 %p_01_idx_load)
  %tmp_4 = add i64 %md_length_load, 1024
  %p_01_idx8 = add i64 %p_01_idx_load, 128
  %inlen_1 = add i64 %inlen_load, -128
  store i64 %tmp_4, i64* %md_length
  store i64 0, i64* %md_curlen
  store i64 %inlen_1, i64* %inlen
  store i64 %p_01_idx8, i64* %p_01_idx
  br label %.backedge.backedge

._crit_edge:                                      ; preds = %1
  %tmp_6 = sub i64 128, %md_curlen_load_2
  %tmp_7 = icmp ult i64 %inlen_load, %tmp_6
  %n = select i1 %tmp_7, i64 %inlen_load, i64 %tmp_6
  br label %3

; <label>:3                                       ; preds = %4, %._crit_edge
  %i = phi i64 [ 0, %._crit_edge ], [ %i_1, %4 ]
  %tmp_16 = trunc i64 %i to i9
  %tmp_17 = trunc i64 %i to i8
  %exitcond3 = icmp eq i64 %i, %n
  %i_1 = add i64 1, %i
  br i1 %exitcond3, label %5, label %4

; <label>:4                                       ; preds = %3
  %p_01_idx_load_4 = load i64* %p_01_idx
  %md_curlen_load = load i64* %md_curlen
  %tmp_18 = trunc i64 %p_01_idx_load_4 to i8
  %sum2 = add i8 %tmp_17, %tmp_18
  %sum2_cast = zext i8 %sum2 to i64
  %in_addr = getelementptr [64 x i8]* %in_r, i64 0, i64 %sum2_cast
  %in_load = load i8* %in_addr, align 1
  %tmp_19 = trunc i64 %md_curlen_load to i9
  %tmp_5 = add i9 %tmp_16, %tmp_19
  %tmp_5_cast = zext i9 %tmp_5 to i64
  %md_buf_addr = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_5_cast
  store i8 %in_load, i8* %md_buf_addr, align 1
  br label %3

; <label>:5                                       ; preds = %3
  %p_01_idx_load_3 = load i64* %p_01_idx
  %md_curlen_load_3 = load i64* %md_curlen
  %tmp_8 = add i64 %n, %md_curlen_load_3
  %p_01_idx9 = add i64 %n, %p_01_idx_load_3
  %inlen_2 = sub i64 %inlen_load, %n
  %tmp_s = icmp eq i64 %tmp_8, 128
  br i1 %tmp_s, label %.preheader5.preheader, label %.backedge.backedge.pre

.preheader5.preheader:                            ; preds = %5
  br label %.preheader5

.preheader5:                                      ; preds = %.preheader5.preheader, %6
  %temp_index = phi i8 [ %temp_index_2, %6 ], [ 0, %.preheader5.preheader ]
  %exitcond2 = icmp eq i8 %temp_index, -128
  %empty_21 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_2 = add i8 %temp_index, 1
  br i1 %exitcond2, label %7, label %6

; <label>:6                                       ; preds = %.preheader5
  %tmp_9 = zext i8 %temp_index to i64
  %md_buf_addr_1 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_9
  %md_buf_load = load i8* %md_buf_addr_1, align 1
  %temp_buf_addr_1 = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_9
  store i8 %md_buf_load, i8* %temp_buf_addr_1, align 1
  br label %.preheader5

; <label>:7                                       ; preds = %.preheader5
  call fastcc void @sha512_compress_128([8 x i64]* %md_state, [128 x i8]* %temp_buf)
  br label %.preheader

.preheader:                                       ; preds = %8, %7
  %temp_index_1 = phi i8 [ %temp_index_3, %8 ], [ 0, %7 ]
  %exitcond = icmp eq i8 %temp_index_1, -128
  %empty_22 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_3 = add i8 %temp_index_1, 1
  br i1 %exitcond, label %9, label %8

; <label>:8                                       ; preds = %.preheader
  %tmp_11 = zext i8 %temp_index_1 to i64
  %temp_buf_addr = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_11
  %temp_buf_load = load i8* %temp_buf_addr, align 1
  %md_buf_addr_2 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_11
  store i8 %temp_buf_load, i8* %md_buf_addr_2, align 1
  br label %.preheader

; <label>:9                                       ; preds = %.preheader
  %md_length_load_2 = load i64* %md_length
  %tmp_10 = add i64 %md_length_load_2, 1024
  store i64 %tmp_10, i64* %md_length
  store i64 0, i64* %md_curlen
  store i64 %inlen_2, i64* %inlen
  store i64 %p_01_idx9, i64* %p_01_idx
  br label %.backedge.backedge

.backedge.backedge.pre:                           ; preds = %5
  store i64 %tmp_8, i64* %md_curlen
  store i64 %inlen_2, i64* %inlen
  store i64 %p_01_idx9, i64* %p_01_idx
  br label %.backedge.backedge

.backedge.backedge:                               ; preds = %.backedge.backedge.pre, %9, %2
  br label %.backedge

.loopexit:                                        ; preds = %.backedge
  %md_curlen_load_1 = load i64* %md_curlen
  %md_length_load_1 = load i64* %md_length
  %mrv = insertvalue { i64, i64 } undef, i64 %md_length_load_1, 0
  %mrv_1 = insertvalue { i64, i64 } %mrv, i64 %md_curlen_load_1, 1
  ret { i64, i64 } %mrv_1
}

define internal fastcc { i64, i64 } @sha512_update_128(i64 %md_length_read, [8 x i64]* nocapture %md_state, i64 %md_curlen_read, [128 x i8]* nocapture %md_buf, [128 x i8]* nocapture %in_r) {
  %md_curlen_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %md_curlen_read)
  %md_length_read_2 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %md_length_read)
  %temp_buf = alloca [128 x i8], align 16
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str8, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str210, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str311, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str412, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str513, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str614, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str715, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [20 x i8]* @p_str816, [1 x i8]* @p_str19) nounwind
  %tmp = icmp ugt i64 %md_curlen_read_2, 128
  br i1 %tmp, label %.loopexit, label %.backedge.preheader

.backedge.preheader:                              ; preds = %0
  %p_01_idx = alloca i64
  %inlen = alloca i64
  %md_length = alloca i64
  %md_curlen = alloca i64
  store i64 %md_curlen_read_2, i64* %md_curlen
  store i64 %md_length_read_2, i64* %md_length
  store i64 128, i64* %inlen
  store i64 0, i64* %p_01_idx
  br label %.backedge

.backedge:                                        ; preds = %.backedge.backedge, %.backedge.preheader
  %inlen_load = load i64* %inlen
  %md_length_load = load i64* %md_length
  %md_curlen_load = load i64* %md_curlen
  %tmp_s = icmp eq i64 %inlen_load, 0
  br i1 %tmp_s, label %.loopexit.loopexit, label %1

; <label>:1                                       ; preds = %.backedge
  %tmp_12 = icmp eq i64 %md_curlen_load, 0
  %tmp_23 = call i57 @_ssdm_op_PartSelect.i57.i64.i32.i32(i64 %inlen_load, i32 7, i32 63)
  %icmp = icmp ne i57 %tmp_23, 0
  %or_cond = and i1 %tmp_12, %icmp
  br i1 %or_cond, label %2, label %._crit_edge

; <label>:2                                       ; preds = %1
  %p_01_idx_load = load i64* %p_01_idx
  call fastcc void @sha512_compress_128.1([8 x i64]* %md_state, [128 x i8]* %in_r, i64 %p_01_idx_load)
  %tmp_13 = add i64 %md_length_load, 1024
  %p_01_idx8 = add i64 %p_01_idx_load, 128
  %inlen_3 = add i64 %inlen_load, -128
  store i64 0, i64* %md_curlen
  store i64 %tmp_13, i64* %md_length
  store i64 %inlen_3, i64* %inlen
  store i64 %p_01_idx8, i64* %p_01_idx
  br label %.backedge.backedge

._crit_edge:                                      ; preds = %1
  %tmp_14 = sub i64 128, %md_curlen_load
  %tmp_15 = icmp ult i64 %inlen_load, %tmp_14
  %n = select i1 %tmp_15, i64 %inlen_load, i64 %tmp_14
  br label %3

; <label>:3                                       ; preds = %4, %._crit_edge
  %i = phi i64 [ 0, %._crit_edge ], [ %i_2, %4 ]
  %tmp_24 = trunc i64 %i to i9
  %exitcond3 = icmp eq i64 %i, %n
  %i_2 = add i64 1, %i
  br i1 %exitcond3, label %5, label %4

; <label>:4                                       ; preds = %3
  %p_01_idx_load_6 = load i64* %p_01_idx
  %tmp_25 = trunc i64 %p_01_idx_load_6 to i9
  %sum2 = add i9 %tmp_24, %tmp_25
  %sum2_cast = zext i9 %sum2 to i64
  %in_addr = getelementptr [128 x i8]* %in_r, i64 0, i64 %sum2_cast
  %in_load = load i8* %in_addr, align 1
  %tmp_26 = trunc i64 %md_curlen_load to i9
  %tmp_18 = add i9 %tmp_24, %tmp_26
  %tmp_19_cast = zext i9 %tmp_18 to i64
  %md_buf_addr = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_19_cast
  store i8 %in_load, i8* %md_buf_addr, align 1
  br label %3

; <label>:5                                       ; preds = %3
  %p_01_idx_load_5 = load i64* %p_01_idx
  %tmp_16 = add i64 %n, %md_curlen_load
  %p_01_idx9 = add i64 %n, %p_01_idx_load_5
  %inlen_4 = sub i64 %inlen_load, %n
  %tmp_17 = icmp eq i64 %tmp_16, 128
  br i1 %tmp_17, label %.preheader5.preheader, label %.backedge.backedge.pre

.preheader5.preheader:                            ; preds = %5
  br label %.preheader5

.preheader5:                                      ; preds = %.preheader5.preheader, %6
  %temp_index = phi i8 [ %temp_index_4, %6 ], [ 0, %.preheader5.preheader ]
  %exitcond2 = icmp eq i8 %temp_index, -128
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_4 = add i8 %temp_index, 1
  br i1 %exitcond2, label %7, label %6

; <label>:6                                       ; preds = %.preheader5
  %tmp_19 = zext i8 %temp_index to i64
  %md_buf_addr_3 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_19
  %md_buf_load = load i8* %md_buf_addr_3, align 1
  %temp_buf_addr = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_19
  store i8 %md_buf_load, i8* %temp_buf_addr, align 1
  br label %.preheader5

; <label>:7                                       ; preds = %.preheader5
  call fastcc void @sha512_compress_128([8 x i64]* %md_state, [128 x i8]* %temp_buf)
  br label %.preheader

.preheader:                                       ; preds = %8, %7
  %temp_index_1 = phi i8 [ %temp_index_5, %8 ], [ 0, %7 ]
  %exitcond = icmp eq i8 %temp_index_1, -128
  %empty_23 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_5 = add i8 %temp_index_1, 1
  br i1 %exitcond, label %9, label %8

; <label>:8                                       ; preds = %.preheader
  %tmp_21 = zext i8 %temp_index_1 to i64
  %temp_buf_addr_2 = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_21
  %temp_buf_load = load i8* %temp_buf_addr_2, align 1
  %md_buf_addr_4 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_21
  store i8 %temp_buf_load, i8* %md_buf_addr_4, align 1
  br label %.preheader

; <label>:9                                       ; preds = %.preheader
  %tmp_20 = add i64 %md_length_load, 1024
  store i64 0, i64* %md_curlen
  store i64 %tmp_20, i64* %md_length
  store i64 %inlen_4, i64* %inlen
  store i64 %p_01_idx9, i64* %p_01_idx
  br label %.backedge.backedge

.backedge.backedge.pre:                           ; preds = %5
  store i64 %tmp_16, i64* %md_curlen
  store i64 %inlen_4, i64* %inlen
  store i64 %p_01_idx9, i64* %p_01_idx
  br label %.backedge.backedge

.backedge.backedge:                               ; preds = %.backedge.backedge.pre, %9, %2
  br label %.backedge

.loopexit.loopexit:                               ; preds = %.backedge
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %0
  %md_length_2 = phi i64 [ %md_length_read_2, %0 ], [ %md_length_load, %.loopexit.loopexit ]
  %md_curlen_2 = phi i64 [ %md_curlen_read_2, %0 ], [ %md_curlen_load, %.loopexit.loopexit ]
  %mrv = insertvalue { i64, i64 } undef, i64 %md_length_2, 0
  %mrv_1 = insertvalue { i64, i64 } %mrv, i64 %md_curlen_2, 1
  ret { i64, i64 } %mrv_1
}

define internal fastcc void @sha512_init([8 x i64]* nocapture %md_state) {
  %md_state_addr = getelementptr [8 x i64]* %md_state, i64 0, i64 0
  store i64 7640891576956012808, i64* %md_state_addr, align 8
  %md_state_addr_1 = getelementptr [8 x i64]* %md_state, i64 0, i64 1
  store i64 -4942790177534073029, i64* %md_state_addr_1, align 8
  %md_state_addr_2 = getelementptr [8 x i64]* %md_state, i64 0, i64 2
  store i64 4354685564936845355, i64* %md_state_addr_2, align 8
  %md_state_addr_3 = getelementptr [8 x i64]* %md_state, i64 0, i64 3
  store i64 -6534734903238641935, i64* %md_state_addr_3, align 8
  %md_state_addr_4 = getelementptr [8 x i64]* %md_state, i64 0, i64 4
  store i64 5840696475078001361, i64* %md_state_addr_4, align 8
  %md_state_addr_5 = getelementptr [8 x i64]* %md_state, i64 0, i64 5
  store i64 -7276294671716946913, i64* %md_state_addr_5, align 8
  %md_state_addr_6 = getelementptr [8 x i64]* %md_state, i64 0, i64 6
  store i64 2270897969802886507, i64* %md_state_addr_6, align 8
  %md_state_addr_7 = getelementptr [8 x i64]* %md_state, i64 0, i64 7
  store i64 6620516959819538809, i64* %md_state_addr_7, align 8
  ret void
}

define internal fastcc void @sha512_final(i64 %md_length_read, [8 x i64]* nocapture %md_state, i64 %md_curlen_read, [128 x i8]* nocapture %md_buf, [64 x i8]* nocapture %out_r) {
  %md_curlen_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %md_curlen_read)
  %md_length_read_3 = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %md_length_read)
  %temp_buf = alloca [128 x i8], align 16
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str8, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str210, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str311, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str412, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str513, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str614, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str715, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [20 x i8]* @p_str816, [1 x i8]* @p_str19) nounwind
  %tmp = call i57 @_ssdm_op_PartSelect.i57.i64.i32.i32(i64 %md_curlen_read_3, i32 7, i32 63)
  %icmp = icmp eq i57 %tmp, 0
  br i1 %icmp, label %1, label %.loopexit

; <label>:1                                       ; preds = %0
  %tmp_49 = trunc i64 %md_curlen_read_3 to i7
  %tmp_s = call i10 @_ssdm_op_BitConcatenate.i10.i7.i3(i7 %tmp_49, i3 0)
  %tmp_cast = zext i10 %tmp_s to i64
  %tmp_50 = trunc i64 %md_length_read_3 to i8
  %tmp_51 = trunc i64 %md_curlen_read_3 to i5
  %tmp_2 = call i8 @_ssdm_op_BitConcatenate.i8.i5.i3(i5 %tmp_51, i3 0)
  %tmp_3 = zext i10 %tmp_s to i56
  %tmp_52 = trunc i64 %md_length_read_3 to i56
  %tmp_5 = zext i10 %tmp_s to i48
  %tmp_53 = trunc i64 %md_length_read_3 to i48
  %tmp_7 = zext i10 %tmp_s to i40
  %tmp_54 = trunc i64 %md_length_read_3 to i40
  %tmp_9 = zext i10 %tmp_s to i32
  %tmp_55 = trunc i64 %md_length_read_3 to i32
  %tmp_11 = zext i10 %tmp_s to i24
  %tmp_56 = trunc i64 %md_length_read_3 to i24
  %tmp_13 = zext i10 %tmp_s to i16
  %tmp_57 = trunc i64 %md_length_read_3 to i16
  %tmp_22 = add i64 %md_length_read_3, %tmp_cast
  %tmp_23_cast1 = add i16 %tmp_13, %tmp_57
  %tmp_23_cast2 = add i24 %tmp_11, %tmp_56
  %tmp_23_cast3 = add i32 %tmp_9, %tmp_55
  %tmp_23_cast4 = add i40 %tmp_7, %tmp_54
  %tmp_23_cast5 = add i48 %tmp_5, %tmp_53
  %tmp_23_cast = add i56 %tmp_3, %tmp_52
  %tmp_58 = trunc i64 %md_curlen_read_3 to i8
  %tmp_24_cast = add i8 1, %tmp_58
  %md_buf_addr = getelementptr [128 x i8]* %md_buf, i64 0, i64 %md_curlen_read_3
  store i8 -128, i8* %md_buf_addr, align 1
  %tmp_23 = icmp ugt i8 %tmp_24_cast, 112
  br i1 %tmp_23, label %.preheader13.preheader, label %._crit_edge.preheader

.preheader13.preheader:                           ; preds = %1
  br label %.preheader13

._crit_edge.preheader.loopexit:                   ; preds = %5
  br label %._crit_edge.preheader

._crit_edge.preheader:                            ; preds = %._crit_edge.preheader.loopexit, %1
  %md_curlen_2_ph = phi i8 [ %tmp_24_cast, %1 ], [ 0, %._crit_edge.preheader.loopexit ]
  br label %._crit_edge

.preheader13:                                     ; preds = %.preheader13.preheader, %2
  %md_curlen_in = phi i64 [ %md_curlen, %2 ], [ %md_curlen_read_3, %.preheader13.preheader ]
  %md_curlen = add i64 %md_curlen_in, 1
  %exitcond3 = icmp eq i64 %md_curlen, 128
  br i1 %exitcond3, label %.preheader12.preheader, label %2

.preheader12.preheader:                           ; preds = %.preheader13
  br label %.preheader12

; <label>:2                                       ; preds = %.preheader13
  %md_buf_addr_5 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %md_curlen
  store i8 0, i8* %md_buf_addr_5, align 1
  br label %.preheader13

.preheader12:                                     ; preds = %.preheader12.preheader, %3
  %temp_index = phi i8 [ %temp_index_6, %3 ], [ 0, %.preheader12.preheader ]
  %exitcond1 = icmp eq i8 %temp_index, -128
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_6 = add i8 %temp_index, 1
  br i1 %exitcond1, label %4, label %3

; <label>:3                                       ; preds = %.preheader12
  %tmp_24 = zext i8 %temp_index to i64
  %md_buf_addr_6 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_24
  %md_buf_load = load i8* %md_buf_addr_6, align 1
  %temp_buf_addr = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_24
  store i8 %md_buf_load, i8* %temp_buf_addr, align 1
  br label %.preheader12

; <label>:4                                       ; preds = %.preheader12
  call fastcc void @sha512_compress_128([8 x i64]* %md_state, [128 x i8]* %temp_buf)
  br label %5

; <label>:5                                       ; preds = %6, %4
  %temp_index_1 = phi i8 [ 0, %4 ], [ %temp_index_7, %6 ]
  %exitcond2 = icmp eq i8 %temp_index_1, -128
  %empty_24 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_7 = add i8 %temp_index_1, 1
  br i1 %exitcond2, label %._crit_edge.preheader.loopexit, label %6

; <label>:6                                       ; preds = %5
  %tmp_25 = zext i8 %temp_index_1 to i64
  %temp_buf_addr_4 = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_25
  %temp_buf_load = load i8* %temp_buf_addr_4, align 1
  %md_buf_addr_7 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_25
  store i8 %temp_buf_load, i8* %md_buf_addr_7, align 1
  br label %5

._crit_edge:                                      ; preds = %._crit_edge.preheader, %7
  %md_curlen_2 = phi i8 [ %tmp_27, %7 ], [ %md_curlen_2_ph, %._crit_edge.preheader ]
  %md_curlen_2_cast = zext i8 %md_curlen_2 to i64
  %tmp_26 = icmp ult i8 %md_curlen_2, 120
  br i1 %tmp_26, label %7, label %8

; <label>:7                                       ; preds = %._crit_edge
  %tmp_27 = add i8 %md_curlen_2, 1
  %md_buf_addr_8 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %md_curlen_2_cast
  store i8 0, i8* %md_buf_addr_8, align 1
  br label %._crit_edge

; <label>:8                                       ; preds = %._crit_edge
  %tmp_28 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %tmp_22, i32 56, i32 63)
  %md_buf_addr_9 = getelementptr [128 x i8]* %md_buf, i64 0, i64 120
  store i8 %tmp_28, i8* %md_buf_addr_9, align 1
  %tmp_29 = call i8 @_ssdm_op_PartSelect.i8.i56.i32.i32(i56 %tmp_23_cast, i32 48, i32 55)
  %md_buf_addr_10 = getelementptr [128 x i8]* %md_buf, i64 0, i64 121
  store i8 %tmp_29, i8* %md_buf_addr_10, align 1
  %tmp_30 = call i8 @_ssdm_op_PartSelect.i8.i48.i32.i32(i48 %tmp_23_cast5, i32 40, i32 47)
  %md_buf_addr_11 = getelementptr [128 x i8]* %md_buf, i64 0, i64 122
  store i8 %tmp_30, i8* %md_buf_addr_11, align 1
  %tmp_31 = call i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40 %tmp_23_cast4, i32 32, i32 39)
  %md_buf_addr_12 = getelementptr [128 x i8]* %md_buf, i64 0, i64 123
  store i8 %tmp_31, i8* %md_buf_addr_12, align 1
  %tmp_32 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %tmp_23_cast3, i32 24, i32 31)
  %md_buf_addr_13 = getelementptr [128 x i8]* %md_buf, i64 0, i64 124
  store i8 %tmp_32, i8* %md_buf_addr_13, align 1
  %tmp_33 = call i8 @_ssdm_op_PartSelect.i8.i24.i32.i32(i24 %tmp_23_cast2, i32 16, i32 23)
  %md_buf_addr_14 = getelementptr [128 x i8]* %md_buf, i64 0, i64 125
  store i8 %tmp_33, i8* %md_buf_addr_14, align 1
  %tmp_34 = call i8 @_ssdm_op_PartSelect.i8.i16.i32.i32(i16 %tmp_23_cast1, i32 8, i32 15)
  %md_buf_addr_15 = getelementptr [128 x i8]* %md_buf, i64 0, i64 126
  store i8 %tmp_34, i8* %md_buf_addr_15, align 1
  %tmp_35 = add i8 %tmp_50, %tmp_2
  %md_buf_addr_16 = getelementptr [128 x i8]* %md_buf, i64 0, i64 127
  store i8 %tmp_35, i8* %md_buf_addr_16, align 1
  br label %9

; <label>:9                                       ; preds = %10, %8
  %temp_index_2 = phi i8 [ 0, %8 ], [ %temp_index_8, %10 ]
  %exitcond9 = icmp eq i8 %temp_index_2, -128
  %empty_25 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_8 = add i8 %temp_index_2, 1
  br i1 %exitcond9, label %11, label %10

; <label>:10                                      ; preds = %9
  %tmp_36 = zext i8 %temp_index_2 to i64
  %md_buf_addr_17 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_36
  %md_buf_load_1 = load i8* %md_buf_addr_17, align 1
  %temp_buf_addr_3 = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_36
  store i8 %md_buf_load_1, i8* %temp_buf_addr_3, align 1
  br label %9

; <label>:11                                      ; preds = %9
  call fastcc void @sha512_compress_128([8 x i64]* %md_state, [128 x i8]* %temp_buf)
  br label %12

; <label>:12                                      ; preds = %13, %11
  %temp_index_3 = phi i8 [ 0, %11 ], [ %temp_index_9, %13 ]
  %exitcond8 = icmp eq i8 %temp_index_3, -128
  %empty_26 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128)
  %temp_index_9 = add i8 %temp_index_3, 1
  br i1 %exitcond8, label %.preheader.preheader, label %13

.preheader.preheader:                             ; preds = %12
  br label %.preheader

; <label>:13                                      ; preds = %12
  %tmp_37 = zext i8 %temp_index_3 to i64
  %temp_buf_addr_5 = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_37
  %temp_buf_load_1 = load i8* %temp_buf_addr_5, align 1
  %md_buf_addr_18 = getelementptr [128 x i8]* %md_buf, i64 0, i64 %tmp_37
  store i8 %temp_buf_load_1, i8* %md_buf_addr_18, align 1
  br label %12

.preheader:                                       ; preds = %.preheader.preheader, %14
  %i = phi i4 [ %i_3, %14 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i4 %i, -8
  %empty_27 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)
  %i_3 = add i4 %i, 1
  br i1 %exitcond, label %.loopexit.loopexit, label %14

; <label>:14                                      ; preds = %.preheader
  %tmp_38 = zext i4 %i to i64
  %md_state_addr = getelementptr [8 x i64]* %md_state, i64 0, i64 %tmp_38
  %md_state_load = load i64* %md_state_addr, align 8
  %tmp_39 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %md_state_load, i32 56, i32 63)
  %tmp_59 = trunc i4 %i to i3
  %tmp_40 = call i6 @_ssdm_op_BitConcatenate.i6.i3.i3(i3 %tmp_59, i3 0)
  %tmp_41 = zext i6 %tmp_40 to i64
  %out_addr = getelementptr [64 x i8]* %out_r, i64 0, i64 %tmp_41
  store i8 %tmp_39, i8* %out_addr, align 1
  %tmp_42 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %md_state_load, i32 48, i32 55)
  %p_sum1 = or i6 %tmp_40, 1
  %p_sum1_cast = zext i6 %p_sum1 to i64
  %out_addr_1 = getelementptr [64 x i8]* %out_r, i64 0, i64 %p_sum1_cast
  store i8 %tmp_42, i8* %out_addr_1, align 1
  %tmp_43 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %md_state_load, i32 40, i32 47)
  %p_sum2 = or i6 %tmp_40, 2
  %p_sum2_cast = zext i6 %p_sum2 to i64
  %out_addr_2 = getelementptr [64 x i8]* %out_r, i64 0, i64 %p_sum2_cast
  store i8 %tmp_43, i8* %out_addr_2, align 1
  %tmp_44 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %md_state_load, i32 32, i32 39)
  %p_sum3 = or i6 %tmp_40, 3
  %p_sum3_cast = zext i6 %p_sum3 to i64
  %out_addr_3 = getelementptr [64 x i8]* %out_r, i64 0, i64 %p_sum3_cast
  store i8 %tmp_44, i8* %out_addr_3, align 1
  %tmp_45 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %md_state_load, i32 24, i32 31)
  %p_sum4 = or i6 %tmp_40, 4
  %p_sum4_cast = zext i6 %p_sum4 to i64
  %out_addr_4 = getelementptr [64 x i8]* %out_r, i64 0, i64 %p_sum4_cast
  store i8 %tmp_45, i8* %out_addr_4, align 1
  %tmp_46 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %md_state_load, i32 16, i32 23)
  %p_sum5 = or i6 %tmp_40, 5
  %p_sum5_cast = zext i6 %p_sum5 to i64
  %out_addr_5 = getelementptr [64 x i8]* %out_r, i64 0, i64 %p_sum5_cast
  store i8 %tmp_46, i8* %out_addr_5, align 1
  %tmp_47 = call i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64 %md_state_load, i32 8, i32 15)
  %p_sum6 = or i6 %tmp_40, 6
  %p_sum6_cast = zext i6 %p_sum6 to i64
  %out_addr_6 = getelementptr [64 x i8]* %out_r, i64 0, i64 %p_sum6_cast
  store i8 %tmp_47, i8* %out_addr_6, align 1
  %tmp_60 = trunc i64 %md_state_load to i8
  %p_sum7 = or i6 %tmp_40, 7
  %p_sum7_cast = zext i6 %p_sum7 to i64
  %out_addr_7 = getelementptr [64 x i8]* %out_r, i64 0, i64 %p_sum7_cast
  store i8 %tmp_60, i8* %out_addr_7, align 1
  br label %.preheader

.loopexit.loopexit:                               ; preds = %.preheader
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %0
  ret void
}

define internal fastcc void @sha512_compress_32([8 x i64]* nocapture %md_state, [64 x i8]* nocapture %buf_r, i64 %sum) {
  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([64 x i8]* %buf_r, [1 x i8]* @p_str12, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str12, i32 -1, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12)
  %sum_read = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %sum)
  %S = alloca [8 x i64], align 16
  %W = alloca [80 x i64], align 16
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str8, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str210, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str311, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str412, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str513, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str614, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str715, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i4 [ 0, %0 ], [ %i_5, %2 ]
  %exitcond3 = icmp eq i4 %i, -8
  %empty_28 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)
  %i_5 = add i4 %i, 1
  br i1 %exitcond3, label %.preheader13.preheader, label %2

.preheader13.preheader:                           ; preds = %1
  %tmp_175 = trunc i64 %sum_read to i8
  br label %.preheader13

; <label>:2                                       ; preds = %1
  %tmp = zext i4 %i to i64
  %md_state_addr = getelementptr [8 x i64]* %md_state, i64 0, i64 %tmp
  %md_state_load = load i64* %md_state_addr, align 8
  %S_addr = getelementptr inbounds [8 x i64]* %S, i64 0, i64 %tmp
  store i64 %md_state_load, i64* %S_addr, align 8
  br label %1

.preheader13:                                     ; preds = %3, %.preheader13.preheader
  %i_1 = phi i5 [ %i_6, %3 ], [ 0, %.preheader13.preheader ]
  %exitcond9 = icmp eq i5 %i_1, -16
  %empty_29 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)
  %i_6 = add i5 %i_1, 1
  br i1 %exitcond9, label %.preheader12.preheader, label %3

.preheader12.preheader:                           ; preds = %.preheader13
  br label %.preheader12

; <label>:3                                       ; preds = %.preheader13
  %tmp_178 = trunc i5 %i_1 to i4
  %tmp_s = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %tmp_178, i3 0)
  %tmp_66_cast = zext i7 %tmp_s to i8
  %sum1 = add i8 %tmp_175, %tmp_66_cast
  %sum1_cast = zext i8 %sum1 to i64
  %buf_addr = getelementptr [64 x i8]* %buf_r, i64 0, i64 %sum1_cast
  %buf_load = load i8* %buf_addr, align 1
  %p_sum1 = or i7 %tmp_s, 1
  %p_sum1_cast = zext i7 %p_sum1 to i8
  %sum3 = add i8 %tmp_175, %p_sum1_cast
  %sum3_cast = zext i8 %sum3 to i64
  %buf_addr_1 = getelementptr [64 x i8]* %buf_r, i64 0, i64 %sum3_cast
  %buf_load_1 = load i8* %buf_addr_1, align 1
  %p_sum2 = or i7 %tmp_s, 2
  %p_sum2_cast = zext i7 %p_sum2 to i8
  %sum5 = add i8 %tmp_175, %p_sum2_cast
  %sum5_cast = zext i8 %sum5 to i64
  %buf_addr_2 = getelementptr [64 x i8]* %buf_r, i64 0, i64 %sum5_cast
  %buf_load_2 = load i8* %buf_addr_2, align 1
  %p_sum3 = or i7 %tmp_s, 3
  %p_sum3_cast = zext i7 %p_sum3 to i8
  %sum7 = add i8 %tmp_175, %p_sum3_cast
  %sum7_cast = zext i8 %sum7 to i64
  %buf_addr_3 = getelementptr [64 x i8]* %buf_r, i64 0, i64 %sum7_cast
  %buf_load_3 = load i8* %buf_addr_3, align 1
  %p_sum4 = or i7 %tmp_s, 4
  %p_sum4_cast = zext i7 %p_sum4 to i8
  %sum9 = add i8 %tmp_175, %p_sum4_cast
  %sum9_cast = zext i8 %sum9 to i64
  %buf_addr_4 = getelementptr [64 x i8]* %buf_r, i64 0, i64 %sum9_cast
  %buf_load_4 = load i8* %buf_addr_4, align 1
  %p_sum5 = or i7 %tmp_s, 5
  %p_sum5_cast = zext i7 %p_sum5 to i8
  %sum2 = add i8 %tmp_175, %p_sum5_cast
  %sum2_cast = zext i8 %sum2 to i64
  %buf_addr_5 = getelementptr [64 x i8]* %buf_r, i64 0, i64 %sum2_cast
  %buf_load_5 = load i8* %buf_addr_5, align 1
  %p_sum6 = or i7 %tmp_s, 6
  %p_sum6_cast = zext i7 %p_sum6 to i8
  %sum4 = add i8 %tmp_175, %p_sum6_cast
  %sum4_cast = zext i8 %sum4 to i64
  %buf_addr_6 = getelementptr [64 x i8]* %buf_r, i64 0, i64 %sum4_cast
  %buf_load_6 = load i8* %buf_addr_6, align 1
  %p_sum7 = or i7 %tmp_s, 7
  %p_sum7_cast = zext i7 %p_sum7 to i8
  %sum6 = add i8 %tmp_175, %p_sum7_cast
  %sum6_cast = zext i8 %sum6 to i64
  %buf_addr_7 = getelementptr [64 x i8]* %buf_r, i64 0, i64 %sum6_cast
  %buf_load_7 = load i8* %buf_addr_7, align 1
  %tmp_48 = call i64 @_ssdm_op_BitConcatenate.i64.i8.i8.i8.i8.i8.i8.i8.i8(i8 %buf_load, i8 %buf_load_1, i8 %buf_load_2, i8 %buf_load_3, i8 %buf_load_4, i8 %buf_load_5, i8 %buf_load_6, i8 %buf_load_7)
  %tmp_49 = zext i5 %i_1 to i64
  %W_addr = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_49
  store i64 %tmp_48, i64* %W_addr, align 8
  br label %.preheader13

.preheader12:                                     ; preds = %.preheader12.preheader, %4
  %i_2 = phi i7 [ %i_7, %4 ], [ 16, %.preheader12.preheader ]
  %exitcond8 = icmp eq i7 %i_2, -48
  %empty_30 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)
  br i1 %exitcond8, label %.preheader11.preheader, label %4

.preheader11.preheader:                           ; preds = %.preheader12
  %S_addr_1 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 7
  %S_addr_2 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 4
  %S_addr_3 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 6
  %S_addr_4 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 5
  %S_addr_5 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 0
  %S_addr_6 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 1
  %S_addr_7 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 2
  %S_addr_8 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 3
  br label %.preheader11

; <label>:4                                       ; preds = %.preheader12
  %tmp_50 = add i7 -2, %i_2
  %tmp_51 = zext i7 %tmp_50 to i64
  %W_addr_1 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_51
  %W_load = load i64* %W_addr_1, align 8
  %tmp_52 = call i45 @_ssdm_op_PartSelect.i45.i64.i32.i32(i64 %W_load, i32 19, i32 63)
  %tmp_181 = trunc i64 %W_load to i19
  %tmp_53 = call i64 @_ssdm_op_BitConcatenate.i64.i19.i45(i19 %tmp_181, i45 %tmp_52)
  %tmp_54 = call i3 @_ssdm_op_PartSelect.i3.i64.i32.i32(i64 %W_load, i32 61, i32 63)
  %tmp_190 = trunc i64 %W_load to i61
  %tmp_55 = call i64 @_ssdm_op_BitConcatenate.i64.i61.i3(i61 %tmp_190, i3 %tmp_54)
  %tmp_56 = call i58 @_ssdm_op_PartSelect.i58.i64.i32.i32(i64 %W_load, i32 6, i32 63)
  %tmp_22 = zext i58 %tmp_56 to i64
  %tmp6 = xor i64 %tmp_22, %tmp_55
  %tmp_57 = xor i64 %tmp6, %tmp_53
  %tmp_58 = add i7 -7, %i_2
  %tmp_59 = zext i7 %tmp_58 to i64
  %W_addr_2 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_59
  %W_load_1 = load i64* %W_addr_2, align 8
  %tmp_60 = add i7 -15, %i_2
  %tmp_61 = zext i7 %tmp_60 to i64
  %W_addr_3 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_61
  %W_load_2 = load i64* %W_addr_3, align 8
  %tmp_62 = call i63 @_ssdm_op_PartSelect.i63.i64.i32.i32(i64 %W_load_2, i32 1, i32 63)
  %tmp_193 = trunc i64 %W_load_2 to i1
  %tmp_63 = call i64 @_ssdm_op_BitConcatenate.i64.i1.i63(i1 %tmp_193, i63 %tmp_62)
  %tmp_64 = call i56 @_ssdm_op_PartSelect.i56.i64.i32.i32(i64 %W_load_2, i32 8, i32 63)
  %tmp_196 = trunc i64 %W_load_2 to i8
  %tmp_65 = call i64 @_ssdm_op_BitConcatenate.i64.i8.i56(i8 %tmp_196, i56 %tmp_64)
  %tmp_66 = call i57 @_ssdm_op_PartSelect.i57.i64.i32.i32(i64 %W_load_2, i32 7, i32 63)
  %tmp_25 = zext i57 %tmp_66 to i64
  %tmp7 = xor i64 %tmp_25, %tmp_65
  %tmp_67 = xor i64 %tmp7, %tmp_63
  %tmp_68 = add i7 -16, %i_2
  %tmp_69 = zext i7 %tmp_68 to i64
  %W_addr_4 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_69
  %W_load_3 = load i64* %W_addr_4, align 8
  %tmp8 = add i64 %W_load_1, %W_load_3
  %tmp9 = add i64 %tmp_57, %tmp_67
  %tmp_70 = add i64 %tmp9, %tmp8
  %tmp_71 = zext i7 %i_2 to i64
  %W_addr_5 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_71
  store i64 %tmp_70, i64* %W_addr_5, align 8
  %i_7 = add i7 1, %i_2
  br label %.preheader12

.preheader11:                                     ; preds = %5, %.preheader11.preheader
  %i_3 = phi i7 [ %i_8, %5 ], [ 0, %.preheader11.preheader ]
  %tmp_72 = icmp ult i7 %i_3, -48
  %empty_31 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 10, i64 10, i64 10)
  br i1 %tmp_72, label %5, label %.preheader.preheader

.preheader.preheader:                             ; preds = %.preheader11
  br label %.preheader

; <label>:5                                       ; preds = %.preheader11
  %S_load = load i64* %S_addr_1, align 8
  %S_load_1 = load i64* %S_addr_2, align 16
  %tmp_73 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %S_load_1, i32 14, i32 63)
  %tmp_206 = trunc i64 %S_load_1 to i14
  %tmp_74 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_206, i50 %tmp_73)
  %tmp_75 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %S_load_1, i32 18, i32 63)
  %tmp_209 = trunc i64 %S_load_1 to i18
  %tmp_76 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_209, i46 %tmp_75)
  %tmp_77 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %S_load_1, i32 41, i32 63)
  %tmp_212 = trunc i64 %S_load_1 to i41
  %tmp_78 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_212, i23 %tmp_77)
  %tmp10 = xor i64 %tmp_78, %tmp_76
  %tmp_79 = xor i64 %tmp10, %tmp_74
  %S_load_2 = load i64* %S_addr_3, align 16
  %S_load_3 = load i64* %S_addr_4, align 8
  %tmp_80 = xor i64 %S_load_3, %S_load_2
  %tmp_81 = and i64 %S_load_1, %tmp_80
  %tmp_82 = xor i64 %S_load_2, %tmp_81
  %tmp_83 = zext i7 %i_3 to i64
  %K_addr = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_83
  %K_load = load i64* %K_addr, align 16
  %W_addr_6 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_83
  %W_load_4 = load i64* %W_addr_6, align 16
  %tmp13 = add i64 %K_load, %S_load
  %tmp15 = add i64 %tmp_79, %tmp_82
  %tmp14 = add i64 %tmp15, %W_load_4
  %t0 = add i64 %tmp14, %tmp13
  %S_load_4 = load i64* %S_addr_5, align 16
  %tmp_84 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %S_load_4, i32 28, i32 63)
  %tmp_221 = trunc i64 %S_load_4 to i28
  %tmp_85 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_221, i36 %tmp_84)
  %tmp_86 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %S_load_4, i32 34, i32 63)
  %tmp_224 = trunc i64 %S_load_4 to i34
  %tmp_87 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_224, i30 %tmp_86)
  %tmp_88 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %S_load_4, i32 39, i32 63)
  %tmp_227 = trunc i64 %S_load_4 to i39
  %tmp_89 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_227, i25 %tmp_88)
  %tmp16 = xor i64 %tmp_89, %tmp_87
  %tmp_90 = xor i64 %tmp16, %tmp_85
  %S_load_5 = load i64* %S_addr_6, align 8
  %tmp_91 = or i64 %S_load_5, %S_load_4
  %S_load_6 = load i64* %S_addr_7, align 16
  %tmp_92 = and i64 %S_load_6, %tmp_91
  %tmp_93 = and i64 %S_load_5, %S_load_4
  %tmp_94 = or i64 %tmp_92, %tmp_93
  %S_load_7 = load i64* %S_addr_8, align 8
  %tmp_95 = add i64 %S_load_7, %t0
  %tmp17 = add i64 %tmp_90, %tmp_94
  %tmp_96 = add i64 %tmp17, %t0
  %tmp_97 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_95, i32 14, i32 63)
  %tmp_237 = trunc i64 %tmp_95 to i14
  %tmp_98 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_237, i50 %tmp_97)
  %tmp_99 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_95, i32 18, i32 63)
  %tmp_240 = trunc i64 %tmp_95 to i18
  %tmp_100 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_240, i46 %tmp_99)
  %tmp_101 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_95, i32 41, i32 63)
  %tmp_243 = trunc i64 %tmp_95 to i41
  %tmp_102 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_243, i23 %tmp_101)
  %tmp18 = xor i64 %tmp_102, %tmp_100
  %tmp_103 = xor i64 %tmp18, %tmp_98
  %tmp_104 = xor i64 %S_load_3, %S_load_1
  %tmp_105 = and i64 %tmp_95, %tmp_104
  %tmp_106 = xor i64 %S_load_3, %tmp_105
  %tmp_107 = or i7 %i_3, 1
  %tmp_108 = zext i7 %tmp_107 to i64
  %K_addr_1 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_108
  %K_load_1 = load i64* %K_addr_1, align 8
  %W_addr_7 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_108
  %W_load_5 = load i64* %W_addr_7, align 8
  %tmp21 = add i64 %K_load_1, %S_load_2
  %tmp23 = add i64 %tmp_106, %tmp_103
  %tmp22 = add i64 %tmp23, %W_load_5
  %t0_1 = add i64 %tmp22, %tmp21
  %tmp_109 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_96, i32 28, i32 63)
  %tmp_252 = trunc i64 %tmp_96 to i28
  %tmp_110 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_252, i36 %tmp_109)
  %tmp_111 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_96, i32 34, i32 63)
  %tmp_255 = trunc i64 %tmp_96 to i34
  %tmp_112 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_255, i30 %tmp_111)
  %tmp_113 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_96, i32 39, i32 63)
  %tmp_258 = trunc i64 %tmp_96 to i39
  %tmp_114 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_258, i25 %tmp_113)
  %tmp24 = xor i64 %tmp_114, %tmp_112
  %tmp_115 = xor i64 %tmp24, %tmp_110
  %tmp_116 = or i64 %S_load_4, %tmp_96
  %tmp_117 = and i64 %S_load_5, %tmp_116
  %tmp_118 = and i64 %S_load_4, %tmp_96
  %tmp_119 = or i64 %tmp_117, %tmp_118
  %tmp_120 = add i64 %S_load_6, %t0_1
  %tmp25 = add i64 %tmp_115, %t0_1
  %tmp_121 = add i64 %tmp25, %tmp_119
  %tmp_122 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_120, i32 14, i32 63)
  %tmp_268 = trunc i64 %tmp_120 to i14
  %tmp_123 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_268, i50 %tmp_122)
  %tmp_124 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_120, i32 18, i32 63)
  %tmp_271 = trunc i64 %tmp_120 to i18
  %tmp_125 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_271, i46 %tmp_124)
  %tmp_126 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_120, i32 41, i32 63)
  %tmp_274 = trunc i64 %tmp_120 to i41
  %tmp_127 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_274, i23 %tmp_126)
  %tmp26 = xor i64 %tmp_127, %tmp_125
  %tmp_128 = xor i64 %tmp26, %tmp_123
  %tmp_129 = xor i64 %S_load_1, %tmp_95
  %tmp_130 = and i64 %tmp_120, %tmp_129
  %tmp_131 = xor i64 %S_load_1, %tmp_130
  %tmp_132 = or i7 %i_3, 2
  %tmp_133 = zext i7 %tmp_132 to i64
  %K_addr_2 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_133
  %K_load_2 = load i64* %K_addr_2, align 16
  %W_addr_8 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_133
  %W_load_6 = load i64* %W_addr_8, align 16
  %tmp27 = add i64 %K_load_2, %S_load_3
  %tmp28 = add i64 %tmp_131, %tmp_128
  %tmp29 = add i64 %tmp28, %W_load_6
  %t0_2 = add i64 %tmp29, %tmp27
  %tmp_134 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_121, i32 28, i32 63)
  %tmp_283 = trunc i64 %tmp_121 to i28
  %tmp_135 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_283, i36 %tmp_134)
  %tmp_136 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_121, i32 34, i32 63)
  %tmp_286 = trunc i64 %tmp_121 to i34
  %tmp_137 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_286, i30 %tmp_136)
  %tmp_138 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_121, i32 39, i32 63)
  %tmp_289 = trunc i64 %tmp_121 to i39
  %tmp_139 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_289, i25 %tmp_138)
  %tmp30 = xor i64 %tmp_139, %tmp_137
  %tmp_140 = xor i64 %tmp30, %tmp_135
  %tmp_141 = or i64 %tmp_121, %tmp_96
  %tmp_142 = and i64 %S_load_4, %tmp_141
  %tmp_143 = and i64 %tmp_121, %tmp_96
  %tmp_144 = or i64 %tmp_142, %tmp_143
  %tmp_145 = add i64 %S_load_5, %t0_2
  %tmp31 = add i64 %tmp_140, %t0_2
  %tmp_146 = add i64 %tmp31, %tmp_144
  %tmp_147 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_145, i32 14, i32 63)
  %tmp_300 = trunc i64 %tmp_145 to i14
  %tmp_148 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_300, i50 %tmp_147)
  %tmp_149 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_145, i32 18, i32 63)
  %tmp_301 = trunc i64 %tmp_145 to i18
  %tmp_150 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_301, i46 %tmp_149)
  %tmp_151 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_145, i32 41, i32 63)
  %tmp_302 = trunc i64 %tmp_145 to i41
  %tmp_152 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_302, i23 %tmp_151)
  %tmp32 = xor i64 %tmp_152, %tmp_150
  %tmp_153 = xor i64 %tmp32, %tmp_148
  %tmp_154 = xor i64 %tmp_120, %tmp_95
  %tmp_155 = and i64 %tmp_145, %tmp_154
  %tmp_156 = xor i64 %tmp_155, %tmp_95
  %tmp_157 = or i7 %i_3, 3
  %tmp_158 = zext i7 %tmp_157 to i64
  %K_addr_3 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_158
  %K_load_3 = load i64* %K_addr_3, align 8
  %W_addr_9 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_158
  %W_load_7 = load i64* %W_addr_9, align 8
  %tmp33 = add i64 %K_load_3, %S_load_1
  %tmp34 = add i64 %tmp_156, %tmp_153
  %tmp35 = add i64 %tmp34, %W_load_7
  %t0_3 = add i64 %tmp35, %tmp33
  %tmp_159 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_146, i32 28, i32 63)
  %tmp_303 = trunc i64 %tmp_146 to i28
  %tmp_160 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_303, i36 %tmp_159)
  %tmp_161 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_146, i32 34, i32 63)
  %tmp_304 = trunc i64 %tmp_146 to i34
  %tmp_162 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_304, i30 %tmp_161)
  %tmp_163 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_146, i32 39, i32 63)
  %tmp_305 = trunc i64 %tmp_146 to i39
  %tmp_164 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_305, i25 %tmp_163)
  %tmp36 = xor i64 %tmp_164, %tmp_162
  %tmp_165 = xor i64 %tmp36, %tmp_160
  %tmp_166 = or i64 %tmp_146, %tmp_121
  %tmp_167 = and i64 %tmp_166, %tmp_96
  %tmp_168 = and i64 %tmp_146, %tmp_121
  %tmp_169 = or i64 %tmp_167, %tmp_168
  %tmp_170 = add i64 %S_load_4, %t0_3
  %tmp37 = add i64 %tmp_165, %t0_3
  %tmp_171 = add i64 %tmp37, %tmp_169
  %tmp_172 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_170, i32 14, i32 63)
  %tmp_306 = trunc i64 %tmp_170 to i14
  %tmp_173 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_306, i50 %tmp_172)
  %tmp_174 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_170, i32 18, i32 63)
  %tmp_307 = trunc i64 %tmp_170 to i18
  %tmp_176 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_307, i46 %tmp_174)
  %tmp_177 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_170, i32 41, i32 63)
  %tmp_308 = trunc i64 %tmp_170 to i41
  %tmp_179 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_308, i23 %tmp_177)
  %tmp38 = xor i64 %tmp_179, %tmp_176
  %tmp_180 = xor i64 %tmp38, %tmp_173
  %tmp_182 = xor i64 %tmp_145, %tmp_120
  %tmp_183 = and i64 %tmp_170, %tmp_182
  %tmp_184 = xor i64 %tmp_183, %tmp_120
  %tmp_185 = or i7 %i_3, 4
  %tmp_186 = zext i7 %tmp_185 to i64
  %K_addr_4 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_186
  %K_load_4 = load i64* %K_addr_4, align 16
  %W_addr_10 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_186
  %W_load_8 = load i64* %W_addr_10, align 16
  %tmp39 = add i64 %K_load_4, %W_load_8
  %tmp40 = add i64 %tmp_180, %tmp_95
  %tmp41 = add i64 %tmp40, %tmp_184
  %t0_4 = add i64 %tmp41, %tmp39
  %tmp_187 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_171, i32 28, i32 63)
  %tmp_309 = trunc i64 %tmp_171 to i28
  %tmp_188 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_309, i36 %tmp_187)
  %tmp_189 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_171, i32 34, i32 63)
  %tmp_310 = trunc i64 %tmp_171 to i34
  %tmp_191 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_310, i30 %tmp_189)
  %tmp_192 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_171, i32 39, i32 63)
  %tmp_311 = trunc i64 %tmp_171 to i39
  %tmp_194 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_311, i25 %tmp_192)
  %tmp42 = xor i64 %tmp_194, %tmp_191
  %tmp_195 = xor i64 %tmp42, %tmp_188
  %tmp_197 = or i64 %tmp_171, %tmp_146
  %tmp_198 = and i64 %tmp_197, %tmp_121
  %tmp_199 = and i64 %tmp_171, %tmp_146
  %tmp_200 = or i64 %tmp_198, %tmp_199
  %tmp_201 = add i64 %tmp_96, %t0_4
  store i64 %tmp_201, i64* %S_addr_1, align 8
  %tmp43 = add i64 %tmp_195, %t0_4
  %tmp_202 = add i64 %tmp43, %tmp_200
  store i64 %tmp_202, i64* %S_addr_8, align 8
  %tmp_203 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_201, i32 14, i32 63)
  %tmp_312 = trunc i64 %tmp_201 to i14
  %tmp_204 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_312, i50 %tmp_203)
  %tmp_205 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_201, i32 18, i32 63)
  %tmp_313 = trunc i64 %tmp_201 to i18
  %tmp_207 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_313, i46 %tmp_205)
  %tmp_208 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_201, i32 41, i32 63)
  %tmp_314 = trunc i64 %tmp_201 to i41
  %tmp_210 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_314, i23 %tmp_208)
  %tmp44 = xor i64 %tmp_210, %tmp_207
  %tmp_211 = xor i64 %tmp44, %tmp_204
  %tmp_213 = xor i64 %tmp_170, %tmp_145
  %tmp_214 = and i64 %tmp_201, %tmp_213
  %tmp_215 = xor i64 %tmp_214, %tmp_145
  %tmp_216 = or i7 %i_3, 5
  %tmp_217 = zext i7 %tmp_216 to i64
  %K_addr_5 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_217
  %K_load_5 = load i64* %K_addr_5, align 8
  %W_addr_11 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_217
  %W_load_9 = load i64* %W_addr_11, align 8
  %tmp45 = add i64 %K_load_5, %W_load_9
  %tmp46 = add i64 %tmp_211, %tmp_120
  %tmp47 = add i64 %tmp46, %tmp_215
  %t0_5 = add i64 %tmp47, %tmp45
  %tmp_218 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_202, i32 28, i32 63)
  %tmp_315 = trunc i64 %tmp_202 to i28
  %tmp_219 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_315, i36 %tmp_218)
  %tmp_220 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_202, i32 34, i32 63)
  %tmp_316 = trunc i64 %tmp_202 to i34
  %tmp_222 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_316, i30 %tmp_220)
  %tmp_223 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_202, i32 39, i32 63)
  %tmp_317 = trunc i64 %tmp_202 to i39
  %tmp_225 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_317, i25 %tmp_223)
  %tmp48 = xor i64 %tmp_225, %tmp_222
  %tmp_226 = xor i64 %tmp48, %tmp_219
  %tmp_228 = or i64 %tmp_202, %tmp_171
  %tmp_229 = and i64 %tmp_228, %tmp_146
  %tmp_230 = and i64 %tmp_202, %tmp_171
  %tmp_231 = or i64 %tmp_229, %tmp_230
  %tmp_232 = add i64 %tmp_121, %t0_5
  store i64 %tmp_232, i64* %S_addr_3, align 16
  %tmp49 = add i64 %tmp_226, %t0_5
  %tmp_233 = add i64 %tmp49, %tmp_231
  store i64 %tmp_233, i64* %S_addr_7, align 16
  %tmp_234 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_232, i32 14, i32 63)
  %tmp_318 = trunc i64 %tmp_232 to i14
  %tmp_235 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_318, i50 %tmp_234)
  %tmp_236 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_232, i32 18, i32 63)
  %tmp_319 = trunc i64 %tmp_232 to i18
  %tmp_238 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_319, i46 %tmp_236)
  %tmp_239 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_232, i32 41, i32 63)
  %tmp_320 = trunc i64 %tmp_232 to i41
  %tmp_241 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_320, i23 %tmp_239)
  %tmp50 = xor i64 %tmp_241, %tmp_238
  %tmp_242 = xor i64 %tmp50, %tmp_235
  %tmp_244 = xor i64 %tmp_201, %tmp_170
  %tmp_245 = and i64 %tmp_232, %tmp_244
  %tmp_246 = xor i64 %tmp_245, %tmp_170
  %tmp_247 = or i7 %i_3, 6
  %tmp_248 = zext i7 %tmp_247 to i64
  %K_addr_6 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_248
  %K_load_6 = load i64* %K_addr_6, align 16
  %W_addr_12 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_248
  %W_load_10 = load i64* %W_addr_12, align 16
  %tmp51 = add i64 %K_load_6, %W_load_10
  %tmp52 = add i64 %tmp_242, %tmp_145
  %tmp53 = add i64 %tmp52, %tmp_246
  %t0_6 = add i64 %tmp53, %tmp51
  %tmp_249 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_233, i32 28, i32 63)
  %tmp_321 = trunc i64 %tmp_233 to i28
  %tmp_250 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_321, i36 %tmp_249)
  %tmp_251 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_233, i32 34, i32 63)
  %tmp_322 = trunc i64 %tmp_233 to i34
  %tmp_253 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_322, i30 %tmp_251)
  %tmp_254 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_233, i32 39, i32 63)
  %tmp_323 = trunc i64 %tmp_233 to i39
  %tmp_256 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_323, i25 %tmp_254)
  %tmp54 = xor i64 %tmp_256, %tmp_253
  %tmp_257 = xor i64 %tmp54, %tmp_250
  %tmp_259 = or i64 %tmp_233, %tmp_202
  %tmp_260 = and i64 %tmp_259, %tmp_171
  %tmp_261 = and i64 %tmp_233, %tmp_202
  %tmp_262 = or i64 %tmp_260, %tmp_261
  %tmp_263 = add i64 %tmp_146, %t0_6
  store i64 %tmp_263, i64* %S_addr_4, align 8
  %tmp55 = add i64 %tmp_257, %t0_6
  %tmp_264 = add i64 %tmp55, %tmp_262
  store i64 %tmp_264, i64* %S_addr_6, align 8
  %tmp_265 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_263, i32 14, i32 63)
  %tmp_324 = trunc i64 %tmp_263 to i14
  %tmp_266 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_324, i50 %tmp_265)
  %tmp_267 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_263, i32 18, i32 63)
  %tmp_325 = trunc i64 %tmp_263 to i18
  %tmp_269 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_325, i46 %tmp_267)
  %tmp_270 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_263, i32 41, i32 63)
  %tmp_326 = trunc i64 %tmp_263 to i41
  %tmp_272 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_326, i23 %tmp_270)
  %tmp56 = xor i64 %tmp_272, %tmp_269
  %tmp_273 = xor i64 %tmp56, %tmp_266
  %tmp_275 = xor i64 %tmp_232, %tmp_201
  %tmp_276 = and i64 %tmp_263, %tmp_275
  %tmp_277 = xor i64 %tmp_276, %tmp_201
  %tmp_278 = or i7 %i_3, 7
  %tmp_279 = zext i7 %tmp_278 to i64
  %K_addr_7 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_279
  %K_load_7 = load i64* %K_addr_7, align 8
  %W_addr_13 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_279
  %W_load_11 = load i64* %W_addr_13, align 8
  %tmp57 = add i64 %K_load_7, %W_load_11
  %tmp58 = add i64 %tmp_273, %tmp_170
  %tmp59 = add i64 %tmp58, %tmp_277
  %t0_7 = add i64 %tmp59, %tmp57
  %tmp_280 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_264, i32 28, i32 63)
  %tmp_327 = trunc i64 %tmp_264 to i28
  %tmp_281 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_327, i36 %tmp_280)
  %tmp_282 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_264, i32 34, i32 63)
  %tmp_328 = trunc i64 %tmp_264 to i34
  %tmp_284 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_328, i30 %tmp_282)
  %tmp_285 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_264, i32 39, i32 63)
  %tmp_329 = trunc i64 %tmp_264 to i39
  %tmp_287 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_329, i25 %tmp_285)
  %tmp60 = xor i64 %tmp_287, %tmp_284
  %tmp_288 = xor i64 %tmp60, %tmp_281
  %tmp_290 = or i64 %tmp_264, %tmp_233
  %tmp_291 = and i64 %tmp_290, %tmp_202
  %tmp_292 = and i64 %tmp_264, %tmp_233
  %tmp_293 = or i64 %tmp_291, %tmp_292
  %tmp_294 = add i64 %tmp_171, %t0_7
  store i64 %tmp_294, i64* %S_addr_2, align 16
  %tmp61 = add i64 %tmp_288, %t0_7
  %tmp_295 = add i64 %tmp61, %tmp_293
  store i64 %tmp_295, i64* %S_addr_5, align 16
  %i_8 = add i7 8, %i_3
  br label %.preheader11

.preheader:                                       ; preds = %.preheader.preheader, %6
  %i_4 = phi i4 [ %i_9, %6 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i4 %i_4, -8
  %empty_32 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)
  %i_9 = add i4 %i_4, 1
  br i1 %exitcond, label %7, label %6

; <label>:6                                       ; preds = %.preheader
  %tmp_296 = zext i4 %i_4 to i64
  %md_state_addr_8 = getelementptr [8 x i64]* %md_state, i64 0, i64 %tmp_296
  %md_state_load_1 = load i64* %md_state_addr_8, align 8
  %S_addr_9 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 %tmp_296
  %S_load_8 = load i64* %S_addr_9, align 8
  %tmp_297 = add i64 %md_state_load_1, %S_load_8
  store i64 %tmp_297, i64* %md_state_addr_8, align 8
  br label %.preheader

; <label>:7                                       ; preds = %.preheader
  ret void
}

define internal fastcc void @sha512_compress_128.1([8 x i64]* nocapture %md_state, [128 x i8]* nocapture %buf_r, i64 %p_01_idx) {
  %p_01_idx_read = call i64 @_ssdm_op_Read.ap_auto.i64(i64 %p_01_idx)
  %S = alloca [8 x i64], align 16
  %W = alloca [80 x i64], align 16
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str8, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str210, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str311, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str412, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str513, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str614, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str715, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i4 [ 0, %0 ], [ %i_10, %2 ]
  %exitcond4 = icmp eq i4 %i, -8
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)
  %i_10 = add i4 %i, 1
  br i1 %exitcond4, label %.preheader13.preheader, label %2

.preheader13.preheader:                           ; preds = %1
  %tmp_337 = trunc i64 %p_01_idx_read to i9
  br label %.preheader13

; <label>:2                                       ; preds = %1
  %tmp = zext i4 %i to i64
  %md_state_addr = getelementptr [8 x i64]* %md_state, i64 0, i64 %tmp
  %md_state_load = load i64* %md_state_addr, align 8
  %S_addr = getelementptr inbounds [8 x i64]* %S, i64 0, i64 %tmp
  store i64 %md_state_load, i64* %S_addr, align 8
  br label %1

.preheader13:                                     ; preds = %3, %.preheader13.preheader
  %i_1 = phi i5 [ %i_11, %3 ], [ 0, %.preheader13.preheader ]
  %exitcond9 = icmp eq i5 %i_1, -16
  %empty_33 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)
  %i_11 = add i5 %i_1, 1
  br i1 %exitcond9, label %.preheader12.preheader, label %3

.preheader12.preheader:                           ; preds = %.preheader13
  br label %.preheader12

; <label>:3                                       ; preds = %.preheader13
  %tmp_340 = trunc i5 %i_1 to i4
  %tmp_s = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %tmp_340, i3 0)
  %tmp_409_cast = zext i7 %tmp_s to i9
  %sum = add i9 %tmp_337, %tmp_409_cast
  %sum_cast = zext i9 %sum to i64
  %buf_addr = getelementptr [128 x i8]* %buf_r, i64 0, i64 %sum_cast
  %buf_load = load i8* %buf_addr, align 1
  %p_sum1 = or i7 %tmp_s, 1
  %p_sum1_cast = zext i7 %p_sum1 to i9
  %sum2 = add i9 %tmp_337, %p_sum1_cast
  %sum2_cast = zext i9 %sum2 to i64
  %buf_addr_8 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %sum2_cast
  %buf_load_8 = load i8* %buf_addr_8, align 1
  %p_sum2 = or i7 %tmp_s, 2
  %p_sum2_cast = zext i7 %p_sum2 to i9
  %sum4 = add i9 %tmp_337, %p_sum2_cast
  %sum4_cast = zext i9 %sum4 to i64
  %buf_addr_9 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %sum4_cast
  %buf_load_9 = load i8* %buf_addr_9, align 1
  %p_sum3 = or i7 %tmp_s, 3
  %p_sum3_cast = zext i7 %p_sum3 to i9
  %sum6 = add i9 %tmp_337, %p_sum3_cast
  %sum6_cast = zext i9 %sum6 to i64
  %buf_addr_10 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %sum6_cast
  %buf_load_10 = load i8* %buf_addr_10, align 1
  %p_sum4 = or i7 %tmp_s, 4
  %p_sum4_cast = zext i7 %p_sum4 to i9
  %sum8 = add i9 %tmp_337, %p_sum4_cast
  %sum8_cast = zext i9 %sum8 to i64
  %buf_addr_11 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %sum8_cast
  %buf_load_11 = load i8* %buf_addr_11, align 1
  %p_sum5 = or i7 %tmp_s, 5
  %p_sum5_cast = zext i7 %p_sum5 to i9
  %sum7 = add i9 %tmp_337, %p_sum5_cast
  %sum7_cast = zext i9 %sum7 to i64
  %buf_addr_12 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %sum7_cast
  %buf_load_12 = load i8* %buf_addr_12, align 1
  %p_sum6 = or i7 %tmp_s, 6
  %p_sum6_cast = zext i7 %p_sum6 to i9
  %sum9 = add i9 %tmp_337, %p_sum6_cast
  %sum9_cast = zext i9 %sum9 to i64
  %buf_addr_13 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %sum9_cast
  %buf_load_13 = load i8* %buf_addr_13, align 1
  %p_sum7 = or i7 %tmp_s, 7
  %p_sum7_cast = zext i7 %p_sum7 to i9
  %sum1 = add i9 %tmp_337, %p_sum7_cast
  %sum1_cast = zext i9 %sum1 to i64
  %buf_addr_14 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %sum1_cast
  %buf_load_14 = load i8* %buf_addr_14, align 1
  %tmp_298 = call i64 @_ssdm_op_BitConcatenate.i64.i8.i8.i8.i8.i8.i8.i8.i8(i8 %buf_load, i8 %buf_load_8, i8 %buf_load_9, i8 %buf_load_10, i8 %buf_load_11, i8 %buf_load_12, i8 %buf_load_13, i8 %buf_load_14)
  %tmp_299 = zext i5 %i_1 to i64
  %W_addr = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_299
  store i64 %tmp_298, i64* %W_addr, align 8
  br label %.preheader13

.preheader12:                                     ; preds = %.preheader12.preheader, %4
  %i_2 = phi i7 [ %i_12, %4 ], [ 16, %.preheader12.preheader ]
  %exitcond8 = icmp eq i7 %i_2, -48
  %empty_34 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)
  br i1 %exitcond8, label %.preheader11.preheader, label %4

.preheader11.preheader:                           ; preds = %.preheader12
  %S_addr_10 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 7
  %S_addr_11 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 4
  %S_addr_12 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 6
  %S_addr_13 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 5
  %S_addr_14 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 0
  %S_addr_15 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 1
  %S_addr_16 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 2
  %S_addr_17 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 3
  br label %.preheader11

; <label>:4                                       ; preds = %.preheader12
  %tmp_300 = add i7 -2, %i_2
  %tmp_301 = zext i7 %tmp_300 to i64
  %W_addr_14 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_301
  %W_load = load i64* %W_addr_14, align 8
  %tmp_302 = call i45 @_ssdm_op_PartSelect.i45.i64.i32.i32(i64 %W_load, i32 19, i32 63)
  %tmp_343 = trunc i64 %W_load to i19
  %tmp_303 = call i64 @_ssdm_op_BitConcatenate.i64.i19.i45(i19 %tmp_343, i45 %tmp_302)
  %tmp_304 = call i3 @_ssdm_op_PartSelect.i3.i64.i32.i32(i64 %W_load, i32 61, i32 63)
  %tmp_353 = trunc i64 %W_load to i61
  %tmp_305 = call i64 @_ssdm_op_BitConcatenate.i64.i61.i3(i61 %tmp_353, i3 %tmp_304)
  %tmp_306 = call i58 @_ssdm_op_PartSelect.i58.i64.i32.i32(i64 %W_load, i32 6, i32 63)
  %tmp_293 = zext i58 %tmp_306 to i64
  %tmp6 = xor i64 %tmp_293, %tmp_305
  %tmp_307 = xor i64 %tmp6, %tmp_303
  %tmp_308 = add i7 -7, %i_2
  %tmp_309 = zext i7 %tmp_308 to i64
  %W_addr_15 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_309
  %W_load_12 = load i64* %W_addr_15, align 8
  %tmp_310 = add i7 -15, %i_2
  %tmp_311 = zext i7 %tmp_310 to i64
  %W_addr_16 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_311
  %W_load_13 = load i64* %W_addr_16, align 8
  %tmp_312 = call i63 @_ssdm_op_PartSelect.i63.i64.i32.i32(i64 %W_load_13, i32 1, i32 63)
  %tmp_356 = trunc i64 %W_load_13 to i1
  %tmp_313 = call i64 @_ssdm_op_BitConcatenate.i64.i1.i63(i1 %tmp_356, i63 %tmp_312)
  %tmp_314 = call i56 @_ssdm_op_PartSelect.i56.i64.i32.i32(i64 %W_load_13, i32 8, i32 63)
  %tmp_359 = trunc i64 %W_load_13 to i8
  %tmp_315 = call i64 @_ssdm_op_BitConcatenate.i64.i8.i56(i8 %tmp_359, i56 %tmp_314)
  %tmp_316 = call i57 @_ssdm_op_PartSelect.i57.i64.i32.i32(i64 %W_load_13, i32 7, i32 63)
  %tmp_296 = zext i57 %tmp_316 to i64
  %tmp7 = xor i64 %tmp_296, %tmp_315
  %tmp_317 = xor i64 %tmp7, %tmp_313
  %tmp_318 = add i7 -16, %i_2
  %tmp_319 = zext i7 %tmp_318 to i64
  %W_addr_17 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_319
  %W_load_14 = load i64* %W_addr_17, align 8
  %tmp8 = add i64 %W_load_12, %W_load_14
  %tmp9 = add i64 %tmp_307, %tmp_317
  %tmp_320 = add i64 %tmp9, %tmp8
  %tmp_321 = zext i7 %i_2 to i64
  %W_addr_18 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_321
  store i64 %tmp_320, i64* %W_addr_18, align 8
  %i_12 = add i7 1, %i_2
  br label %.preheader12

.preheader11:                                     ; preds = %5, %.preheader11.preheader
  %i_3 = phi i7 [ %i_13, %5 ], [ 0, %.preheader11.preheader ]
  %tmp_322 = icmp ult i7 %i_3, -48
  %empty_35 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 10, i64 10, i64 10)
  br i1 %tmp_322, label %5, label %.preheader.preheader

.preheader.preheader:                             ; preds = %.preheader11
  br label %.preheader

; <label>:5                                       ; preds = %.preheader11
  %S_load = load i64* %S_addr_10, align 8
  %S_load_9 = load i64* %S_addr_11, align 16
  %tmp_323 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %S_load_9, i32 14, i32 63)
  %tmp_368 = trunc i64 %S_load_9 to i14
  %tmp_324 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_368, i50 %tmp_323)
  %tmp_325 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %S_load_9, i32 18, i32 63)
  %tmp_371 = trunc i64 %S_load_9 to i18
  %tmp_326 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_371, i46 %tmp_325)
  %tmp_327 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %S_load_9, i32 41, i32 63)
  %tmp_374 = trunc i64 %S_load_9 to i41
  %tmp_328 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_374, i23 %tmp_327)
  %tmp10 = xor i64 %tmp_328, %tmp_326
  %tmp_329 = xor i64 %tmp10, %tmp_324
  %S_load_10 = load i64* %S_addr_12, align 16
  %S_load_11 = load i64* %S_addr_13, align 8
  %tmp_330 = xor i64 %S_load_11, %S_load_10
  %tmp_331 = and i64 %S_load_9, %tmp_330
  %tmp_332 = xor i64 %S_load_10, %tmp_331
  %tmp_333 = zext i7 %i_3 to i64
  %K_addr = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_333
  %K_load = load i64* %K_addr, align 16
  %W_addr_19 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_333
  %W_load_15 = load i64* %W_addr_19, align 16
  %tmp13 = add i64 %K_load, %S_load
  %tmp15 = add i64 %tmp_329, %tmp_332
  %tmp14 = add i64 %tmp15, %W_load_15
  %t0 = add i64 %tmp14, %tmp13
  %S_load_12 = load i64* %S_addr_14, align 16
  %tmp_334 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %S_load_12, i32 28, i32 63)
  %tmp_384 = trunc i64 %S_load_12 to i28
  %tmp_335 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_384, i36 %tmp_334)
  %tmp_336 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %S_load_12, i32 34, i32 63)
  %tmp_387 = trunc i64 %S_load_12 to i34
  %tmp_338 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_387, i30 %tmp_336)
  %tmp_339 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %S_load_12, i32 39, i32 63)
  %tmp_390 = trunc i64 %S_load_12 to i39
  %tmp_341 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_390, i25 %tmp_339)
  %tmp16 = xor i64 %tmp_341, %tmp_338
  %tmp_342 = xor i64 %tmp16, %tmp_335
  %S_load_13 = load i64* %S_addr_15, align 8
  %tmp_344 = or i64 %S_load_13, %S_load_12
  %S_load_14 = load i64* %S_addr_16, align 16
  %tmp_345 = and i64 %S_load_14, %tmp_344
  %tmp_346 = and i64 %S_load_13, %S_load_12
  %tmp_347 = or i64 %tmp_345, %tmp_346
  %S_load_15 = load i64* %S_addr_17, align 8
  %tmp_348 = add i64 %S_load_15, %t0
  %tmp17 = add i64 %tmp_342, %tmp_347
  %tmp_349 = add i64 %tmp17, %t0
  %tmp_350 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_348, i32 14, i32 63)
  %tmp_399 = trunc i64 %tmp_348 to i14
  %tmp_351 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_399, i50 %tmp_350)
  %tmp_352 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_348, i32 18, i32 63)
  %tmp_402 = trunc i64 %tmp_348 to i18
  %tmp_354 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_402, i46 %tmp_352)
  %tmp_355 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_348, i32 41, i32 63)
  %tmp_405 = trunc i64 %tmp_348 to i41
  %tmp_357 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_405, i23 %tmp_355)
  %tmp18 = xor i64 %tmp_357, %tmp_354
  %tmp_358 = xor i64 %tmp18, %tmp_351
  %tmp_360 = xor i64 %S_load_11, %S_load_9
  %tmp_361 = and i64 %tmp_348, %tmp_360
  %tmp_362 = xor i64 %S_load_11, %tmp_361
  %tmp_363 = or i7 %i_3, 1
  %tmp_364 = zext i7 %tmp_363 to i64
  %K_addr_8 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_364
  %K_load_8 = load i64* %K_addr_8, align 8
  %W_addr_20 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_364
  %W_load_16 = load i64* %W_addr_20, align 8
  %tmp21 = add i64 %K_load_8, %S_load_10
  %tmp23 = add i64 %tmp_362, %tmp_358
  %tmp22 = add i64 %tmp23, %W_load_16
  %t0_8 = add i64 %tmp22, %tmp21
  %tmp_365 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_349, i32 28, i32 63)
  %tmp_415 = trunc i64 %tmp_349 to i28
  %tmp_366 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_415, i36 %tmp_365)
  %tmp_367 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_349, i32 34, i32 63)
  %tmp_418 = trunc i64 %tmp_349 to i34
  %tmp_369 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_418, i30 %tmp_367)
  %tmp_370 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_349, i32 39, i32 63)
  %tmp_421 = trunc i64 %tmp_349 to i39
  %tmp_372 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_421, i25 %tmp_370)
  %tmp24 = xor i64 %tmp_372, %tmp_369
  %tmp_373 = xor i64 %tmp24, %tmp_366
  %tmp_375 = or i64 %S_load_12, %tmp_349
  %tmp_376 = and i64 %S_load_13, %tmp_375
  %tmp_377 = and i64 %S_load_12, %tmp_349
  %tmp_378 = or i64 %tmp_376, %tmp_377
  %tmp_379 = add i64 %S_load_14, %t0_8
  %tmp25 = add i64 %tmp_373, %t0_8
  %tmp_380 = add i64 %tmp25, %tmp_378
  %tmp_381 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_379, i32 14, i32 63)
  %tmp_430 = trunc i64 %tmp_379 to i14
  %tmp_382 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_430, i50 %tmp_381)
  %tmp_383 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_379, i32 18, i32 63)
  %tmp_433 = trunc i64 %tmp_379 to i18
  %tmp_385 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_433, i46 %tmp_383)
  %tmp_386 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_379, i32 41, i32 63)
  %tmp_436 = trunc i64 %tmp_379 to i41
  %tmp_388 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_436, i23 %tmp_386)
  %tmp26 = xor i64 %tmp_388, %tmp_385
  %tmp_389 = xor i64 %tmp26, %tmp_382
  %tmp_391 = xor i64 %S_load_9, %tmp_348
  %tmp_392 = and i64 %tmp_379, %tmp_391
  %tmp_393 = xor i64 %S_load_9, %tmp_392
  %tmp_394 = or i7 %i_3, 2
  %tmp_395 = zext i7 %tmp_394 to i64
  %K_addr_9 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_395
  %K_load_9 = load i64* %K_addr_9, align 16
  %W_addr_21 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_395
  %W_load_17 = load i64* %W_addr_21, align 16
  %tmp29 = add i64 %K_load_9, %S_load_11
  %tmp31 = add i64 %tmp_393, %tmp_389
  %tmp30 = add i64 %tmp31, %W_load_17
  %t0_9 = add i64 %tmp30, %tmp29
  %tmp_396 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_380, i32 28, i32 63)
  %tmp_446 = trunc i64 %tmp_380 to i28
  %tmp_397 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_446, i36 %tmp_396)
  %tmp_398 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_380, i32 34, i32 63)
  %tmp_449 = trunc i64 %tmp_380 to i34
  %tmp_400 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_449, i30 %tmp_398)
  %tmp_401 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_380, i32 39, i32 63)
  %tmp_452 = trunc i64 %tmp_380 to i39
  %tmp_403 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_452, i25 %tmp_401)
  %tmp32 = xor i64 %tmp_403, %tmp_400
  %tmp_404 = xor i64 %tmp32, %tmp_397
  %tmp_406 = or i64 %tmp_380, %tmp_349
  %tmp_407 = and i64 %S_load_12, %tmp_406
  %tmp_408 = and i64 %tmp_380, %tmp_349
  %tmp_409 = or i64 %tmp_407, %tmp_408
  %tmp_410 = add i64 %S_load_13, %t0_9
  %tmp33 = add i64 %tmp_404, %t0_9
  %tmp_411 = add i64 %tmp33, %tmp_409
  %tmp_412 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_410, i32 14, i32 63)
  %tmp_461 = trunc i64 %tmp_410 to i14
  %tmp_413 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_461, i50 %tmp_412)
  %tmp_414 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_410, i32 18, i32 63)
  %tmp_464 = trunc i64 %tmp_410 to i18
  %tmp_416 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_464, i46 %tmp_414)
  %tmp_417 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_410, i32 41, i32 63)
  %tmp_467 = trunc i64 %tmp_410 to i41
  %tmp_419 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_467, i23 %tmp_417)
  %tmp34 = xor i64 %tmp_419, %tmp_416
  %tmp_420 = xor i64 %tmp34, %tmp_413
  %tmp_422 = xor i64 %tmp_379, %tmp_348
  %tmp_423 = and i64 %tmp_410, %tmp_422
  %tmp_424 = xor i64 %tmp_423, %tmp_348
  %tmp_425 = or i7 %i_3, 3
  %tmp_426 = zext i7 %tmp_425 to i64
  %K_addr_10 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_426
  %K_load_10 = load i64* %K_addr_10, align 8
  %W_addr_22 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_426
  %W_load_18 = load i64* %W_addr_22, align 8
  %tmp37 = add i64 %K_load_10, %S_load_9
  %tmp39 = add i64 %tmp_424, %tmp_420
  %tmp38 = add i64 %tmp39, %W_load_18
  %t0_10 = add i64 %tmp38, %tmp37
  %tmp_427 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_411, i32 28, i32 63)
  %tmp_477 = trunc i64 %tmp_411 to i28
  %tmp_428 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_477, i36 %tmp_427)
  %tmp_429 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_411, i32 34, i32 63)
  %tmp_480 = trunc i64 %tmp_411 to i34
  %tmp_431 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_480, i30 %tmp_429)
  %tmp_432 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_411, i32 39, i32 63)
  %tmp_483 = trunc i64 %tmp_411 to i39
  %tmp_434 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_483, i25 %tmp_432)
  %tmp40 = xor i64 %tmp_434, %tmp_431
  %tmp_435 = xor i64 %tmp40, %tmp_428
  %tmp_437 = or i64 %tmp_411, %tmp_380
  %tmp_438 = and i64 %tmp_437, %tmp_349
  %tmp_439 = and i64 %tmp_411, %tmp_380
  %tmp_440 = or i64 %tmp_438, %tmp_439
  %tmp_441 = add i64 %S_load_12, %t0_10
  %tmp41 = add i64 %tmp_435, %t0_10
  %tmp_442 = add i64 %tmp41, %tmp_440
  %tmp_443 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_441, i32 14, i32 63)
  %tmp_492 = trunc i64 %tmp_441 to i14
  %tmp_444 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_492, i50 %tmp_443)
  %tmp_445 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_441, i32 18, i32 63)
  %tmp_495 = trunc i64 %tmp_441 to i18
  %tmp_447 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_495, i46 %tmp_445)
  %tmp_448 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_441, i32 41, i32 63)
  %tmp_498 = trunc i64 %tmp_441 to i41
  %tmp_450 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_498, i23 %tmp_448)
  %tmp42 = xor i64 %tmp_450, %tmp_447
  %tmp_451 = xor i64 %tmp42, %tmp_444
  %tmp_453 = xor i64 %tmp_410, %tmp_379
  %tmp_454 = and i64 %tmp_441, %tmp_453
  %tmp_455 = xor i64 %tmp_454, %tmp_379
  %tmp_456 = or i7 %i_3, 4
  %tmp_457 = zext i7 %tmp_456 to i64
  %K_addr_11 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_457
  %K_load_11 = load i64* %K_addr_11, align 16
  %W_addr_23 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_457
  %W_load_19 = load i64* %W_addr_23, align 16
  %tmp45 = add i64 %K_load_11, %W_load_19
  %tmp47 = add i64 %tmp_451, %tmp_348
  %tmp46 = add i64 %tmp47, %tmp_455
  %t0_11 = add i64 %tmp46, %tmp45
  %tmp_458 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_442, i32 28, i32 63)
  %tmp_508 = trunc i64 %tmp_442 to i28
  %tmp_459 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_508, i36 %tmp_458)
  %tmp_460 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_442, i32 34, i32 63)
  %tmp_511 = trunc i64 %tmp_442 to i34
  %tmp_462 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_511, i30 %tmp_460)
  %tmp_463 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_442, i32 39, i32 63)
  %tmp_514 = trunc i64 %tmp_442 to i39
  %tmp_465 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_514, i25 %tmp_463)
  %tmp48 = xor i64 %tmp_465, %tmp_462
  %tmp_466 = xor i64 %tmp48, %tmp_459
  %tmp_468 = or i64 %tmp_442, %tmp_411
  %tmp_469 = and i64 %tmp_468, %tmp_380
  %tmp_470 = and i64 %tmp_442, %tmp_411
  %tmp_471 = or i64 %tmp_469, %tmp_470
  %tmp_472 = add i64 %tmp_349, %t0_11
  store i64 %tmp_472, i64* %S_addr_10, align 8
  %tmp49 = add i64 %tmp_466, %t0_11
  %tmp_473 = add i64 %tmp49, %tmp_471
  store i64 %tmp_473, i64* %S_addr_17, align 8
  %tmp_474 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_472, i32 14, i32 63)
  %tmp_523 = trunc i64 %tmp_472 to i14
  %tmp_475 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_523, i50 %tmp_474)
  %tmp_476 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_472, i32 18, i32 63)
  %tmp_526 = trunc i64 %tmp_472 to i18
  %tmp_478 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_526, i46 %tmp_476)
  %tmp_479 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_472, i32 41, i32 63)
  %tmp_529 = trunc i64 %tmp_472 to i41
  %tmp_481 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_529, i23 %tmp_479)
  %tmp50 = xor i64 %tmp_481, %tmp_478
  %tmp_482 = xor i64 %tmp50, %tmp_475
  %tmp_484 = xor i64 %tmp_441, %tmp_410
  %tmp_485 = and i64 %tmp_472, %tmp_484
  %tmp_486 = xor i64 %tmp_485, %tmp_410
  %tmp_487 = or i7 %i_3, 5
  %tmp_488 = zext i7 %tmp_487 to i64
  %K_addr_12 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_488
  %K_load_12 = load i64* %K_addr_12, align 8
  %W_addr_24 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_488
  %W_load_20 = load i64* %W_addr_24, align 8
  %tmp53 = add i64 %K_load_12, %W_load_20
  %tmp55 = add i64 %tmp_482, %tmp_379
  %tmp54 = add i64 %tmp55, %tmp_486
  %t0_12 = add i64 %tmp54, %tmp53
  %tmp_489 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_473, i32 28, i32 63)
  %tmp_539 = trunc i64 %tmp_473 to i28
  %tmp_490 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_539, i36 %tmp_489)
  %tmp_491 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_473, i32 34, i32 63)
  %tmp_542 = trunc i64 %tmp_473 to i34
  %tmp_493 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_542, i30 %tmp_491)
  %tmp_494 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_473, i32 39, i32 63)
  %tmp_545 = trunc i64 %tmp_473 to i39
  %tmp_496 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_545, i25 %tmp_494)
  %tmp56 = xor i64 %tmp_496, %tmp_493
  %tmp_497 = xor i64 %tmp56, %tmp_490
  %tmp_499 = or i64 %tmp_473, %tmp_442
  %tmp_500 = and i64 %tmp_499, %tmp_411
  %tmp_501 = and i64 %tmp_473, %tmp_442
  %tmp_502 = or i64 %tmp_500, %tmp_501
  %tmp_503 = add i64 %tmp_380, %t0_12
  store i64 %tmp_503, i64* %S_addr_12, align 16
  %tmp57 = add i64 %tmp_497, %t0_12
  %tmp_504 = add i64 %tmp57, %tmp_502
  store i64 %tmp_504, i64* %S_addr_16, align 16
  %tmp_505 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_503, i32 14, i32 63)
  %tmp_554 = trunc i64 %tmp_503 to i14
  %tmp_506 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_554, i50 %tmp_505)
  %tmp_507 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_503, i32 18, i32 63)
  %tmp_557 = trunc i64 %tmp_503 to i18
  %tmp_509 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_557, i46 %tmp_507)
  %tmp_510 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_503, i32 41, i32 63)
  %tmp_560 = trunc i64 %tmp_503 to i41
  %tmp_512 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_560, i23 %tmp_510)
  %tmp58 = xor i64 %tmp_512, %tmp_509
  %tmp_513 = xor i64 %tmp58, %tmp_506
  %tmp_515 = xor i64 %tmp_472, %tmp_441
  %tmp_516 = and i64 %tmp_503, %tmp_515
  %tmp_517 = xor i64 %tmp_516, %tmp_441
  %tmp_518 = or i7 %i_3, 6
  %tmp_519 = zext i7 %tmp_518 to i64
  %K_addr_13 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_519
  %K_load_13 = load i64* %K_addr_13, align 16
  %W_addr_25 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_519
  %W_load_21 = load i64* %W_addr_25, align 16
  %tmp61 = add i64 %K_load_13, %W_load_21
  %tmp63 = add i64 %tmp_513, %tmp_410
  %tmp62 = add i64 %tmp63, %tmp_517
  %t0_13 = add i64 %tmp62, %tmp61
  %tmp_520 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_504, i32 28, i32 63)
  %tmp_571 = trunc i64 %tmp_504 to i28
  %tmp_521 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_571, i36 %tmp_520)
  %tmp_522 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_504, i32 34, i32 63)
  %tmp_572 = trunc i64 %tmp_504 to i34
  %tmp_524 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_572, i30 %tmp_522)
  %tmp_525 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_504, i32 39, i32 63)
  %tmp_573 = trunc i64 %tmp_504 to i39
  %tmp_527 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_573, i25 %tmp_525)
  %tmp64 = xor i64 %tmp_527, %tmp_524
  %tmp_528 = xor i64 %tmp64, %tmp_521
  %tmp_530 = or i64 %tmp_504, %tmp_473
  %tmp_531 = and i64 %tmp_530, %tmp_442
  %tmp_532 = and i64 %tmp_504, %tmp_473
  %tmp_533 = or i64 %tmp_531, %tmp_532
  %tmp_534 = add i64 %tmp_411, %t0_13
  store i64 %tmp_534, i64* %S_addr_13, align 8
  %tmp65 = add i64 %tmp_528, %t0_13
  %tmp_535 = add i64 %tmp65, %tmp_533
  store i64 %tmp_535, i64* %S_addr_15, align 8
  %tmp_536 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_534, i32 14, i32 63)
  %tmp_574 = trunc i64 %tmp_534 to i14
  %tmp_537 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_574, i50 %tmp_536)
  %tmp_538 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_534, i32 18, i32 63)
  %tmp_575 = trunc i64 %tmp_534 to i18
  %tmp_540 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_575, i46 %tmp_538)
  %tmp_541 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_534, i32 41, i32 63)
  %tmp_576 = trunc i64 %tmp_534 to i41
  %tmp_543 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_576, i23 %tmp_541)
  %tmp66 = xor i64 %tmp_543, %tmp_540
  %tmp_544 = xor i64 %tmp66, %tmp_537
  %tmp_546 = xor i64 %tmp_503, %tmp_472
  %tmp_547 = and i64 %tmp_534, %tmp_546
  %tmp_548 = xor i64 %tmp_547, %tmp_472
  %tmp_549 = or i7 %i_3, 7
  %tmp_550 = zext i7 %tmp_549 to i64
  %K_addr_14 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_550
  %K_load_14 = load i64* %K_addr_14, align 8
  %W_addr_26 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_550
  %W_load_22 = load i64* %W_addr_26, align 8
  %tmp67 = add i64 %K_load_14, %W_load_22
  %tmp68 = add i64 %tmp_544, %tmp_441
  %tmp69 = add i64 %tmp68, %tmp_548
  %t0_14 = add i64 %tmp69, %tmp67
  %tmp_551 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_535, i32 28, i32 63)
  %tmp_577 = trunc i64 %tmp_535 to i28
  %tmp_552 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_577, i36 %tmp_551)
  %tmp_553 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_535, i32 34, i32 63)
  %tmp_578 = trunc i64 %tmp_535 to i34
  %tmp_555 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_578, i30 %tmp_553)
  %tmp_556 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_535, i32 39, i32 63)
  %tmp_579 = trunc i64 %tmp_535 to i39
  %tmp_558 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_579, i25 %tmp_556)
  %tmp70 = xor i64 %tmp_558, %tmp_555
  %tmp_559 = xor i64 %tmp70, %tmp_552
  %tmp_561 = or i64 %tmp_535, %tmp_504
  %tmp_562 = and i64 %tmp_561, %tmp_473
  %tmp_563 = and i64 %tmp_535, %tmp_504
  %tmp_564 = or i64 %tmp_562, %tmp_563
  %tmp_565 = add i64 %tmp_442, %t0_14
  store i64 %tmp_565, i64* %S_addr_11, align 16
  %tmp71 = add i64 %tmp_559, %t0_14
  %tmp_566 = add i64 %tmp71, %tmp_564
  store i64 %tmp_566, i64* %S_addr_14, align 16
  %i_13 = add i7 8, %i_3
  br label %.preheader11

.preheader:                                       ; preds = %.preheader.preheader, %6
  %i_4 = phi i4 [ %i_14, %6 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i4 %i_4, -8
  %empty_36 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)
  %i_14 = add i4 %i_4, 1
  br i1 %exitcond, label %7, label %6

; <label>:6                                       ; preds = %.preheader
  %tmp_567 = zext i4 %i_4 to i64
  %md_state_addr_9 = getelementptr [8 x i64]* %md_state, i64 0, i64 %tmp_567
  %md_state_load_2 = load i64* %md_state_addr_9, align 8
  %S_addr_18 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 %tmp_567
  %S_load_16 = load i64* %S_addr_18, align 8
  %tmp_568 = add i64 %md_state_load_2, %S_load_16
  store i64 %tmp_568, i64* %md_state_addr_9, align 8
  br label %.preheader

; <label>:7                                       ; preds = %.preheader
  ret void
}

define internal fastcc void @sha512_compress_128([8 x i64]* nocapture %md_state, [128 x i8]* nocapture %buf_r) {
  %S = alloca [8 x i64], align 16
  %W = alloca [80 x i64], align 16
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str8, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str210, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str311, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str412, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str513, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str614, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str715, [1 x i8]* @p_str19, [1 x i8]* @p_str19, [1 x i8]* @p_str19) nounwind
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i4 [ 0, %0 ], [ %i_15, %2 ]
  %exitcond4 = icmp eq i4 %i, -8
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)
  %i_15 = add i4 %i, 1
  br i1 %exitcond4, label %.preheader13.preheader, label %2

.preheader13.preheader:                           ; preds = %1
  br label %.preheader13

; <label>:2                                       ; preds = %1
  %tmp = zext i4 %i to i64
  %md_state_addr = getelementptr [8 x i64]* %md_state, i64 0, i64 %tmp
  %md_state_load = load i64* %md_state_addr, align 8
  %S_addr = getelementptr inbounds [8 x i64]* %S, i64 0, i64 %tmp
  store i64 %md_state_load, i64* %S_addr, align 8
  br label %1

.preheader13:                                     ; preds = %.preheader13.preheader, %3
  %i_1 = phi i5 [ %i_16, %3 ], [ 0, %.preheader13.preheader ]
  %exitcond9 = icmp eq i5 %i_1, -16
  %empty_37 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)
  %i_16 = add i5 %i_1, 1
  br i1 %exitcond9, label %.preheader12.preheader, label %3

.preheader12.preheader:                           ; preds = %.preheader13
  br label %.preheader12

; <label>:3                                       ; preds = %.preheader13
  %tmp_580 = trunc i5 %i_1 to i4
  %tmp_s = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %tmp_580, i3 0)
  %tmp_411 = zext i7 %tmp_s to i64
  %buf_addr = getelementptr [128 x i8]* %buf_r, i64 0, i64 %tmp_411
  %buf_load = load i8* %buf_addr, align 1
  %p_sum1 = or i7 %tmp_s, 1
  %p_sum1_cast = zext i7 %p_sum1 to i64
  %buf_addr_15 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %p_sum1_cast
  %buf_load_8 = load i8* %buf_addr_15, align 1
  %p_sum2 = or i7 %tmp_s, 2
  %p_sum2_cast = zext i7 %p_sum2 to i64
  %buf_addr_16 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %p_sum2_cast
  %buf_load_9 = load i8* %buf_addr_16, align 1
  %p_sum3 = or i7 %tmp_s, 3
  %p_sum3_cast = zext i7 %p_sum3 to i64
  %buf_addr_17 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %p_sum3_cast
  %buf_load_10 = load i8* %buf_addr_17, align 1
  %p_sum4 = or i7 %tmp_s, 4
  %p_sum4_cast = zext i7 %p_sum4 to i64
  %buf_addr_18 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %p_sum4_cast
  %buf_load_11 = load i8* %buf_addr_18, align 1
  %p_sum5 = or i7 %tmp_s, 5
  %p_sum5_cast = zext i7 %p_sum5 to i64
  %buf_addr_19 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %p_sum5_cast
  %buf_load_12 = load i8* %buf_addr_19, align 1
  %p_sum6 = or i7 %tmp_s, 6
  %p_sum6_cast = zext i7 %p_sum6 to i64
  %buf_addr_20 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %p_sum6_cast
  %buf_load_13 = load i8* %buf_addr_20, align 1
  %p_sum7 = or i7 %tmp_s, 7
  %p_sum7_cast = zext i7 %p_sum7 to i64
  %buf_addr_21 = getelementptr [128 x i8]* %buf_r, i64 0, i64 %p_sum7_cast
  %buf_load_14 = load i8* %buf_addr_21, align 1
  %tmp_433 = call i64 @_ssdm_op_BitConcatenate.i64.i8.i8.i8.i8.i8.i8.i8.i8(i8 %buf_load, i8 %buf_load_8, i8 %buf_load_9, i8 %buf_load_10, i8 %buf_load_11, i8 %buf_load_12, i8 %buf_load_13, i8 %buf_load_14)
  %tmp_434 = zext i5 %i_1 to i64
  %W_addr = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_434
  store i64 %tmp_433, i64* %W_addr, align 8
  br label %.preheader13

.preheader12:                                     ; preds = %.preheader12.preheader, %4
  %i_2 = phi i7 [ %i_17, %4 ], [ 16, %.preheader12.preheader ]
  %exitcond8 = icmp eq i7 %i_2, -48
  %empty_38 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)
  br i1 %exitcond8, label %.preheader11.preheader, label %4

.preheader11.preheader:                           ; preds = %.preheader12
  %S_addr_10 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 7
  %S_addr_11 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 4
  %S_addr_12 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 6
  %S_addr_13 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 5
  %S_addr_14 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 0
  %S_addr_15 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 1
  %S_addr_16 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 2
  %S_addr_17 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 3
  br label %.preheader11

; <label>:4                                       ; preds = %.preheader12
  %tmp_435 = add i7 -2, %i_2
  %tmp_436 = zext i7 %tmp_435 to i64
  %W_addr_14 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_436
  %W_load = load i64* %W_addr_14, align 8
  %tmp_437 = call i45 @_ssdm_op_PartSelect.i45.i64.i32.i32(i64 %W_load, i32 19, i32 63)
  %tmp_582 = trunc i64 %W_load to i19
  %tmp_439 = call i64 @_ssdm_op_BitConcatenate.i64.i19.i45(i19 %tmp_582, i45 %tmp_437)
  %tmp_440 = call i3 @_ssdm_op_PartSelect.i3.i64.i32.i32(i64 %W_load, i32 61, i32 63)
  %tmp_590 = trunc i64 %W_load to i61
  %tmp_442 = call i64 @_ssdm_op_BitConcatenate.i64.i61.i3(i61 %tmp_590, i3 %tmp_440)
  %tmp_443 = call i58 @_ssdm_op_PartSelect.i58.i64.i32.i32(i64 %W_load, i32 6, i32 63)
  %tmp_574 = zext i58 %tmp_443 to i64
  %tmp6 = xor i64 %tmp_574, %tmp_442
  %tmp_445 = xor i64 %tmp6, %tmp_439
  %tmp_446 = add i7 -7, %i_2
  %tmp_447 = zext i7 %tmp_446 to i64
  %W_addr_15 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_447
  %W_load_12 = load i64* %W_addr_15, align 8
  %tmp_448 = add i7 -15, %i_2
  %tmp_449 = zext i7 %tmp_448 to i64
  %W_addr_16 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_449
  %W_load_13 = load i64* %W_addr_16, align 8
  %tmp_450 = call i63 @_ssdm_op_PartSelect.i63.i64.i32.i32(i64 %W_load_13, i32 1, i32 63)
  %tmp_591 = trunc i64 %W_load_13 to i1
  %tmp_452 = call i64 @_ssdm_op_BitConcatenate.i64.i1.i63(i1 %tmp_591, i63 %tmp_450)
  %tmp_453 = call i56 @_ssdm_op_PartSelect.i56.i64.i32.i32(i64 %W_load_13, i32 8, i32 63)
  %tmp_593 = trunc i64 %W_load_13 to i8
  %tmp_455 = call i64 @_ssdm_op_BitConcatenate.i64.i8.i56(i8 %tmp_593, i56 %tmp_453)
  %tmp_456 = call i57 @_ssdm_op_PartSelect.i57.i64.i32.i32(i64 %W_load_13, i32 7, i32 63)
  %tmp_577 = zext i57 %tmp_456 to i64
  %tmp7 = xor i64 %tmp_577, %tmp_455
  %tmp_458 = xor i64 %tmp7, %tmp_452
  %tmp_459 = add i7 -16, %i_2
  %tmp_460 = zext i7 %tmp_459 to i64
  %W_addr_17 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_460
  %W_load_14 = load i64* %W_addr_17, align 8
  %tmp8 = add i64 %W_load_12, %W_load_14
  %tmp9 = add i64 %tmp_445, %tmp_458
  %tmp_463 = add i64 %tmp9, %tmp8
  %tmp_464 = zext i7 %i_2 to i64
  %W_addr_18 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_464
  store i64 %tmp_463, i64* %W_addr_18, align 8
  %i_17 = add i7 1, %i_2
  br label %.preheader12

.preheader11:                                     ; preds = %5, %.preheader11.preheader
  %i_3 = phi i7 [ %i_18, %5 ], [ 0, %.preheader11.preheader ]
  %tmp_465 = icmp ult i7 %i_3, -48
  %empty_39 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 10, i64 10, i64 10)
  br i1 %tmp_465, label %5, label %.preheader.preheader

.preheader.preheader:                             ; preds = %.preheader11
  br label %.preheader

; <label>:5                                       ; preds = %.preheader11
  %S_load = load i64* %S_addr_10, align 8
  %S_load_9 = load i64* %S_addr_11, align 16
  %tmp_466 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %S_load_9, i32 14, i32 63)
  %tmp_596 = trunc i64 %S_load_9 to i14
  %tmp_468 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_596, i50 %tmp_466)
  %tmp_469 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %S_load_9, i32 18, i32 63)
  %tmp_599 = trunc i64 %S_load_9 to i18
  %tmp_471 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_599, i46 %tmp_469)
  %tmp_472 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %S_load_9, i32 41, i32 63)
  %tmp_601 = trunc i64 %S_load_9 to i41
  %tmp_474 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_601, i23 %tmp_472)
  %tmp10 = xor i64 %tmp_474, %tmp_471
  %tmp_476 = xor i64 %tmp10, %tmp_468
  %S_load_10 = load i64* %S_addr_12, align 16
  %S_load_11 = load i64* %S_addr_13, align 8
  %tmp_477 = xor i64 %S_load_11, %S_load_10
  %tmp_478 = and i64 %S_load_9, %tmp_477
  %tmp_479 = xor i64 %S_load_10, %tmp_478
  %tmp_480 = zext i7 %i_3 to i64
  %K_addr = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_480
  %K_load = load i64* %K_addr, align 16
  %W_addr_19 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_480
  %W_load_15 = load i64* %W_addr_19, align 16
  %tmp13 = add i64 %K_load, %S_load
  %tmp15 = add i64 %tmp_476, %tmp_479
  %tmp14 = add i64 %tmp15, %W_load_15
  %t0 = add i64 %tmp14, %tmp13
  %S_load_12 = load i64* %S_addr_14, align 16
  %tmp_484 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %S_load_12, i32 28, i32 63)
  %tmp_610 = trunc i64 %S_load_12 to i28
  %tmp_486 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_610, i36 %tmp_484)
  %tmp_487 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %S_load_12, i32 34, i32 63)
  %tmp_613 = trunc i64 %S_load_12 to i34
  %tmp_489 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_613, i30 %tmp_487)
  %tmp_490 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %S_load_12, i32 39, i32 63)
  %tmp_616 = trunc i64 %S_load_12 to i39
  %tmp_492 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_616, i25 %tmp_490)
  %tmp16 = xor i64 %tmp_492, %tmp_489
  %tmp_494 = xor i64 %tmp16, %tmp_486
  %S_load_13 = load i64* %S_addr_15, align 8
  %tmp_495 = or i64 %S_load_13, %S_load_12
  %S_load_14 = load i64* %S_addr_16, align 16
  %tmp_496 = and i64 %S_load_14, %tmp_495
  %tmp_497 = and i64 %S_load_13, %S_load_12
  %tmp_498 = or i64 %tmp_496, %tmp_497
  %S_load_15 = load i64* %S_addr_17, align 8
  %tmp_499 = add i64 %S_load_15, %t0
  %tmp17 = add i64 %tmp_494, %tmp_498
  %tmp_500 = add i64 %tmp17, %t0
  %tmp_501 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_499, i32 14, i32 63)
  %tmp_618 = trunc i64 %tmp_499 to i14
  %tmp_503 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_618, i50 %tmp_501)
  %tmp_504 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_499, i32 18, i32 63)
  %tmp_625 = trunc i64 %tmp_499 to i18
  %tmp_506 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_625, i46 %tmp_504)
  %tmp_507 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_499, i32 41, i32 63)
  %tmp_626 = trunc i64 %tmp_499 to i41
  %tmp_509 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_626, i23 %tmp_507)
  %tmp18 = xor i64 %tmp_509, %tmp_506
  %tmp_511 = xor i64 %tmp18, %tmp_503
  %tmp_512 = xor i64 %S_load_11, %S_load_9
  %tmp_513 = and i64 %tmp_499, %tmp_512
  %tmp_514 = xor i64 %S_load_11, %tmp_513
  %tmp_515 = or i7 %i_3, 1
  %tmp_516 = zext i7 %tmp_515 to i64
  %K_addr_8 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_516
  %K_load_8 = load i64* %K_addr_8, align 8
  %W_addr_20 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_516
  %W_load_16 = load i64* %W_addr_20, align 8
  %tmp21 = add i64 %K_load_8, %S_load_10
  %tmp23 = add i64 %tmp_514, %tmp_511
  %tmp22 = add i64 %tmp23, %W_load_16
  %t0_8 = add i64 %tmp22, %tmp21
  %tmp_520 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_500, i32 28, i32 63)
  %tmp_627 = trunc i64 %tmp_500 to i28
  %tmp_522 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_627, i36 %tmp_520)
  %tmp_523 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_500, i32 34, i32 63)
  %tmp_629 = trunc i64 %tmp_500 to i34
  %tmp_525 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_629, i30 %tmp_523)
  %tmp_526 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_500, i32 39, i32 63)
  %tmp_632 = trunc i64 %tmp_500 to i39
  %tmp_528 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_632, i25 %tmp_526)
  %tmp24 = xor i64 %tmp_528, %tmp_525
  %tmp_530 = xor i64 %tmp24, %tmp_522
  %tmp_531 = or i64 %S_load_12, %tmp_500
  %tmp_532 = and i64 %S_load_13, %tmp_531
  %tmp_533 = and i64 %S_load_12, %tmp_500
  %tmp_534 = or i64 %tmp_532, %tmp_533
  %tmp_535 = add i64 %S_load_14, %t0_8
  %tmp25 = add i64 %tmp_530, %t0_8
  %tmp_536 = add i64 %tmp25, %tmp_534
  %tmp_537 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_535, i32 14, i32 63)
  %tmp_635 = trunc i64 %tmp_535 to i14
  %tmp_539 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_635, i50 %tmp_537)
  %tmp_540 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_535, i32 18, i32 63)
  %tmp_645 = trunc i64 %tmp_535 to i18
  %tmp_542 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_645, i46 %tmp_540)
  %tmp_543 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_535, i32 41, i32 63)
  %tmp_648 = trunc i64 %tmp_535 to i41
  %tmp_545 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_648, i23 %tmp_543)
  %tmp26 = xor i64 %tmp_545, %tmp_542
  %tmp_547 = xor i64 %tmp26, %tmp_539
  %tmp_548 = xor i64 %S_load_9, %tmp_499
  %tmp_549 = and i64 %tmp_535, %tmp_548
  %tmp_550 = xor i64 %S_load_9, %tmp_549
  %tmp_551 = or i7 %i_3, 2
  %tmp_552 = zext i7 %tmp_551 to i64
  %K_addr_9 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_552
  %K_load_9 = load i64* %K_addr_9, align 16
  %W_addr_21 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_552
  %W_load_17 = load i64* %W_addr_21, align 16
  %tmp29 = add i64 %K_load_9, %S_load_11
  %tmp31 = add i64 %tmp_550, %tmp_547
  %tmp30 = add i64 %tmp31, %W_load_17
  %t0_9 = add i64 %tmp30, %tmp29
  %tmp_556 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_536, i32 28, i32 63)
  %tmp_651 = trunc i64 %tmp_536 to i28
  %tmp_558 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_651, i36 %tmp_556)
  %tmp_559 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_536, i32 34, i32 63)
  %tmp_660 = trunc i64 %tmp_536 to i34
  %tmp_561 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_660, i30 %tmp_559)
  %tmp_562 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_536, i32 39, i32 63)
  %tmp_663 = trunc i64 %tmp_536 to i39
  %tmp_564 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_663, i25 %tmp_562)
  %tmp32 = xor i64 %tmp_564, %tmp_561
  %tmp_566 = xor i64 %tmp32, %tmp_558
  %tmp_567 = or i64 %tmp_536, %tmp_500
  %tmp_568 = and i64 %S_load_12, %tmp_567
  %tmp_569 = and i64 %tmp_536, %tmp_500
  %tmp_570 = or i64 %tmp_568, %tmp_569
  %tmp_571 = add i64 %S_load_13, %t0_9
  %tmp33 = add i64 %tmp_566, %t0_9
  %tmp_572 = add i64 %tmp33, %tmp_570
  %tmp_573 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_571, i32 14, i32 63)
  %tmp_666 = trunc i64 %tmp_571 to i14
  %tmp_575 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_666, i50 %tmp_573)
  %tmp_576 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_571, i32 18, i32 63)
  %tmp_676 = trunc i64 %tmp_571 to i18
  %tmp_578 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_676, i46 %tmp_576)
  %tmp_579 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_571, i32 41, i32 63)
  %tmp_679 = trunc i64 %tmp_571 to i41
  %tmp_581 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_679, i23 %tmp_579)
  %tmp34 = xor i64 %tmp_581, %tmp_578
  %tmp_583 = xor i64 %tmp34, %tmp_575
  %tmp_584 = xor i64 %tmp_535, %tmp_499
  %tmp_585 = and i64 %tmp_571, %tmp_584
  %tmp_586 = xor i64 %tmp_585, %tmp_499
  %tmp_587 = or i7 %i_3, 3
  %tmp_588 = zext i7 %tmp_587 to i64
  %K_addr_10 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_588
  %K_load_10 = load i64* %K_addr_10, align 8
  %W_addr_22 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_588
  %W_load_18 = load i64* %W_addr_22, align 8
  %tmp37 = add i64 %K_load_10, %S_load_9
  %tmp39 = add i64 %tmp_586, %tmp_583
  %tmp38 = add i64 %tmp39, %W_load_18
  %t0_15 = add i64 %tmp38, %tmp37
  %tmp_589 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_572, i32 28, i32 63)
  %tmp_682 = trunc i64 %tmp_572 to i28
  %tmp_592 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_682, i36 %tmp_589)
  %tmp_594 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_572, i32 34, i32 63)
  %tmp_691 = trunc i64 %tmp_572 to i34
  %tmp_595 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_691, i30 %tmp_594)
  %tmp_597 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_572, i32 39, i32 63)
  %tmp_694 = trunc i64 %tmp_572 to i39
  %tmp_598 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_694, i25 %tmp_597)
  %tmp40 = xor i64 %tmp_598, %tmp_595
  %tmp_600 = xor i64 %tmp40, %tmp_592
  %tmp_602 = or i64 %tmp_572, %tmp_536
  %tmp_603 = and i64 %tmp_602, %tmp_500
  %tmp_604 = and i64 %tmp_572, %tmp_536
  %tmp_605 = or i64 %tmp_603, %tmp_604
  %tmp_606 = add i64 %S_load_12, %t0_15
  %tmp41 = add i64 %tmp_600, %t0_15
  %tmp_607 = add i64 %tmp41, %tmp_605
  %tmp_608 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_606, i32 14, i32 63)
  %tmp_697 = trunc i64 %tmp_606 to i14
  %tmp_609 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_697, i50 %tmp_608)
  %tmp_611 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_606, i32 18, i32 63)
  %tmp_707 = trunc i64 %tmp_606 to i18
  %tmp_612 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_707, i46 %tmp_611)
  %tmp_614 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_606, i32 41, i32 63)
  %tmp_710 = trunc i64 %tmp_606 to i41
  %tmp_615 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_710, i23 %tmp_614)
  %tmp42 = xor i64 %tmp_615, %tmp_612
  %tmp_617 = xor i64 %tmp42, %tmp_609
  %tmp_619 = xor i64 %tmp_571, %tmp_535
  %tmp_620 = and i64 %tmp_606, %tmp_619
  %tmp_621 = xor i64 %tmp_620, %tmp_535
  %tmp_622 = or i7 %i_3, 4
  %tmp_623 = zext i7 %tmp_622 to i64
  %K_addr_11 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_623
  %K_load_11 = load i64* %K_addr_11, align 16
  %W_addr_23 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_623
  %W_load_19 = load i64* %W_addr_23, align 16
  %tmp45 = add i64 %K_load_11, %W_load_19
  %tmp47 = add i64 %tmp_617, %tmp_499
  %tmp46 = add i64 %tmp47, %tmp_621
  %t0_16 = add i64 %tmp46, %tmp45
  %tmp_624 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_607, i32 28, i32 63)
  %tmp_713 = trunc i64 %tmp_607 to i28
  %tmp_628 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_713, i36 %tmp_624)
  %tmp_630 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_607, i32 34, i32 63)
  %tmp_722 = trunc i64 %tmp_607 to i34
  %tmp_631 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_722, i30 %tmp_630)
  %tmp_633 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_607, i32 39, i32 63)
  %tmp_725 = trunc i64 %tmp_607 to i39
  %tmp_634 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_725, i25 %tmp_633)
  %tmp48 = xor i64 %tmp_634, %tmp_631
  %tmp_636 = xor i64 %tmp48, %tmp_628
  %tmp_637 = or i64 %tmp_607, %tmp_572
  %tmp_638 = and i64 %tmp_637, %tmp_536
  %tmp_639 = and i64 %tmp_607, %tmp_572
  %tmp_640 = or i64 %tmp_638, %tmp_639
  %tmp_641 = add i64 %tmp_500, %t0_16
  store i64 %tmp_641, i64* %S_addr_10, align 8
  %tmp49 = add i64 %tmp_636, %t0_16
  %tmp_642 = add i64 %tmp49, %tmp_640
  store i64 %tmp_642, i64* %S_addr_17, align 8
  %tmp_643 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_641, i32 14, i32 63)
  %tmp_728 = trunc i64 %tmp_641 to i14
  %tmp_644 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_728, i50 %tmp_643)
  %tmp_646 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_641, i32 18, i32 63)
  %tmp_739 = trunc i64 %tmp_641 to i18
  %tmp_647 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_739, i46 %tmp_646)
  %tmp_649 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_641, i32 41, i32 63)
  %tmp_740 = trunc i64 %tmp_641 to i41
  %tmp_650 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_740, i23 %tmp_649)
  %tmp50 = xor i64 %tmp_650, %tmp_647
  %tmp_652 = xor i64 %tmp50, %tmp_644
  %tmp_653 = xor i64 %tmp_606, %tmp_571
  %tmp_654 = and i64 %tmp_641, %tmp_653
  %tmp_655 = xor i64 %tmp_654, %tmp_571
  %tmp_656 = or i7 %i_3, 5
  %tmp_657 = zext i7 %tmp_656 to i64
  %K_addr_12 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_657
  %K_load_12 = load i64* %K_addr_12, align 8
  %W_addr_24 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_657
  %W_load_20 = load i64* %W_addr_24, align 8
  %tmp53 = add i64 %K_load_12, %W_load_20
  %tmp55 = add i64 %tmp_652, %tmp_535
  %tmp54 = add i64 %tmp55, %tmp_655
  %t0_17 = add i64 %tmp54, %tmp53
  %tmp_658 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_642, i32 28, i32 63)
  %tmp_741 = trunc i64 %tmp_642 to i28
  %tmp_659 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_741, i36 %tmp_658)
  %tmp_661 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_642, i32 34, i32 63)
  %tmp_742 = trunc i64 %tmp_642 to i34
  %tmp_662 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_742, i30 %tmp_661)
  %tmp_664 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_642, i32 39, i32 63)
  %tmp_743 = trunc i64 %tmp_642 to i39
  %tmp_665 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_743, i25 %tmp_664)
  %tmp56 = xor i64 %tmp_665, %tmp_662
  %tmp_667 = xor i64 %tmp56, %tmp_659
  %tmp_668 = or i64 %tmp_642, %tmp_607
  %tmp_669 = and i64 %tmp_668, %tmp_572
  %tmp_670 = and i64 %tmp_642, %tmp_607
  %tmp_671 = or i64 %tmp_669, %tmp_670
  %tmp_672 = add i64 %tmp_536, %t0_17
  store i64 %tmp_672, i64* %S_addr_12, align 16
  %tmp57 = add i64 %tmp_667, %t0_17
  %tmp_673 = add i64 %tmp57, %tmp_671
  store i64 %tmp_673, i64* %S_addr_16, align 16
  %tmp_674 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_672, i32 14, i32 63)
  %tmp_744 = trunc i64 %tmp_672 to i14
  %tmp_675 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_744, i50 %tmp_674)
  %tmp_677 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_672, i32 18, i32 63)
  %tmp_745 = trunc i64 %tmp_672 to i18
  %tmp_678 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_745, i46 %tmp_677)
  %tmp_680 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_672, i32 41, i32 63)
  %tmp_746 = trunc i64 %tmp_672 to i41
  %tmp_681 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_746, i23 %tmp_680)
  %tmp58 = xor i64 %tmp_681, %tmp_678
  %tmp_683 = xor i64 %tmp58, %tmp_675
  %tmp_684 = xor i64 %tmp_641, %tmp_606
  %tmp_685 = and i64 %tmp_672, %tmp_684
  %tmp_686 = xor i64 %tmp_685, %tmp_606
  %tmp_687 = or i7 %i_3, 6
  %tmp_688 = zext i7 %tmp_687 to i64
  %K_addr_13 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_688
  %K_load_13 = load i64* %K_addr_13, align 16
  %W_addr_25 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_688
  %W_load_21 = load i64* %W_addr_25, align 16
  %tmp61 = add i64 %K_load_13, %W_load_21
  %tmp63 = add i64 %tmp_683, %tmp_571
  %tmp62 = add i64 %tmp63, %tmp_686
  %t0_18 = add i64 %tmp62, %tmp61
  %tmp_689 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_673, i32 28, i32 63)
  %tmp_747 = trunc i64 %tmp_673 to i28
  %tmp_690 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_747, i36 %tmp_689)
  %tmp_692 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_673, i32 34, i32 63)
  %tmp_748 = trunc i64 %tmp_673 to i34
  %tmp_693 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_748, i30 %tmp_692)
  %tmp_695 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_673, i32 39, i32 63)
  %tmp_749 = trunc i64 %tmp_673 to i39
  %tmp_696 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_749, i25 %tmp_695)
  %tmp64 = xor i64 %tmp_696, %tmp_693
  %tmp_698 = xor i64 %tmp64, %tmp_690
  %tmp_699 = or i64 %tmp_673, %tmp_642
  %tmp_700 = and i64 %tmp_699, %tmp_607
  %tmp_701 = and i64 %tmp_673, %tmp_642
  %tmp_702 = or i64 %tmp_700, %tmp_701
  %tmp_703 = add i64 %tmp_572, %t0_18
  store i64 %tmp_703, i64* %S_addr_13, align 8
  %tmp65 = add i64 %tmp_698, %t0_18
  %tmp_704 = add i64 %tmp65, %tmp_702
  store i64 %tmp_704, i64* %S_addr_15, align 8
  %tmp_705 = call i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64 %tmp_703, i32 14, i32 63)
  %tmp_750 = trunc i64 %tmp_703 to i14
  %tmp_706 = call i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14 %tmp_750, i50 %tmp_705)
  %tmp_708 = call i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64 %tmp_703, i32 18, i32 63)
  %tmp_751 = trunc i64 %tmp_703 to i18
  %tmp_709 = call i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18 %tmp_751, i46 %tmp_708)
  %tmp_711 = call i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64 %tmp_703, i32 41, i32 63)
  %tmp_752 = trunc i64 %tmp_703 to i41
  %tmp_712 = call i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41 %tmp_752, i23 %tmp_711)
  %tmp66 = xor i64 %tmp_712, %tmp_709
  %tmp_714 = xor i64 %tmp66, %tmp_706
  %tmp_715 = xor i64 %tmp_672, %tmp_641
  %tmp_716 = and i64 %tmp_703, %tmp_715
  %tmp_717 = xor i64 %tmp_716, %tmp_641
  %tmp_718 = or i7 %i_3, 7
  %tmp_719 = zext i7 %tmp_718 to i64
  %K_addr_14 = getelementptr inbounds [80 x i64]* @K, i64 0, i64 %tmp_719
  %K_load_14 = load i64* %K_addr_14, align 8
  %W_addr_26 = getelementptr inbounds [80 x i64]* %W, i64 0, i64 %tmp_719
  %W_load_22 = load i64* %W_addr_26, align 8
  %tmp69 = add i64 %K_load_14, %W_load_22
  %tmp71 = add i64 %tmp_714, %tmp_606
  %tmp70 = add i64 %tmp71, %tmp_717
  %t0_19 = add i64 %tmp70, %tmp69
  %tmp_720 = call i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64 %tmp_704, i32 28, i32 63)
  %tmp_753 = trunc i64 %tmp_704 to i28
  %tmp_721 = call i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28 %tmp_753, i36 %tmp_720)
  %tmp_723 = call i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64 %tmp_704, i32 34, i32 63)
  %tmp_754 = trunc i64 %tmp_704 to i34
  %tmp_724 = call i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34 %tmp_754, i30 %tmp_723)
  %tmp_726 = call i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64 %tmp_704, i32 39, i32 63)
  %tmp_755 = trunc i64 %tmp_704 to i39
  %tmp_727 = call i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39 %tmp_755, i25 %tmp_726)
  %tmp72 = xor i64 %tmp_727, %tmp_724
  %tmp_729 = xor i64 %tmp72, %tmp_721
  %tmp_730 = or i64 %tmp_704, %tmp_673
  %tmp_731 = and i64 %tmp_730, %tmp_642
  %tmp_732 = and i64 %tmp_704, %tmp_673
  %tmp_733 = or i64 %tmp_731, %tmp_732
  %tmp_734 = add i64 %tmp_607, %t0_19
  store i64 %tmp_734, i64* %S_addr_11, align 16
  %tmp73 = add i64 %tmp_729, %t0_19
  %tmp_735 = add i64 %tmp73, %tmp_733
  store i64 %tmp_735, i64* %S_addr_14, align 16
  %i_18 = add i7 8, %i_3
  br label %.preheader11

.preheader:                                       ; preds = %.preheader.preheader, %6
  %i_4 = phi i4 [ %i_19, %6 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i4 %i_4, -8
  %empty_40 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8)
  %i_19 = add i4 %i_4, 1
  br i1 %exitcond, label %7, label %6

; <label>:6                                       ; preds = %.preheader
  %tmp_736 = zext i4 %i_4 to i64
  %md_state_addr_9 = getelementptr [8 x i64]* %md_state, i64 0, i64 %tmp_736
  %md_state_load_3 = load i64* %md_state_addr_9, align 8
  %S_addr_18 = getelementptr inbounds [8 x i64]* %S, i64 0, i64 %tmp_736
  %S_load_16 = load i64* %S_addr_18, align 8
  %tmp_737 = add i64 %md_state_load_3, %S_load_16
  store i64 %tmp_737, i64* %md_state_addr_9, align 8
  br label %.preheader

; <label>:7                                       ; preds = %.preheader
  ret void
}

define internal fastcc void @reduce_add_sub([32 x i32]* nocapture %r_v) {
  %mask = alloca i2
  %t = alloca [32 x i8], align 16
  br label %1

; <label>:1                                       ; preds = %2, %0
  %pb = phi i1 [ false, %0 ], [ %tmp_756, %2 ]
  %i = phi i6 [ 0, %0 ], [ %i_20, %2 ]
  %exitcond2 = icmp eq i6 %i, -32
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_20 = add i6 %i, 1
  br i1 %exitcond2, label %.preheader.preheader, label %2

.preheader.preheader:                             ; preds = %1
  %mask_load = load i2* %mask
  %mask_cast = sext i2 %mask_load to i32
  br label %.preheader

; <label>:2                                       ; preds = %1
  %tmp = zext i6 %i to i64
  %m_addr = getelementptr [32 x i8]* @m, i64 0, i64 %tmp
  %m_load = load i8* %m_addr, align 1
  %pb_cast1 = zext i1 %pb to i8
  %pb_1 = add i8 %m_load, %pb_cast1
  %pb_3_cast = zext i8 %pb_1 to i32
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp
  %x = load i32* %r_v_addr, align 4
  %x_1 = sub i32 %x, %pb_3_cast
  %tmp_756 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %x_1, i32 31)
  %tmp_757 = trunc i32 %x_1 to i8
  %t_addr = getelementptr inbounds [32 x i8]* %t, i64 0, i64 %tmp
  store i8 %tmp_757, i8* %t_addr, align 1
  %phitmp = xor i1 %tmp_756, true
  %phitmp_cast_cast = select i1 %phitmp, i2 -1, i2 0
  store i2 %phitmp_cast_cast, i2* %mask
  br label %1

.preheader:                                       ; preds = %.preheader.preheader, %3
  %i_1 = phi i6 [ %i_21, %3 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i6 %i_1, -32
  %empty_41 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_21 = add i6 %i_1, 1
  br i1 %exitcond, label %4, label %3

; <label>:3                                       ; preds = %.preheader
  %tmp_s = zext i6 %i_1 to i64
  %r_v_addr_1 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_s
  %r_v_load = load i32* %r_v_addr_1, align 4
  %t_addr_1 = getelementptr inbounds [32 x i8]* %t, i64 0, i64 %tmp_s
  %t_load = load i8* %t_addr_1, align 1
  %tmp_738 = zext i8 %t_load to i32
  %tmp_739 = xor i32 %r_v_load, %tmp_738
  %tmp_740 = and i32 %tmp_739, %mask_cast
  %tmp_741 = xor i32 %r_v_load, %tmp_740
  store i32 %tmp_741, i32* %r_v_addr_1, align 4
  br label %.preheader

; <label>:4                                       ; preds = %.preheader
  ret void
}

declare i8 @llvm.part.select.i8(i8, i32, i32) nounwind readnone

declare i64 @llvm.part.select.i64(i64, i32, i32) nounwind readnone

declare i56 @llvm.part.select.i56(i56, i32, i32) nounwind readnone

declare i48 @llvm.part.select.i48(i48, i32, i32) nounwind readnone

declare i40 @llvm.part.select.i40(i40, i32, i32) nounwind readnone

declare i32 @llvm.part.select.i32(i32, i32, i32) nounwind readnone

declare i24 @llvm.part.select.i24(i24, i32, i32) nounwind readnone

declare i16 @llvm.part.select.i16(i16, i32, i32) nounwind readnone

declare void @llvm.dbg.value(metadata, i64, metadata) nounwind readnone

declare void @llvm.dbg.declare(metadata, metadata) nounwind readnone

define internal fastcc void @crypto_sign_ed25519_.9([64 x i8]* nocapture %r, [32 x i32]* %x_v) {
  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([64 x i8]* %r, [1 x i8]* @p_str12, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str12, i32 -1, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12)
  %y_v = alloca [32 x i32], align 4
  %y_v_addr = getelementptr [32 x i32]* %y_v, i64 0, i64 0
  %x_v_addr = getelementptr [32 x i32]* %x_v, i64 0, i64 0
  %x_v_load = load i32* %x_v_addr, align 4
  store i32 %x_v_load, i32* %y_v_addr, align 4
  %y_v_addr_1 = getelementptr [32 x i32]* %y_v, i64 0, i64 1
  %x_v_addr_1 = getelementptr [32 x i32]* %x_v, i64 0, i64 1
  %x_v_load_1 = load i32* %x_v_addr_1, align 4
  store i32 %x_v_load_1, i32* %y_v_addr_1, align 4
  %y_v_addr_2 = getelementptr [32 x i32]* %y_v, i64 0, i64 2
  %x_v_addr_2 = getelementptr [32 x i32]* %x_v, i64 0, i64 2
  %x_v_load_2 = load i32* %x_v_addr_2, align 4
  store i32 %x_v_load_2, i32* %y_v_addr_2, align 4
  %y_v_addr_3 = getelementptr [32 x i32]* %y_v, i64 0, i64 3
  %x_v_addr_3 = getelementptr [32 x i32]* %x_v, i64 0, i64 3
  %x_v_load_3 = load i32* %x_v_addr_3, align 4
  store i32 %x_v_load_3, i32* %y_v_addr_3, align 4
  %y_v_addr_4 = getelementptr [32 x i32]* %y_v, i64 0, i64 4
  %x_v_addr_4 = getelementptr [32 x i32]* %x_v, i64 0, i64 4
  %x_v_load_4 = load i32* %x_v_addr_4, align 4
  store i32 %x_v_load_4, i32* %y_v_addr_4, align 4
  %y_v_addr_5 = getelementptr [32 x i32]* %y_v, i64 0, i64 5
  %x_v_addr_5 = getelementptr [32 x i32]* %x_v, i64 0, i64 5
  %x_v_load_5 = load i32* %x_v_addr_5, align 4
  store i32 %x_v_load_5, i32* %y_v_addr_5, align 4
  %y_v_addr_6 = getelementptr [32 x i32]* %y_v, i64 0, i64 6
  %x_v_addr_6 = getelementptr [32 x i32]* %x_v, i64 0, i64 6
  %x_v_load_6 = load i32* %x_v_addr_6, align 4
  store i32 %x_v_load_6, i32* %y_v_addr_6, align 4
  %y_v_addr_7 = getelementptr [32 x i32]* %y_v, i64 0, i64 7
  %x_v_addr_7 = getelementptr [32 x i32]* %x_v, i64 0, i64 7
  %x_v_load_7 = load i32* %x_v_addr_7, align 4
  store i32 %x_v_load_7, i32* %y_v_addr_7, align 4
  %y_v_addr_8 = getelementptr [32 x i32]* %y_v, i64 0, i64 8
  %x_v_addr_8 = getelementptr [32 x i32]* %x_v, i64 0, i64 8
  %x_v_load_8 = load i32* %x_v_addr_8, align 4
  store i32 %x_v_load_8, i32* %y_v_addr_8, align 4
  %y_v_addr_9 = getelementptr [32 x i32]* %y_v, i64 0, i64 9
  %x_v_addr_9 = getelementptr [32 x i32]* %x_v, i64 0, i64 9
  %x_v_load_9 = load i32* %x_v_addr_9, align 4
  store i32 %x_v_load_9, i32* %y_v_addr_9, align 4
  %y_v_addr_10 = getelementptr [32 x i32]* %y_v, i64 0, i64 10
  %x_v_addr_10 = getelementptr [32 x i32]* %x_v, i64 0, i64 10
  %x_v_load_10 = load i32* %x_v_addr_10, align 4
  store i32 %x_v_load_10, i32* %y_v_addr_10, align 4
  %y_v_addr_11 = getelementptr [32 x i32]* %y_v, i64 0, i64 11
  %x_v_addr_11 = getelementptr [32 x i32]* %x_v, i64 0, i64 11
  %x_v_load_11 = load i32* %x_v_addr_11, align 4
  store i32 %x_v_load_11, i32* %y_v_addr_11, align 4
  %y_v_addr_12 = getelementptr [32 x i32]* %y_v, i64 0, i64 12
  %x_v_addr_12 = getelementptr [32 x i32]* %x_v, i64 0, i64 12
  %x_v_load_12 = load i32* %x_v_addr_12, align 4
  store i32 %x_v_load_12, i32* %y_v_addr_12, align 4
  %y_v_addr_13 = getelementptr [32 x i32]* %y_v, i64 0, i64 13
  %x_v_addr_13 = getelementptr [32 x i32]* %x_v, i64 0, i64 13
  %x_v_load_13 = load i32* %x_v_addr_13, align 4
  store i32 %x_v_load_13, i32* %y_v_addr_13, align 4
  %y_v_addr_14 = getelementptr [32 x i32]* %y_v, i64 0, i64 14
  %x_v_addr_14 = getelementptr [32 x i32]* %x_v, i64 0, i64 14
  %x_v_load_14 = load i32* %x_v_addr_14, align 4
  store i32 %x_v_load_14, i32* %y_v_addr_14, align 4
  %y_v_addr_15 = getelementptr [32 x i32]* %y_v, i64 0, i64 15
  %x_v_addr_15 = getelementptr [32 x i32]* %x_v, i64 0, i64 15
  %x_v_load_15 = load i32* %x_v_addr_15, align 4
  store i32 %x_v_load_15, i32* %y_v_addr_15, align 4
  %y_v_addr_16 = getelementptr [32 x i32]* %y_v, i64 0, i64 16
  %x_v_addr_16 = getelementptr [32 x i32]* %x_v, i64 0, i64 16
  %x_v_load_16 = load i32* %x_v_addr_16, align 4
  store i32 %x_v_load_16, i32* %y_v_addr_16, align 4
  %y_v_addr_17 = getelementptr [32 x i32]* %y_v, i64 0, i64 17
  %x_v_addr_17 = getelementptr [32 x i32]* %x_v, i64 0, i64 17
  %x_v_load_17 = load i32* %x_v_addr_17, align 4
  store i32 %x_v_load_17, i32* %y_v_addr_17, align 4
  %y_v_addr_18 = getelementptr [32 x i32]* %y_v, i64 0, i64 18
  %x_v_addr_18 = getelementptr [32 x i32]* %x_v, i64 0, i64 18
  %x_v_load_18 = load i32* %x_v_addr_18, align 4
  store i32 %x_v_load_18, i32* %y_v_addr_18, align 4
  %y_v_addr_19 = getelementptr [32 x i32]* %y_v, i64 0, i64 19
  %x_v_addr_19 = getelementptr [32 x i32]* %x_v, i64 0, i64 19
  %x_v_load_19 = load i32* %x_v_addr_19, align 4
  store i32 %x_v_load_19, i32* %y_v_addr_19, align 4
  %y_v_addr_20 = getelementptr [32 x i32]* %y_v, i64 0, i64 20
  %x_v_addr_20 = getelementptr [32 x i32]* %x_v, i64 0, i64 20
  %x_v_load_20 = load i32* %x_v_addr_20, align 4
  store i32 %x_v_load_20, i32* %y_v_addr_20, align 4
  %y_v_addr_21 = getelementptr [32 x i32]* %y_v, i64 0, i64 21
  %x_v_addr_21 = getelementptr [32 x i32]* %x_v, i64 0, i64 21
  %x_v_load_21 = load i32* %x_v_addr_21, align 4
  store i32 %x_v_load_21, i32* %y_v_addr_21, align 4
  %y_v_addr_22 = getelementptr [32 x i32]* %y_v, i64 0, i64 22
  %x_v_addr_22 = getelementptr [32 x i32]* %x_v, i64 0, i64 22
  %x_v_load_22 = load i32* %x_v_addr_22, align 4
  store i32 %x_v_load_22, i32* %y_v_addr_22, align 4
  %y_v_addr_23 = getelementptr [32 x i32]* %y_v, i64 0, i64 23
  %x_v_addr_23 = getelementptr [32 x i32]* %x_v, i64 0, i64 23
  %x_v_load_23 = load i32* %x_v_addr_23, align 4
  store i32 %x_v_load_23, i32* %y_v_addr_23, align 4
  %y_v_addr_24 = getelementptr [32 x i32]* %y_v, i64 0, i64 24
  %x_v_addr_24 = getelementptr [32 x i32]* %x_v, i64 0, i64 24
  %x_v_load_24 = load i32* %x_v_addr_24, align 4
  store i32 %x_v_load_24, i32* %y_v_addr_24, align 4
  %y_v_addr_25 = getelementptr [32 x i32]* %y_v, i64 0, i64 25
  %x_v_addr_25 = getelementptr [32 x i32]* %x_v, i64 0, i64 25
  %x_v_load_25 = load i32* %x_v_addr_25, align 4
  store i32 %x_v_load_25, i32* %y_v_addr_25, align 4
  %y_v_addr_26 = getelementptr [32 x i32]* %y_v, i64 0, i64 26
  %x_v_addr_26 = getelementptr [32 x i32]* %x_v, i64 0, i64 26
  %x_v_load_26 = load i32* %x_v_addr_26, align 4
  store i32 %x_v_load_26, i32* %y_v_addr_26, align 4
  %y_v_addr_27 = getelementptr [32 x i32]* %y_v, i64 0, i64 27
  %x_v_addr_27 = getelementptr [32 x i32]* %x_v, i64 0, i64 27
  %x_v_load_27 = load i32* %x_v_addr_27, align 4
  store i32 %x_v_load_27, i32* %y_v_addr_27, align 4
  %y_v_addr_28 = getelementptr [32 x i32]* %y_v, i64 0, i64 28
  %x_v_addr_28 = getelementptr [32 x i32]* %x_v, i64 0, i64 28
  %x_v_load_28 = load i32* %x_v_addr_28, align 4
  store i32 %x_v_load_28, i32* %y_v_addr_28, align 4
  %y_v_addr_29 = getelementptr [32 x i32]* %y_v, i64 0, i64 29
  %x_v_addr_29 = getelementptr [32 x i32]* %x_v, i64 0, i64 29
  %x_v_load_29 = load i32* %x_v_addr_29, align 4
  store i32 %x_v_load_29, i32* %y_v_addr_29, align 4
  %y_v_addr_30 = getelementptr [32 x i32]* %y_v, i64 0, i64 30
  %x_v_addr_30 = getelementptr [32 x i32]* %x_v, i64 0, i64 30
  %x_v_load_30 = load i32* %x_v_addr_30, align 4
  store i32 %x_v_load_30, i32* %y_v_addr_30, align 4
  %y_v_addr_31 = getelementptr [32 x i32]* %y_v, i64 0, i64 31
  %x_v_addr_31 = getelementptr [32 x i32]* %x_v, i64 0, i64 31
  %x_v_load_31 = load i32* %x_v_addr_31, align 4
  store i32 %x_v_load_31, i32* %y_v_addr_31, align 4
  call fastcc void @crypto_sign_ed25519_.21([32 x i32]* %y_v)
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i6 [ 0, %0 ], [ %i_22, %2 ]
  %exitcond = icmp eq i6 %i, -32
  %empty_42 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_22 = add i6 %i, 1
  br i1 %exitcond, label %3, label %2

; <label>:2                                       ; preds = %1
  %tmp = zext i6 %i to i64
  %y_v_addr_32 = getelementptr [32 x i32]* %y_v, i64 0, i64 %tmp
  %y_v_load = load i32* %y_v_addr_32, align 4
  %tmp_758 = trunc i32 %y_v_load to i8
  %r_addr = getelementptr [64 x i8]* %r, i64 0, i64 %tmp
  store i8 %tmp_758, i8* %r_addr, align 1
  br label %1

; <label>:3                                       ; preds = %1
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.8([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %x_v, [32 x i32]* nocapture %y_v) {
  %t = alloca [32 x i32], align 16
  %x_v_addr = getelementptr [32 x i32]* %x_v, i64 0, i64 0
  %x_v_load = load i32* %x_v_addr, align 4
  %tmp = add i32 %x_v_load, 474
  %t_addr = getelementptr inbounds [32 x i32]* %t, i64 0, i64 0
  store i32 %tmp, i32* %t_addr, align 16
  %x_v_addr_1 = getelementptr [32 x i32]* %x_v, i64 0, i64 31
  %x_v_load_1 = load i32* %x_v_addr_1, align 4
  %tmp_s = add i32 %x_v_load_1, 254
  %t_addr_2 = getelementptr inbounds [32 x i32]* %t, i64 0, i64 31
  store i32 %tmp_s, i32* %t_addr_2, align 4
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i5 [ 1, %0 ], [ %i_23, %2 ]
  %exitcond1 = icmp eq i5 %i, -1
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 30, i64 30, i64 30)
  br i1 %exitcond1, label %.preheader.preheader, label %2

.preheader.preheader:                             ; preds = %1
  br label %.preheader

; <label>:2                                       ; preds = %1
  %tmp_742 = zext i5 %i to i64
  %x_v_addr_2 = getelementptr [32 x i32]* %x_v, i64 0, i64 %tmp_742
  %x_v_load_2 = load i32* %x_v_addr_2, align 4
  %tmp_743 = add i32 %x_v_load_2, 510
  %t_addr_3 = getelementptr inbounds [32 x i32]* %t, i64 0, i64 %tmp_742
  store i32 %tmp_743, i32* %t_addr_3, align 4
  %i_23 = add i5 %i, 1
  br label %1

.preheader:                                       ; preds = %.preheader.preheader, %3
  %i_1 = phi i6 [ %i_24, %3 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i6 %i_1, -32
  %empty_43 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_24 = add i6 %i_1, 1
  br i1 %exitcond, label %4, label %3

; <label>:3                                       ; preds = %.preheader
  %tmp_744 = zext i6 %i_1 to i64
  %t_addr_4 = getelementptr inbounds [32 x i32]* %t, i64 0, i64 %tmp_744
  %t_load = load i32* %t_addr_4, align 4
  %y_v_addr = getelementptr [32 x i32]* %y_v, i64 0, i64 %tmp_744
  %y_v_load = load i32* %y_v_addr, align 4
  %tmp_745 = sub i32 %t_load, %y_v_load
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_744
  store i32 %tmp_745, i32* %r_v_addr, align 4
  br label %.preheader

; <label>:4                                       ; preds = %.preheader
  %r_v_addr_2 = getelementptr [32 x i32]* %r_v, i64 0, i64 31
  %r_v_addr_3 = getelementptr [32 x i32]* %r_v, i64 0, i64 0
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %6
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %4
  %rep_i = phi i3 [ 0, %4 ], [ %rep, %.loopexit.loopexit ]
  %exitcond1_i = icmp eq i3 %rep_i, -4
  %empty_44 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)
  %rep = add i3 %rep_i, 1
  br i1 %exitcond1_i, label %reduce_add_sub64.exit, label %5

; <label>:5                                       ; preds = %.loopexit
  %r_v_load = load i32* %r_v_addr_2, align 4
  %tmp_759 = trunc i32 %r_v_load to i7
  %tmp_746 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %r_v_load, i32 7, i32 31)
  %t_8_cast = zext i25 %tmp_746 to i31
  %tmp_i_cast = zext i7 %tmp_759 to i32
  store i32 %tmp_i_cast, i32* %r_v_addr_2, align 4
  %t_1 = mul i31 19, %t_8_cast
  %t_6_cast4 = zext i31 %t_1 to i32
  %r_v_load_1 = load i32* %r_v_addr_3, align 4
  %tmp_i = add i32 %t_6_cast4, %r_v_load_1
  store i32 %tmp_i, i32* %r_v_addr_3, align 4
  br label %6

; <label>:6                                       ; preds = %7, %5
  %i_i = phi i5 [ 0, %5 ], [ %i_25, %7 ]
  %exitcond_i = icmp eq i5 %i_i, -1
  %empty_45 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  %i_25 = add i5 %i_i, 1
  br i1 %exitcond_i, label %.loopexit.loopexit, label %7

; <label>:7                                       ; preds = %6
  %tmp_759_i = zext i5 %i_i to i64
  %r_v_addr_4 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_759_i
  %r_v_load_2 = load i32* %r_v_addr_4, align 4
  %tmp_760 = trunc i32 %r_v_load_2 to i8
  %t_7 = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %r_v_load_2, i32 8, i32 31)
  %t_2 = zext i24 %t_7 to i32
  %tmp_760_i = zext i5 %i_25 to i64
  %r_v_addr_5 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_760_i
  %r_v_load_3 = load i32* %r_v_addr_5, align 4
  %tmp_761_i = add i32 %t_2, %r_v_load_3
  store i32 %tmp_761_i, i32* %r_v_addr_5, align 4
  %tmp_762_i_cast = zext i8 %tmp_760 to i32
  store i32 %tmp_762_i_cast, i32* %r_v_addr_4, align 4
  br label %6

reduce_add_sub64.exit:                            ; preds = %.loopexit
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.7([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %y_v) {
  %t = alloca [32 x i32], align 16
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 0
  %r_v_load = load i32* %r_v_addr, align 4
  %tmp = add i32 %r_v_load, 474
  %t_addr = getelementptr inbounds [32 x i32]* %t, i64 0, i64 0
  store i32 %tmp, i32* %t_addr, align 16
  %r_v_addr_6 = getelementptr [32 x i32]* %r_v, i64 0, i64 31
  %r_v_load_4 = load i32* %r_v_addr_6, align 4
  %tmp_s = add i32 %r_v_load_4, 254
  %t_addr_5 = getelementptr inbounds [32 x i32]* %t, i64 0, i64 31
  store i32 %tmp_s, i32* %t_addr_5, align 4
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i5 [ 1, %0 ], [ %i_26, %2 ]
  %exitcond1 = icmp eq i5 %i, -1
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 30, i64 30, i64 30)
  br i1 %exitcond1, label %.preheader.preheader, label %2

.preheader.preheader:                             ; preds = %1
  br label %.preheader

; <label>:2                                       ; preds = %1
  %tmp_747 = zext i5 %i to i64
  %r_v_addr_7 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_747
  %r_v_load_5 = load i32* %r_v_addr_7, align 4
  %tmp_748 = add i32 %r_v_load_5, 510
  %t_addr_6 = getelementptr inbounds [32 x i32]* %t, i64 0, i64 %tmp_747
  store i32 %tmp_748, i32* %t_addr_6, align 4
  %i_26 = add i5 %i, 1
  br label %1

.preheader:                                       ; preds = %.preheader.preheader, %3
  %i_1 = phi i6 [ %i_27, %3 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i6 %i_1, -32
  %empty_46 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_27 = add i6 %i_1, 1
  br i1 %exitcond, label %.preheader1.preheader, label %3

.preheader1.preheader:                            ; preds = %.preheader
  br label %.preheader1

; <label>:3                                       ; preds = %.preheader
  %tmp_749 = zext i6 %i_1 to i64
  %t_addr_7 = getelementptr inbounds [32 x i32]* %t, i64 0, i64 %tmp_749
  %t_load = load i32* %t_addr_7, align 4
  %y_v_addr = getelementptr [32 x i32]* %y_v, i64 0, i64 %tmp_749
  %y_v_load = load i32* %y_v_addr, align 4
  %tmp_750 = sub i32 %t_load, %y_v_load
  %r_v_addr_8 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_749
  store i32 %tmp_750, i32* %r_v_addr_8, align 4
  br label %.preheader

.preheader1.loopexit:                             ; preds = %5
  br label %.preheader1

.preheader1:                                      ; preds = %.preheader1.preheader, %.preheader1.loopexit
  %rep_i = phi i3 [ %rep, %.preheader1.loopexit ], [ 0, %.preheader1.preheader ]
  %exitcond1_i = icmp eq i3 %rep_i, -4
  %empty_47 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)
  %rep = add i3 %rep_i, 1
  br i1 %exitcond1_i, label %reduce_add_sub64.exit, label %4

; <label>:4                                       ; preds = %.preheader1
  %r_v_load_6 = load i32* %r_v_addr_6, align 4
  %tmp_761 = trunc i32 %r_v_load_6 to i7
  %tmp_751 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %r_v_load_6, i32 7, i32 31)
  %t_4_cast = zext i25 %tmp_751 to i31
  %tmp_i_cast = zext i7 %tmp_761 to i32
  store i32 %tmp_i_cast, i32* %r_v_addr_6, align 4
  %t_2 = mul i31 19, %t_4_cast
  %t_2_cast4 = zext i31 %t_2 to i32
  %r_v_load_7 = load i32* %r_v_addr, align 4
  %tmp_i = add i32 %t_2_cast4, %r_v_load_7
  store i32 %tmp_i, i32* %r_v_addr, align 4
  br label %5

; <label>:5                                       ; preds = %6, %4
  %i_i = phi i5 [ 0, %4 ], [ %i_28, %6 ]
  %exitcond_i = icmp eq i5 %i_i, -1
  %empty_48 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  %i_28 = add i5 %i_i, 1
  br i1 %exitcond_i, label %.preheader1.loopexit, label %6

; <label>:6                                       ; preds = %5
  %tmp_759_i = zext i5 %i_i to i64
  %r_v_addr_9 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_759_i
  %r_v_load_8 = load i32* %r_v_addr_9, align 4
  %tmp_762 = trunc i32 %r_v_load_8 to i8
  %t_3 = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %r_v_load_8, i32 8, i32 31)
  %t_4 = zext i24 %t_3 to i32
  %tmp_760_i = zext i5 %i_28 to i64
  %r_v_addr_10 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_760_i
  %r_v_load_9 = load i32* %r_v_addr_10, align 4
  %tmp_761_i = add i32 %t_4, %r_v_load_9
  store i32 %tmp_761_i, i32* %r_v_addr_10, align 4
  %tmp_762_i_cast = zext i8 %tmp_762 to i32
  store i32 %tmp_762_i_cast, i32* %r_v_addr_9, align 4
  br label %5

reduce_add_sub64.exit:                            ; preds = %.preheader1
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.21([32 x i32]* nocapture %r_v) {
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 31
  %r_v_load = load i32* %r_v_addr, align 4
  %x = xor i32 %r_v_load, 127
  %x_2 = add i32 %x, -1
  %tmp_763 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %x_2, i32 31)
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i5 [ -2, %0 ], [ %i_29, %2 ]
  %m1 = phi i1 [ %tmp_763, %0 ], [ %m_1, %2 ]
  %tmp = icmp eq i5 %i, 0
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 30, i64 30, i64 30)
  br i1 %tmp, label %3, label %2

; <label>:2                                       ; preds = %1
  %tmp_s = zext i5 %i to i64
  %r_v_addr_8 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_s
  %r_v_load_11 = load i32* %r_v_addr_8, align 4
  %x_6 = xor i32 %r_v_load_11, 255
  %x_7 = add i32 %x_6, -1
  %tmp_765 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %x_7, i32 31)
  %m_1 = and i1 %tmp_765, %m1
  %i_29 = add i5 %i, -1
  br label %1

; <label>:3                                       ; preds = %1
  %r_v_addr_9 = getelementptr [32 x i32]* %r_v, i64 0, i64 0
  %x_3 = load i32* %r_v_addr_9, align 4
  %x_4 = add i32 %x_3, -237
  %tmp_764 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %x_4, i32 31)
  %x_5 = xor i1 %tmp_764, true
  %m_1_1 = and i1 %m1, %x_5
  %tmp_884_cast_cast = select i1 %m_1_1, i32 127, i32 0
  %tmp_752 = sub i32 %r_v_load, %tmp_884_cast_cast
  store i32 %tmp_752, i32* %r_v_addr, align 4
  %tmp_886_cast_cast = select i1 %m_1_1, i32 255, i32 0
  br label %4

; <label>:4                                       ; preds = %5, %3
  %i_1 = phi i5 [ -2, %3 ], [ %i_30, %5 ]
  %tmp_753 = icmp eq i5 %i_1, 0
  %empty_49 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 30, i64 30, i64 30)
  br i1 %tmp_753, label %6, label %5

; <label>:5                                       ; preds = %4
  %tmp_755 = zext i5 %i_1 to i64
  %r_v_addr_10 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_755
  %r_v_load_7 = load i32* %r_v_addr_10, align 4
  %tmp_756 = sub i32 %r_v_load_7, %tmp_886_cast_cast
  store i32 %tmp_756, i32* %r_v_addr_10, align 4
  %i_30 = add i5 %i_1, -1
  br label %4

; <label>:6                                       ; preds = %4
  %tmp_890_cast_cast = select i1 %m_1_1, i32 237, i32 0
  %r_v_load_8 = load i32* %r_v_addr_9, align 4
  %tmp_754 = sub i32 %r_v_load_8, %tmp_890_cast_cast
  store i32 %tmp_754, i32* %r_v_addr_9, align 4
  ret void
}

define internal fastcc i1 @crypto_sign_ed25519_.20([32 x i32]* %x_v) {
  %t_v = alloca [32 x i32], align 4
  %t_v_addr = getelementptr [32 x i32]* %t_v, i64 0, i64 0
  %x_v_addr = getelementptr [32 x i32]* %x_v, i64 0, i64 0
  %x_v_load = load i32* %x_v_addr, align 4
  store i32 %x_v_load, i32* %t_v_addr, align 4
  %t_v_addr_1 = getelementptr [32 x i32]* %t_v, i64 0, i64 1
  %x_v_addr_32 = getelementptr [32 x i32]* %x_v, i64 0, i64 1
  %x_v_load_32 = load i32* %x_v_addr_32, align 4
  store i32 %x_v_load_32, i32* %t_v_addr_1, align 4
  %t_v_addr_2 = getelementptr [32 x i32]* %t_v, i64 0, i64 2
  %x_v_addr_33 = getelementptr [32 x i32]* %x_v, i64 0, i64 2
  %x_v_load_33 = load i32* %x_v_addr_33, align 4
  store i32 %x_v_load_33, i32* %t_v_addr_2, align 4
  %t_v_addr_3 = getelementptr [32 x i32]* %t_v, i64 0, i64 3
  %x_v_addr_34 = getelementptr [32 x i32]* %x_v, i64 0, i64 3
  %x_v_load_34 = load i32* %x_v_addr_34, align 4
  store i32 %x_v_load_34, i32* %t_v_addr_3, align 4
  %t_v_addr_4 = getelementptr [32 x i32]* %t_v, i64 0, i64 4
  %x_v_addr_35 = getelementptr [32 x i32]* %x_v, i64 0, i64 4
  %x_v_load_35 = load i32* %x_v_addr_35, align 4
  store i32 %x_v_load_35, i32* %t_v_addr_4, align 4
  %t_v_addr_5 = getelementptr [32 x i32]* %t_v, i64 0, i64 5
  %x_v_addr_36 = getelementptr [32 x i32]* %x_v, i64 0, i64 5
  %x_v_load_36 = load i32* %x_v_addr_36, align 4
  store i32 %x_v_load_36, i32* %t_v_addr_5, align 4
  %t_v_addr_6 = getelementptr [32 x i32]* %t_v, i64 0, i64 6
  %x_v_addr_37 = getelementptr [32 x i32]* %x_v, i64 0, i64 6
  %x_v_load_37 = load i32* %x_v_addr_37, align 4
  store i32 %x_v_load_37, i32* %t_v_addr_6, align 4
  %t_v_addr_7 = getelementptr [32 x i32]* %t_v, i64 0, i64 7
  %x_v_addr_38 = getelementptr [32 x i32]* %x_v, i64 0, i64 7
  %x_v_load_38 = load i32* %x_v_addr_38, align 4
  store i32 %x_v_load_38, i32* %t_v_addr_7, align 4
  %t_v_addr_8 = getelementptr [32 x i32]* %t_v, i64 0, i64 8
  %x_v_addr_39 = getelementptr [32 x i32]* %x_v, i64 0, i64 8
  %x_v_load_39 = load i32* %x_v_addr_39, align 4
  store i32 %x_v_load_39, i32* %t_v_addr_8, align 4
  %t_v_addr_9 = getelementptr [32 x i32]* %t_v, i64 0, i64 9
  %x_v_addr_40 = getelementptr [32 x i32]* %x_v, i64 0, i64 9
  %x_v_load_40 = load i32* %x_v_addr_40, align 4
  store i32 %x_v_load_40, i32* %t_v_addr_9, align 4
  %t_v_addr_10 = getelementptr [32 x i32]* %t_v, i64 0, i64 10
  %x_v_addr_41 = getelementptr [32 x i32]* %x_v, i64 0, i64 10
  %x_v_load_41 = load i32* %x_v_addr_41, align 4
  store i32 %x_v_load_41, i32* %t_v_addr_10, align 4
  %t_v_addr_11 = getelementptr [32 x i32]* %t_v, i64 0, i64 11
  %x_v_addr_42 = getelementptr [32 x i32]* %x_v, i64 0, i64 11
  %x_v_load_42 = load i32* %x_v_addr_42, align 4
  store i32 %x_v_load_42, i32* %t_v_addr_11, align 4
  %t_v_addr_12 = getelementptr [32 x i32]* %t_v, i64 0, i64 12
  %x_v_addr_43 = getelementptr [32 x i32]* %x_v, i64 0, i64 12
  %x_v_load_43 = load i32* %x_v_addr_43, align 4
  store i32 %x_v_load_43, i32* %t_v_addr_12, align 4
  %t_v_addr_13 = getelementptr [32 x i32]* %t_v, i64 0, i64 13
  %x_v_addr_44 = getelementptr [32 x i32]* %x_v, i64 0, i64 13
  %x_v_load_44 = load i32* %x_v_addr_44, align 4
  store i32 %x_v_load_44, i32* %t_v_addr_13, align 4
  %t_v_addr_14 = getelementptr [32 x i32]* %t_v, i64 0, i64 14
  %x_v_addr_45 = getelementptr [32 x i32]* %x_v, i64 0, i64 14
  %x_v_load_45 = load i32* %x_v_addr_45, align 4
  store i32 %x_v_load_45, i32* %t_v_addr_14, align 4
  %t_v_addr_15 = getelementptr [32 x i32]* %t_v, i64 0, i64 15
  %x_v_addr_46 = getelementptr [32 x i32]* %x_v, i64 0, i64 15
  %x_v_load_46 = load i32* %x_v_addr_46, align 4
  store i32 %x_v_load_46, i32* %t_v_addr_15, align 4
  %t_v_addr_16 = getelementptr [32 x i32]* %t_v, i64 0, i64 16
  %x_v_addr_47 = getelementptr [32 x i32]* %x_v, i64 0, i64 16
  %x_v_load_47 = load i32* %x_v_addr_47, align 4
  store i32 %x_v_load_47, i32* %t_v_addr_16, align 4
  %t_v_addr_17 = getelementptr [32 x i32]* %t_v, i64 0, i64 17
  %x_v_addr_48 = getelementptr [32 x i32]* %x_v, i64 0, i64 17
  %x_v_load_48 = load i32* %x_v_addr_48, align 4
  store i32 %x_v_load_48, i32* %t_v_addr_17, align 4
  %t_v_addr_18 = getelementptr [32 x i32]* %t_v, i64 0, i64 18
  %x_v_addr_49 = getelementptr [32 x i32]* %x_v, i64 0, i64 18
  %x_v_load_49 = load i32* %x_v_addr_49, align 4
  store i32 %x_v_load_49, i32* %t_v_addr_18, align 4
  %t_v_addr_19 = getelementptr [32 x i32]* %t_v, i64 0, i64 19
  %x_v_addr_50 = getelementptr [32 x i32]* %x_v, i64 0, i64 19
  %x_v_load_50 = load i32* %x_v_addr_50, align 4
  store i32 %x_v_load_50, i32* %t_v_addr_19, align 4
  %t_v_addr_20 = getelementptr [32 x i32]* %t_v, i64 0, i64 20
  %x_v_addr_51 = getelementptr [32 x i32]* %x_v, i64 0, i64 20
  %x_v_load_51 = load i32* %x_v_addr_51, align 4
  store i32 %x_v_load_51, i32* %t_v_addr_20, align 4
  %t_v_addr_21 = getelementptr [32 x i32]* %t_v, i64 0, i64 21
  %x_v_addr_52 = getelementptr [32 x i32]* %x_v, i64 0, i64 21
  %x_v_load_52 = load i32* %x_v_addr_52, align 4
  store i32 %x_v_load_52, i32* %t_v_addr_21, align 4
  %t_v_addr_22 = getelementptr [32 x i32]* %t_v, i64 0, i64 22
  %x_v_addr_53 = getelementptr [32 x i32]* %x_v, i64 0, i64 22
  %x_v_load_53 = load i32* %x_v_addr_53, align 4
  store i32 %x_v_load_53, i32* %t_v_addr_22, align 4
  %t_v_addr_23 = getelementptr [32 x i32]* %t_v, i64 0, i64 23
  %x_v_addr_54 = getelementptr [32 x i32]* %x_v, i64 0, i64 23
  %x_v_load_54 = load i32* %x_v_addr_54, align 4
  store i32 %x_v_load_54, i32* %t_v_addr_23, align 4
  %t_v_addr_24 = getelementptr [32 x i32]* %t_v, i64 0, i64 24
  %x_v_addr_55 = getelementptr [32 x i32]* %x_v, i64 0, i64 24
  %x_v_load_55 = load i32* %x_v_addr_55, align 4
  store i32 %x_v_load_55, i32* %t_v_addr_24, align 4
  %t_v_addr_25 = getelementptr [32 x i32]* %t_v, i64 0, i64 25
  %x_v_addr_56 = getelementptr [32 x i32]* %x_v, i64 0, i64 25
  %x_v_load_56 = load i32* %x_v_addr_56, align 4
  store i32 %x_v_load_56, i32* %t_v_addr_25, align 4
  %t_v_addr_26 = getelementptr [32 x i32]* %t_v, i64 0, i64 26
  %x_v_addr_57 = getelementptr [32 x i32]* %x_v, i64 0, i64 26
  %x_v_load_57 = load i32* %x_v_addr_57, align 4
  store i32 %x_v_load_57, i32* %t_v_addr_26, align 4
  %t_v_addr_27 = getelementptr [32 x i32]* %t_v, i64 0, i64 27
  %x_v_addr_58 = getelementptr [32 x i32]* %x_v, i64 0, i64 27
  %x_v_load_58 = load i32* %x_v_addr_58, align 4
  store i32 %x_v_load_58, i32* %t_v_addr_27, align 4
  %t_v_addr_28 = getelementptr [32 x i32]* %t_v, i64 0, i64 28
  %x_v_addr_59 = getelementptr [32 x i32]* %x_v, i64 0, i64 28
  %x_v_load_59 = load i32* %x_v_addr_59, align 4
  store i32 %x_v_load_59, i32* %t_v_addr_28, align 4
  %t_v_addr_29 = getelementptr [32 x i32]* %t_v, i64 0, i64 29
  %x_v_addr_60 = getelementptr [32 x i32]* %x_v, i64 0, i64 29
  %x_v_load_60 = load i32* %x_v_addr_60, align 4
  store i32 %x_v_load_60, i32* %t_v_addr_29, align 4
  %t_v_addr_30 = getelementptr [32 x i32]* %t_v, i64 0, i64 30
  %x_v_addr_61 = getelementptr [32 x i32]* %x_v, i64 0, i64 30
  %x_v_load_61 = load i32* %x_v_addr_61, align 4
  store i32 %x_v_load_61, i32* %t_v_addr_30, align 4
  %t_v_addr_31 = getelementptr [32 x i32]* %t_v, i64 0, i64 31
  %x_v_addr_62 = getelementptr [32 x i32]* %x_v, i64 0, i64 31
  %x_v_load_62 = load i32* %x_v_addr_62, align 4
  store i32 %x_v_load_62, i32* %t_v_addr_31, align 4
  call fastcc void @crypto_sign_ed25519_.21([32 x i32]* %t_v)
  %t_v_load = load i32* %t_v_addr, align 4
  %tmp = trunc i32 %t_v_load to i1
  ret i1 %tmp
}

define internal fastcc void @crypto_sign_ed25519_.19([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %x_v) {
  %z2_v = alloca [32 x i32], align 4
  %z9_v = alloca [32 x i32], align 4
  %z11_v = alloca [32 x i32], align 4
  %z2_5_0_v = alloca [32 x i32], align 4
  %z2_10_0_v = alloca [32 x i32], align 4
  %z2_20_0_v = alloca [32 x i32], align 4
  %z2_50_0_v = alloca [32 x i32], align 4
  %z2_100_0_v = alloca [32 x i32], align 4
  %t0_v = alloca [32 x i32], align 4
  %t1_v = alloca [32 x i32], align 4
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %z2_v, [32 x i32]* %x_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %z2_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %z9_v, [32 x i32]* %t0_v, [32 x i32]* %x_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %z11_v, [32 x i32]* %z9_v, [32 x i32]* %z2_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %z11_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %z2_5_0_v, [32 x i32]* %t0_v, [32 x i32]* %z9_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %z2_5_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %z2_10_0_v, [32 x i32]* %t0_v, [32 x i32]* %z2_5_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %z2_10_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i4 [ 2, %0 ], [ %i_31, %2 ]
  %tmp = icmp ult i4 %i, -6
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)
  br i1 %tmp, label %2, label %3

; <label>:2                                       ; preds = %1
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  %i_31 = add i4 %i, 2
  br label %1

; <label>:3                                       ; preds = %1
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %z2_20_0_v, [32 x i32]* %t1_v, [32 x i32]* %z2_10_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %z2_20_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  br label %4

; <label>:4                                       ; preds = %5, %3
  %i_1 = phi i5 [ 2, %3 ], [ %i_32, %5 ]
  %tmp_s = icmp ult i5 %i_1, -12
  %empty_50 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 9, i64 9, i64 9)
  br i1 %tmp_s, label %5, label %6

; <label>:5                                       ; preds = %4
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  %i_32 = add i5 %i_1, 2
  br label %4

; <label>:6                                       ; preds = %4
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %t0_v, [32 x i32]* %t1_v, [32 x i32]* %z2_20_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  br label %7

; <label>:7                                       ; preds = %8, %6
  %i_2 = phi i4 [ 2, %6 ], [ %i_33, %8 ]
  %tmp_757 = icmp ult i4 %i_2, -6
  %empty_51 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)
  br i1 %tmp_757, label %8, label %9

; <label>:8                                       ; preds = %7
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  %i_33 = add i4 %i_2, 2
  br label %7

; <label>:9                                       ; preds = %7
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %z2_50_0_v, [32 x i32]* %t0_v, [32 x i32]* %z2_10_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %z2_50_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  br label %10

; <label>:10                                      ; preds = %11, %9
  %i_3 = phi i6 [ 2, %9 ], [ %i_34, %11 ]
  %tmp_758 = icmp ult i6 %i_3, -14
  %empty_52 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 24, i64 24, i64 24)
  br i1 %tmp_758, label %11, label %12

; <label>:11                                      ; preds = %10
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  %i_34 = add i6 %i_3, 2
  br label %10

; <label>:12                                      ; preds = %10
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %z2_100_0_v, [32 x i32]* %t1_v, [32 x i32]* %z2_50_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %z2_100_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  br label %13

; <label>:13                                      ; preds = %14, %12
  %i_4 = phi i7 [ 2, %12 ], [ %i_35, %14 ]
  %tmp_759 = icmp ult i7 %i_4, -28
  %empty_53 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 49, i64 49, i64 49)
  br i1 %tmp_759, label %14, label %15

; <label>:14                                      ; preds = %13
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  %i_35 = add i7 %i_4, 2
  br label %13

; <label>:15                                      ; preds = %13
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %t1_v, [32 x i32]* %t0_v, [32 x i32]* %z2_100_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  br label %16

; <label>:16                                      ; preds = %17, %15
  %i_5 = phi i6 [ 2, %15 ], [ %i_36, %17 ]
  %tmp_760 = icmp ult i6 %i_5, -14
  %empty_54 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 24, i64 24, i64 24)
  br i1 %tmp_760, label %17, label %18

; <label>:17                                      ; preds = %16
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  %i_36 = add i6 %i_5, 2
  br label %16

; <label>:18                                      ; preds = %16
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %t0_v, [32 x i32]* %t1_v, [32 x i32]* %z2_50_0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t0_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.10([32 x i32]* %t1_v, [32 x i32]* %t0_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %r_v, [32 x i32]* %t1_v, [32 x i32]* %z11_v)
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.18([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %x_v, [32 x i32]* nocapture %y_v) {
  %t = alloca [63 x i32], align 16
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i6 [ 0, %0 ], [ %i_37, %2 ]
  %exitcond3 = icmp eq i6 %i, -1
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 63, i64 63, i64 63)
  %i_37 = add i6 %i, 1
  br i1 %exitcond3, label %.preheader5.preheader, label %2

.preheader5.preheader:                            ; preds = %1
  br label %.preheader5

; <label>:2                                       ; preds = %1
  %tmp = zext i6 %i to i64
  %t_addr = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp
  store i32 0, i32* %t_addr, align 4
  br label %1

.preheader5.loopexit:                             ; preds = %.preheader4
  br label %.preheader5

.preheader5:                                      ; preds = %.preheader5.preheader, %.preheader5.loopexit
  %i_1 = phi i6 [ %i_39, %.preheader5.loopexit ], [ 0, %.preheader5.preheader ]
  %exitcond2 = icmp eq i6 %i_1, -32
  %empty_55 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_39 = add i6 %i_1, 1
  br i1 %exitcond2, label %.preheader.preheader, label %.preheader4.preheader

.preheader.preheader:                             ; preds = %.preheader5
  br label %.preheader

.preheader4.preheader:                            ; preds = %.preheader5
  %tmp_s = zext i6 %i_1 to i64
  %x_v_addr = getelementptr [32 x i32]* %x_v, i64 0, i64 %tmp_s
  %x_v_load = load i32* %x_v_addr, align 4
  br label %.preheader4

.preheader4:                                      ; preds = %3, %.preheader4.preheader
  %j = phi i6 [ %j_1, %3 ], [ 0, %.preheader4.preheader ]
  %exitcond1 = icmp eq i6 %j, -32
  %empty_56 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %j_1 = add i6 %j, 1
  br i1 %exitcond1, label %.preheader5.loopexit, label %3

; <label>:3                                       ; preds = %.preheader4
  %tmp_765 = zext i6 %j to i64
  %y_v_addr = getelementptr [32 x i32]* %y_v, i64 0, i64 %tmp_765
  %y_v_load = load i32* %y_v_addr, align 4
  %tmp_766 = mul i32 %x_v_load, %y_v_load
  %tmp_767 = add i6 %i_1, %j
  %tmp_768 = zext i6 %tmp_767 to i64
  %t_addr_11 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp_768
  %t_load_3 = load i32* %t_addr_11, align 4
  %tmp_769 = add i32 %t_load_3, %tmp_766
  store i32 %tmp_769, i32* %t_addr_11, align 4
  br label %.preheader4

.preheader:                                       ; preds = %.preheader.preheader, %4
  %i_2 = phi i6 [ %i_41, %4 ], [ -32, %.preheader.preheader ]
  %exitcond = icmp eq i6 %i_2, -1
  %empty_57 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  br i1 %exitcond, label %5, label %4

; <label>:4                                       ; preds = %.preheader
  %tmp_761 = xor i6 %i_2, -32
  %tmp_762 = zext i6 %tmp_761 to i64
  %t_addr_9 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp_762
  %t_load_1 = load i32* %t_addr_9, align 4
  %tmp_763 = zext i6 %i_2 to i64
  %t_addr_10 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp_763
  %t_load_2 = load i32* %t_addr_10, align 4
  %tmp2_i = mul i32 %t_load_2, 38
  %tmp_764 = add i32 %t_load_1, %tmp2_i
  %r_v_addr_7 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_762
  store i32 %tmp_764, i32* %r_v_addr_7, align 4
  %i_41 = add i6 %i_2, 1
  br label %.preheader

; <label>:5                                       ; preds = %.preheader
  %t_addr_8 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 31
  %t_load = load i32* %t_addr_8, align 4
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 31
  store i32 %t_load, i32* %r_v_addr, align 4
  %r_v_addr_10 = getelementptr [32 x i32]* %r_v, i64 0, i64 0
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %7
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %5
  %rep_i = phi i2 [ 0, %5 ], [ %rep, %.loopexit.loopexit ]
  %exitcond1_i = icmp eq i2 %rep_i, -2
  %empty_58 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2)
  %rep = add i2 %rep_i, 1
  br i1 %exitcond1_i, label %reduce_mul.exit, label %6

; <label>:6                                       ; preds = %.loopexit
  %r_v_load = load i32* %r_v_addr, align 4
  %tmp_770 = trunc i32 %r_v_load to i7
  %tmp_757 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %r_v_load, i32 7, i32 31)
  %t_20_cast = zext i25 %tmp_757 to i31
  %tmp_i_cast = zext i7 %tmp_770 to i32
  store i32 %tmp_i_cast, i32* %r_v_addr, align 4
  %t_5 = mul i31 19, %t_20_cast
  %t_18_cast6 = zext i31 %t_5 to i32
  %r_v_load_7 = load i32* %r_v_addr_10, align 4
  %tmp_i = add i32 %t_18_cast6, %r_v_load_7
  store i32 %tmp_i, i32* %r_v_addr_10, align 4
  br label %7

; <label>:7                                       ; preds = %8, %6
  %i_i = phi i5 [ 0, %6 ], [ %i_42, %8 ]
  %exitcond_i = icmp eq i5 %i_i, -1
  %empty_59 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  %i_42 = add i5 %i_i, 1
  br i1 %exitcond_i, label %.loopexit.loopexit, label %8

; <label>:8                                       ; preds = %7
  %tmp_755_i = zext i5 %i_i to i64
  %r_v_addr_11 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_755_i
  %r_v_load_8 = load i32* %r_v_addr_11, align 4
  %tmp_771 = trunc i32 %r_v_load_8 to i8
  %t_s = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %r_v_load_8, i32 8, i32 31)
  %t_6 = zext i24 %t_s to i32
  %tmp_756_i = zext i5 %i_42 to i64
  %r_v_addr_12 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_756_i
  %r_v_load_9 = load i32* %r_v_addr_12, align 4
  %tmp_757_i = add i32 %t_6, %r_v_load_9
  store i32 %tmp_757_i, i32* %r_v_addr_12, align 4
  %tmp_758_i_cast = zext i8 %tmp_771 to i32
  store i32 %tmp_758_i_cast, i32* %r_v_addr_11, align 4
  br label %7

reduce_mul.exit:                                  ; preds = %.loopexit
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.17([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %y_v) {
  %t = alloca [63 x i32], align 16
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i6 [ 0, %0 ], [ %i_45, %2 ]
  %exitcond3 = icmp eq i6 %i, -1
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 63, i64 63, i64 63)
  %i_45 = add i6 %i, 1
  br i1 %exitcond3, label %.preheader5.preheader, label %2

.preheader5.preheader:                            ; preds = %1
  br label %.preheader5

; <label>:2                                       ; preds = %1
  %tmp = zext i6 %i to i64
  %t_addr = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp
  store i32 0, i32* %t_addr, align 4
  br label %1

.preheader5.loopexit:                             ; preds = %.preheader4
  br label %.preheader5

.preheader5:                                      ; preds = %.preheader5.preheader, %.preheader5.loopexit
  %i_1 = phi i6 [ %i_46, %.preheader5.loopexit ], [ 0, %.preheader5.preheader ]
  %exitcond2 = icmp eq i6 %i_1, -32
  %empty_60 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_46 = add i6 %i_1, 1
  br i1 %exitcond2, label %.preheader.preheader, label %.preheader4.preheader

.preheader.preheader:                             ; preds = %.preheader5
  br label %.preheader

.preheader4.preheader:                            ; preds = %.preheader5
  %tmp_s = zext i6 %i_1 to i64
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_s
  %r_v_load = load i32* %r_v_addr, align 4
  br label %.preheader4

.preheader4:                                      ; preds = %3, %.preheader4.preheader
  %j = phi i6 [ %j_2, %3 ], [ 0, %.preheader4.preheader ]
  %exitcond1 = icmp eq i6 %j, -32
  %empty_61 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %j_2 = add i6 %j, 1
  br i1 %exitcond1, label %.preheader5.loopexit, label %3

; <label>:3                                       ; preds = %.preheader4
  %tmp_774 = zext i6 %j to i64
  %y_v_addr = getelementptr [32 x i32]* %y_v, i64 0, i64 %tmp_774
  %y_v_load = load i32* %y_v_addr, align 4
  %tmp_775 = mul i32 %r_v_load, %y_v_load
  %tmp_776 = add i6 %i_1, %j
  %tmp_777 = zext i6 %tmp_776 to i64
  %t_addr_15 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp_777
  %t_load_5 = load i32* %t_addr_15, align 4
  %tmp_778 = add i32 %t_load_5, %tmp_775
  store i32 %tmp_778, i32* %t_addr_15, align 4
  br label %.preheader4

.preheader:                                       ; preds = %.preheader.preheader, %4
  %i_2 = phi i6 [ %i_47, %4 ], [ -32, %.preheader.preheader ]
  %exitcond = icmp eq i6 %i_2, -1
  %empty_62 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  br i1 %exitcond, label %5, label %4

; <label>:4                                       ; preds = %.preheader
  %tmp_770 = xor i6 %i_2, -32
  %tmp_771 = zext i6 %tmp_770 to i64
  %t_addr_13 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp_771
  %t_load_3 = load i32* %t_addr_13, align 4
  %tmp_772 = zext i6 %i_2 to i64
  %t_addr_14 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp_772
  %t_load_4 = load i32* %t_addr_14, align 4
  %tmp2_i = mul i32 %t_load_4, 38
  %tmp_773 = add i32 %t_load_3, %tmp2_i
  %r_v_addr_15 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_771
  store i32 %tmp_773, i32* %r_v_addr_15, align 4
  %i_47 = add i6 %i_2, 1
  br label %.preheader

; <label>:5                                       ; preds = %.preheader
  %t_addr_12 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 31
  %t_load = load i32* %t_addr_12, align 4
  %r_v_addr_13 = getelementptr [32 x i32]* %r_v, i64 0, i64 31
  store i32 %t_load, i32* %r_v_addr_13, align 4
  %r_v_addr_14 = getelementptr [32 x i32]* %r_v, i64 0, i64 0
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %7
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %5
  %rep_i = phi i2 [ 0, %5 ], [ %rep, %.loopexit.loopexit ]
  %exitcond1_i = icmp eq i2 %rep_i, -2
  %empty_63 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2)
  %rep = add i2 %rep_i, 1
  br i1 %exitcond1_i, label %reduce_mul.exit, label %6

; <label>:6                                       ; preds = %.loopexit
  %r_v_load_12 = load i32* %r_v_addr_13, align 4
  %tmp_779 = trunc i32 %r_v_load_12 to i7
  %tmp_759 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %r_v_load_12, i32 7, i32 31)
  %t_16_cast = zext i25 %tmp_759 to i31
  %tmp_i_cast = zext i7 %tmp_779 to i32
  store i32 %tmp_i_cast, i32* %r_v_addr_13, align 4
  %t_7 = mul i31 19, %t_16_cast
  %t_14_cast6 = zext i31 %t_7 to i32
  %r_v_load_13 = load i32* %r_v_addr_14, align 4
  %tmp_i = add i32 %t_14_cast6, %r_v_load_13
  store i32 %tmp_i, i32* %r_v_addr_14, align 4
  br label %7

; <label>:7                                       ; preds = %8, %6
  %i_i = phi i5 [ 0, %6 ], [ %i_48, %8 ]
  %exitcond_i = icmp eq i5 %i_i, -1
  %empty_64 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  %i_48 = add i5 %i_i, 1
  br i1 %exitcond_i, label %.loopexit.loopexit, label %8

; <label>:8                                       ; preds = %7
  %tmp_755_i = zext i5 %i_i to i64
  %r_v_addr_16 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_755_i
  %r_v_load_14 = load i32* %r_v_addr_16, align 4
  %tmp_780 = trunc i32 %r_v_load_14 to i8
  %t_s = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %r_v_load_14, i32 8, i32 31)
  %t_8 = zext i24 %t_s to i32
  %tmp_756_i = zext i5 %i_48 to i64
  %r_v_addr_17 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_756_i
  %r_v_load_15 = load i32* %r_v_addr_17, align 4
  %tmp_757_i = add i32 %t_8, %r_v_load_15
  store i32 %tmp_757_i, i32* %r_v_addr_17, align 4
  %tmp_758_i_cast = zext i8 %tmp_780 to i32
  store i32 %tmp_758_i_cast, i32* %r_v_addr_16, align 4
  br label %7

reduce_mul.exit:                                  ; preds = %.loopexit
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.16([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %y_v) {
  %t = alloca [32 x i8], align 16
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i6 [ 0, %0 ], [ %i_49, %2 ]
  %exitcond1 = icmp eq i6 %i, -32
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_49 = add i6 %i, 1
  br i1 %exitcond1, label %.preheader.preheader, label %2

.preheader.preheader:                             ; preds = %1
  br label %.preheader

; <label>:2                                       ; preds = %1
  %tmp = zext i6 %i to i64
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp
  %r_v_load = load i32* %r_v_addr, align 4
  %y_v_addr = getelementptr [32 x i32]* %y_v, i64 0, i64 %tmp
  %y_v_load = load i32* %y_v_addr, align 4
  %tmp_s = add i32 %r_v_load, %y_v_load
  store i32 %tmp_s, i32* %r_v_addr, align 4
  br label %1

.preheader:                                       ; preds = %.preheader.preheader, %3
  %i_1 = phi i5 [ %i_50, %3 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i5 %i_1, -1
  %empty_65 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  %i_50 = add i5 %i_1, 1
  br i1 %exitcond, label %.preheader1.preheader, label %3

.preheader1.preheader:                            ; preds = %.preheader
  %mask = alloca i2
  br label %.preheader1

; <label>:3                                       ; preds = %.preheader
  %tmp_779 = zext i5 %i_1 to i64
  %r_v_addr_18 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_779
  %r_v_load_16 = load i32* %r_v_addr_18, align 4
  %tmp_782 = trunc i32 %r_v_load_16 to i8
  %carry = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %r_v_load_16, i32 8, i32 31)
  %carry_1 = zext i24 %carry to i32
  %tmp_780 = zext i5 %i_50 to i64
  %r_v_addr_19 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_780
  %r_v_load_17 = load i32* %r_v_addr_19, align 4
  %tmp_781 = add i32 %carry_1, %r_v_load_17
  store i32 %tmp_781, i32* %r_v_addr_19, align 4
  %tmp_852_cast = zext i8 %tmp_782 to i32
  store i32 %tmp_852_cast, i32* %r_v_addr_18, align 4
  br label %.preheader

.preheader1:                                      ; preds = %.preheader1.preheader, %4
  %pb_i = phi i1 [ %tmp_783, %4 ], [ false, %.preheader1.preheader ]
  %i_i = phi i6 [ %i_51, %4 ], [ 0, %.preheader1.preheader ]
  %exitcond2_i = icmp eq i6 %i_i, -32
  %empty_66 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_51 = add i6 %i_i, 1
  br i1 %exitcond2_i, label %.preheader.i.preheader, label %4

.preheader.i.preheader:                           ; preds = %.preheader1
  %mask_load = load i2* %mask
  %mask_cast = sext i2 %mask_load to i32
  br label %.preheader.i

; <label>:4                                       ; preds = %.preheader1
  %tmp_i = zext i6 %i_i to i64
  %m_addr = getelementptr [32 x i8]* @m, i64 0, i64 %tmp_i
  %m_load = load i8* %m_addr, align 1
  %pb_i_cast1 = zext i1 %pb_i to i8
  %pb = add i8 %m_load, %pb_i_cast1
  %pb_4_cast = zext i8 %pb to i32
  %r_v_addr_20 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_i
  %x = load i32* %r_v_addr_20, align 4
  %x_3 = sub i32 %x, %pb_4_cast
  %tmp_783 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %x_3, i32 31)
  %tmp_784 = trunc i32 %x_3 to i8
  %t_addr = getelementptr inbounds [32 x i8]* %t, i64 0, i64 %tmp_i
  store i8 %tmp_784, i8* %t_addr, align 1
  %phitmp_i = xor i1 %tmp_783, true
  %phitmp_i_cast_cast = select i1 %phitmp_i, i2 -1, i2 0
  store i2 %phitmp_i_cast_cast, i2* %mask
  br label %.preheader1

.preheader.i:                                     ; preds = %.preheader.i.preheader, %5
  %i_1_i = phi i6 [ %i_52, %5 ], [ 0, %.preheader.i.preheader ]
  %exitcond_i = icmp eq i6 %i_1_i, -32
  %empty_67 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_52 = add i6 %i_1_i, 1
  br i1 %exitcond_i, label %reduce_add_sub.exit, label %5

; <label>:5                                       ; preds = %.preheader.i
  %tmp_764_i = zext i6 %i_1_i to i64
  %r_v_addr_21 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_764_i
  %r_v_load_19 = load i32* %r_v_addr_21, align 4
  %t_addr_5 = getelementptr inbounds [32 x i8]* %t, i64 0, i64 %tmp_764_i
  %t_load = load i8* %t_addr_5, align 1
  %tmp_765_i = zext i8 %t_load to i32
  %tmp_766_i = xor i32 %r_v_load_19, %tmp_765_i
  %tmp_767_i = and i32 %tmp_766_i, %mask_cast
  %tmp_768_i = xor i32 %r_v_load_19, %tmp_767_i
  store i32 %tmp_768_i, i32* %r_v_addr_21, align 4
  br label %.preheader.i

reduce_add_sub.exit:                              ; preds = %.preheader.i
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.15([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %y_v) {
  %t = alloca [64 x i32], align 16
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i7 [ 0, %0 ], [ %i_53, %2 ]
  %exitcond3 = icmp eq i7 %i, -64
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64)
  %i_53 = add i7 %i, 1
  br i1 %exitcond3, label %.preheader5.preheader, label %2

.preheader5.preheader:                            ; preds = %1
  br label %.preheader5

; <label>:2                                       ; preds = %1
  %tmp = zext i7 %i to i64
  %t_addr = getelementptr inbounds [64 x i32]* %t, i64 0, i64 %tmp
  store i32 0, i32* %t_addr, align 4
  br label %1

.preheader5.loopexit:                             ; preds = %.preheader4
  br label %.preheader5

.preheader5:                                      ; preds = %.preheader5.preheader, %.preheader5.loopexit
  %i_1 = phi i6 [ %i_54, %.preheader5.loopexit ], [ 0, %.preheader5.preheader ]
  %exitcond2 = icmp eq i6 %i_1, -32
  %empty_68 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_54 = add i6 %i_1, 1
  br i1 %exitcond2, label %.preheader.preheader, label %.preheader4.preheader

.preheader.preheader:                             ; preds = %.preheader5
  br label %.preheader

.preheader4.preheader:                            ; preds = %.preheader5
  %tmp_s = zext i6 %i_1 to i64
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_s
  %r_v_load = load i32* %r_v_addr, align 4
  br label %.preheader4

.preheader4:                                      ; preds = %3, %.preheader4.preheader
  %j = phi i6 [ %j_1, %3 ], [ 0, %.preheader4.preheader ]
  %exitcond1 = icmp eq i6 %j, -32
  %empty_69 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %j_1 = add i6 %j, 1
  br i1 %exitcond1, label %.preheader5.loopexit, label %3

; <label>:3                                       ; preds = %.preheader4
  %tmp_785 = zext i6 %j to i64
  %y_v_addr = getelementptr [32 x i32]* %y_v, i64 0, i64 %tmp_785
  %y_v_load = load i32* %y_v_addr, align 4
  %tmp_786 = mul i32 %r_v_load, %y_v_load
  %tmp_787 = add i6 %i_1, %j
  %tmp_788 = zext i6 %tmp_787 to i64
  %t_addr_4 = getelementptr inbounds [64 x i32]* %t, i64 0, i64 %tmp_788
  %t_load_2 = load i32* %t_addr_4, align 4
  %tmp_789 = add i32 %t_load_2, %tmp_786
  store i32 %tmp_789, i32* %t_addr_4, align 4
  br label %.preheader4

.preheader:                                       ; preds = %.preheader.preheader, %4
  %i_2 = phi i6 [ %i_55, %4 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i6 %i_2, -1
  %empty_70 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 63, i64 63, i64 63)
  %i_55 = add i6 %i_2, 1
  br i1 %exitcond, label %5, label %4

; <label>:4                                       ; preds = %.preheader
  %tmp_782 = zext i6 %i_2 to i64
  %t_addr_2 = getelementptr inbounds [64 x i32]* %t, i64 0, i64 %tmp_782
  %t_load = load i32* %t_addr_2, align 4
  %tmp_790 = trunc i32 %t_load to i8
  %carry = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %t_load, i32 8, i32 31)
  %carry_2 = zext i24 %carry to i32
  %tmp_783 = zext i6 %i_55 to i64
  %t_addr_3 = getelementptr inbounds [64 x i32]* %t, i64 0, i64 %tmp_783
  %t_load_1 = load i32* %t_addr_3, align 4
  %tmp_784 = add i32 %carry_2, %t_load_1
  store i32 %tmp_784, i32* %t_addr_3, align 4
  %tmp_843_cast = zext i8 %tmp_790 to i32
  store i32 %tmp_843_cast, i32* %t_addr_2, align 4
  br label %.preheader

; <label>:5                                       ; preds = %.preheader
  call fastcc void @barrett_reduce([32 x i32]* %r_v, [64 x i32]* %t)
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.14([85 x i8]* nocapture %r, [32 x i32]* nocapture %s_v) {
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i4 [ 0, %0 ], [ %tmp_782, %2 ]
  %i_cast = zext i4 %i to i7
  %exitcond1 = icmp eq i4 %i, -6
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 10, i64 10, i64 10)
  %tmp_782 = add i4 %i, 1
  br i1 %exitcond1, label %3, label %2

; <label>:2                                       ; preds = %1
  %p_shl = call i6 @_ssdm_op_BitConcatenate.i6.i4.i2(i4 %i, i2 0)
  %p_shl_cast = zext i6 %p_shl to i7
  %tmp_749 = sub i7 %p_shl_cast, %i_cast
  %tmp_776_cast = sext i7 %tmp_749 to i32
  %tmp_750 = zext i32 %tmp_776_cast to i64
  %s_v_addr_2 = getelementptr [32 x i32]* %s_v, i64 0, i64 %tmp_750
  %s_v_load_2 = load i32* %s_v_addr_2, align 4
  %tmp_792 = trunc i32 %s_v_load_2 to i3
  %tmp_779_cast = zext i3 %tmp_792 to i8
  %tmp_751 = call i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4 %i, i3 0)
  %tmp_752 = zext i7 %tmp_751 to i64
  %r_addr_5 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_752
  store i8 %tmp_779_cast, i8* %r_addr_5, align 1
  %tmp_783_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load_2, i32 3, i32 5)
  %tmp_784_cast = zext i3 %tmp_783_cast to i8
  %tmp_754 = or i7 %tmp_751, 1
  %tmp_755 = zext i7 %tmp_754 to i64
  %r_addr_6 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_755
  store i8 %tmp_784_cast, i8* %r_addr_6, align 1
  %tmp_788_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load_2, i32 6, i32 8)
  %tmp_757 = or i7 %tmp_751, 2
  %tmp_758 = zext i7 %tmp_757 to i64
  %r_addr_7 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_758
  %tmp_759 = add i7 1, %tmp_749
  %tmp_792_cast = sext i7 %tmp_759 to i32
  %tmp_760 = zext i32 %tmp_792_cast to i64
  %s_v_addr_3 = getelementptr [32 x i32]* %s_v, i64 0, i64 %tmp_760
  %s_v_load_3 = load i32* %s_v_addr_3, align 4
  %tmp_793 = trunc i32 %s_v_load_3 to i1
  %tmp_761 = call i3 @_ssdm_op_BitConcatenate.i3.i1.i2(i1 %tmp_793, i2 0)
  %tmp_762 = xor i3 %tmp_761, %tmp_788_cast
  %tmp_797_cast = zext i3 %tmp_762 to i8
  store i8 %tmp_797_cast, i8* %r_addr_7, align 1
  %tmp_799_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load_3, i32 1, i32 3)
  %tmp_800_cast = zext i3 %tmp_799_cast to i8
  %tmp_764 = or i7 %tmp_751, 3
  %tmp_765 = zext i7 %tmp_764 to i64
  %r_addr_8 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_765
  store i8 %tmp_800_cast, i8* %r_addr_8, align 1
  %tmp_804_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load_3, i32 4, i32 6)
  %tmp_805_cast = zext i3 %tmp_804_cast to i8
  %tmp_767 = or i7 %tmp_751, 4
  %tmp_768 = zext i7 %tmp_767 to i64
  %r_addr_9 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_768
  store i8 %tmp_805_cast, i8* %r_addr_9, align 1
  %tmp_809_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load_3, i32 7, i32 9)
  %tmp_770 = or i7 %tmp_751, 5
  %tmp_771 = zext i7 %tmp_770 to i64
  %r_addr_10 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_771
  %tmp_772 = add i7 2, %tmp_749
  %tmp_813_cast = sext i7 %tmp_772 to i32
  %tmp_773 = zext i32 %tmp_813_cast to i64
  %s_v_addr_4 = getelementptr [32 x i32]* %s_v, i64 0, i64 %tmp_773
  %s_v_load_4 = load i32* %s_v_addr_4, align 4
  %tmp_794 = trunc i32 %s_v_load_4 to i2
  %tmp_774 = call i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2 %tmp_794, i1 false)
  %tmp_775 = xor i3 %tmp_774, %tmp_809_cast
  %tmp_818_cast = zext i3 %tmp_775 to i8
  store i8 %tmp_818_cast, i8* %r_addr_10, align 1
  %tmp_820_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load_4, i32 2, i32 4)
  %tmp_821_cast = zext i3 %tmp_820_cast to i8
  %tmp_777 = or i7 %tmp_751, 6
  %tmp_778 = zext i7 %tmp_777 to i64
  %r_addr_11 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_778
  store i8 %tmp_821_cast, i8* %r_addr_11, align 1
  %tmp_825_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load_4, i32 5, i32 7)
  %tmp_826_cast = zext i3 %tmp_825_cast to i8
  %tmp_780 = or i7 %tmp_751, 7
  %tmp_781 = zext i7 %tmp_780 to i64
  %r_addr_12 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_781
  store i8 %tmp_826_cast, i8* %r_addr_12, align 1
  br label %1

; <label>:3                                       ; preds = %1
  %s_v_addr = getelementptr [32 x i32]* %s_v, i64 0, i64 30
  %s_v_load = load i32* %s_v_addr, align 4
  %tmp = trunc i32 %s_v_load to i3
  %tmp_cast = zext i3 %tmp to i8
  %r_addr = getelementptr [85 x i8]* %r, i64 0, i64 80
  store i8 %tmp_cast, i8* %r_addr, align 1
  %tmp_761_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load, i32 3, i32 5)
  %tmp_762_cast = zext i3 %tmp_761_cast to i8
  %r_addr_1 = getelementptr [85 x i8]* %r, i64 0, i64 81
  store i8 %tmp_762_cast, i8* %r_addr_1, align 1
  %tmp_764_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load, i32 6, i32 8)
  %r_addr_2 = getelementptr [85 x i8]* %r, i64 0, i64 82
  %s_v_addr_1 = getelementptr [32 x i32]* %s_v, i64 0, i64 31
  %s_v_load_1 = load i32* %s_v_addr_1, align 4
  %tmp_791 = trunc i32 %s_v_load_1 to i1
  %tmp_745 = call i3 @_ssdm_op_BitConcatenate.i3.i1.i2(i1 %tmp_791, i2 0)
  %tmp_746 = xor i3 %tmp_745, %tmp_764_cast
  %tmp_769_cast = zext i3 %tmp_746 to i8
  store i8 %tmp_769_cast, i8* %r_addr_2, align 1
  %tmp_771_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load_1, i32 1, i32 3)
  %tmp_772_cast = zext i3 %tmp_771_cast to i8
  %r_addr_3 = getelementptr [85 x i8]* %r, i64 0, i64 83
  store i8 %tmp_772_cast, i8* %r_addr_3, align 1
  %tmp_774_cast = call i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32 %s_v_load_1, i32 4, i32 6)
  %tmp_775_cast = zext i3 %tmp_774_cast to i8
  %r_addr_4 = getelementptr [85 x i8]* %r, i64 0, i64 84
  store i8 %tmp_775_cast, i8* %r_addr_4, align 1
  br label %4

; <label>:4                                       ; preds = %5, %3
  %carry = phi i1 [ false, %3 ], [ %tmp_796, %5 ]
  %i_1 = phi i7 [ 0, %3 ], [ %i_56, %5 ]
  %carry_cast = zext i1 %carry to i8
  %exitcond = icmp eq i7 %i_1, -44
  %empty_71 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 84, i64 84, i64 84)
  %i_56 = add i7 %i_1, 1
  br i1 %exitcond, label %6, label %5

; <label>:5                                       ; preds = %4
  %tmp_784 = zext i7 %i_1 to i64
  %r_addr_13 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_784
  %r_load_1 = load i8* %r_addr_13, align 1
  %tmp_795 = trunc i8 %r_load_1 to i3
  %tmp_77 = zext i1 %carry to i3
  %tmp_785 = add i8 %carry_cast, %r_load_1
  %tmp_832_cast = add i3 %tmp_795, %tmp_77
  %tmp_9 = call i5 @_ssdm_op_PartSelect.i5.i8.i32.i32(i8 %tmp_785, i32 3, i32 7)
  %tmp_786 = zext i7 %i_56 to i64
  %r_addr_14 = getelementptr [85 x i8]* %r, i64 0, i64 %tmp_786
  %r_load_2 = load i8* %r_addr_14, align 1
  %tmp_787 = sext i5 %tmp_9 to i8
  %tmp_788 = add i8 %tmp_787, %r_load_2
  store i8 %tmp_788, i8* %r_addr_14, align 1
  %tmp_836_cast1 = zext i3 %tmp_832_cast to i5
  %tmp_796 = call i1 @_ssdm_op_BitSelect.i1.i3.i32(i3 %tmp_832_cast, i32 2)
  %tmp_s = call i4 @_ssdm_op_BitConcatenate.i4.i1.i3(i1 %tmp_796, i3 0)
  %tmp_838_cast = zext i4 %tmp_s to i5
  %tmp_790 = sub i5 %tmp_836_cast1, %tmp_838_cast
  %tmp_839_cast = sext i5 %tmp_790 to i8
  store i8 %tmp_839_cast, i8* %r_addr_13, align 1
  br label %4

; <label>:6                                       ; preds = %4
  %r_load = load i8* %r_addr_4, align 1
  %tmp_783 = add i8 %r_load, %carry_cast
  store i8 %tmp_783, i8* %r_addr_4, align 1
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.13([32 x i32]* %r_x_v, [32 x i32]* %r_y_v, [32 x i32]* nocapture %r_z_v, [32 x i32]* nocapture %r_t_v, [32 x i32]* nocapture %s_v) {
  %a_v = alloca [32 x i32], align 4
  %b_v = alloca [32 x i32], align 4
  %t1_v = alloca [32 x i32], align 4
  %t2_v = alloca [32 x i32], align 4
  %c_v = alloca [32 x i32], align 4
  %d_v = alloca [32 x i32], align 4
  %e_v = alloca [32 x i32], align 4
  %f_v = alloca [32 x i32], align 4
  %g_v = alloca [32 x i32], align 4
  %h_v = alloca [32 x i32], align 4
  %qt_v = alloca [32 x i32], align 4
  %b = alloca [85 x i8], align 16
  %t_x_v = alloca [32 x i32], align 4
  %t_y_v = alloca [32 x i32], align 4
  %r_temp_x_v = alloca [32 x i32], align 4
  %r_temp_y_v = alloca [32 x i32], align 4
  %b_addr = getelementptr inbounds [85 x i8]* %b, i64 0, i64 0
  call fastcc void @crypto_sign_ed25519_.14([85 x i8]* %b, [32 x i32]* %s_v)
  %r_temp_x_v_addr = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 0
  %r_x_v_addr = getelementptr [32 x i32]* %r_x_v, i64 0, i64 0
  %r_x_v_load = load i32* %r_x_v_addr, align 4
  store i32 %r_x_v_load, i32* %r_temp_x_v_addr, align 4
  %r_temp_x_v_addr_1 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 1
  %r_x_v_addr_1 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 1
  %r_x_v_load_1 = load i32* %r_x_v_addr_1, align 4
  store i32 %r_x_v_load_1, i32* %r_temp_x_v_addr_1, align 4
  %r_temp_x_v_addr_2 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 2
  %r_x_v_addr_2 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 2
  %r_x_v_load_2 = load i32* %r_x_v_addr_2, align 4
  store i32 %r_x_v_load_2, i32* %r_temp_x_v_addr_2, align 4
  %r_temp_x_v_addr_3 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 3
  %r_x_v_addr_3 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 3
  %r_x_v_load_3 = load i32* %r_x_v_addr_3, align 4
  store i32 %r_x_v_load_3, i32* %r_temp_x_v_addr_3, align 4
  %r_temp_x_v_addr_4 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 4
  %r_x_v_addr_4 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 4
  %r_x_v_load_4 = load i32* %r_x_v_addr_4, align 4
  store i32 %r_x_v_load_4, i32* %r_temp_x_v_addr_4, align 4
  %r_temp_x_v_addr_5 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 5
  %r_x_v_addr_5 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 5
  %r_x_v_load_5 = load i32* %r_x_v_addr_5, align 4
  store i32 %r_x_v_load_5, i32* %r_temp_x_v_addr_5, align 4
  %r_temp_x_v_addr_6 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 6
  %r_x_v_addr_6 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 6
  %r_x_v_load_6 = load i32* %r_x_v_addr_6, align 4
  store i32 %r_x_v_load_6, i32* %r_temp_x_v_addr_6, align 4
  %r_temp_x_v_addr_7 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 7
  %r_x_v_addr_7 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 7
  %r_x_v_load_7 = load i32* %r_x_v_addr_7, align 4
  store i32 %r_x_v_load_7, i32* %r_temp_x_v_addr_7, align 4
  %r_temp_x_v_addr_8 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 8
  %r_x_v_addr_8 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 8
  %r_x_v_load_8 = load i32* %r_x_v_addr_8, align 4
  store i32 %r_x_v_load_8, i32* %r_temp_x_v_addr_8, align 4
  %r_temp_x_v_addr_9 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 9
  %r_x_v_addr_9 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 9
  %r_x_v_load_9 = load i32* %r_x_v_addr_9, align 4
  store i32 %r_x_v_load_9, i32* %r_temp_x_v_addr_9, align 4
  %r_temp_x_v_addr_10 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 10
  %r_x_v_addr_10 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 10
  %r_x_v_load_10 = load i32* %r_x_v_addr_10, align 4
  store i32 %r_x_v_load_10, i32* %r_temp_x_v_addr_10, align 4
  %r_temp_x_v_addr_11 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 11
  %r_x_v_addr_11 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 11
  %r_x_v_load_11 = load i32* %r_x_v_addr_11, align 4
  store i32 %r_x_v_load_11, i32* %r_temp_x_v_addr_11, align 4
  %r_temp_x_v_addr_12 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 12
  %r_x_v_addr_12 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 12
  %r_x_v_load_12 = load i32* %r_x_v_addr_12, align 4
  store i32 %r_x_v_load_12, i32* %r_temp_x_v_addr_12, align 4
  %r_temp_x_v_addr_13 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 13
  %r_x_v_addr_13 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 13
  %r_x_v_load_13 = load i32* %r_x_v_addr_13, align 4
  store i32 %r_x_v_load_13, i32* %r_temp_x_v_addr_13, align 4
  %r_temp_x_v_addr_14 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 14
  %r_x_v_addr_14 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 14
  %r_x_v_load_14 = load i32* %r_x_v_addr_14, align 4
  store i32 %r_x_v_load_14, i32* %r_temp_x_v_addr_14, align 4
  %r_temp_x_v_addr_15 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 15
  %r_x_v_addr_15 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 15
  %r_x_v_load_15 = load i32* %r_x_v_addr_15, align 4
  store i32 %r_x_v_load_15, i32* %r_temp_x_v_addr_15, align 4
  %r_temp_x_v_addr_16 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 16
  %r_x_v_addr_16 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 16
  %r_x_v_load_16 = load i32* %r_x_v_addr_16, align 4
  store i32 %r_x_v_load_16, i32* %r_temp_x_v_addr_16, align 4
  %r_temp_x_v_addr_17 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 17
  %r_x_v_addr_17 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 17
  %r_x_v_load_17 = load i32* %r_x_v_addr_17, align 4
  store i32 %r_x_v_load_17, i32* %r_temp_x_v_addr_17, align 4
  %r_temp_x_v_addr_18 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 18
  %r_x_v_addr_18 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 18
  %r_x_v_load_18 = load i32* %r_x_v_addr_18, align 4
  store i32 %r_x_v_load_18, i32* %r_temp_x_v_addr_18, align 4
  %r_temp_x_v_addr_19 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 19
  %r_x_v_addr_19 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 19
  %r_x_v_load_19 = load i32* %r_x_v_addr_19, align 4
  store i32 %r_x_v_load_19, i32* %r_temp_x_v_addr_19, align 4
  %r_temp_x_v_addr_20 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 20
  %r_x_v_addr_20 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 20
  %r_x_v_load_20 = load i32* %r_x_v_addr_20, align 4
  store i32 %r_x_v_load_20, i32* %r_temp_x_v_addr_20, align 4
  %r_temp_x_v_addr_21 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 21
  %r_x_v_addr_21 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 21
  %r_x_v_load_21 = load i32* %r_x_v_addr_21, align 4
  store i32 %r_x_v_load_21, i32* %r_temp_x_v_addr_21, align 4
  %r_temp_x_v_addr_22 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 22
  %r_x_v_addr_22 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 22
  %r_x_v_load_22 = load i32* %r_x_v_addr_22, align 4
  store i32 %r_x_v_load_22, i32* %r_temp_x_v_addr_22, align 4
  %r_temp_x_v_addr_23 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 23
  %r_x_v_addr_23 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 23
  %r_x_v_load_23 = load i32* %r_x_v_addr_23, align 4
  store i32 %r_x_v_load_23, i32* %r_temp_x_v_addr_23, align 4
  %r_temp_x_v_addr_24 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 24
  %r_x_v_addr_24 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 24
  %r_x_v_load_24 = load i32* %r_x_v_addr_24, align 4
  store i32 %r_x_v_load_24, i32* %r_temp_x_v_addr_24, align 4
  %r_temp_x_v_addr_25 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 25
  %r_x_v_addr_25 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 25
  %r_x_v_load_25 = load i32* %r_x_v_addr_25, align 4
  store i32 %r_x_v_load_25, i32* %r_temp_x_v_addr_25, align 4
  %r_temp_x_v_addr_26 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 26
  %r_x_v_addr_26 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 26
  %r_x_v_load_26 = load i32* %r_x_v_addr_26, align 4
  store i32 %r_x_v_load_26, i32* %r_temp_x_v_addr_26, align 4
  %r_temp_x_v_addr_27 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 27
  %r_x_v_addr_27 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 27
  %r_x_v_load_27 = load i32* %r_x_v_addr_27, align 4
  store i32 %r_x_v_load_27, i32* %r_temp_x_v_addr_27, align 4
  %r_temp_x_v_addr_28 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 28
  %r_x_v_addr_28 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 28
  %r_x_v_load_28 = load i32* %r_x_v_addr_28, align 4
  store i32 %r_x_v_load_28, i32* %r_temp_x_v_addr_28, align 4
  %r_temp_x_v_addr_29 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 29
  %r_x_v_addr_29 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 29
  %r_x_v_load_29 = load i32* %r_x_v_addr_29, align 4
  store i32 %r_x_v_load_29, i32* %r_temp_x_v_addr_29, align 4
  %r_temp_x_v_addr_30 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 30
  %r_x_v_addr_30 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 30
  %r_x_v_load_30 = load i32* %r_x_v_addr_30, align 4
  store i32 %r_x_v_load_30, i32* %r_temp_x_v_addr_30, align 4
  %r_temp_x_v_addr_31 = getelementptr [32 x i32]* %r_temp_x_v, i64 0, i64 31
  %r_x_v_addr_31 = getelementptr [32 x i32]* %r_x_v, i64 0, i64 31
  %r_x_v_load_31 = load i32* %r_x_v_addr_31, align 4
  store i32 %r_x_v_load_31, i32* %r_temp_x_v_addr_31, align 4
  %r_temp_y_v_addr = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 0
  %r_y_v_addr = getelementptr [32 x i32]* %r_y_v, i64 0, i64 0
  %r_y_v_load = load i32* %r_y_v_addr, align 4
  store i32 %r_y_v_load, i32* %r_temp_y_v_addr, align 4
  %r_temp_y_v_addr_1 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 1
  %r_y_v_addr_1 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 1
  %r_y_v_load_1 = load i32* %r_y_v_addr_1, align 4
  store i32 %r_y_v_load_1, i32* %r_temp_y_v_addr_1, align 4
  %r_temp_y_v_addr_2 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 2
  %r_y_v_addr_2 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 2
  %r_y_v_load_2 = load i32* %r_y_v_addr_2, align 4
  store i32 %r_y_v_load_2, i32* %r_temp_y_v_addr_2, align 4
  %r_temp_y_v_addr_3 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 3
  %r_y_v_addr_3 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 3
  %r_y_v_load_3 = load i32* %r_y_v_addr_3, align 4
  store i32 %r_y_v_load_3, i32* %r_temp_y_v_addr_3, align 4
  %r_temp_y_v_addr_4 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 4
  %r_y_v_addr_4 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 4
  %r_y_v_load_4 = load i32* %r_y_v_addr_4, align 4
  store i32 %r_y_v_load_4, i32* %r_temp_y_v_addr_4, align 4
  %r_temp_y_v_addr_5 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 5
  %r_y_v_addr_5 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 5
  %r_y_v_load_5 = load i32* %r_y_v_addr_5, align 4
  store i32 %r_y_v_load_5, i32* %r_temp_y_v_addr_5, align 4
  %r_temp_y_v_addr_6 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 6
  %r_y_v_addr_6 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 6
  %r_y_v_load_6 = load i32* %r_y_v_addr_6, align 4
  store i32 %r_y_v_load_6, i32* %r_temp_y_v_addr_6, align 4
  %r_temp_y_v_addr_7 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 7
  %r_y_v_addr_7 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 7
  %r_y_v_load_7 = load i32* %r_y_v_addr_7, align 4
  store i32 %r_y_v_load_7, i32* %r_temp_y_v_addr_7, align 4
  %r_temp_y_v_addr_8 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 8
  %r_y_v_addr_8 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 8
  %r_y_v_load_8 = load i32* %r_y_v_addr_8, align 4
  store i32 %r_y_v_load_8, i32* %r_temp_y_v_addr_8, align 4
  %r_temp_y_v_addr_9 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 9
  %r_y_v_addr_9 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 9
  %r_y_v_load_9 = load i32* %r_y_v_addr_9, align 4
  store i32 %r_y_v_load_9, i32* %r_temp_y_v_addr_9, align 4
  %r_temp_y_v_addr_10 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 10
  %r_y_v_addr_10 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 10
  %r_y_v_load_10 = load i32* %r_y_v_addr_10, align 4
  store i32 %r_y_v_load_10, i32* %r_temp_y_v_addr_10, align 4
  %r_temp_y_v_addr_11 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 11
  %r_y_v_addr_11 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 11
  %r_y_v_load_11 = load i32* %r_y_v_addr_11, align 4
  store i32 %r_y_v_load_11, i32* %r_temp_y_v_addr_11, align 4
  %r_temp_y_v_addr_12 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 12
  %r_y_v_addr_12 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 12
  %r_y_v_load_12 = load i32* %r_y_v_addr_12, align 4
  store i32 %r_y_v_load_12, i32* %r_temp_y_v_addr_12, align 4
  %r_temp_y_v_addr_13 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 13
  %r_y_v_addr_13 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 13
  %r_y_v_load_13 = load i32* %r_y_v_addr_13, align 4
  store i32 %r_y_v_load_13, i32* %r_temp_y_v_addr_13, align 4
  %r_temp_y_v_addr_14 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 14
  %r_y_v_addr_14 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 14
  %r_y_v_load_14 = load i32* %r_y_v_addr_14, align 4
  store i32 %r_y_v_load_14, i32* %r_temp_y_v_addr_14, align 4
  %r_temp_y_v_addr_15 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 15
  %r_y_v_addr_15 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 15
  %r_y_v_load_15 = load i32* %r_y_v_addr_15, align 4
  store i32 %r_y_v_load_15, i32* %r_temp_y_v_addr_15, align 4
  %r_temp_y_v_addr_16 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 16
  %r_y_v_addr_16 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 16
  %r_y_v_load_16 = load i32* %r_y_v_addr_16, align 4
  store i32 %r_y_v_load_16, i32* %r_temp_y_v_addr_16, align 4
  %r_temp_y_v_addr_17 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 17
  %r_y_v_addr_17 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 17
  %r_y_v_load_17 = load i32* %r_y_v_addr_17, align 4
  store i32 %r_y_v_load_17, i32* %r_temp_y_v_addr_17, align 4
  %r_temp_y_v_addr_18 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 18
  %r_y_v_addr_18 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 18
  %r_y_v_load_18 = load i32* %r_y_v_addr_18, align 4
  store i32 %r_y_v_load_18, i32* %r_temp_y_v_addr_18, align 4
  %r_temp_y_v_addr_19 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 19
  %r_y_v_addr_19 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 19
  %r_y_v_load_19 = load i32* %r_y_v_addr_19, align 4
  store i32 %r_y_v_load_19, i32* %r_temp_y_v_addr_19, align 4
  %r_temp_y_v_addr_20 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 20
  %r_y_v_addr_20 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 20
  %r_y_v_load_20 = load i32* %r_y_v_addr_20, align 4
  store i32 %r_y_v_load_20, i32* %r_temp_y_v_addr_20, align 4
  %r_temp_y_v_addr_21 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 21
  %r_y_v_addr_21 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 21
  %r_y_v_load_21 = load i32* %r_y_v_addr_21, align 4
  store i32 %r_y_v_load_21, i32* %r_temp_y_v_addr_21, align 4
  %r_temp_y_v_addr_22 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 22
  %r_y_v_addr_22 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 22
  %r_y_v_load_22 = load i32* %r_y_v_addr_22, align 4
  store i32 %r_y_v_load_22, i32* %r_temp_y_v_addr_22, align 4
  %r_temp_y_v_addr_23 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 23
  %r_y_v_addr_23 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 23
  %r_y_v_load_23 = load i32* %r_y_v_addr_23, align 4
  store i32 %r_y_v_load_23, i32* %r_temp_y_v_addr_23, align 4
  %r_temp_y_v_addr_24 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 24
  %r_y_v_addr_24 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 24
  %r_y_v_load_24 = load i32* %r_y_v_addr_24, align 4
  store i32 %r_y_v_load_24, i32* %r_temp_y_v_addr_24, align 4
  %r_temp_y_v_addr_25 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 25
  %r_y_v_addr_25 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 25
  %r_y_v_load_25 = load i32* %r_y_v_addr_25, align 4
  store i32 %r_y_v_load_25, i32* %r_temp_y_v_addr_25, align 4
  %r_temp_y_v_addr_26 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 26
  %r_y_v_addr_26 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 26
  %r_y_v_load_26 = load i32* %r_y_v_addr_26, align 4
  store i32 %r_y_v_load_26, i32* %r_temp_y_v_addr_26, align 4
  %r_temp_y_v_addr_27 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 27
  %r_y_v_addr_27 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 27
  %r_y_v_load_27 = load i32* %r_y_v_addr_27, align 4
  store i32 %r_y_v_load_27, i32* %r_temp_y_v_addr_27, align 4
  %r_temp_y_v_addr_28 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 28
  %r_y_v_addr_28 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 28
  %r_y_v_load_28 = load i32* %r_y_v_addr_28, align 4
  store i32 %r_y_v_load_28, i32* %r_temp_y_v_addr_28, align 4
  %r_temp_y_v_addr_29 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 29
  %r_y_v_addr_29 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 29
  %r_y_v_load_29 = load i32* %r_y_v_addr_29, align 4
  store i32 %r_y_v_load_29, i32* %r_temp_y_v_addr_29, align 4
  %r_temp_y_v_addr_30 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 30
  %r_y_v_addr_30 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 30
  %r_y_v_load_30 = load i32* %r_y_v_addr_30, align 4
  store i32 %r_y_v_load_30, i32* %r_temp_y_v_addr_30, align 4
  %r_temp_y_v_addr_31 = getelementptr [32 x i32]* %r_temp_y_v, i64 0, i64 31
  %r_y_v_addr_31 = getelementptr [32 x i32]* %r_y_v, i64 0, i64 31
  %r_y_v_load_31 = load i32* %r_y_v_addr_31, align 4
  store i32 %r_y_v_load_31, i32* %r_temp_y_v_addr_31, align 4
  %b_load = load i8* %b_addr, align 16
  call fastcc void @choose_t([32 x i32]* %r_temp_x_v, [32 x i32]* %r_temp_y_v, i7 0, i8 signext %b_load)
  %r_temp_x_v_load = load i32* %r_temp_x_v_addr, align 4
  store i32 %r_temp_x_v_load, i32* %r_x_v_addr, align 4
  %r_temp_x_v_load_1 = load i32* %r_temp_x_v_addr_1, align 4
  store i32 %r_temp_x_v_load_1, i32* %r_x_v_addr_1, align 4
  %r_temp_x_v_load_2 = load i32* %r_temp_x_v_addr_2, align 4
  store i32 %r_temp_x_v_load_2, i32* %r_x_v_addr_2, align 4
  %r_temp_x_v_load_3 = load i32* %r_temp_x_v_addr_3, align 4
  store i32 %r_temp_x_v_load_3, i32* %r_x_v_addr_3, align 4
  %r_temp_x_v_load_4 = load i32* %r_temp_x_v_addr_4, align 4
  store i32 %r_temp_x_v_load_4, i32* %r_x_v_addr_4, align 4
  %r_temp_x_v_load_5 = load i32* %r_temp_x_v_addr_5, align 4
  store i32 %r_temp_x_v_load_5, i32* %r_x_v_addr_5, align 4
  %r_temp_x_v_load_6 = load i32* %r_temp_x_v_addr_6, align 4
  store i32 %r_temp_x_v_load_6, i32* %r_x_v_addr_6, align 4
  %r_temp_x_v_load_7 = load i32* %r_temp_x_v_addr_7, align 4
  store i32 %r_temp_x_v_load_7, i32* %r_x_v_addr_7, align 4
  %r_temp_x_v_load_8 = load i32* %r_temp_x_v_addr_8, align 4
  store i32 %r_temp_x_v_load_8, i32* %r_x_v_addr_8, align 4
  %r_temp_x_v_load_9 = load i32* %r_temp_x_v_addr_9, align 4
  store i32 %r_temp_x_v_load_9, i32* %r_x_v_addr_9, align 4
  %r_temp_x_v_load_10 = load i32* %r_temp_x_v_addr_10, align 4
  store i32 %r_temp_x_v_load_10, i32* %r_x_v_addr_10, align 4
  %r_temp_x_v_load_11 = load i32* %r_temp_x_v_addr_11, align 4
  store i32 %r_temp_x_v_load_11, i32* %r_x_v_addr_11, align 4
  %r_temp_x_v_load_12 = load i32* %r_temp_x_v_addr_12, align 4
  store i32 %r_temp_x_v_load_12, i32* %r_x_v_addr_12, align 4
  %r_temp_x_v_load_13 = load i32* %r_temp_x_v_addr_13, align 4
  store i32 %r_temp_x_v_load_13, i32* %r_x_v_addr_13, align 4
  %r_temp_x_v_load_14 = load i32* %r_temp_x_v_addr_14, align 4
  store i32 %r_temp_x_v_load_14, i32* %r_x_v_addr_14, align 4
  %r_temp_x_v_load_15 = load i32* %r_temp_x_v_addr_15, align 4
  store i32 %r_temp_x_v_load_15, i32* %r_x_v_addr_15, align 4
  %r_temp_x_v_load_16 = load i32* %r_temp_x_v_addr_16, align 4
  store i32 %r_temp_x_v_load_16, i32* %r_x_v_addr_16, align 4
  %r_temp_x_v_load_17 = load i32* %r_temp_x_v_addr_17, align 4
  store i32 %r_temp_x_v_load_17, i32* %r_x_v_addr_17, align 4
  %r_temp_x_v_load_18 = load i32* %r_temp_x_v_addr_18, align 4
  store i32 %r_temp_x_v_load_18, i32* %r_x_v_addr_18, align 4
  %r_temp_x_v_load_19 = load i32* %r_temp_x_v_addr_19, align 4
  store i32 %r_temp_x_v_load_19, i32* %r_x_v_addr_19, align 4
  %r_temp_x_v_load_20 = load i32* %r_temp_x_v_addr_20, align 4
  store i32 %r_temp_x_v_load_20, i32* %r_x_v_addr_20, align 4
  %r_temp_x_v_load_21 = load i32* %r_temp_x_v_addr_21, align 4
  store i32 %r_temp_x_v_load_21, i32* %r_x_v_addr_21, align 4
  %r_temp_x_v_load_22 = load i32* %r_temp_x_v_addr_22, align 4
  store i32 %r_temp_x_v_load_22, i32* %r_x_v_addr_22, align 4
  %r_temp_x_v_load_23 = load i32* %r_temp_x_v_addr_23, align 4
  store i32 %r_temp_x_v_load_23, i32* %r_x_v_addr_23, align 4
  %r_temp_x_v_load_24 = load i32* %r_temp_x_v_addr_24, align 4
  store i32 %r_temp_x_v_load_24, i32* %r_x_v_addr_24, align 4
  %r_temp_x_v_load_25 = load i32* %r_temp_x_v_addr_25, align 4
  store i32 %r_temp_x_v_load_25, i32* %r_x_v_addr_25, align 4
  %r_temp_x_v_load_26 = load i32* %r_temp_x_v_addr_26, align 4
  store i32 %r_temp_x_v_load_26, i32* %r_x_v_addr_26, align 4
  %r_temp_x_v_load_27 = load i32* %r_temp_x_v_addr_27, align 4
  store i32 %r_temp_x_v_load_27, i32* %r_x_v_addr_27, align 4
  %r_temp_x_v_load_28 = load i32* %r_temp_x_v_addr_28, align 4
  store i32 %r_temp_x_v_load_28, i32* %r_x_v_addr_28, align 4
  %r_temp_x_v_load_29 = load i32* %r_temp_x_v_addr_29, align 4
  store i32 %r_temp_x_v_load_29, i32* %r_x_v_addr_29, align 4
  %r_temp_x_v_load_30 = load i32* %r_temp_x_v_addr_30, align 4
  store i32 %r_temp_x_v_load_30, i32* %r_x_v_addr_30, align 4
  %r_temp_x_v_load_31 = load i32* %r_temp_x_v_addr_31, align 4
  store i32 %r_temp_x_v_load_31, i32* %r_x_v_addr_31, align 4
  %r_temp_y_v_load = load i32* %r_temp_y_v_addr, align 4
  store i32 %r_temp_y_v_load, i32* %r_y_v_addr, align 4
  %r_temp_y_v_load_1 = load i32* %r_temp_y_v_addr_1, align 4
  store i32 %r_temp_y_v_load_1, i32* %r_y_v_addr_1, align 4
  %r_temp_y_v_load_2 = load i32* %r_temp_y_v_addr_2, align 4
  store i32 %r_temp_y_v_load_2, i32* %r_y_v_addr_2, align 4
  %r_temp_y_v_load_3 = load i32* %r_temp_y_v_addr_3, align 4
  store i32 %r_temp_y_v_load_3, i32* %r_y_v_addr_3, align 4
  %r_temp_y_v_load_4 = load i32* %r_temp_y_v_addr_4, align 4
  store i32 %r_temp_y_v_load_4, i32* %r_y_v_addr_4, align 4
  %r_temp_y_v_load_5 = load i32* %r_temp_y_v_addr_5, align 4
  store i32 %r_temp_y_v_load_5, i32* %r_y_v_addr_5, align 4
  %r_temp_y_v_load_6 = load i32* %r_temp_y_v_addr_6, align 4
  store i32 %r_temp_y_v_load_6, i32* %r_y_v_addr_6, align 4
  %r_temp_y_v_load_7 = load i32* %r_temp_y_v_addr_7, align 4
  store i32 %r_temp_y_v_load_7, i32* %r_y_v_addr_7, align 4
  %r_temp_y_v_load_8 = load i32* %r_temp_y_v_addr_8, align 4
  store i32 %r_temp_y_v_load_8, i32* %r_y_v_addr_8, align 4
  %r_temp_y_v_load_9 = load i32* %r_temp_y_v_addr_9, align 4
  store i32 %r_temp_y_v_load_9, i32* %r_y_v_addr_9, align 4
  %r_temp_y_v_load_10 = load i32* %r_temp_y_v_addr_10, align 4
  store i32 %r_temp_y_v_load_10, i32* %r_y_v_addr_10, align 4
  %r_temp_y_v_load_11 = load i32* %r_temp_y_v_addr_11, align 4
  store i32 %r_temp_y_v_load_11, i32* %r_y_v_addr_11, align 4
  %r_temp_y_v_load_12 = load i32* %r_temp_y_v_addr_12, align 4
  store i32 %r_temp_y_v_load_12, i32* %r_y_v_addr_12, align 4
  %r_temp_y_v_load_13 = load i32* %r_temp_y_v_addr_13, align 4
  store i32 %r_temp_y_v_load_13, i32* %r_y_v_addr_13, align 4
  %r_temp_y_v_load_14 = load i32* %r_temp_y_v_addr_14, align 4
  store i32 %r_temp_y_v_load_14, i32* %r_y_v_addr_14, align 4
  %r_temp_y_v_load_15 = load i32* %r_temp_y_v_addr_15, align 4
  store i32 %r_temp_y_v_load_15, i32* %r_y_v_addr_15, align 4
  %r_temp_y_v_load_16 = load i32* %r_temp_y_v_addr_16, align 4
  store i32 %r_temp_y_v_load_16, i32* %r_y_v_addr_16, align 4
  %r_temp_y_v_load_17 = load i32* %r_temp_y_v_addr_17, align 4
  store i32 %r_temp_y_v_load_17, i32* %r_y_v_addr_17, align 4
  %r_temp_y_v_load_18 = load i32* %r_temp_y_v_addr_18, align 4
  store i32 %r_temp_y_v_load_18, i32* %r_y_v_addr_18, align 4
  %r_temp_y_v_load_19 = load i32* %r_temp_y_v_addr_19, align 4
  store i32 %r_temp_y_v_load_19, i32* %r_y_v_addr_19, align 4
  %r_temp_y_v_load_20 = load i32* %r_temp_y_v_addr_20, align 4
  store i32 %r_temp_y_v_load_20, i32* %r_y_v_addr_20, align 4
  %r_temp_y_v_load_21 = load i32* %r_temp_y_v_addr_21, align 4
  store i32 %r_temp_y_v_load_21, i32* %r_y_v_addr_21, align 4
  %r_temp_y_v_load_22 = load i32* %r_temp_y_v_addr_22, align 4
  store i32 %r_temp_y_v_load_22, i32* %r_y_v_addr_22, align 4
  %r_temp_y_v_load_23 = load i32* %r_temp_y_v_addr_23, align 4
  store i32 %r_temp_y_v_load_23, i32* %r_y_v_addr_23, align 4
  %r_temp_y_v_load_24 = load i32* %r_temp_y_v_addr_24, align 4
  store i32 %r_temp_y_v_load_24, i32* %r_y_v_addr_24, align 4
  %r_temp_y_v_load_25 = load i32* %r_temp_y_v_addr_25, align 4
  store i32 %r_temp_y_v_load_25, i32* %r_y_v_addr_25, align 4
  %r_temp_y_v_load_26 = load i32* %r_temp_y_v_addr_26, align 4
  store i32 %r_temp_y_v_load_26, i32* %r_y_v_addr_26, align 4
  %r_temp_y_v_load_27 = load i32* %r_temp_y_v_addr_27, align 4
  store i32 %r_temp_y_v_load_27, i32* %r_y_v_addr_27, align 4
  %r_temp_y_v_load_28 = load i32* %r_temp_y_v_addr_28, align 4
  store i32 %r_temp_y_v_load_28, i32* %r_y_v_addr_28, align 4
  %r_temp_y_v_load_29 = load i32* %r_temp_y_v_addr_29, align 4
  store i32 %r_temp_y_v_load_29, i32* %r_y_v_addr_29, align 4
  %r_temp_y_v_load_30 = load i32* %r_temp_y_v_addr_30, align 4
  store i32 %r_temp_y_v_load_30, i32* %r_y_v_addr_30, align 4
  %r_temp_y_v_load_31 = load i32* %r_temp_y_v_addr_31, align 4
  store i32 %r_temp_y_v_load_31, i32* %r_y_v_addr_31, align 4
  %r_z_v_addr = getelementptr [32 x i32]* %r_z_v, i64 0, i64 0
  store i32 1, i32* %r_z_v_addr, align 4
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i_i = phi i6 [ 1, %0 ], [ %i_57, %2 ]
  %exitcond_i = icmp eq i6 %i_i, -32
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  br i1 %exitcond_i, label %crypto_sign_ed25519_ref_fe25519_setone.exit, label %2

; <label>:2                                       ; preds = %1
  %tmp_i = zext i6 %i_i to i64
  %r_z_v_addr_1 = getelementptr [32 x i32]* %r_z_v, i64 0, i64 %tmp_i
  store i32 0, i32* %r_z_v_addr_1, align 4
  %i_57 = add i6 %i_i, 1
  br label %1

crypto_sign_ed25519_ref_fe25519_setone.exit:      ; preds = %1
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %r_t_v, [32 x i32]* %r_x_v, [32 x i32]* %r_y_v)
  br label %3

; <label>:3                                       ; preds = %4, %crypto_sign_ed25519_ref_fe25519_setone.exit
  %i = phi i7 [ 1, %crypto_sign_ed25519_ref_fe25519_setone.exit ], [ %i_58, %4 ]
  %exitcond = icmp eq i7 %i, -43
  %empty_72 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 84, i64 84, i64 84)
  br i1 %exitcond, label %5, label %4

; <label>:4                                       ; preds = %3
  %tmp = zext i7 %i to i64
  %b_addr_1 = getelementptr inbounds [85 x i8]* %b, i64 0, i64 %tmp
  %b_load_1 = load i8* %b_addr_1, align 1
  call fastcc void @choose_t([32 x i32]* %t_x_v, [32 x i32]* %t_y_v, i7 %i, i8 signext %b_load_1)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %qt_v, [32 x i32]* %t_x_v, [32 x i32]* %t_y_v)
  call fastcc void @crypto_sign_ed25519_.8([32 x i32]* %a_v, [32 x i32]* %r_y_v, [32 x i32]* %r_x_v)
  call fastcc void @crypto_sign_ed25519_.12([32 x i32]* %b_v, [32 x i32]* %r_y_v, [32 x i32]* %r_x_v)
  call fastcc void @crypto_sign_ed25519_.8([32 x i32]* %t1_v, [32 x i32]* %t_y_v, [32 x i32]* %t_x_v)
  call fastcc void @crypto_sign_ed25519_.12([32 x i32]* %t2_v, [32 x i32]* %t_y_v, [32 x i32]* %t_x_v)
  call fastcc void @crypto_sign_ed25519_.17([32 x i32]* %a_v, [32 x i32]* %t1_v)
  call fastcc void @crypto_sign_ed25519_.17([32 x i32]* %b_v, [32 x i32]* %t2_v)
  call fastcc void @crypto_sign_ed25519_.8([32 x i32]* %e_v, [32 x i32]* %b_v, [32 x i32]* %a_v)
  call fastcc void @crypto_sign_ed25519_.12([32 x i32]* %h_v, [32 x i32]* %b_v, [32 x i32]* %a_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %c_v, [32 x i32]* %r_t_v, [32 x i32]* %qt_v)
  call fastcc void @crypto_sign_ed25519_.17([32 x i32]* %c_v, [32 x i32]* @ge25519_ec2d_v)
  call fastcc void @crypto_sign_ed25519_.11([32 x i32]* %d_v, [32 x i32]* %r_z_v)
  call fastcc void @crypto_sign_ed25519_.8([32 x i32]* %f_v, [32 x i32]* %d_v, [32 x i32]* %c_v)
  call fastcc void @crypto_sign_ed25519_.12([32 x i32]* %g_v, [32 x i32]* %d_v, [32 x i32]* %c_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %r_x_v, [32 x i32]* %e_v, [32 x i32]* %f_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %r_y_v, [32 x i32]* %h_v, [32 x i32]* %g_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %r_z_v, [32 x i32]* %g_v, [32 x i32]* %f_v)
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %r_t_v, [32 x i32]* %e_v, [32 x i32]* %h_v)
  %i_58 = add i7 %i, 1
  br label %3

; <label>:5                                       ; preds = %3
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.12([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %x_v, [32 x i32]* nocapture %y_v) {
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i6 [ 0, %0 ], [ %i_59, %2 ]
  %exitcond = icmp eq i6 %i, -32
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_59 = add i6 %i, 1
  br i1 %exitcond, label %3, label %2

; <label>:2                                       ; preds = %1
  %tmp = zext i6 %i to i64
  %x_v_addr = getelementptr [32 x i32]* %x_v, i64 0, i64 %tmp
  %x_v_load = load i32* %x_v_addr, align 4
  %y_v_addr = getelementptr [32 x i32]* %y_v, i64 0, i64 %tmp
  %y_v_load = load i32* %y_v_addr, align 4
  %tmp_s = add i32 %x_v_load, %y_v_load
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp
  store i32 %tmp_s, i32* %r_v_addr, align 4
  br label %1

; <label>:3                                       ; preds = %1
  %r_v_addr_17 = getelementptr [32 x i32]* %r_v, i64 0, i64 31
  %r_v_addr_18 = getelementptr [32 x i32]* %r_v, i64 0, i64 0
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %5
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %3
  %rep_i = phi i3 [ 0, %3 ], [ %rep, %.loopexit.loopexit ]
  %exitcond1_i = icmp eq i3 %rep_i, -4
  %empty_73 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)
  %rep = add i3 %rep_i, 1
  br i1 %exitcond1_i, label %reduce_add_sub64.exit, label %4

; <label>:4                                       ; preds = %.loopexit
  %r_v_load = load i32* %r_v_addr_17, align 4
  %tmp_797 = trunc i32 %r_v_load to i7
  %tmp_777 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %r_v_load, i32 7, i32 31)
  %t_24_cast = zext i25 %tmp_777 to i31
  %tmp_i_cast = zext i7 %tmp_797 to i32
  store i32 %tmp_i_cast, i32* %r_v_addr_17, align 4
  %t = mul i31 19, %t_24_cast
  %t_cast3 = zext i31 %t to i32
  %r_v_load_13 = load i32* %r_v_addr_18, align 4
  %tmp_i = add i32 %t_cast3, %r_v_load_13
  store i32 %tmp_i, i32* %r_v_addr_18, align 4
  br label %5

; <label>:5                                       ; preds = %6, %4
  %i_i = phi i5 [ 0, %4 ], [ %i_60, %6 ]
  %exitcond_i = icmp eq i5 %i_i, -1
  %empty_74 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  %i_60 = add i5 %i_i, 1
  br i1 %exitcond_i, label %.loopexit.loopexit, label %6

; <label>:6                                       ; preds = %5
  %tmp_759_i = zext i5 %i_i to i64
  %r_v_addr_19 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_759_i
  %r_v_load_14 = load i32* %r_v_addr_19, align 4
  %tmp_798 = trunc i32 %r_v_load_14 to i8
  %t_s = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %r_v_load_14, i32 8, i32 31)
  %t_9 = zext i24 %t_s to i32
  %tmp_760_i = zext i5 %i_60 to i64
  %r_v_addr_20 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_760_i
  %r_v_load_15 = load i32* %r_v_addr_20, align 4
  %tmp_761_i = add i32 %t_9, %r_v_load_15
  store i32 %tmp_761_i, i32* %r_v_addr_20, align 4
  %tmp_762_i_cast = zext i8 %tmp_798 to i32
  store i32 %tmp_762_i_cast, i32* %r_v_addr_19, align 4
  br label %5

reduce_add_sub64.exit:                            ; preds = %.loopexit
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.11([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %x_v) {
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i6 [ 0, %0 ], [ %i_61, %2 ]
  %exitcond = icmp eq i6 %i, -32
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_61 = add i6 %i, 1
  br i1 %exitcond, label %3, label %2

; <label>:2                                       ; preds = %1
  %tmp = zext i6 %i to i64
  %x_v_addr = getelementptr [32 x i32]* %x_v, i64 0, i64 %tmp
  %x_v_load = load i32* %x_v_addr, align 4
  %tmp_799 = shl i32 %x_v_load, 1
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp
  store i32 %tmp_799, i32* %r_v_addr, align 4
  br label %1

; <label>:3                                       ; preds = %1
  %r_v_addr_13 = getelementptr [32 x i32]* %r_v, i64 0, i64 31
  %r_v_addr_14 = getelementptr [32 x i32]* %r_v, i64 0, i64 0
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %5
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %3
  %rep_i = phi i3 [ 0, %3 ], [ %rep, %.loopexit.loopexit ]
  %exitcond1_i = icmp eq i3 %rep_i, -4
  %empty_75 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)
  %rep = add i3 %rep_i, 1
  br i1 %exitcond1_i, label %reduce_add_sub64.exit, label %4

; <label>:4                                       ; preds = %.loopexit
  %r_v_load = load i32* %r_v_addr_13, align 4
  %tmp_800 = trunc i32 %r_v_load to i7
  %tmp_780 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %r_v_load, i32 7, i32 31)
  %t_22_cast = zext i25 %tmp_780 to i31
  %tmp_i_cast = zext i7 %tmp_800 to i32
  store i32 %tmp_i_cast, i32* %r_v_addr_13, align 4
  %t = mul i31 19, %t_22_cast
  %t_cast3 = zext i31 %t to i32
  %r_v_load_10 = load i32* %r_v_addr_14, align 4
  %tmp_i = add i32 %t_cast3, %r_v_load_10
  store i32 %tmp_i, i32* %r_v_addr_14, align 4
  br label %5

; <label>:5                                       ; preds = %6, %4
  %i_i = phi i5 [ 0, %4 ], [ %i_62, %6 ]
  %exitcond_i = icmp eq i5 %i_i, -1
  %empty_76 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  %i_62 = add i5 %i_i, 1
  br i1 %exitcond_i, label %.loopexit.loopexit, label %6

; <label>:6                                       ; preds = %5
  %tmp_759_i = zext i5 %i_i to i64
  %r_v_addr_15 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_759_i
  %r_v_load_11 = load i32* %r_v_addr_15, align 4
  %tmp_801 = trunc i32 %r_v_load_11 to i8
  %t_s = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %r_v_load_11, i32 8, i32 31)
  %t_1 = zext i24 %t_s to i32
  %tmp_760_i = zext i5 %i_62 to i64
  %r_v_addr_16 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_760_i
  %r_v_load_12 = load i32* %r_v_addr_16, align 4
  %tmp_761_i = add i32 %t_1, %r_v_load_12
  store i32 %tmp_761_i, i32* %r_v_addr_16, align 4
  %tmp_762_i_cast = zext i8 %tmp_801 to i32
  store i32 %tmp_762_i_cast, i32* %r_v_addr_15, align 4
  br label %5

reduce_add_sub64.exit:                            ; preds = %.loopexit
  ret void
}

define internal fastcc void @crypto_sign_ed25519_.10([32 x i32]* nocapture %r_v, [32 x i32]* nocapture %x_v) {
  %t = alloca [63 x i32], align 16
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i6 [ 0, %0 ], [ %i_63, %2 ]
  %exitcond3 = icmp eq i6 %i, -1
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 63, i64 63, i64 63)
  %i_63 = add i6 %i, 1
  br i1 %exitcond3, label %.preheader5.preheader, label %2

.preheader5.preheader:                            ; preds = %1
  br label %.preheader5

; <label>:2                                       ; preds = %1
  %tmp = zext i6 %i to i64
  %t_addr = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp
  store i32 0, i32* %t_addr, align 4
  br label %1

.preheader5.loopexit:                             ; preds = %.preheader4
  br label %.preheader5

.preheader5:                                      ; preds = %.preheader5.preheader, %.preheader5.loopexit
  %i_1 = phi i6 [ %i_64, %.preheader5.loopexit ], [ 0, %.preheader5.preheader ]
  %exitcond2 = icmp eq i6 %i_1, -32
  %empty_77 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_64 = add i6 %i_1, 1
  br i1 %exitcond2, label %.preheader.preheader, label %.preheader4.preheader

.preheader.preheader:                             ; preds = %.preheader5
  br label %.preheader

.preheader4.preheader:                            ; preds = %.preheader5
  %tmp_s = zext i6 %i_1 to i64
  %x_v_addr = getelementptr [32 x i32]* %x_v, i64 0, i64 %tmp_s
  %x_v_load = load i32* %x_v_addr, align 4
  br label %.preheader4

.preheader4:                                      ; preds = %3, %.preheader4.preheader
  %j = phi i6 [ %j_2, %3 ], [ 0, %.preheader4.preheader ]
  %exitcond1 = icmp eq i6 %j, -32
  %empty_78 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %j_2 = add i6 %j, 1
  br i1 %exitcond1, label %.preheader5.loopexit, label %3

; <label>:3                                       ; preds = %.preheader4
  %tmp_795 = zext i6 %j to i64
  %x_v_addr_63 = getelementptr [32 x i32]* %x_v, i64 0, i64 %tmp_795
  %x_v_load_63 = load i32* %x_v_addr_63, align 4
  %tmp_796 = mul i32 %x_v_load, %x_v_load_63
  %tmp_797 = add i6 %i_1, %j
  %tmp_798 = zext i6 %tmp_797 to i64
  %t_addr_15 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp_798
  %t_load_5 = load i32* %t_addr_15, align 4
  %tmp_799 = add i32 %t_load_5, %tmp_796
  store i32 %tmp_799, i32* %t_addr_15, align 4
  br label %.preheader4

.preheader:                                       ; preds = %.preheader.preheader, %4
  %i_2 = phi i6 [ %i_65, %4 ], [ -32, %.preheader.preheader ]
  %exitcond = icmp eq i6 %i_2, -1
  %empty_79 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  br i1 %exitcond, label %5, label %4

; <label>:4                                       ; preds = %.preheader
  %tmp_791 = xor i6 %i_2, -32
  %tmp_792 = zext i6 %tmp_791 to i64
  %t_addr_13 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp_792
  %t_load_3 = load i32* %t_addr_13, align 4
  %tmp_793 = zext i6 %i_2 to i64
  %t_addr_14 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 %tmp_793
  %t_load_6 = load i32* %t_addr_14, align 4
  %tmp2_i = mul i32 %t_load_6, 38
  %tmp_794 = add i32 %t_load_3, %tmp2_i
  %r_v_addr_6 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_792
  store i32 %tmp_794, i32* %r_v_addr_6, align 4
  %i_65 = add i6 %i_2, 1
  br label %.preheader

; <label>:5                                       ; preds = %.preheader
  %t_addr_12 = getelementptr inbounds [63 x i32]* %t, i64 0, i64 31
  %t_load = load i32* %t_addr_12, align 4
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 31
  store i32 %t_load, i32* %r_v_addr, align 4
  %r_v_addr_7 = getelementptr [32 x i32]* %r_v, i64 0, i64 0
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %7
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %5
  %rep_i = phi i2 [ 0, %5 ], [ %rep, %.loopexit.loopexit ]
  %exitcond1_i = icmp eq i2 %rep_i, -2
  %empty_80 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2)
  %rep = add i2 %rep_i, 1
  br i1 %exitcond1_i, label %reduce_mul.exit, label %6

; <label>:6                                       ; preds = %.loopexit
  %r_v_load = load i32* %r_v_addr, align 4
  %tmp_802 = trunc i32 %r_v_load to i7
  %tmp_782 = call i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32 %r_v_load, i32 7, i32 31)
  %t_12_cast = zext i25 %tmp_782 to i31
  %tmp_i_cast = zext i7 %tmp_802 to i32
  store i32 %tmp_i_cast, i32* %r_v_addr, align 4
  %t_2 = mul i31 19, %t_12_cast
  %t_10_cast6 = zext i31 %t_2 to i32
  %r_v_load_4 = load i32* %r_v_addr_7, align 4
  %tmp_i = add i32 %t_10_cast6, %r_v_load_4
  store i32 %tmp_i, i32* %r_v_addr_7, align 4
  br label %7

; <label>:7                                       ; preds = %8, %6
  %i_i = phi i5 [ 0, %6 ], [ %i_66, %8 ]
  %exitcond_i = icmp eq i5 %i_i, -1
  %empty_81 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 31, i64 31, i64 31)
  %i_66 = add i5 %i_i, 1
  br i1 %exitcond_i, label %.loopexit.loopexit, label %8

; <label>:8                                       ; preds = %7
  %tmp_755_i = zext i5 %i_i to i64
  %r_v_addr_8 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_755_i
  %r_v_load_5 = load i32* %r_v_addr_8, align 4
  %tmp_803 = trunc i32 %r_v_load_5 to i8
  %t_s = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %r_v_load_5, i32 8, i32 31)
  %t_3 = zext i24 %t_s to i32
  %tmp_756_i = zext i5 %i_66 to i64
  %r_v_addr_9 = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_756_i
  %r_v_load_6 = load i32* %r_v_addr_9, align 4
  %tmp_757_i = add i32 %t_3, %r_v_load_6
  store i32 %tmp_757_i, i32* %r_v_addr_9, align 4
  %tmp_758_i_cast = zext i8 %tmp_803 to i32
  store i32 %tmp_758_i_cast, i32* %r_v_addr_8, align 4
  br label %7

reduce_mul.exit:                                  ; preds = %.loopexit
  ret void
}

define i32 @crypto_sign(i8* %mem, i32 %num_blocks, [64 x i8]* %sk, [64 x i8]* %signature_out) {
  %num_blocks_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %num_blocks)
  %t_11 = alloca [64 x i32], align 16
  %t_10 = alloca [64 x i32], align 16
  %tx_v = alloca [32 x i32], align 4
  %ty_v = alloca [32 x i32], align 4
  %zi_v = alloca [32 x i32], align 4
  %t = alloca [64 x i32], align 16
  call void (...)* @_ssdm_op_SpecBitsMap(i8* %mem), !map !133
  call void (...)* @_ssdm_op_SpecBitsMap(i32 %num_blocks) nounwind, !map !139
  call void (...)* @_ssdm_op_SpecBitsMap([64 x i8]* %sk) nounwind, !map !145
  call void (...)* @_ssdm_op_SpecBitsMap([64 x i8]* %signature_out) nounwind, !map !151
  call void (...)* @_ssdm_op_SpecBitsMap(i32 0) nounwind, !map !155
  call void (...)* @_ssdm_op_SpecTopModule([12 x i8]* @crypto_sign_str) nounwind
  %pk = alloca [32 x i8], align 16
  %az = alloca [64 x i8], align 16
  %nonce = alloca [64 x i8], align 16
  %hram = alloca [64 x i8], align 16
  %signature = alloca [64 x i8], align 16
  %temp_buf = alloca [128 x i8], align 16
  %sck_v = alloca [32 x i32], align 4
  %scs_v = alloca [32 x i32], align 4
  %scsk_v = alloca [32 x i32], align 4
  %ger_x_v = alloca [32 x i32], align 4
  %ger_y_v = alloca [32 x i32], align 4
  %ger_z_v = alloca [32 x i32], align 4
  %ger_t_v = alloca [32 x i32], align 4
  %hash_state = alloca [8 x i64], align 8
  %hash_buf = alloca [128 x i8], align 1
  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind
  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([64 x i8]* %signature_out, [1 x i8]* @p_str13, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str13, i32 -1, [1 x i8]* @p_str13, [1 x i8]* @p_str13, [1 x i8]* @p_str13, [1 x i8]* @p_str13, [1 x i8]* @p_str13)
  call void (...)* @_ssdm_op_SpecInterface([64 x i8]* %signature_out, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind
  %empty_82 = call i32 (...)* @_ssdm_op_SpecMemCore([64 x i8]* %sk, [1 x i8]* @p_str12, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str12, i32 -1, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12)
  call void (...)* @_ssdm_op_SpecInterface([64 x i8]* %sk, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind
  call void (...)* @_ssdm_op_SpecInterface(i32 %num_blocks, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind
  call void (...)* @_ssdm_op_SpecInterface(i8* %mem, [6 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 32768, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1)
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [17 x i8]* @p_str3, [1 x i8]* @p_str1) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [18 x i8]* @p_str4, [1 x i8]* @p_str1) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [13 x i8]* @p_str5, [1 x i8]* @p_str1) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [12 x i8]* @p_str6, [1 x i8]* @p_str1) nounwind
  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [9 x i8]* @p_str7, [1 x i8]* @p_str1) nounwind
  %empty_83 = call i32 (...)* @_ssdm_op_SpecMemCore([64 x i8]* %signature, [1 x i8]* @p_str12, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str12, i32 -1, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12)
  br label %meminst

meminst:                                          ; preds = %meminst, %0
  %invdar = phi i6 [ 0, %0 ], [ %indvarinc, %meminst ]
  %indvarinc = add i6 %invdar, 1
  %tmp = zext i6 %invdar to i64
  %signature_addr = getelementptr [64 x i8]* %signature, i64 0, i64 %tmp
  store i8 0, i8* %signature_addr, align 1
  %tmp_s = icmp eq i6 %invdar, -1
  %empty_84 = call i32 (...)* @_ssdm_op_SpecLoopName([17 x i8]* @memset_signature_str) nounwind
  %empty_85 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64) nounwind
  br i1 %tmp_s, label %.preheader109.preheader, label %meminst

.preheader109.preheader:                          ; preds = %meminst
  br label %.preheader109

.preheader109:                                    ; preds = %.preheader109.preheader, %1
  %i_i_i = phi i6 [ %i_73, %1 ], [ 0, %.preheader109.preheader ]
  %exitcond_i_i = icmp eq i6 %i_i_i, -32
  %empty_86 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32) nounwind
  %i_73 = add i6 %i_i_i, 1
  br i1 %exitcond_i_i, label %_memmove.1.exit, label %1

; <label>:1                                       ; preds = %.preheader109
  %tmp_i_i = zext i6 %i_i_i to i64
  %sum_i_i = xor i6 %i_i_i, -32
  %sum_i_i_cast = zext i6 %sum_i_i to i64
  %sk_addr = getelementptr [64 x i8]* %sk, i64 0, i64 %sum_i_i_cast
  %sk_load = load i8* %sk_addr, align 1
  %pk_addr = getelementptr [32 x i8]* %pk, i64 0, i64 %tmp_i_i
  store i8 %sk_load, i8* %pk_addr, align 1
  br label %.preheader109

_memmove.1.exit:                                  ; preds = %.preheader109
  call fastcc void @sha512_init([8 x i64]* %hash_state) nounwind
  %call_ret = call fastcc { i64, i64 } @sha512_update_32([8 x i64]* %hash_state, [128 x i8]* %hash_buf, [64 x i8]* %sk) nounwind
  %hash_length = extractvalue { i64, i64 } %call_ret, 0
  %hash_curlen = extractvalue { i64, i64 } %call_ret, 1
  %az_addr = getelementptr inbounds [64 x i8]* %az, i64 0, i64 0
  call fastcc void @sha512_final(i64 %hash_length, [8 x i64]* %hash_state, i64 %hash_curlen, [128 x i8]* %hash_buf, [64 x i8]* %az) nounwind
  %az_load = load i8* %az_addr, align 16
  %tmp_784 = call i5 @_ssdm_op_PartSelect.i5.i8.i32.i32(i8 %az_load, i32 3, i32 7)
  %tmp_800 = call i8 @_ssdm_op_BitConcatenate.i8.i5.i3(i5 %tmp_784, i3 0)
  store i8 %tmp_800, i8* %az_addr, align 16
  %az_addr_1 = getelementptr inbounds [64 x i8]* %az, i64 0, i64 31
  %az_load_1 = load i8* %az_addr_1, align 1
  %tmp_804 = trunc i8 %az_load_1 to i6
  %tmp_801 = call i7 @_ssdm_op_BitConcatenate.i7.i1.i6(i1 true, i6 %tmp_804)
  %tmp_894_cast = zext i7 %tmp_801 to i8
  store i8 %tmp_894_cast, i8* %az_addr_1, align 1
  br label %2

; <label>:2                                       ; preds = %3, %_memmove.1.exit
  %i_i_i1 = phi i6 [ 0, %_memmove.1.exit ], [ %i_74, %3 ]
  %exitcond_i_i1 = icmp eq i6 %i_i_i1, -32
  %empty_87 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32) nounwind
  %i_74 = add i6 %i_i_i1, 1
  br i1 %exitcond_i_i1, label %_memmove.2.exit, label %3

; <label>:3                                       ; preds = %2
  %sum3_i_i = xor i6 %i_i_i1, -32
  %sum3_i_i_cast = zext i6 %sum3_i_i to i64
  %az_addr_2 = getelementptr [64 x i8]* %az, i64 0, i64 %sum3_i_i_cast
  %az_load_2 = load i8* %az_addr_2, align 1
  %signature_addr_1 = getelementptr [64 x i8]* %signature, i64 0, i64 %sum3_i_i_cast
  store i8 %az_load_2, i8* %signature_addr_1, align 1
  br label %2

_memmove.2.exit:                                  ; preds = %2
  call fastcc void @sha512_init([8 x i64]* %hash_state) nounwind
  %tmp_10 = call fastcc { i64, i64 } @sha512_update_32.1(i64 0, [8 x i64]* %hash_state, i64 0, [128 x i8]* %hash_buf, [64 x i8]* %signature, i7 32) nounwind
  %hash_length_2 = extractvalue { i64, i64 } %tmp_10, 0
  %hash_curlen_2 = extractvalue { i64, i64 } %tmp_10, 1
  br label %4

; <label>:4                                       ; preds = %6, %_memmove.2.exit
  %hash_curlen3 = phi i64 [ %hash_curlen_2, %_memmove.2.exit ], [ %hash_curlen_5, %6 ]
  %hash_length3 = phi i64 [ %hash_length_2, %_memmove.2.exit ], [ %hash_length_5, %6 ]
  %i = phi i32 [ 0, %_memmove.2.exit ], [ %i_75, %6 ]
  %exitcond3 = icmp eq i32 %i, %num_blocks_read
  %i_75 = add nsw i32 %i, 1
  br i1 %exitcond3, label %7, label %.preheader4.preheader

.preheader4.preheader:                            ; preds = %4
  %tmp_806 = shl i32 %i, 7
  %tmp_80 = sext i32 %tmp_806 to i64
  %mem_addr = getelementptr i8* %mem, i64 %tmp_80
  %mem_addr_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %mem_addr, i32 128)
  br label %.preheader4

.preheader4:                                      ; preds = %5, %.preheader4.preheader
  %j = phi i8 [ %j_3, %5 ], [ 0, %.preheader4.preheader ]
  %exitcond2 = icmp eq i8 %j, -128
  %empty_88 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128) nounwind
  %j_3 = add i8 %j, 1
  br i1 %exitcond2, label %6, label %5

; <label>:5                                       ; preds = %.preheader4
  %mem_addr_read = call i8 @_ssdm_op_Read.m_axi.i8P(i8* %mem_addr)
  %tmp_802 = zext i8 %j to i64
  %temp_buf_addr = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_802
  store i8 %mem_addr_read, i8* %temp_buf_addr, align 1
  br label %.preheader4

; <label>:6                                       ; preds = %.preheader4
  %call_ret1 = call fastcc { i64, i64 } @sha512_update_128(i64 %hash_length3, [8 x i64]* %hash_state, i64 %hash_curlen3, [128 x i8]* %hash_buf, [128 x i8]* %temp_buf) nounwind
  %hash_length_5 = extractvalue { i64, i64 } %call_ret1, 0
  %hash_curlen_5 = extractvalue { i64, i64 } %call_ret1, 1
  br label %4

; <label>:7                                       ; preds = %4
  call fastcc void @sha512_final(i64 %hash_length3, [8 x i64]* %hash_state, i64 %hash_curlen3, [128 x i8]* %hash_buf, [64 x i8]* %nonce) nounwind
  br label %8

; <label>:8                                       ; preds = %9, %7
  %i_i = phi i7 [ 0, %7 ], [ %i_2, %9 ]
  %exitcond_i = icmp eq i7 %i_i, -64
  %empty_89 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64) nounwind
  %i_2 = add i7 %i_i, 1
  br i1 %exitcond_i, label %crypto_sign_ed25519_ref_sc25519_from64bytes.exit, label %9

; <label>:9                                       ; preds = %8
  %tmp_i = zext i7 %i_i to i64
  %nonce_addr = getelementptr [64 x i8]* %nonce, i64 0, i64 %tmp_i
  %nonce_load = load i8* %nonce_addr, align 1
  %tmp_i_90 = zext i8 %nonce_load to i32
  %t_addr = getelementptr inbounds [64 x i32]* %t, i64 0, i64 %tmp_i
  store i32 %tmp_i_90, i32* %t_addr, align 4
  br label %8

crypto_sign_ed25519_ref_sc25519_from64bytes.exit: ; preds = %8
  call fastcc void @barrett_reduce([32 x i32]* %sck_v, [64 x i32]* %t) nounwind
  call fastcc void @crypto_sign_ed25519_.13([32 x i32]* %ger_x_v, [32 x i32]* %ger_y_v, [32 x i32]* %ger_z_v, [32 x i32]* %ger_t_v, [32 x i32]* %sck_v) nounwind
  call fastcc void @crypto_sign_ed25519_.19([32 x i32]* %zi_v, [32 x i32]* %ger_z_v) nounwind
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %tx_v, [32 x i32]* %ger_x_v, [32 x i32]* %zi_v) nounwind
  call fastcc void @crypto_sign_ed25519_.18([32 x i32]* %ty_v, [32 x i32]* %ger_y_v, [32 x i32]* %zi_v) nounwind
  call fastcc void @crypto_sign_ed25519_.9([64 x i8]* %signature, [32 x i32]* %ty_v) nounwind
  %tmp_i1 = call fastcc i1 @crypto_sign_ed25519_.20([32 x i32]* %tx_v) nounwind
  %tmp_i1_91 = call i8 @_ssdm_op_BitConcatenate.i8.i1.i7(i1 %tmp_i1, i7 0)
  %signature_addr_2 = getelementptr [64 x i8]* %signature, i64 0, i64 31
  %signature_load = load i8* %signature_addr_2, align 1
  %tmp_863_i = xor i8 %signature_load, %tmp_i1_91
  store i8 %tmp_863_i, i8* %signature_addr_2, align 1
  call fastcc void @_memmove([64 x i8]* %signature, [32 x i8]* %pk) nounwind
  call fastcc void @sha512_init([8 x i64]* %hash_state) nounwind
  %tmp_11 = call fastcc { i64, i64 } @sha512_update_32.1(i64 0, [8 x i64]* %hash_state, i64 0, [128 x i8]* %hash_buf, [64 x i8]* %signature, i7 0) nounwind
  %hash_length_3 = extractvalue { i64, i64 } %tmp_11, 0
  %hash_curlen_3 = extractvalue { i64, i64 } %tmp_11, 1
  %tmp_12 = call fastcc { i64, i64 } @sha512_update_32.1(i64 %hash_length_3, [8 x i64]* %hash_state, i64 %hash_curlen_3, [128 x i8]* %hash_buf, [64 x i8]* %signature, i7 32) nounwind
  %hash_length_4 = extractvalue { i64, i64 } %tmp_12, 0
  %hash_curlen_4 = extractvalue { i64, i64 } %tmp_12, 1
  br label %10

; <label>:10                                      ; preds = %12, %crypto_sign_ed25519_ref_sc25519_from64bytes.exit
  %hash_curlen_1 = phi i64 [ %hash_curlen_4, %crypto_sign_ed25519_ref_sc25519_from64bytes.exit ], [ %hash_curlen_6, %12 ]
  %hash_length_1 = phi i64 [ %hash_length_4, %crypto_sign_ed25519_ref_sc25519_from64bytes.exit ], [ %hash_length_6, %12 ]
  %i_1 = phi i32 [ 0, %crypto_sign_ed25519_ref_sc25519_from64bytes.exit ], [ %i_76, %12 ]
  %exitcond1 = icmp eq i32 %i_1, %num_blocks_read
  %i_76 = add nsw i32 %i_1, 1
  br i1 %exitcond1, label %13, label %.preheader.preheader

.preheader.preheader:                             ; preds = %10
  %tmp_807 = shl i32 %i_1, 7
  %tmp_808 = sext i32 %tmp_807 to i64
  %mem_addr_1 = getelementptr i8* %mem, i64 %tmp_808
  %p_rd_req = call i1 @_ssdm_op_ReadReq.m_axi.i8P(i8* %mem_addr_1, i32 128)
  br label %.preheader

.preheader:                                       ; preds = %11, %.preheader.preheader
  %j_1 = phi i8 [ %j_4, %11 ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i8 %j_1, -128
  %empty_92 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 128, i64 128, i64 128) nounwind
  %j_4 = add i8 %j_1, 1
  br i1 %exitcond, label %12, label %11

; <label>:11                                      ; preds = %.preheader
  %mem_addr_1_read = call i8 @_ssdm_op_Read.m_axi.i8P(i8* %mem_addr_1)
  %tmp_803 = zext i8 %j_1 to i64
  %temp_buf_addr_6 = getelementptr inbounds [128 x i8]* %temp_buf, i64 0, i64 %tmp_803
  store i8 %mem_addr_1_read, i8* %temp_buf_addr_6, align 1
  br label %.preheader

; <label>:12                                      ; preds = %.preheader
  %call_ret2 = call fastcc { i64, i64 } @sha512_update_128(i64 %hash_length_1, [8 x i64]* %hash_state, i64 %hash_curlen_1, [128 x i8]* %hash_buf, [128 x i8]* %temp_buf) nounwind
  %hash_length_6 = extractvalue { i64, i64 } %call_ret2, 0
  %hash_curlen_6 = extractvalue { i64, i64 } %call_ret2, 1
  br label %10

; <label>:13                                      ; preds = %10
  call fastcc void @sha512_final(i64 %hash_length_1, [8 x i64]* %hash_state, i64 %hash_curlen_1, [128 x i8]* %hash_buf, [64 x i8]* %hram) nounwind
  br label %14

; <label>:14                                      ; preds = %15, %13
  %i_i1 = phi i7 [ 0, %13 ], [ %i_3, %15 ]
  %exitcond_i1 = icmp eq i7 %i_i1, -64
  %empty_93 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64) nounwind
  %i_3 = add i7 %i_i1, 1
  br i1 %exitcond_i1, label %crypto_sign_ed25519_ref_sc25519_from64bytes.exit92, label %15

; <label>:15                                      ; preds = %14
  %tmp_i2 = zext i7 %i_i1 to i64
  %hram_addr = getelementptr [64 x i8]* %hram, i64 0, i64 %tmp_i2
  %hram_load = load i8* %hram_addr, align 1
  %tmp_i2_94 = zext i8 %hram_load to i32
  %t_10_addr = getelementptr inbounds [64 x i32]* %t_10, i64 0, i64 %tmp_i2
  store i32 %tmp_i2_94, i32* %t_10_addr, align 4
  br label %14

crypto_sign_ed25519_ref_sc25519_from64bytes.exit92: ; preds = %14
  call fastcc void @barrett_reduce([32 x i32]* %scs_v, [64 x i32]* %t_10) nounwind
  br label %16

; <label>:16                                      ; preds = %17, %crypto_sign_ed25519_ref_sc25519_from64bytes.exit92
  %i_i2 = phi i6 [ 0, %crypto_sign_ed25519_ref_sc25519_from64bytes.exit92 ], [ %i_77, %17 ]
  %exitcond1_i = icmp eq i6 %i_i2, -32
  %empty_95 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32) nounwind
  %i_77 = add i6 %i_i2, 1
  br i1 %exitcond1_i, label %.preheader.i.preheader, label %17

.preheader.i.preheader:                           ; preds = %16
  br label %.preheader.i

; <label>:17                                      ; preds = %16
  %tmp_i3 = zext i6 %i_i2 to i64
  %az_addr_3 = getelementptr [64 x i8]* %az, i64 0, i64 %tmp_i3
  %az_load_3 = load i8* %az_addr_3, align 1
  %tmp_i3_96 = zext i8 %az_load_3 to i32
  %t_11_addr = getelementptr inbounds [64 x i32]* %t_11, i64 0, i64 %tmp_i3
  store i32 %tmp_i3_96, i32* %t_11_addr, align 4
  br label %16

.preheader.i:                                     ; preds = %.preheader.i.preheader, %18
  %i_1_i = phi i7 [ %i_78, %18 ], [ 32, %.preheader.i.preheader ]
  %exitcond_i2 = icmp eq i7 %i_1_i, -64
  %empty_97 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32) nounwind
  br i1 %exitcond_i2, label %crypto_sign_ed25519_ref_sc25519_from32bytes.exit, label %18

; <label>:18                                      ; preds = %.preheader.i
  %tmp_858_i = zext i7 %i_1_i to i64
  %t_11_addr_1 = getelementptr inbounds [64 x i32]* %t_11, i64 0, i64 %tmp_858_i
  store i32 0, i32* %t_11_addr_1, align 4
  %i_78 = add i7 %i_1_i, 1
  br label %.preheader.i

crypto_sign_ed25519_ref_sc25519_from32bytes.exit: ; preds = %.preheader.i
  call fastcc void @barrett_reduce([32 x i32]* %scsk_v, [64 x i32]* %t_11) nounwind
  call fastcc void @crypto_sign_ed25519_.15([32 x i32]* %scs_v, [32 x i32]* %scsk_v) nounwind
  call fastcc void @crypto_sign_ed25519_.16([32 x i32]* %scs_v, [32 x i32]* %sck_v) nounwind
  br label %19

; <label>:19                                      ; preds = %20, %crypto_sign_ed25519_ref_sc25519_from32bytes.exit
  %i_i3 = phi i6 [ 0, %crypto_sign_ed25519_ref_sc25519_from32bytes.exit ], [ %i_79, %20 ]
  %exitcond_i3 = icmp eq i6 %i_i3, -32
  %empty_98 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32) nounwind
  %i_79 = add i6 %i_i3, 1
  br i1 %exitcond_i3, label %crypto_sign_ed25519_ref_sc25519_to32bytes.exit.preheader, label %20

crypto_sign_ed25519_ref_sc25519_to32bytes.exit.preheader: ; preds = %19
  br label %crypto_sign_ed25519_ref_sc25519_to32bytes.exit

; <label>:20                                      ; preds = %19
  %tmp_i4 = zext i6 %i_i3 to i64
  %scs_v_addr = getelementptr [32 x i32]* %scs_v, i64 0, i64 %tmp_i4
  %scs_v_load = load i32* %scs_v_addr, align 4
  %tmp_809 = trunc i32 %scs_v_load to i8
  %sum_i = xor i6 %i_i3, -32
  %sum_i_cast = zext i6 %sum_i to i64
  %signature_addr_3 = getelementptr [64 x i8]* %signature, i64 0, i64 %sum_i_cast
  store i8 %tmp_809, i8* %signature_addr_3, align 1
  br label %19

crypto_sign_ed25519_ref_sc25519_to32bytes.exit:   ; preds = %crypto_sign_ed25519_ref_sc25519_to32bytes.exit.preheader, %21
  %i_i4 = phi i7 [ %i_80, %21 ], [ 0, %crypto_sign_ed25519_ref_sc25519_to32bytes.exit.preheader ]
  %exitcond_i4 = icmp eq i7 %i_i4, -64
  %empty_99 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 64, i64 64, i64 64) nounwind
  %i_80 = add i7 %i_i4, 1
  br i1 %exitcond_i4, label %_memcpy.2.exit, label %21

; <label>:21                                      ; preds = %crypto_sign_ed25519_ref_sc25519_to32bytes.exit
  %tmp_i5 = zext i7 %i_i4 to i64
  %signature_addr_4 = getelementptr [64 x i8]* %signature, i64 0, i64 %tmp_i5
  %signature_load_1 = load i8* %signature_addr_4, align 1
  %signature_out_addr = getelementptr [64 x i8]* %signature_out, i64 0, i64 %tmp_i5
  store i8 %signature_load_1, i8* %signature_out_addr, align 1
  br label %crypto_sign_ed25519_ref_sc25519_to32bytes.exit

_memcpy.2.exit:                                   ; preds = %crypto_sign_ed25519_ref_sc25519_to32bytes.exit
  ret i32 0
}

define internal fastcc void @cmov_aff([32 x i32]* nocapture %r_x_v, [32 x i32]* %r_y_v, [13600 x i32]* %p_x_v, i9 %tmp_919, [13600 x i32]* %p_y_v, i9 %tmp_9191, i1 %b) {
  %mask = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %b)
  %tmp_9191_read = call i9 @_ssdm_op_Read.ap_auto.i9(i9 %tmp_9191)
  %tmp_919_read = call i9 @_ssdm_op_Read.ap_auto.i9(i9 %tmp_919)
  %tmp = call i14 @_ssdm_op_BitConcatenate.i14.i9.i5(i9 %tmp_9191_read, i5 0)
  %tmp_787_cast = zext i14 %tmp to i15
  %tmp_788 = call i14 @_ssdm_op_BitConcatenate.i14.i9.i5(i9 %tmp_919_read, i5 0)
  %tmp_789_cast = zext i14 %tmp_788 to i15
  %mask_cast = select i1 %mask, i32 -1, i32 0
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i_i = phi i6 [ 0, %0 ], [ %i, %2 ]
  %exitcond_i = icmp eq i6 %i_i, -32
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i = add i6 %i_i, 1
  br i1 %exitcond_i, label %crypto_sign_ed25519_ref_fe25519_cmov.exit.preheader, label %2

crypto_sign_ed25519_ref_fe25519_cmov.exit.preheader: ; preds = %1
  br label %crypto_sign_ed25519_ref_fe25519_cmov.exit

; <label>:2                                       ; preds = %1
  %tmp_i = zext i6 %i_i to i64
  %tmp_i_cast = zext i6 %i_i to i15
  %tmp_790 = add i15 %tmp_789_cast, %tmp_i_cast
  %tmp_790_cast = zext i15 %tmp_790 to i64
  %p_x_v_addr = getelementptr [13600 x i32]* %p_x_v, i64 0, i64 %tmp_790_cast
  %p_x_v_load = load i32* %p_x_v_addr, align 4
  %r_x_v_addr = getelementptr [32 x i32]* %r_x_v, i64 0, i64 %tmp_i
  %r_x_v_load = load i32* %r_x_v_addr, align 4
  %tmp_894_i = xor i32 %r_x_v_load, %p_x_v_load
  %tmp_895_i = and i32 %tmp_894_i, %mask_cast
  %tmp_896_i = xor i32 %r_x_v_load, %tmp_895_i
  store i32 %tmp_896_i, i32* %r_x_v_addr, align 4
  br label %1

crypto_sign_ed25519_ref_fe25519_cmov.exit:        ; preds = %crypto_sign_ed25519_ref_fe25519_cmov.exit.preheader, %3
  %i_i5 = phi i6 [ %i_81, %3 ], [ 0, %crypto_sign_ed25519_ref_fe25519_cmov.exit.preheader ]
  %exitcond_i6 = icmp eq i6 %i_i5, -32
  %empty_100 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_81 = add i6 %i_i5, 1
  br i1 %exitcond_i6, label %crypto_sign_ed25519_ref_fe25519_cmov.exit16, label %3

; <label>:3                                       ; preds = %crypto_sign_ed25519_ref_fe25519_cmov.exit
  %tmp_i7 = zext i6 %i_i5 to i64
  %tmp_i7_cast = zext i6 %i_i5 to i15
  %tmp_791 = add i15 %tmp_787_cast, %tmp_i7_cast
  %tmp_791_cast = zext i15 %tmp_791 to i64
  %p_y_v_addr = getelementptr [13600 x i32]* %p_y_v, i64 0, i64 %tmp_791_cast
  %p_y_v_load = load i32* %p_y_v_addr, align 4
  %r_y_v_addr = getelementptr [32 x i32]* %r_y_v, i64 0, i64 %tmp_i7
  %r_y_v_load = load i32* %r_y_v_addr, align 4
  %tmp_894_i1 = xor i32 %r_y_v_load, %p_y_v_load
  %tmp_895_i1 = and i32 %tmp_894_i1, %mask_cast
  %tmp_896_i1 = xor i32 %r_y_v_load, %tmp_895_i1
  store i32 %tmp_896_i1, i32* %r_y_v_addr, align 4
  br label %crypto_sign_ed25519_ref_fe25519_cmov.exit

crypto_sign_ed25519_ref_fe25519_cmov.exit16:      ; preds = %crypto_sign_ed25519_ref_fe25519_cmov.exit
  ret void
}

define internal fastcc void @choose_t([32 x i32]* %t_x_v, [32 x i32]* %t_y_v, i7 %pos_r, i8 %b) {
  %b_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %b)
  %pos_read = call i7 @_ssdm_op_Read.ap_auto.i7(i7 %pos_r)
  %t_v = alloca [32 x i32], align 4
  %v_v = alloca [32 x i32], align 4
  %pos_cast4 = zext i7 %pos_read to i9
  %p_shl = call i9 @_ssdm_op_BitConcatenate.i9.i7.i2(i7 %pos_read, i2 0)
  %tmp = add i9 %p_shl, %pos_cast4
  %tmp_792 = call i14 @_ssdm_op_BitConcatenate.i14.i9.i5(i9 %tmp, i5 0)
  %tmp_793 = zext i14 %tmp_792 to i64
  %ge25519_base_multipl = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_793
  %tmp_794 = or i14 %tmp_792, 1
  %tmp_795 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_794)
  %ge25519_base_multipl_2 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_795
  %tmp_796 = or i14 %tmp_792, 2
  %tmp_797 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_796)
  %ge25519_base_multipl_3 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_797
  %tmp_798 = or i14 %tmp_792, 3
  %tmp_799 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_798)
  %ge25519_base_multipl_4 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_799
  %tmp_800 = or i14 %tmp_792, 4
  %tmp_801 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_800)
  %ge25519_base_multipl_5 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_801
  %tmp_802 = or i14 %tmp_792, 5
  %tmp_803 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_802)
  %ge25519_base_multipl_6 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_803
  %tmp_804 = or i14 %tmp_792, 6
  %tmp_805 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_804)
  %ge25519_base_multipl_7 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_805
  %tmp_806 = or i14 %tmp_792, 7
  %tmp_807 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_806)
  %ge25519_base_multipl_8 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_807
  %tmp_808 = or i14 %tmp_792, 8
  %tmp_809 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_808)
  %ge25519_base_multipl_9 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_809
  %tmp_810 = or i14 %tmp_792, 9
  %tmp_811 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_810)
  %ge25519_base_multipl_10 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_811
  %tmp_812 = or i14 %tmp_792, 10
  %tmp_813 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_812)
  %ge25519_base_multipl_11 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_813
  %tmp_814 = or i14 %tmp_792, 11
  %tmp_815 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_814)
  %ge25519_base_multipl_12 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_815
  %tmp_816 = or i14 %tmp_792, 12
  %tmp_817 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_816)
  %ge25519_base_multipl_13 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_817
  %tmp_818 = or i14 %tmp_792, 13
  %tmp_819 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_818)
  %ge25519_base_multipl_14 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_819
  %tmp_820 = or i14 %tmp_792, 14
  %tmp_821 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_820)
  %ge25519_base_multipl_15 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_821
  %tmp_822 = or i14 %tmp_792, 15
  %tmp_823 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_822)
  %ge25519_base_multipl_16 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_823
  %tmp_824 = or i14 %tmp_792, 16
  %tmp_825 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_824)
  %ge25519_base_multipl_17 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_825
  %tmp_826 = or i14 %tmp_792, 17
  %tmp_827 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_826)
  %ge25519_base_multipl_18 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_827
  %tmp_828 = or i14 %tmp_792, 18
  %tmp_829 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_828)
  %ge25519_base_multipl_19 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_829
  %tmp_830 = or i14 %tmp_792, 19
  %tmp_831 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_830)
  %ge25519_base_multipl_20 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_831
  %tmp_832 = or i14 %tmp_792, 20
  %tmp_833 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_832)
  %ge25519_base_multipl_21 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_833
  %tmp_834 = or i14 %tmp_792, 21
  %tmp_835 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_834)
  %ge25519_base_multipl_22 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_835
  %tmp_836 = or i14 %tmp_792, 22
  %tmp_837 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_836)
  %ge25519_base_multipl_23 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_837
  %tmp_838 = or i14 %tmp_792, 23
  %tmp_839 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_838)
  %ge25519_base_multipl_24 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_839
  %tmp_840 = or i14 %tmp_792, 24
  %tmp_841 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_840)
  %ge25519_base_multipl_25 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_841
  %tmp_842 = or i14 %tmp_792, 25
  %tmp_843 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_842)
  %ge25519_base_multipl_26 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_843
  %tmp_844 = or i14 %tmp_792, 26
  %tmp_845 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_844)
  %ge25519_base_multipl_27 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_845
  %tmp_846 = or i14 %tmp_792, 27
  %tmp_847 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_846)
  %ge25519_base_multipl_28 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_847
  %tmp_848 = or i14 %tmp_792, 28
  %tmp_849 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_848)
  %ge25519_base_multipl_29 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_849
  %tmp_850 = or i14 %tmp_792, 29
  %tmp_851 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_850)
  %ge25519_base_multipl_30 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_851
  %tmp_852 = or i14 %tmp_792, 30
  %tmp_853 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_852)
  %ge25519_base_multipl_31 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_853
  %tmp_854 = or i14 %tmp_792, 31
  %tmp_855 = call i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50 0, i14 %tmp_854)
  %ge25519_base_multipl_32 = getelementptr [13600 x i32]* @ge25519_base_multipl_1, i64 0, i64 %tmp_855
  %ge25519_base_multipl_33 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_793
  %ge25519_base_multipl_34 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_795
  %ge25519_base_multipl_35 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_797
  %ge25519_base_multipl_36 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_799
  %ge25519_base_multipl_37 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_801
  %ge25519_base_multipl_38 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_803
  %ge25519_base_multipl_39 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_805
  %ge25519_base_multipl_40 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_807
  %ge25519_base_multipl_41 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_809
  %ge25519_base_multipl_42 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_811
  %ge25519_base_multipl_43 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_813
  %ge25519_base_multipl_44 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_815
  %ge25519_base_multipl_45 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_817
  %ge25519_base_multipl_46 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_819
  %ge25519_base_multipl_47 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_821
  %ge25519_base_multipl_48 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_823
  %ge25519_base_multipl_49 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_825
  %ge25519_base_multipl_50 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_827
  %ge25519_base_multipl_51 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_829
  %ge25519_base_multipl_52 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_831
  %ge25519_base_multipl_53 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_833
  %ge25519_base_multipl_54 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_835
  %ge25519_base_multipl_55 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_837
  %ge25519_base_multipl_56 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_839
  %ge25519_base_multipl_57 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_841
  %ge25519_base_multipl_58 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_843
  %ge25519_base_multipl_59 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_845
  %ge25519_base_multipl_60 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_847
  %ge25519_base_multipl_61 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_849
  %ge25519_base_multipl_62 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_851
  %ge25519_base_multipl_63 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_853
  %ge25519_base_multipl_64 = getelementptr [13600 x i32]* @ge25519_base_multipl, i64 0, i64 %tmp_855
  %t_x_v_addr = getelementptr [32 x i32]* %t_x_v, i64 0, i64 0
  %ge25519_base_multipl_65 = load i32* %ge25519_base_multipl, align 16
  store i32 %ge25519_base_multipl_65, i32* %t_x_v_addr, align 4
  %t_x_v_addr_1 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 1
  %ge25519_base_multipl_66 = load i32* %ge25519_base_multipl_2, align 4
  store i32 %ge25519_base_multipl_66, i32* %t_x_v_addr_1, align 4
  %t_x_v_addr_2 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 2
  %ge25519_base_multipl_67 = load i32* %ge25519_base_multipl_3, align 8
  store i32 %ge25519_base_multipl_67, i32* %t_x_v_addr_2, align 4
  %t_x_v_addr_3 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 3
  %ge25519_base_multipl_68 = load i32* %ge25519_base_multipl_4, align 4
  store i32 %ge25519_base_multipl_68, i32* %t_x_v_addr_3, align 4
  %t_x_v_addr_4 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 4
  %ge25519_base_multipl_69 = load i32* %ge25519_base_multipl_5, align 16
  store i32 %ge25519_base_multipl_69, i32* %t_x_v_addr_4, align 4
  %t_x_v_addr_5 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 5
  %ge25519_base_multipl_70 = load i32* %ge25519_base_multipl_6, align 4
  store i32 %ge25519_base_multipl_70, i32* %t_x_v_addr_5, align 4
  %t_x_v_addr_6 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 6
  %ge25519_base_multipl_71 = load i32* %ge25519_base_multipl_7, align 8
  store i32 %ge25519_base_multipl_71, i32* %t_x_v_addr_6, align 4
  %t_x_v_addr_7 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 7
  %ge25519_base_multipl_72 = load i32* %ge25519_base_multipl_8, align 4
  store i32 %ge25519_base_multipl_72, i32* %t_x_v_addr_7, align 4
  %t_x_v_addr_8 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 8
  %ge25519_base_multipl_73 = load i32* %ge25519_base_multipl_9, align 16
  store i32 %ge25519_base_multipl_73, i32* %t_x_v_addr_8, align 4
  %t_x_v_addr_9 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 9
  %ge25519_base_multipl_74 = load i32* %ge25519_base_multipl_10, align 4
  store i32 %ge25519_base_multipl_74, i32* %t_x_v_addr_9, align 4
  %t_x_v_addr_10 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 10
  %ge25519_base_multipl_75 = load i32* %ge25519_base_multipl_11, align 8
  store i32 %ge25519_base_multipl_75, i32* %t_x_v_addr_10, align 4
  %t_x_v_addr_11 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 11
  %ge25519_base_multipl_76 = load i32* %ge25519_base_multipl_12, align 4
  store i32 %ge25519_base_multipl_76, i32* %t_x_v_addr_11, align 4
  %t_x_v_addr_12 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 12
  %ge25519_base_multipl_77 = load i32* %ge25519_base_multipl_13, align 16
  store i32 %ge25519_base_multipl_77, i32* %t_x_v_addr_12, align 4
  %t_x_v_addr_13 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 13
  %ge25519_base_multipl_78 = load i32* %ge25519_base_multipl_14, align 4
  store i32 %ge25519_base_multipl_78, i32* %t_x_v_addr_13, align 4
  %t_x_v_addr_14 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 14
  %ge25519_base_multipl_79 = load i32* %ge25519_base_multipl_15, align 8
  store i32 %ge25519_base_multipl_79, i32* %t_x_v_addr_14, align 4
  %t_x_v_addr_15 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 15
  %ge25519_base_multipl_80 = load i32* %ge25519_base_multipl_16, align 4
  store i32 %ge25519_base_multipl_80, i32* %t_x_v_addr_15, align 4
  %t_x_v_addr_16 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 16
  %ge25519_base_multipl_81 = load i32* %ge25519_base_multipl_17, align 16
  store i32 %ge25519_base_multipl_81, i32* %t_x_v_addr_16, align 4
  %t_x_v_addr_17 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 17
  %ge25519_base_multipl_82 = load i32* %ge25519_base_multipl_18, align 4
  store i32 %ge25519_base_multipl_82, i32* %t_x_v_addr_17, align 4
  %t_x_v_addr_18 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 18
  %ge25519_base_multipl_83 = load i32* %ge25519_base_multipl_19, align 8
  store i32 %ge25519_base_multipl_83, i32* %t_x_v_addr_18, align 4
  %t_x_v_addr_19 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 19
  %ge25519_base_multipl_84 = load i32* %ge25519_base_multipl_20, align 4
  store i32 %ge25519_base_multipl_84, i32* %t_x_v_addr_19, align 4
  %t_x_v_addr_20 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 20
  %ge25519_base_multipl_85 = load i32* %ge25519_base_multipl_21, align 16
  store i32 %ge25519_base_multipl_85, i32* %t_x_v_addr_20, align 4
  %t_x_v_addr_21 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 21
  %ge25519_base_multipl_86 = load i32* %ge25519_base_multipl_22, align 4
  store i32 %ge25519_base_multipl_86, i32* %t_x_v_addr_21, align 4
  %t_x_v_addr_22 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 22
  %ge25519_base_multipl_87 = load i32* %ge25519_base_multipl_23, align 8
  store i32 %ge25519_base_multipl_87, i32* %t_x_v_addr_22, align 4
  %t_x_v_addr_23 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 23
  %ge25519_base_multipl_88 = load i32* %ge25519_base_multipl_24, align 4
  store i32 %ge25519_base_multipl_88, i32* %t_x_v_addr_23, align 4
  %t_x_v_addr_24 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 24
  %ge25519_base_multipl_89 = load i32* %ge25519_base_multipl_25, align 16
  store i32 %ge25519_base_multipl_89, i32* %t_x_v_addr_24, align 4
  %t_x_v_addr_25 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 25
  %ge25519_base_multipl_90 = load i32* %ge25519_base_multipl_26, align 4
  store i32 %ge25519_base_multipl_90, i32* %t_x_v_addr_25, align 4
  %t_x_v_addr_26 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 26
  %ge25519_base_multipl_91 = load i32* %ge25519_base_multipl_27, align 8
  store i32 %ge25519_base_multipl_91, i32* %t_x_v_addr_26, align 4
  %t_x_v_addr_27 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 27
  %ge25519_base_multipl_92 = load i32* %ge25519_base_multipl_28, align 4
  store i32 %ge25519_base_multipl_92, i32* %t_x_v_addr_27, align 4
  %t_x_v_addr_28 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 28
  %ge25519_base_multipl_93 = load i32* %ge25519_base_multipl_29, align 16
  store i32 %ge25519_base_multipl_93, i32* %t_x_v_addr_28, align 4
  %t_x_v_addr_29 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 29
  %ge25519_base_multipl_94 = load i32* %ge25519_base_multipl_30, align 4
  store i32 %ge25519_base_multipl_94, i32* %t_x_v_addr_29, align 4
  %t_x_v_addr_30 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 30
  %ge25519_base_multipl_95 = load i32* %ge25519_base_multipl_31, align 8
  store i32 %ge25519_base_multipl_95, i32* %t_x_v_addr_30, align 4
  %t_x_v_addr_31 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 31
  %ge25519_base_multipl_96 = load i32* %ge25519_base_multipl_32, align 4
  store i32 %ge25519_base_multipl_96, i32* %t_x_v_addr_31, align 4
  %t_y_v_addr = getelementptr [32 x i32]* %t_y_v, i64 0, i64 0
  %ge25519_base_multipl_97 = load i32* %ge25519_base_multipl_33, align 16
  store i32 %ge25519_base_multipl_97, i32* %t_y_v_addr, align 4
  %t_y_v_addr_1 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 1
  %ge25519_base_multipl_98 = load i32* %ge25519_base_multipl_34, align 4
  store i32 %ge25519_base_multipl_98, i32* %t_y_v_addr_1, align 4
  %t_y_v_addr_2 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 2
  %ge25519_base_multipl_99 = load i32* %ge25519_base_multipl_35, align 8
  store i32 %ge25519_base_multipl_99, i32* %t_y_v_addr_2, align 4
  %t_y_v_addr_3 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 3
  %ge25519_base_multipl_100 = load i32* %ge25519_base_multipl_36, align 4
  store i32 %ge25519_base_multipl_100, i32* %t_y_v_addr_3, align 4
  %t_y_v_addr_4 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 4
  %ge25519_base_multipl_101 = load i32* %ge25519_base_multipl_37, align 16
  store i32 %ge25519_base_multipl_101, i32* %t_y_v_addr_4, align 4
  %t_y_v_addr_5 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 5
  %ge25519_base_multipl_102 = load i32* %ge25519_base_multipl_38, align 4
  store i32 %ge25519_base_multipl_102, i32* %t_y_v_addr_5, align 4
  %t_y_v_addr_6 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 6
  %ge25519_base_multipl_103 = load i32* %ge25519_base_multipl_39, align 8
  store i32 %ge25519_base_multipl_103, i32* %t_y_v_addr_6, align 4
  %t_y_v_addr_7 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 7
  %ge25519_base_multipl_104 = load i32* %ge25519_base_multipl_40, align 4
  store i32 %ge25519_base_multipl_104, i32* %t_y_v_addr_7, align 4
  %t_y_v_addr_8 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 8
  %ge25519_base_multipl_105 = load i32* %ge25519_base_multipl_41, align 16
  store i32 %ge25519_base_multipl_105, i32* %t_y_v_addr_8, align 4
  %t_y_v_addr_9 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 9
  %ge25519_base_multipl_106 = load i32* %ge25519_base_multipl_42, align 4
  store i32 %ge25519_base_multipl_106, i32* %t_y_v_addr_9, align 4
  %t_y_v_addr_10 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 10
  %ge25519_base_multipl_107 = load i32* %ge25519_base_multipl_43, align 8
  store i32 %ge25519_base_multipl_107, i32* %t_y_v_addr_10, align 4
  %t_y_v_addr_11 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 11
  %ge25519_base_multipl_108 = load i32* %ge25519_base_multipl_44, align 4
  store i32 %ge25519_base_multipl_108, i32* %t_y_v_addr_11, align 4
  %t_y_v_addr_12 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 12
  %ge25519_base_multipl_109 = load i32* %ge25519_base_multipl_45, align 16
  store i32 %ge25519_base_multipl_109, i32* %t_y_v_addr_12, align 4
  %t_y_v_addr_13 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 13
  %ge25519_base_multipl_110 = load i32* %ge25519_base_multipl_46, align 4
  store i32 %ge25519_base_multipl_110, i32* %t_y_v_addr_13, align 4
  %t_y_v_addr_14 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 14
  %ge25519_base_multipl_111 = load i32* %ge25519_base_multipl_47, align 8
  store i32 %ge25519_base_multipl_111, i32* %t_y_v_addr_14, align 4
  %t_y_v_addr_15 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 15
  %ge25519_base_multipl_112 = load i32* %ge25519_base_multipl_48, align 4
  store i32 %ge25519_base_multipl_112, i32* %t_y_v_addr_15, align 4
  %t_y_v_addr_16 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 16
  %ge25519_base_multipl_113 = load i32* %ge25519_base_multipl_49, align 16
  store i32 %ge25519_base_multipl_113, i32* %t_y_v_addr_16, align 4
  %t_y_v_addr_17 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 17
  %ge25519_base_multipl_114 = load i32* %ge25519_base_multipl_50, align 4
  store i32 %ge25519_base_multipl_114, i32* %t_y_v_addr_17, align 4
  %t_y_v_addr_18 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 18
  %ge25519_base_multipl_115 = load i32* %ge25519_base_multipl_51, align 8
  store i32 %ge25519_base_multipl_115, i32* %t_y_v_addr_18, align 4
  %t_y_v_addr_19 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 19
  %ge25519_base_multipl_116 = load i32* %ge25519_base_multipl_52, align 4
  store i32 %ge25519_base_multipl_116, i32* %t_y_v_addr_19, align 4
  %t_y_v_addr_20 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 20
  %ge25519_base_multipl_117 = load i32* %ge25519_base_multipl_53, align 16
  store i32 %ge25519_base_multipl_117, i32* %t_y_v_addr_20, align 4
  %t_y_v_addr_21 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 21
  %ge25519_base_multipl_118 = load i32* %ge25519_base_multipl_54, align 4
  store i32 %ge25519_base_multipl_118, i32* %t_y_v_addr_21, align 4
  %t_y_v_addr_22 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 22
  %ge25519_base_multipl_119 = load i32* %ge25519_base_multipl_55, align 8
  store i32 %ge25519_base_multipl_119, i32* %t_y_v_addr_22, align 4
  %t_y_v_addr_23 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 23
  %ge25519_base_multipl_120 = load i32* %ge25519_base_multipl_56, align 4
  store i32 %ge25519_base_multipl_120, i32* %t_y_v_addr_23, align 4
  %t_y_v_addr_24 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 24
  %ge25519_base_multipl_121 = load i32* %ge25519_base_multipl_57, align 16
  store i32 %ge25519_base_multipl_121, i32* %t_y_v_addr_24, align 4
  %t_y_v_addr_25 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 25
  %ge25519_base_multipl_122 = load i32* %ge25519_base_multipl_58, align 4
  store i32 %ge25519_base_multipl_122, i32* %t_y_v_addr_25, align 4
  %t_y_v_addr_26 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 26
  %ge25519_base_multipl_123 = load i32* %ge25519_base_multipl_59, align 8
  store i32 %ge25519_base_multipl_123, i32* %t_y_v_addr_26, align 4
  %t_y_v_addr_27 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 27
  %ge25519_base_multipl_124 = load i32* %ge25519_base_multipl_60, align 4
  store i32 %ge25519_base_multipl_124, i32* %t_y_v_addr_27, align 4
  %t_y_v_addr_28 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 28
  %ge25519_base_multipl_125 = load i32* %ge25519_base_multipl_61, align 16
  store i32 %ge25519_base_multipl_125, i32* %t_y_v_addr_28, align 4
  %t_y_v_addr_29 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 29
  %ge25519_base_multipl_126 = load i32* %ge25519_base_multipl_62, align 4
  store i32 %ge25519_base_multipl_126, i32* %t_y_v_addr_29, align 4
  %t_y_v_addr_30 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 30
  %ge25519_base_multipl_127 = load i32* %ge25519_base_multipl_63, align 8
  store i32 %ge25519_base_multipl_127, i32* %t_y_v_addr_30, align 4
  %t_y_v_addr_31 = getelementptr [32 x i32]* %t_y_v, i64 0, i64 31
  %ge25519_base_multipl_128 = load i32* %ge25519_base_multipl_64, align 4
  store i32 %ge25519_base_multipl_128, i32* %t_y_v_addr_31, align 4
  %tmp_s = add i9 %tmp, 1
  %x = xor i8 %b_read, 1
  %y_cast = zext i8 %x to i9
  %y = add i9 %y_cast, -1
  %tmp_862 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %y, i32 8)
  %x_8 = xor i8 %b_read, -1
  %y_3_cast = zext i8 %x_8 to i9
  %y_1 = add i9 %y_3_cast, -1
  %tmp_863 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %y_1, i32 8)
  %tmp_856 = or i1 %tmp_863, %tmp_862
  call fastcc void @cmov_aff([32 x i32]* %t_x_v, [32 x i32]* %t_y_v, [13600 x i32]* @ge25519_base_multipl_1, i9 %tmp_s, [13600 x i32]* @ge25519_base_multipl, i9 %tmp_s, i1 %tmp_856)
  %tmp_857 = add i9 %tmp, 2
  %x_9 = xor i8 %b_read, 2
  %y_6_cast = zext i8 %x_9 to i9
  %y_2 = add i9 %y_6_cast, -1
  %tmp_864 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %y_2, i32 8)
  %x_10 = xor i8 %b_read, -2
  %y_9_cast = zext i8 %x_10 to i9
  %y_3 = add i9 %y_9_cast, -1
  %tmp_865 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %y_3, i32 8)
  %tmp_858 = or i1 %tmp_865, %tmp_864
  call fastcc void @cmov_aff([32 x i32]* %t_x_v, [32 x i32]* %t_y_v, [13600 x i32]* @ge25519_base_multipl_1, i9 %tmp_857, [13600 x i32]* @ge25519_base_multipl, i9 %tmp_857, i1 %tmp_858)
  %tmp_859 = add i9 %tmp, 3
  %x_11 = xor i8 %b_read, 3
  %y_12_cast = zext i8 %x_11 to i9
  %y_4 = add i9 %y_12_cast, -1
  %tmp_866 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %y_4, i32 8)
  %x_12 = xor i8 %b_read, -3
  %y_15_cast = zext i8 %x_12 to i9
  %y_5 = add i9 %y_15_cast, -1
  %tmp_867 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %y_5, i32 8)
  %tmp_860 = or i1 %tmp_867, %tmp_866
  call fastcc void @cmov_aff([32 x i32]* %t_x_v, [32 x i32]* %t_y_v, [13600 x i32]* @ge25519_base_multipl_1, i9 %tmp_859, [13600 x i32]* @ge25519_base_multipl, i9 %tmp_859, i1 %tmp_860)
  %tmp_861 = add i9 %tmp, 4
  %x_13 = xor i8 %b_read, -4
  %y_18_cast = zext i8 %x_13 to i9
  %y_6 = add i9 %y_18_cast, -1
  %tmp_868 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %y_6, i32 8)
  call fastcc void @cmov_aff([32 x i32]* %t_x_v, [32 x i32]* %t_y_v, [13600 x i32]* @ge25519_base_multipl_1, i9 %tmp_861, [13600 x i32]* @ge25519_base_multipl, i9 %tmp_861, i1 %tmp_868)
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i_i = phi i6 [ 0, %0 ], [ %i, %2 ]
  %exitcond_i = icmp eq i6 %i_i, -32
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i = add i6 %i_i, 1
  br i1 %exitcond_i, label %.preheader.preheader, label %2

.preheader.preheader:                             ; preds = %1
  br label %.preheader

; <label>:2                                       ; preds = %1
  %tmp_i1 = zext i6 %i_i to i64
  %t_x_v_addr_32 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 %tmp_i1
  %t_x_v_load = load i32* %t_x_v_addr_32, align 4
  %t_v_addr = getelementptr [32 x i32]* %t_v, i64 0, i64 %tmp_i1
  store i32 %t_x_v_load, i32* %t_v_addr, align 4
  br label %1

.preheader:                                       ; preds = %.preheader.preheader, %3
  %i_i_i = phi i6 [ %i_82, %3 ], [ 0, %.preheader.preheader ]
  %exitcond_i_i = icmp eq i6 %i_i_i, -32
  %empty_101 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_82 = add i6 %i_i_i, 1
  br i1 %exitcond_i_i, label %crypto_sign_ed25519_ref_fe25519_neg.exit, label %3

; <label>:3                                       ; preds = %.preheader
  %tmp_i_i = zext i6 %i_i_i to i64
  %v_v_addr = getelementptr [32 x i32]* %v_v, i64 0, i64 %tmp_i_i
  store i32 0, i32* %v_v_addr, align 4
  br label %.preheader

crypto_sign_ed25519_ref_fe25519_neg.exit:         ; preds = %.preheader
  call fastcc void @crypto_sign_ed25519_.7([32 x i32]* %v_v, [32 x i32]* %t_v)
  %tmp_869 = call i1 @_ssdm_op_BitSelect.i1.i8.i32(i8 %b_read, i32 7)
  %mask = select i1 %tmp_869, i32 -1, i32 0
  br label %4

; <label>:4                                       ; preds = %5, %crypto_sign_ed25519_ref_fe25519_neg.exit
  %i_i5 = phi i6 [ 0, %crypto_sign_ed25519_ref_fe25519_neg.exit ], [ %i_83, %5 ]
  %exitcond_i5 = icmp eq i6 %i_i5, -32
  %empty_102 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_83 = add i6 %i_i5, 1
  br i1 %exitcond_i5, label %crypto_sign_ed25519_ref_fe25519_cmov.1.exit, label %5

; <label>:5                                       ; preds = %4
  %tmp_i = zext i6 %i_i5 to i64
  %v_v_addr_1 = getelementptr [32 x i32]* %v_v, i64 0, i64 %tmp_i
  %v_v_load = load i32* %v_v_addr_1, align 4
  %t_x_v_addr_33 = getelementptr [32 x i32]* %t_x_v, i64 0, i64 %tmp_i
  %t_x_v_load_1 = load i32* %t_x_v_addr_33, align 4
  %tmp_894_i = xor i32 %t_x_v_load_1, %v_v_load
  %tmp_895_i = and i32 %tmp_894_i, %mask
  %tmp_896_i = xor i32 %t_x_v_load_1, %tmp_895_i
  store i32 %tmp_896_i, i32* %t_x_v_addr_33, align 4
  br label %4

crypto_sign_ed25519_ref_fe25519_cmov.1.exit:      ; preds = %4
  ret void
}

define internal fastcc void @barrett_reduce([32 x i32]* nocapture %r_v, [64 x i32]* nocapture %x) {
  %q2 = alloca [66 x i32], align 16
  %r1 = alloca [33 x i32], align 16
  %r2 = alloca [33 x i32], align 16
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i7 [ 0, %0 ], [ %i_84, %2 ]
  %exitcond8 = icmp eq i7 %i, -62
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 66, i64 66, i64 66)
  %i_84 = add i7 %i, 1
  br i1 %exitcond8, label %.preheader14.preheader, label %2

.preheader14.preheader:                           ; preds = %1
  br label %.preheader14

; <label>:2                                       ; preds = %1
  %tmp = zext i7 %i to i64
  %q2_addr = getelementptr inbounds [66 x i32]* %q2, i64 0, i64 %tmp
  store i32 0, i32* %q2_addr, align 4
  br label %1

.preheader14:                                     ; preds = %.preheader14.preheader, %3
  %i_1 = phi i6 [ %i_85, %3 ], [ 0, %.preheader14.preheader ]
  %exitcond7 = icmp eq i6 %i_1, -31
  %empty_103 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 33, i64 33, i64 33)
  %i_85 = add i6 %i_1, 1
  br i1 %exitcond7, label %.preheader13.preheader, label %3

.preheader13.preheader:                           ; preds = %.preheader14
  br label %.preheader13

; <label>:3                                       ; preds = %.preheader14
  %tmp_s = zext i6 %i_1 to i64
  %r2_addr = getelementptr inbounds [33 x i32]* %r2, i64 0, i64 %tmp_s
  store i32 0, i32* %r2_addr, align 4
  br label %.preheader14

.preheader13.loopexit:                            ; preds = %.preheader12
  br label %.preheader13

.preheader13:                                     ; preds = %.preheader13.preheader, %.preheader13.loopexit
  %i_2 = phi i6 [ %i_86, %.preheader13.loopexit ], [ 0, %.preheader13.preheader ]
  %i_2_cast = zext i6 %i_2 to i7
  %exitcond6 = icmp eq i6 %i_2, -31
  %empty_104 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 33, i64 33, i64 33)
  %i_86 = add i6 %i_2, 1
  br i1 %exitcond6, label %6, label %.preheader12.preheader

.preheader12.preheader:                           ; preds = %.preheader13
  %tmp_864 = zext i6 %i_2 to i64
  %mu_addr = getelementptr [33 x i8]* @mu, i64 0, i64 %tmp_864
  %mu_load = load i8* %mu_addr, align 1
  %mu_load_cast = zext i8 %mu_load to i32
  br label %.preheader12

.preheader12:                                     ; preds = %._crit_edge, %.preheader12.preheader
  %j = phi i6 [ %j_5, %._crit_edge ], [ 0, %.preheader12.preheader ]
  %j_cast = zext i6 %j to i7
  %exitcond5 = icmp eq i6 %j, -31
  %empty_105 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 33, i64 33, i64 33)
  %j_5 = add i6 %j, 1
  br i1 %exitcond5, label %.preheader13.loopexit, label %4

; <label>:4                                       ; preds = %.preheader12
  %tmp_866 = add i7 %j_cast, %i_2_cast
  %tmp_867 = icmp ugt i7 %tmp_866, 30
  br i1 %tmp_867, label %5, label %._crit_edge

; <label>:5                                       ; preds = %4
  %tmp_868 = add i6 %j, 31
  %tmp_869 = zext i6 %tmp_868 to i64
  %x_addr_1 = getelementptr [64 x i32]* %x, i64 0, i64 %tmp_869
  %x_load_1 = load i32* %x_addr_1, align 4
  %tmp_870 = mul i32 %mu_load_cast, %x_load_1
  %tmp_871 = zext i7 %tmp_866 to i64
  %q2_addr_4 = getelementptr inbounds [66 x i32]* %q2, i64 0, i64 %tmp_871
  %q2_load_3 = load i32* %q2_addr_4, align 4
  %tmp_872 = add i32 %q2_load_3, %tmp_870
  store i32 %tmp_872, i32* %q2_addr_4, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %5, %4
  br label %.preheader12

; <label>:6                                       ; preds = %.preheader13
  %q2_addr_1 = getelementptr inbounds [66 x i32]* %q2, i64 0, i64 31
  %q2_load = load i32* %q2_addr_1, align 4
  %carry = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %q2_load, i32 8, i32 31)
  %carry_4 = zext i24 %carry to i32
  %q2_addr_2 = getelementptr inbounds [66 x i32]* %q2, i64 0, i64 32
  %q2_load_1 = load i32* %q2_addr_2, align 16
  %tmp_862 = add i32 %q2_load_1, %carry_4
  store i32 %tmp_862, i32* %q2_addr_2, align 16
  %carry_2 = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %tmp_862, i32 8, i32 31)
  %carry_5 = zext i24 %carry_2 to i32
  %q2_addr_3 = getelementptr inbounds [66 x i32]* %q2, i64 0, i64 33
  %q2_load_2 = load i32* %q2_addr_3, align 4
  %tmp_863 = add i32 %q2_load_2, %carry_5
  store i32 %tmp_863, i32* %q2_addr_3, align 4
  br label %7

; <label>:7                                       ; preds = %8, %6
  %i_3 = phi i6 [ 0, %6 ], [ %i_87, %8 ]
  %exitcond4 = icmp eq i6 %i_3, -31
  %empty_106 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 33, i64 33, i64 33)
  %i_87 = add i6 %i_3, 1
  br i1 %exitcond4, label %.preheader11.preheader, label %8

.preheader11.preheader:                           ; preds = %7
  br label %.preheader11

; <label>:8                                       ; preds = %7
  %tmp_865 = zext i6 %i_3 to i64
  %x_addr = getelementptr [64 x i32]* %x, i64 0, i64 %tmp_865
  %x_load = load i32* %x_addr, align 4
  %r1_addr = getelementptr inbounds [33 x i32]* %r1, i64 0, i64 %tmp_865
  store i32 %x_load, i32* %r1_addr, align 4
  br label %7

.preheader11.loopexit:                            ; preds = %.preheader10
  br label %.preheader11

.preheader11:                                     ; preds = %.preheader11.preheader, %.preheader11.loopexit
  %i_4 = phi i6 [ %i_88, %.preheader11.loopexit ], [ 0, %.preheader11.preheader ]
  %exitcond3 = icmp eq i6 %i_4, -32
  %empty_107 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_88 = add i6 %i_4, 1
  br i1 %exitcond3, label %.preheader9.preheader, label %.preheader10.preheader

.preheader9.preheader:                            ; preds = %.preheader11
  br label %.preheader9

.preheader10.preheader:                           ; preds = %.preheader11
  %tmp_873 = zext i6 %i_4 to i64
  %m_addr = getelementptr [32 x i8]* @m, i64 0, i64 %tmp_873
  %m_load = load i8* %m_addr, align 1
  %m_load_cast = zext i8 %m_load to i32
  br label %.preheader10

.preheader10:                                     ; preds = %._crit_edge15, %.preheader10.preheader
  %j_1 = phi i6 [ %j_6, %._crit_edge15 ], [ 0, %.preheader10.preheader ]
  %exitcond2 = icmp eq i6 %j_1, -31
  %empty_108 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 33, i64 33, i64 33)
  %j_6 = add i6 %j_1, 1
  br i1 %exitcond2, label %.preheader11.loopexit, label %9

; <label>:9                                       ; preds = %.preheader10
  %tmp_877 = add i6 %j_1, %i_4
  %tmp_878 = icmp ult i6 %tmp_877, -31
  br i1 %tmp_878, label %10, label %._crit_edge15

; <label>:10                                      ; preds = %9
  %tmp_927_cast = zext i6 %j_1 to i7
  %q3_0_sum = add i7 %tmp_927_cast, 33
  %q3_0_sum_cast = zext i7 %q3_0_sum to i64
  %q2_addr_5 = getelementptr inbounds [66 x i32]* %q2, i64 0, i64 %q3_0_sum_cast
  %q2_load_4 = load i32* %q2_addr_5, align 4
  %tmp_879 = mul i32 %m_load_cast, %q2_load_4
  %tmp_880 = zext i6 %tmp_877 to i64
  %r2_addr_3 = getelementptr inbounds [33 x i32]* %r2, i64 0, i64 %tmp_880
  %r2_load_2 = load i32* %r2_addr_3, align 4
  %tmp_881 = add i32 %r2_load_2, %tmp_879
  store i32 %tmp_881, i32* %r2_addr_3, align 4
  br label %._crit_edge15

._crit_edge15:                                    ; preds = %10, %9
  br label %.preheader10

.preheader9:                                      ; preds = %.preheader9.preheader, %11
  %i_5 = phi i6 [ %i_89, %11 ], [ 0, %.preheader9.preheader ]
  %exitcond1 = icmp eq i6 %i_5, -32
  %empty_109 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_89 = add i6 %i_5, 1
  br i1 %exitcond1, label %.preheader.preheader, label %11

.preheader.preheader:                             ; preds = %.preheader9
  br label %.preheader

; <label>:11                                      ; preds = %.preheader9
  %tmp_874 = zext i6 %i_5 to i64
  %r2_addr_1 = getelementptr inbounds [33 x i32]* %r2, i64 0, i64 %tmp_874
  %r2_load = load i32* %r2_addr_1, align 4
  %tmp_885 = trunc i32 %r2_load to i8
  %carry_3 = call i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32 %r2_load, i32 8, i32 31)
  %carry_6 = zext i24 %carry_3 to i32
  %tmp_875 = zext i6 %i_89 to i64
  %r2_addr_2 = getelementptr inbounds [33 x i32]* %r2, i64 0, i64 %tmp_875
  %r2_load_1 = load i32* %r2_addr_2, align 4
  %tmp_876 = add i32 %carry_6, %r2_load_1
  store i32 %tmp_876, i32* %r2_addr_2, align 4
  %tmp_924_cast = zext i8 %tmp_885 to i32
  store i32 %tmp_924_cast, i32* %r2_addr_1, align 4
  br label %.preheader9

.preheader:                                       ; preds = %.preheader.preheader, %12
  %i_6 = phi i6 [ %i_90, %12 ], [ 0, %.preheader.preheader ]
  %pb = phi i1 [ %tmp_886, %12 ], [ false, %.preheader.preheader ]
  %exitcond = icmp eq i6 %i_6, -32
  %empty_110 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i_90 = add i6 %i_6, 1
  br i1 %exitcond, label %13, label %12

; <label>:12                                      ; preds = %.preheader
  %tmp_882 = zext i6 %i_6 to i64
  %r2_addr_4 = getelementptr inbounds [33 x i32]* %r2, i64 0, i64 %tmp_882
  %r2_load_3 = load i32* %r2_addr_4, align 4
  %pb_cast1 = zext i1 %pb to i32
  %pb_2 = add i32 %r2_load_3, %pb_cast1
  %r1_addr_1 = getelementptr inbounds [33 x i32]* %r1, i64 0, i64 %tmp_882
  %x_14 = load i32* %r1_addr_1, align 4
  %x_15 = sub i32 %x_14, %pb_2
  %tmp_886 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %x_15, i32 31)
  %tmp_883 = call i9 @_ssdm_op_BitConcatenate.i9.i1.i8(i1 %tmp_886, i8 0)
  %tmp_932_cast = zext i9 %tmp_883 to i32
  %tmp_884 = add i32 %tmp_932_cast, %x_15
  %r_v_addr = getelementptr [32 x i32]* %r_v, i64 0, i64 %tmp_882
  store i32 %tmp_884, i32* %r_v_addr, align 4
  br label %.preheader

; <label>:13                                      ; preds = %.preheader
  call fastcc void @reduce_add_sub([32 x i32]* %r_v)
  call fastcc void @reduce_add_sub([32 x i32]* %r_v)
  ret void
}

define weak void @_ssdm_op_SpecTopModule(...) {
entry:
  ret void
}

define weak void @_ssdm_op_SpecResourceLimit(...) nounwind {
entry:
  ret void
}

define weak i32 @_ssdm_op_SpecMemCore(...) {
entry:
  ret i32 0
}

define weak i32 @_ssdm_op_SpecLoopTripCount(...) {
entry:
  ret i32 0
}

define weak i32 @_ssdm_op_SpecLoopName(...) {
entry:
  ret i32 0
}

define weak void @_ssdm_op_SpecInterface(...) nounwind {
entry:
  ret void
}

define weak void @_ssdm_op_SpecBitsMap(...) {
entry:
  ret void
}

define weak i1 @_ssdm_op_ReadReq.m_axi.i8P(i8*, i32) {
entry:
  ret i1 true
}

define weak i32 @_ssdm_op_Read.s_axilite.i32(i32) {
entry:
  ret i32 %0
}

define weak i8 @_ssdm_op_Read.m_axi.i8P(i8*) {
entry:
  %empty = load i8* %0
  ret i8 %empty
}

define weak i9 @_ssdm_op_Read.ap_auto.i9(i9) {
entry:
  ret i9 %0
}

define weak i8 @_ssdm_op_Read.ap_auto.i8(i8) {
entry:
  ret i8 %0
}

define weak i7 @_ssdm_op_Read.ap_auto.i7(i7) {
entry:
  ret i7 %0
}

define weak i64 @_ssdm_op_Read.ap_auto.i64(i64) {
entry:
  ret i64 %0
}

define weak i1 @_ssdm_op_Read.ap_auto.i1(i1) {
entry:
  ret i1 %0
}

declare i9 @_ssdm_op_PartSelect.i9.i64.i32.i32(i64, i32, i32) nounwind readnone

define weak i8 @_ssdm_op_PartSelect.i8.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_111 = trunc i64 %empty to i8
  ret i8 %empty_111
}

define weak i8 @_ssdm_op_PartSelect.i8.i56.i32.i32(i56, i32, i32) nounwind readnone {
entry:
  %empty = call i56 @llvm.part.select.i56(i56 %0, i32 %1, i32 %2)
  %empty_112 = trunc i56 %empty to i8
  ret i8 %empty_112
}

define weak i8 @_ssdm_op_PartSelect.i8.i48.i32.i32(i48, i32, i32) nounwind readnone {
entry:
  %empty = call i48 @llvm.part.select.i48(i48 %0, i32 %1, i32 %2)
  %empty_113 = trunc i48 %empty to i8
  ret i8 %empty_113
}

define weak i8 @_ssdm_op_PartSelect.i8.i40.i32.i32(i40, i32, i32) nounwind readnone {
entry:
  %empty = call i40 @llvm.part.select.i40(i40 %0, i32 %1, i32 %2)
  %empty_114 = trunc i40 %empty to i8
  ret i8 %empty_114
}

define weak i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.select.i32(i32 %0, i32 %1, i32 %2)
  %empty_115 = trunc i32 %empty to i8
  ret i8 %empty_115
}

define weak i8 @_ssdm_op_PartSelect.i8.i24.i32.i32(i24, i32, i32) nounwind readnone {
entry:
  %empty = call i24 @llvm.part.select.i24(i24 %0, i32 %1, i32 %2)
  %empty_116 = trunc i24 %empty to i8
  ret i8 %empty_116
}

define weak i8 @_ssdm_op_PartSelect.i8.i16.i32.i32(i16, i32, i32) nounwind readnone {
entry:
  %empty = call i16 @llvm.part.select.i16(i16 %0, i32 %1, i32 %2)
  %empty_117 = trunc i16 %empty to i8
  ret i8 %empty_117
}

declare i7 @_ssdm_op_PartSelect.i7.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32, i32, i32) nounwind readnone

define weak i63 @_ssdm_op_PartSelect.i63.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_118 = trunc i64 %empty to i63
  ret i63 %empty_118
}

declare i61 @_ssdm_op_PartSelect.i61.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i6 @_ssdm_op_PartSelect.i6.i8.i32.i32(i8, i32, i32) nounwind readnone

define weak i58 @_ssdm_op_PartSelect.i58.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_119 = trunc i64 %empty to i58
  ret i58 %empty_119
}

define weak i57 @_ssdm_op_PartSelect.i57.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_120 = trunc i64 %empty to i57
  ret i57 %empty_120
}

define weak i56 @_ssdm_op_PartSelect.i56.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_121 = trunc i64 %empty to i56
  ret i56 %empty_121
}

define weak i50 @_ssdm_op_PartSelect.i50.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_122 = trunc i64 %empty to i50
  ret i50 %empty_122
}

define weak i5 @_ssdm_op_PartSelect.i5.i8.i32.i32(i8, i32, i32) nounwind readnone {
entry:
  %empty = call i8 @llvm.part.select.i8(i8 %0, i32 %1, i32 %2)
  %empty_123 = trunc i8 %empty to i5
  ret i5 %empty_123
}

declare i5 @_ssdm_op_PartSelect.i5.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i48 @_ssdm_op_PartSelect.i48.i64.i32.i32(i64, i32, i32) nounwind readnone

define weak i46 @_ssdm_op_PartSelect.i46.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_124 = trunc i64 %empty to i46
  ret i46 %empty_124
}

define weak i45 @_ssdm_op_PartSelect.i45.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_125 = trunc i64 %empty to i45
  ret i45 %empty_125
}

declare i41 @_ssdm_op_PartSelect.i41.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i40 @_ssdm_op_PartSelect.i40.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i4 @_ssdm_op_PartSelect.i4.i5.i32.i32(i5, i32, i32) nounwind readnone

declare i39 @_ssdm_op_PartSelect.i39.i64.i32.i32(i64, i32, i32) nounwind readnone

define weak i36 @_ssdm_op_PartSelect.i36.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_126 = trunc i64 %empty to i36
  ret i36 %empty_126
}

declare i34 @_ssdm_op_PartSelect.i34.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i32 @_ssdm_op_PartSelect.i32.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32, i32, i32) nounwind readnone

define weak i30 @_ssdm_op_PartSelect.i30.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_127 = trunc i64 %empty to i30
  ret i30 %empty_127
}

declare i3 @_ssdm_op_PartSelect.i3.i8.i32.i32(i8, i32, i32) nounwind readnone

define weak i3 @_ssdm_op_PartSelect.i3.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_128 = trunc i64 %empty to i3
  ret i3 %empty_128
}

declare i3 @_ssdm_op_PartSelect.i3.i4.i32.i32(i4, i32, i32) nounwind readnone

define weak i3 @_ssdm_op_PartSelect.i3.i32.i32.i32(i32, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.select.i32(i32 %0, i32 %1, i32 %2)
  %empty_129 = trunc i32 %empty to i3
  ret i3 %empty_129
}

declare i28 @_ssdm_op_PartSelect.i28.i64.i32.i32(i64, i32, i32) nounwind readnone

define weak i25 @_ssdm_op_PartSelect.i25.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_130 = trunc i64 %empty to i25
  ret i25 %empty_130
}

define weak i25 @_ssdm_op_PartSelect.i25.i32.i32.i32(i32, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.select.i32(i32 %0, i32 %1, i32 %2)
  %empty_131 = trunc i32 %empty to i25
  ret i25 %empty_131
}

declare i24 @_ssdm_op_PartSelect.i24.i64.i32.i32(i64, i32, i32) nounwind readnone

define weak i24 @_ssdm_op_PartSelect.i24.i32.i32.i32(i32, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.select.i32(i32 %0, i32 %1, i32 %2)
  %empty_132 = trunc i32 %empty to i24
  ret i24 %empty_132
}

define weak i23 @_ssdm_op_PartSelect.i23.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_133 = trunc i64 %empty to i23
  ret i23 %empty_133
}

declare i2 @_ssdm_op_PartSelect.i2.i32.i32.i32(i32, i32, i32) nounwind readnone

declare i19 @_ssdm_op_PartSelect.i19.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i18 @_ssdm_op_PartSelect.i18.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i16 @_ssdm_op_PartSelect.i16.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i14 @_ssdm_op_PartSelect.i14.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i1 @_ssdm_op_PartSelect.i1.i64.i32.i32(i64, i32, i32) nounwind readnone

declare i1 @_ssdm_op_PartSelect.i1.i32.i32.i32(i32, i32, i32) nounwind readnone

define weak i1 @_ssdm_op_BitSelect.i1.i9.i32(i9, i32) nounwind readnone {
entry:
  %empty = trunc i32 %1 to i9
  %empty_134 = shl i9 1, %empty
  %empty_135 = and i9 %0, %empty_134
  %empty_136 = icmp ne i9 %empty_135, 0
  ret i1 %empty_136
}

define weak i1 @_ssdm_op_BitSelect.i1.i8.i32(i8, i32) nounwind readnone {
entry:
  %empty = trunc i32 %1 to i8
  %empty_137 = shl i8 1, %empty
  %empty_138 = and i8 %0, %empty_137
  %empty_139 = icmp ne i8 %empty_138, 0
  ret i1 %empty_139
}

define weak i1 @_ssdm_op_BitSelect.i1.i32.i32(i32, i32) nounwind readnone {
entry:
  %empty = shl i32 1, %1
  %empty_140 = and i32 %0, %empty
  %empty_141 = icmp ne i32 %empty_140, 0
  ret i1 %empty_141
}

define weak i1 @_ssdm_op_BitSelect.i1.i3.i32(i3, i32) nounwind readnone {
entry:
  %empty = trunc i32 %1 to i3
  %empty_142 = shl i3 1, %empty
  %empty_143 = and i3 %0, %empty_142
  %empty_144 = icmp ne i3 %empty_143, 0
  ret i1 %empty_144
}

define weak i9 @_ssdm_op_BitConcatenate.i9.i7.i2(i7, i2) nounwind readnone {
entry:
  %empty = zext i7 %0 to i9
  %empty_145 = zext i2 %1 to i9
  %empty_146 = shl i9 %empty, 2
  %empty_147 = or i9 %empty_146, %empty_145
  ret i9 %empty_147
}

define weak i9 @_ssdm_op_BitConcatenate.i9.i1.i8(i1, i8) nounwind readnone {
entry:
  %empty = zext i1 %0 to i9
  %empty_148 = zext i8 %1 to i9
  %empty_149 = shl i9 %empty, 8
  %empty_150 = or i9 %empty_149, %empty_148
  ret i9 %empty_150
}

define weak i8 @_ssdm_op_BitConcatenate.i8.i5.i3(i5, i3) nounwind readnone {
entry:
  %empty = zext i5 %0 to i8
  %empty_151 = zext i3 %1 to i8
  %empty_152 = shl i8 %empty, 3
  %empty_153 = or i8 %empty_152, %empty_151
  ret i8 %empty_153
}

define weak i8 @_ssdm_op_BitConcatenate.i8.i1.i7(i1, i7) nounwind readnone {
entry:
  %empty = zext i1 %0 to i8
  %empty_154 = zext i7 %1 to i8
  %empty_155 = shl i8 %empty, 7
  %empty_156 = or i8 %empty_155, %empty_154
  ret i8 %empty_156
}

define weak i7 @_ssdm_op_BitConcatenate.i7.i4.i3(i4, i3) nounwind readnone {
entry:
  %empty = zext i4 %0 to i7
  %empty_157 = zext i3 %1 to i7
  %empty_158 = shl i7 %empty, 3
  %empty_159 = or i7 %empty_158, %empty_157
  ret i7 %empty_159
}

define weak i7 @_ssdm_op_BitConcatenate.i7.i1.i6(i1, i6) nounwind readnone {
entry:
  %empty = zext i1 %0 to i7
  %empty_160 = zext i6 %1 to i7
  %empty_161 = shl i7 %empty, 6
  %empty_162 = or i7 %empty_161, %empty_160
  ret i7 %empty_162
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i8.i8.i8.i8.i8.i8.i8.i8(i8, i8, i8, i8, i8, i8, i8, i8) nounwind readnone {
entry:
  %empty = zext i8 %6 to i16
  %empty_163 = zext i8 %7 to i16
  %empty_164 = shl i16 %empty, 8
  %empty_165 = or i16 %empty_164, %empty_163
  %empty_166 = zext i8 %5 to i24
  %empty_167 = zext i16 %empty_165 to i24
  %empty_168 = shl i24 %empty_166, 16
  %empty_169 = or i24 %empty_168, %empty_167
  %empty_170 = zext i8 %4 to i32
  %empty_171 = zext i24 %empty_169 to i32
  %empty_172 = shl i32 %empty_170, 24
  %empty_173 = or i32 %empty_172, %empty_171
  %empty_174 = zext i8 %3 to i40
  %empty_175 = zext i32 %empty_173 to i40
  %empty_176 = shl i40 %empty_174, 32
  %empty_177 = or i40 %empty_176, %empty_175
  %empty_178 = zext i8 %2 to i48
  %empty_179 = zext i40 %empty_177 to i48
  %empty_180 = shl i48 %empty_178, 40
  %empty_181 = or i48 %empty_180, %empty_179
  %empty_182 = zext i8 %1 to i56
  %empty_183 = zext i48 %empty_181 to i56
  %empty_184 = shl i56 %empty_182, 48
  %empty_185 = or i56 %empty_184, %empty_183
  %empty_186 = zext i8 %0 to i64
  %empty_187 = zext i56 %empty_185 to i64
  %empty_188 = shl i64 %empty_186, 56
  %empty_189 = or i64 %empty_188, %empty_187
  ret i64 %empty_189
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i8.i56(i8, i56) nounwind readnone {
entry:
  %empty = zext i8 %0 to i64
  %empty_190 = zext i56 %1 to i64
  %empty_191 = shl i64 %empty, 56
  %empty_192 = or i64 %empty_191, %empty_190
  ret i64 %empty_192
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i61.i3(i61, i3) nounwind readnone {
entry:
  %empty = zext i61 %0 to i64
  %empty_193 = zext i3 %1 to i64
  %empty_194 = shl i64 %empty, 3
  %empty_195 = or i64 %empty_194, %empty_193
  ret i64 %empty_195
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i50.i14(i50, i14) nounwind readnone {
entry:
  %empty = zext i50 %0 to i64
  %empty_196 = zext i14 %1 to i64
  %empty_197 = shl i64 %empty, 14
  %empty_198 = or i64 %empty_197, %empty_196
  ret i64 %empty_198
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i41.i23(i41, i23) nounwind readnone {
entry:
  %empty = zext i41 %0 to i64
  %empty_199 = zext i23 %1 to i64
  %empty_200 = shl i64 %empty, 23
  %empty_201 = or i64 %empty_200, %empty_199
  ret i64 %empty_201
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i39.i25(i39, i25) nounwind readnone {
entry:
  %empty = zext i39 %0 to i64
  %empty_202 = zext i25 %1 to i64
  %empty_203 = shl i64 %empty, 25
  %empty_204 = or i64 %empty_203, %empty_202
  ret i64 %empty_204
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i34.i30(i34, i30) nounwind readnone {
entry:
  %empty = zext i34 %0 to i64
  %empty_205 = zext i30 %1 to i64
  %empty_206 = shl i64 %empty, 30
  %empty_207 = or i64 %empty_206, %empty_205
  ret i64 %empty_207
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i28.i36(i28, i36) nounwind readnone {
entry:
  %empty = zext i28 %0 to i64
  %empty_208 = zext i36 %1 to i64
  %empty_209 = shl i64 %empty, 36
  %empty_210 = or i64 %empty_209, %empty_208
  ret i64 %empty_210
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i19.i45(i19, i45) nounwind readnone {
entry:
  %empty = zext i19 %0 to i64
  %empty_211 = zext i45 %1 to i64
  %empty_212 = shl i64 %empty, 45
  %empty_213 = or i64 %empty_212, %empty_211
  ret i64 %empty_213
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i18.i46(i18, i46) nounwind readnone {
entry:
  %empty = zext i18 %0 to i64
  %empty_214 = zext i46 %1 to i64
  %empty_215 = shl i64 %empty, 46
  %empty_216 = or i64 %empty_215, %empty_214
  ret i64 %empty_216
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i14.i50(i14, i50) nounwind readnone {
entry:
  %empty = zext i14 %0 to i64
  %empty_217 = zext i50 %1 to i64
  %empty_218 = shl i64 %empty, 50
  %empty_219 = or i64 %empty_218, %empty_217
  ret i64 %empty_219
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i1.i63(i1, i63) nounwind readnone {
entry:
  %empty = zext i1 %0 to i64
  %empty_220 = zext i63 %1 to i64
  %empty_221 = shl i64 %empty, 63
  %empty_222 = or i64 %empty_221, %empty_220
  ret i64 %empty_222
}

define weak i6 @_ssdm_op_BitConcatenate.i6.i4.i2(i4, i2) nounwind readnone {
entry:
  %empty = zext i4 %0 to i6
  %empty_223 = zext i2 %1 to i6
  %empty_224 = shl i6 %empty, 2
  %empty_225 = or i6 %empty_224, %empty_223
  ret i6 %empty_225
}

define weak i6 @_ssdm_op_BitConcatenate.i6.i3.i3(i3, i3) nounwind readnone {
entry:
  %empty = zext i3 %0 to i6
  %empty_226 = zext i3 %1 to i6
  %empty_227 = shl i6 %empty, 3
  %empty_228 = or i6 %empty_227, %empty_226
  ret i6 %empty_228
}

define weak i4 @_ssdm_op_BitConcatenate.i4.i1.i3(i1, i3) nounwind readnone {
entry:
  %empty = zext i1 %0 to i4
  %empty_229 = zext i3 %1 to i4
  %empty_230 = shl i4 %empty, 3
  %empty_231 = or i4 %empty_230, %empty_229
  ret i4 %empty_231
}

declare i32 @_ssdm_op_BitConcatenate.i32.i31.i1(i31, i1) nounwind readnone

declare i32 @_ssdm_op_BitConcatenate.i32.i25.i7(i25, i7) nounwind readnone

define weak i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2, i1) nounwind readnone {
entry:
  %empty = zext i2 %0 to i3
  %empty_232 = zext i1 %1 to i3
  %empty_233 = shl i3 %empty, 1
  %empty_234 = or i3 %empty_233, %empty_232
  ret i3 %empty_234
}

define weak i3 @_ssdm_op_BitConcatenate.i3.i1.i2(i1, i2) nounwind readnone {
entry:
  %empty = zext i1 %0 to i3
  %empty_235 = zext i2 %1 to i3
  %empty_236 = shl i3 %empty, 2
  %empty_237 = or i3 %empty_236, %empty_235
  ret i3 %empty_237
}

define weak i14 @_ssdm_op_BitConcatenate.i14.i9.i5(i9, i5) nounwind readnone {
entry:
  %empty = zext i9 %0 to i14
  %empty_238 = zext i5 %1 to i14
  %empty_239 = shl i14 %empty, 5
  %empty_240 = or i14 %empty_239, %empty_238
  ret i14 %empty_240
}

define weak i10 @_ssdm_op_BitConcatenate.i10.i7.i3(i7, i3) nounwind readnone {
entry:
  %empty = zext i7 %0 to i10
  %empty_241 = zext i3 %1 to i10
  %empty_242 = shl i10 %empty, 3
  %empty_243 = or i10 %empty_242, %empty_241
  ret i10 %empty_243
}

define internal fastcc void @_memmove([64 x i8]* nocapture %dst, [32 x i8]* nocapture %src) {
  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([64 x i8]* %dst, [1 x i8]* @p_str12, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str12, i32 -1, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12, [1 x i8]* @p_str12)
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i_i = phi i6 [ 0, %0 ], [ %i, %2 ]
  %exitcond_i = icmp eq i6 %i_i, -32
  %empty_244 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)
  %i = add i6 %i_i, 1
  br i1 %exitcond_i, label %_memcpy.1.exit, label %2

; <label>:2                                       ; preds = %1
  %tmp_i = zext i6 %i_i to i64
  %src_addr = getelementptr [32 x i8]* %src, i64 0, i64 %tmp_i
  %src_load = load i8* %src_addr, align 1
  %sum_i = xor i6 %i_i, -32
  %sum_i_cast = zext i6 %sum_i to i64
  %dst_addr = getelementptr [64 x i8]* %dst, i64 0, i64 %sum_i_cast
  store i8 %src_load, i8* %dst_addr, align 1
  br label %1

_memcpy.1.exit:                                   ; preds = %1
  ret void
}

!opencl.kernels = !{!0, !7, !0, !11, !17, !23, !23, !29, !32, !32, !34, !37, !34, !39, !41, !43, !43, !47, !51, !51, !51, !56, !58, !58, !61, !64, !66, !70, !72, !75, !77, !80, !86, !88, !91, !94, !98, !101, !105, !107, !110, !112, !114, !115, !117, !119, !121, !122, !124, !121, !115, !115, !127, !128, !128, !128, !127, !127, !127, !115, !130, !130, !115, !66, !66}
!hls.encrypted.func = !{}
!llvm.map.gv = !{}

!0 = metadata !{null, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6}
!1 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1, i32 0}
!2 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none", metadata !"none"}
!3 = metadata !{metadata !"kernel_arg_type", metadata !"uchar*", metadata !"uchar*", metadata !"uint"}
!4 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"", metadata !""}
!5 = metadata !{metadata !"kernel_arg_name", metadata !"dst", metadata !"src", metadata !"len"}
!6 = metadata !{metadata !"reqd_work_group_size", i32 1, i32 1, i32 1}
!7 = metadata !{null, metadata !8, metadata !2, metadata !9, metadata !4, metadata !10, metadata !6}
!8 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 0, i32 0}
!9 = metadata !{metadata !"kernel_arg_type", metadata !"uchar*", metadata !"uchar", metadata !"uint"}
!10 = metadata !{metadata !"kernel_arg_name", metadata !"dst", metadata !"val", metadata !"len"}
!11 = metadata !{null, metadata !12, metadata !13, metadata !14, metadata !15, metadata !16, metadata !6}
!12 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 0, i32 1, i32 1}
!13 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none", metadata !"none", metadata !"none"}
!14 = metadata !{metadata !"kernel_arg_type", metadata !"uchar*", metadata !"uint", metadata !"uchar*", metadata !"uchar*"}
!15 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"", metadata !"", metadata !""}
!16 = metadata !{metadata !"kernel_arg_name", metadata !"mem", metadata !"num_blocks", metadata !"sk", metadata !"signature_out"}
!17 = metadata !{null, metadata !18, metadata !19, metadata !20, metadata !21, metadata !22, metadata !6}
!18 = metadata !{metadata !"kernel_arg_addr_space", i32 1}
!19 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none"}
!20 = metadata !{metadata !"kernel_arg_type", metadata !"sha512_context*"}
!21 = metadata !{metadata !"kernel_arg_type_qual", metadata !""}
!22 = metadata !{metadata !"kernel_arg_name", metadata !"md"}
!23 = metadata !{null, metadata !24, metadata !25, metadata !26, metadata !27, metadata !28, metadata !6}
!24 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1}
!25 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none"}
!26 = metadata !{metadata !"kernel_arg_type", metadata !"sha512_context*", metadata !"uchar*"}
!27 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"const"}
!28 = metadata !{metadata !"kernel_arg_name", metadata !"md", metadata !"in"}
!29 = metadata !{null, metadata !24, metadata !25, metadata !26, metadata !30, metadata !31, metadata !6}
!30 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !""}
!31 = metadata !{metadata !"kernel_arg_name", metadata !"md", metadata !"out"}
!32 = metadata !{null, metadata !24, metadata !25, metadata !26, metadata !30, metadata !33, metadata !6}
!33 = metadata !{metadata !"kernel_arg_name", metadata !"md", metadata !"buf"}
!34 = metadata !{null, metadata !24, metadata !25, metadata !35, metadata !27, metadata !36, metadata !6}
!35 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"uchar*"}
!36 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"x"}
!37 = metadata !{null, metadata !24, metadata !25, metadata !38, metadata !27, metadata !36, metadata !6}
!38 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_shortsc25519*", metadata !"uchar*"}
!39 = metadata !{null, metadata !24, metadata !25, metadata !40, metadata !27, metadata !36, metadata !6}
!40 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"crypto_sign_ed25519_ref_shortsc25519*"}
!41 = metadata !{null, metadata !24, metadata !25, metadata !42, metadata !27, metadata !36, metadata !6}
!42 = metadata !{metadata !"kernel_arg_type", metadata !"uchar*", metadata !"crypto_sign_ed25519_ref_sc25519*"}
!43 = metadata !{null, metadata !18, metadata !19, metadata !44, metadata !45, metadata !46, metadata !6}
!44 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_sc25519*"}
!45 = metadata !{metadata !"kernel_arg_type_qual", metadata !"const"}
!46 = metadata !{metadata !"kernel_arg_name", metadata !"x"}
!47 = metadata !{null, metadata !24, metadata !25, metadata !48, metadata !49, metadata !50, metadata !6}
!48 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"crypto_sign_ed25519_ref_sc25519*"}
!49 = metadata !{metadata !"kernel_arg_type_qual", metadata !"const", metadata !"const"}
!50 = metadata !{metadata !"kernel_arg_name", metadata !"x", metadata !"y"}
!51 = metadata !{null, metadata !52, metadata !2, metadata !53, metadata !54, metadata !55, metadata !6}
!52 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1, i32 1}
!53 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"crypto_sign_ed25519_ref_sc25519*"}
!54 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"const", metadata !"const"}
!55 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"x", metadata !"y"}
!56 = metadata !{null, metadata !52, metadata !2, metadata !57, metadata !54, metadata !55, metadata !6}
!57 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"crypto_sign_ed25519_ref_shortsc25519*"}
!58 = metadata !{null, metadata !24, metadata !25, metadata !59, metadata !27, metadata !60, metadata !6}
!59 = metadata !{metadata !"kernel_arg_type", metadata !"signed char*", metadata !"crypto_sign_ed25519_ref_sc25519*"}
!60 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"s"}
!61 = metadata !{null, metadata !52, metadata !2, metadata !62, metadata !54, metadata !63, metadata !6}
!62 = metadata !{metadata !"kernel_arg_type", metadata !"uchar*", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"crypto_sign_ed25519_ref_sc25519*"}
!63 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"s1", metadata !"s2"}
!64 = metadata !{null, metadata !18, metadata !19, metadata !44, metadata !21, metadata !65, metadata !6}
!65 = metadata !{metadata !"kernel_arg_name", metadata !"r"}
!66 = metadata !{null, metadata !67, metadata !25, metadata !68, metadata !30, metadata !69, metadata !6}
!67 = metadata !{metadata !"kernel_arg_addr_space", i32 0, i32 0}
!68 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_uint32", metadata !"crypto_uint32"}
!69 = metadata !{metadata !"kernel_arg_name", metadata !"a", metadata !"b"}
!70 = metadata !{null, metadata !24, metadata !25, metadata !71, metadata !27, metadata !36, metadata !6}
!71 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"crypto_uint32*"}
!72 = metadata !{null, metadata !24, metadata !25, metadata !73, metadata !27, metadata !74, metadata !6}
!73 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_ge25519*", metadata !"uchar*"}
!74 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"p"}
!75 = metadata !{null, metadata !24, metadata !25, metadata !76, metadata !27, metadata !74, metadata !6}
!76 = metadata !{metadata !"kernel_arg_type", metadata !"uchar*", metadata !"crypto_sign_ed25519_ref_ge25519*"}
!77 = metadata !{null, metadata !18, metadata !19, metadata !78, metadata !45, metadata !79, metadata !6}
!78 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_ge25519*"}
!79 = metadata !{metadata !"kernel_arg_name", metadata !"p"}
!80 = metadata !{null, metadata !81, metadata !82, metadata !83, metadata !84, metadata !85, metadata !6}
!81 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1, i32 1, i32 1, i32 1}
!82 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none", metadata !"none", metadata !"none", metadata !"none"}
!83 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_ge25519*", metadata !"crypto_sign_ed25519_ref_ge25519*", metadata !"crypto_sign_ed25519_ref_sc25519*", metadata !"crypto_sign_ed25519_ref_ge25519*", metadata !"crypto_sign_ed25519_ref_sc25519*"}
!84 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"const", metadata !"const", metadata !"const", metadata !"const"}
!85 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"p1", metadata !"s1", metadata !"p2", metadata !"s2"}
!86 = metadata !{null, metadata !24, metadata !25, metadata !87, metadata !27, metadata !60, metadata !6}
!87 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_ge25519*", metadata !"crypto_sign_ed25519_ref_sc25519*"}
!88 = metadata !{null, metadata !24, metadata !25, metadata !89, metadata !27, metadata !90, metadata !6}
!89 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_ge25519*", metadata !"ge25519_aff*"}
!90 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"q"}
!91 = metadata !{null, metadata !8, metadata !2, metadata !92, metadata !4, metadata !93, metadata !6}
!92 = metadata !{metadata !"kernel_arg_type", metadata !"ge25519_aff*", metadata !"ulong long", metadata !"signed char"}
!93 = metadata !{metadata !"kernel_arg_name", metadata !"t", metadata !"pos", metadata !"b"}
!94 = metadata !{null, metadata !95, metadata !19, metadata !96, metadata !21, metadata !97, metadata !6}
!95 = metadata !{metadata !"kernel_arg_addr_space", i32 0}
!96 = metadata !{metadata !"kernel_arg_type", metadata !"signed char"}
!97 = metadata !{metadata !"kernel_arg_name", metadata !"b"}
!98 = metadata !{null, metadata !67, metadata !25, metadata !99, metadata !30, metadata !100, metadata !6}
!99 = metadata !{metadata !"kernel_arg_type", metadata !"signed char", metadata !"signed char"}
!100 = metadata !{metadata !"kernel_arg_name", metadata !"b", metadata !"c"}
!101 = metadata !{null, metadata !1, metadata !2, metadata !102, metadata !103, metadata !104, metadata !6}
!102 = metadata !{metadata !"kernel_arg_type", metadata !"ge25519_aff*", metadata !"ge25519_aff*", metadata !"uchar"}
!103 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"const", metadata !""}
!104 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"p", metadata !"b"}
!105 = metadata !{null, metadata !24, metadata !25, metadata !106, metadata !27, metadata !74, metadata !6}
!106 = metadata !{metadata !"kernel_arg_type", metadata !"ge25519_p2*", metadata !"ge25519_p1p1*"}
!107 = metadata !{null, metadata !52, metadata !2, metadata !108, metadata !54, metadata !109, metadata !6}
!108 = metadata !{metadata !"kernel_arg_type", metadata !"ge25519_p1p1*", metadata !"crypto_sign_ed25519_ref_ge25519*", metadata !"crypto_sign_ed25519_ref_ge25519*"}
!109 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"p", metadata !"q"}
!110 = metadata !{null, metadata !24, metadata !25, metadata !111, metadata !27, metadata !74, metadata !6}
!111 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_ge25519*", metadata !"ge25519_p1p1*"}
!112 = metadata !{null, metadata !24, metadata !25, metadata !113, metadata !27, metadata !74, metadata !6}
!113 = metadata !{metadata !"kernel_arg_type", metadata !"ge25519_p1p1*", metadata !"ge25519_p2*"}
!114 = metadata !{null, metadata !18, metadata !19, metadata !78, metadata !21, metadata !65, metadata !6}
!115 = metadata !{null, metadata !18, metadata !19, metadata !116, metadata !21, metadata !65, metadata !6}
!116 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_fe25519*"}
!117 = metadata !{null, metadata !24, metadata !25, metadata !118, metadata !27, metadata !36, metadata !6}
!118 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_fe25519*", metadata !"uchar*"}
!119 = metadata !{null, metadata !24, metadata !25, metadata !120, metadata !27, metadata !36, metadata !6}
!120 = metadata !{metadata !"kernel_arg_type", metadata !"uchar*", metadata !"crypto_sign_ed25519_ref_fe25519*"}
!121 = metadata !{null, metadata !18, metadata !19, metadata !116, metadata !45, metadata !46, metadata !6}
!122 = metadata !{null, metadata !24, metadata !25, metadata !123, metadata !49, metadata !50, metadata !6}
!123 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_fe25519*", metadata !"crypto_sign_ed25519_ref_fe25519*"}
!124 = metadata !{null, metadata !1, metadata !2, metadata !125, metadata !103, metadata !126, metadata !6}
!125 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_fe25519*", metadata !"crypto_sign_ed25519_ref_fe25519*", metadata !"uchar"}
!126 = metadata !{metadata !"kernel_arg_name", metadata !"r", metadata !"x", metadata !"b"}
!127 = metadata !{null, metadata !24, metadata !25, metadata !123, metadata !27, metadata !36, metadata !6}
!128 = metadata !{null, metadata !52, metadata !2, metadata !129, metadata !54, metadata !55, metadata !6}
!129 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_sign_ed25519_ref_fe25519*", metadata !"crypto_sign_ed25519_ref_fe25519*", metadata !"crypto_sign_ed25519_ref_fe25519*"}
!130 = metadata !{null, metadata !95, metadata !19, metadata !131, metadata !21, metadata !132, metadata !6}
!131 = metadata !{metadata !"kernel_arg_type", metadata !"crypto_uint32"}
!132 = metadata !{metadata !"kernel_arg_name", metadata !"a"}
!133 = metadata !{metadata !134}
!134 = metadata !{i32 0, i32 7, metadata !135}
!135 = metadata !{metadata !136}
!136 = metadata !{metadata !"mem", metadata !137, metadata !"unsigned char", i32 0, i32 7}
!137 = metadata !{metadata !138}
!138 = metadata !{i32 0, i32 32767, i32 1}
!139 = metadata !{metadata !140}
!140 = metadata !{i32 0, i32 31, metadata !141}
!141 = metadata !{metadata !142}
!142 = metadata !{metadata !"num_blocks", metadata !143, metadata !"unsigned int", i32 0, i32 31}
!143 = metadata !{metadata !144}
!144 = metadata !{i32 0, i32 0, i32 0}
!145 = metadata !{metadata !146}
!146 = metadata !{i32 0, i32 7, metadata !147}
!147 = metadata !{metadata !148}
!148 = metadata !{metadata !"sk", metadata !149, metadata !"unsigned char", i32 0, i32 7}
!149 = metadata !{metadata !150}
!150 = metadata !{i32 0, i32 63, i32 1}
!151 = metadata !{metadata !152}
!152 = metadata !{i32 0, i32 7, metadata !153}
!153 = metadata !{metadata !154}
!154 = metadata !{metadata !"signature_out", metadata !149, metadata !"unsigned char", i32 0, i32 7}
!155 = metadata !{metadata !156}
!156 = metadata !{i32 0, i32 31, metadata !157}
!157 = metadata !{metadata !158}
!158 = metadata !{metadata !"return", metadata !159, metadata !"int", i32 0, i32 31}
!159 = metadata !{metadata !160}
!160 = metadata !{i32 0, i32 1, i32 0}
