-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign_ed25519_15 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_v_ce0 : OUT STD_LOGIC;
    r_v_we0 : OUT STD_LOGIC;
    r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_v_ce0 : OUT STD_LOGIC;
    y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign_ed25519_15 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_53_fu_170_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_54_fu_187_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_54_reg_299 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_v_load_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_fu_204_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_317 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond1_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_787_fu_215_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_787_reg_327 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_786_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_786_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal t_addr_4_reg_337 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_55_fu_242_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_55_reg_345 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal t_addr_2_reg_350 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_addr_3_reg_355 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_barrett_reduce_fu_153_ap_start : STD_LOGIC;
    signal grp_barrett_reduce_fu_153_ap_done : STD_LOGIC;
    signal grp_barrett_reduce_fu_153_ap_idle : STD_LOGIC;
    signal grp_barrett_reduce_fu_153_ap_ready : STD_LOGIC;
    signal grp_barrett_reduce_fu_153_r_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_barrett_reduce_fu_153_r_v_ce0 : STD_LOGIC;
    signal grp_barrett_reduce_fu_153_r_v_we0 : STD_LOGIC;
    signal grp_barrett_reduce_fu_153_r_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_barrett_reduce_fu_153_x_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_barrett_reduce_fu_153_x_ce0 : STD_LOGIC;
    signal i_reg_108 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_119 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_131 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_reg_142 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_reg_grp_barrett_reduce_fu_153_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_785_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_788_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_782_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_783_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_789_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_843_cast_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_786_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal carry_fu_262_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal carry_2_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_790_fu_258_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component barrett_reduce IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce0 : OUT STD_LOGIC;
        r_v_we0 : OUT STD_LOGIC;
        r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_ed255Zio IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    t_U : component crypto_sign_ed255Zio
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    grp_barrett_reduce_fu_153 : component barrett_reduce
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_barrett_reduce_fu_153_ap_start,
        ap_done => grp_barrett_reduce_fu_153_ap_done,
        ap_idle => grp_barrett_reduce_fu_153_ap_idle,
        ap_ready => grp_barrett_reduce_fu_153_ap_ready,
        r_v_address0 => grp_barrett_reduce_fu_153_r_v_address0,
        r_v_ce0 => grp_barrett_reduce_fu_153_r_v_ce0,
        r_v_we0 => grp_barrett_reduce_fu_153_r_v_we0,
        r_v_d0 => grp_barrett_reduce_fu_153_r_v_d0,
        r_v_q0 => r_v_q0,
        x_address0 => grp_barrett_reduce_fu_153_x_address0,
        x_ce0 => grp_barrett_reduce_fu_153_x_ce0,
        x_q0 => t_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_barrett_reduce_fu_153_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_barrett_reduce_fu_153_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_236_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_barrett_reduce_fu_153_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_barrett_reduce_fu_153_ap_ready)) then 
                    ap_reg_grp_barrett_reduce_fu_153_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_164_p2 = ap_const_lv1_1))) then 
                i_1_reg_119 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_198_p2 = ap_const_lv1_1))) then 
                i_1_reg_119 <= i_54_reg_299;
            end if; 
        end if;
    end process;

    i_2_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_181_p2 = ap_const_lv1_1))) then 
                i_2_reg_142 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_2_reg_142 <= i_55_reg_345;
            end if; 
        end if;
    end process;

    i_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond3_fu_164_p2))) then 
                i_reg_108 <= i_53_fu_170_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_108 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_131 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_131 <= j_1_reg_317;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_54_reg_299 <= i_54_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_55_reg_345 <= i_55_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_1_reg_317 <= j_1_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                r_v_load_reg_309 <= r_v_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond_fu_236_p2))) then
                t_addr_2_reg_350 <= tmp_782_fu_248_p1(6 - 1 downto 0);
                t_addr_3_reg_355 <= tmp_783_fu_253_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                t_addr_4_reg_337 <= tmp_788_fu_226_p1(6 - 1 downto 0);
                tmp_786_reg_332 <= tmp_786_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_198_p2))) then
                tmp_787_reg_327 <= tmp_787_fu_215_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_181_p2, ap_CS_fsm_state5, exitcond1_fu_198_p2, ap_CS_fsm_state8, exitcond_fu_236_p2, grp_barrett_reduce_fu_153_ap_done, exitcond3_fu_164_p2, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_164_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_181_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_198_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_236_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_barrett_reduce_fu_153_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_barrett_reduce_fu_153_ap_done, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_barrett_reduce_fu_153_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_barrett_reduce_fu_153_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_barrett_reduce_fu_153_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_2_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_262_p4),32));
    carry_fu_262_p4 <= t_q0(31 downto 8);
    exitcond1_fu_198_p2 <= "1" when (j_reg_131 = ap_const_lv6_20) else "0";
    exitcond2_fu_181_p2 <= "1" when (i_1_reg_119 = ap_const_lv6_20) else "0";
    exitcond3_fu_164_p2 <= "1" when (i_reg_108 = ap_const_lv7_40) else "0";
    exitcond_fu_236_p2 <= "1" when (i_2_reg_142 = ap_const_lv6_3F) else "0";
    grp_barrett_reduce_fu_153_ap_start <= ap_reg_grp_barrett_reduce_fu_153_ap_start;
    i_53_fu_170_p2 <= std_logic_vector(unsigned(i_reg_108) + unsigned(ap_const_lv7_1));
    i_54_fu_187_p2 <= std_logic_vector(unsigned(i_1_reg_119) + unsigned(ap_const_lv6_1));
    i_55_fu_242_p2 <= std_logic_vector(unsigned(i_2_reg_142) + unsigned(ap_const_lv6_1));
    j_1_fu_204_p2 <= std_logic_vector(unsigned(j_reg_131) + unsigned(ap_const_lv6_1));

    r_v_address0_assign_proc : process(ap_CS_fsm_state3, grp_barrett_reduce_fu_153_r_v_address0, ap_CS_fsm_state10, tmp_s_fu_193_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_v_address0 <= tmp_s_fu_193_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_v_address0 <= grp_barrett_reduce_fu_153_r_v_address0;
        else 
            r_v_address0 <= "XXXXX";
        end if; 
    end process;


    r_v_ce0_assign_proc : process(ap_CS_fsm_state3, grp_barrett_reduce_fu_153_r_v_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_v_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_v_ce0 <= grp_barrett_reduce_fu_153_r_v_ce0;
        else 
            r_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_v_d0 <= grp_barrett_reduce_fu_153_r_v_d0;

    r_v_we0_assign_proc : process(grp_barrett_reduce_fu_153_r_v_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_v_we0 <= grp_barrett_reduce_fu_153_r_v_we0;
        else 
            r_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, t_addr_4_reg_337, ap_CS_fsm_state8, t_addr_2_reg_350, exitcond_fu_236_p2, grp_barrett_reduce_fu_153_x_address0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_fu_176_p1, tmp_788_fu_226_p1, tmp_782_fu_248_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address0 <= t_addr_2_reg_350;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond_fu_236_p2))) then 
            t_address0 <= tmp_782_fu_248_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_address0 <= t_addr_4_reg_337;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address0 <= tmp_788_fu_226_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= tmp_fu_176_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address0 <= grp_barrett_reduce_fu_153_x_address0;
        else 
            t_address0 <= "XXXXXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state8, exitcond_fu_236_p2, t_addr_3_reg_355, ap_CS_fsm_state9, tmp_783_fu_253_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address1 <= t_addr_3_reg_355;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond_fu_236_p2))) then 
            t_address1 <= tmp_783_fu_253_p1(6 - 1 downto 0);
        else 
            t_address1 <= "XXXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8, exitcond_fu_236_p2, grp_barrett_reduce_fu_153_x_ce0, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond_fu_236_p2)) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            t_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_ce0 <= grp_barrett_reduce_fu_153_x_ce0;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state8, exitcond_fu_236_p2, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond_fu_236_p2)) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state9, tmp_789_fu_230_p2, tmp_843_cast_fu_283_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_d0 <= tmp_843_cast_fu_283_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_d0 <= tmp_789_fu_230_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_d0 <= ap_const_lv32_0;
        else 
            t_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    t_d1 <= std_logic_vector(unsigned(carry_2_fu_272_p1) + unsigned(t_q1));

    t_we0_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_164_p2, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond3_fu_164_p2)) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_782_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_142),64));
    tmp_783_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_55_fu_242_p2),64));
    tmp_785_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_131),64));
    tmp_786_fu_221_p1 <= y_v_q0;
    tmp_786_fu_221_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_v_load_reg_309) * signed(tmp_786_fu_221_p1))), 32));
    tmp_787_fu_215_p2 <= std_logic_vector(unsigned(i_1_reg_119) + unsigned(j_reg_131));
    tmp_788_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_787_reg_327),64));
    tmp_789_fu_230_p2 <= std_logic_vector(unsigned(t_q0) + unsigned(tmp_786_reg_332));
    tmp_790_fu_258_p1 <= t_q0(8 - 1 downto 0);
    tmp_843_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_790_fu_258_p1),32));
    tmp_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_108),64));
    tmp_s_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_119),64));
    y_v_address0 <= tmp_785_fu_210_p1(5 - 1 downto 0);

    y_v_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_v_ce0 <= ap_const_logic_1;
        else 
            y_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
