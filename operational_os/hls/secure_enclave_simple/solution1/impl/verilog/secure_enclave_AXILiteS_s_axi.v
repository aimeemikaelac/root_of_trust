// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module secure_enclave_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 8,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [31:0]                   ap_return,
    input  wire [0:0]                    secure_storage_in_V_address0,
    input  wire                          secure_storage_in_V_ce0,
    output wire [127:0]                  secure_storage_in_V_q0,
    output wire [127:0]                  pin_attempt_V,
    output wire                          pin_attempt_V_ap_vld,
    input  wire [0:0]                    secure_storage_out_V_address0,
    input  wire                          secure_storage_out_V_ce0,
    input  wire                          secure_storage_out_V_we0,
    input  wire [127:0]                  secure_storage_out_V_d0,
    output wire [31:0]                   counter_in,
    output wire                          counter_in_ap_vld,
    input  wire [31:0]                   increment_counter,
    input  wire                          increment_counter_ap_vld,
    input  wire [31:0]                   reset_counter,
    input  wire                          reset_counter_ap_vld
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of ap_return
//        bit 31~0 - ap_return[31:0] (Read)
// 0x40 : Data signal of pin_attempt_V
//        bit 31~0 - pin_attempt_V[31:0] (Read/Write)
// 0x44 : Data signal of pin_attempt_V
//        bit 31~0 - pin_attempt_V[63:32] (Read/Write)
// 0x48 : Data signal of pin_attempt_V
//        bit 31~0 - pin_attempt_V[95:64] (Read/Write)
// 0x4c : Data signal of pin_attempt_V
//        bit 31~0 - pin_attempt_V[127:96] (Read/Write)
// 0x50 : Control signal of pin_attempt_V
//        bit 0  - pin_attempt_V_ap_vld (Read/Write/SC)
//        others - reserved
// 0x80 : Data signal of counter_in
//        bit 31~0 - counter_in[31:0] (Read/Write)
// 0x84 : Control signal of counter_in
//        bit 0  - counter_in_ap_vld (Read/Write/SC)
//        others - reserved
// 0x88 : Data signal of increment_counter
//        bit 31~0 - increment_counter[31:0] (Read)
// 0x8c : Control signal of increment_counter
//        bit 0  - increment_counter_ap_vld (Read/COR)
//        others - reserved
// 0x90 : Data signal of reset_counter
//        bit 31~0 - reset_counter[31:0] (Read)
// 0x94 : Control signal of reset_counter
//        bit 0  - reset_counter_ap_vld (Read/COR)
//        others - reserved
// 0x20 ~
// 0x3f : Memory 'secure_storage_in_V' (2 * 128b)
//        Word 4n   : bit [31:0] - secure_storage_in_V[n][31: 0]
//        Word 4n+1 : bit [31:0] - secure_storage_in_V[n][63:32]
//        Word 4n+2 : bit [31:0] - secure_storage_in_V[n][95:64]
//        Word 4n+3 : bit [31:0] - secure_storage_in_V[n][127:96]
// 0x60 ~
// 0x7f : Memory 'secure_storage_out_V' (2 * 128b)
//        Word 4n   : bit [31:0] - secure_storage_out_V[n][31: 0]
//        Word 4n+1 : bit [31:0] - secure_storage_out_V[n][63:32]
//        Word 4n+2 : bit [31:0] - secure_storage_out_V[n][95:64]
//        Word 4n+3 : bit [31:0] - secure_storage_out_V[n][127:96]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                   = 8'h00,
    ADDR_GIE                       = 8'h04,
    ADDR_IER                       = 8'h08,
    ADDR_ISR                       = 8'h0c,
    ADDR_AP_RETURN_0               = 8'h10,
    ADDR_PIN_ATTEMPT_V_DATA_0      = 8'h40,
    ADDR_PIN_ATTEMPT_V_DATA_1      = 8'h44,
    ADDR_PIN_ATTEMPT_V_DATA_2      = 8'h48,
    ADDR_PIN_ATTEMPT_V_DATA_3      = 8'h4c,
    ADDR_PIN_ATTEMPT_V_CTRL        = 8'h50,
    ADDR_COUNTER_IN_DATA_0         = 8'h80,
    ADDR_COUNTER_IN_CTRL           = 8'h84,
    ADDR_INCREMENT_COUNTER_DATA_0  = 8'h88,
    ADDR_INCREMENT_COUNTER_CTRL    = 8'h8c,
    ADDR_RESET_COUNTER_DATA_0      = 8'h90,
    ADDR_RESET_COUNTER_CTRL        = 8'h94,
    ADDR_SECURE_STORAGE_IN_V_BASE  = 8'h20,
    ADDR_SECURE_STORAGE_IN_V_HIGH  = 8'h3f,
    ADDR_SECURE_STORAGE_OUT_V_BASE = 8'h60,
    ADDR_SECURE_STORAGE_OUT_V_HIGH = 8'h7f,
    WRIDLE                         = 2'd0,
    WRDATA                         = 2'd1,
    WRRESP                         = 2'd2,
    RDIDLE                         = 2'd0,
    RDDATA                         = 2'd1,
    ADDR_BITS         = 8;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done;
    reg                           int_ap_start;
    reg                           int_auto_restart;
    reg                           int_gie;
    reg  [1:0]                    int_ier;
    reg  [1:0]                    int_isr;
    reg  [31:0]                   int_ap_return;
    reg  [127:0]                  int_pin_attempt_V;
    reg                           int_pin_attempt_V_ap_vld;
    reg  [31:0]                   int_counter_in;
    reg                           int_counter_in_ap_vld;
    reg  [31:0]                   int_increment_counter;
    reg                           int_increment_counter_ap_vld;
    reg  [31:0]                   int_reset_counter;
    reg                           int_reset_counter_ap_vld;
    // memory signals
    wire [0:0]                    int_secure_storage_in_V_address0;
    wire                          int_secure_storage_in_V_ce0;
    wire                          int_secure_storage_in_V_we0;
    wire [15:0]                   int_secure_storage_in_V_be0;
    wire [127:0]                  int_secure_storage_in_V_d0;
    wire [127:0]                  int_secure_storage_in_V_q0;
    wire [0:0]                    int_secure_storage_in_V_address1;
    wire                          int_secure_storage_in_V_ce1;
    wire                          int_secure_storage_in_V_we1;
    wire [15:0]                   int_secure_storage_in_V_be1;
    wire [127:0]                  int_secure_storage_in_V_d1;
    wire [127:0]                  int_secure_storage_in_V_q1;
    reg                           int_secure_storage_in_V_read;
    reg                           int_secure_storage_in_V_write;
    reg  [1:0]                    int_secure_storage_in_V_shift;
    wire [0:0]                    int_secure_storage_out_V_address0;
    wire                          int_secure_storage_out_V_ce0;
    wire                          int_secure_storage_out_V_we0;
    wire [15:0]                   int_secure_storage_out_V_be0;
    wire [127:0]                  int_secure_storage_out_V_d0;
    wire [127:0]                  int_secure_storage_out_V_q0;
    wire [0:0]                    int_secure_storage_out_V_address1;
    wire                          int_secure_storage_out_V_ce1;
    wire                          int_secure_storage_out_V_we1;
    wire [15:0]                   int_secure_storage_out_V_be1;
    wire [127:0]                  int_secure_storage_out_V_d1;
    wire [127:0]                  int_secure_storage_out_V_q1;
    reg                           int_secure_storage_out_V_read;
    reg                           int_secure_storage_out_V_write;
    reg  [1:0]                    int_secure_storage_out_V_shift;

//------------------------Instantiation------------------
// int_secure_storage_in_V
secure_enclave_AXILiteS_s_axi_ram #(
    .BYTES    ( 16 ),
    .DEPTH    ( 2 )
) int_secure_storage_in_V (
    .clk0     ( ACLK ),
    .address0 ( int_secure_storage_in_V_address0 ),
    .ce0      ( int_secure_storage_in_V_ce0 ),
    .we0      ( int_secure_storage_in_V_we0 ),
    .be0      ( int_secure_storage_in_V_be0 ),
    .d0       ( int_secure_storage_in_V_d0 ),
    .q0       ( int_secure_storage_in_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_secure_storage_in_V_address1 ),
    .ce1      ( int_secure_storage_in_V_ce1 ),
    .we1      ( int_secure_storage_in_V_we1 ),
    .be1      ( int_secure_storage_in_V_be1 ),
    .d1       ( int_secure_storage_in_V_d1 ),
    .q1       ( int_secure_storage_in_V_q1 )
);
// int_secure_storage_out_V
secure_enclave_AXILiteS_s_axi_ram #(
    .BYTES    ( 16 ),
    .DEPTH    ( 2 )
) int_secure_storage_out_V (
    .clk0     ( ACLK ),
    .address0 ( int_secure_storage_out_V_address0 ),
    .ce0      ( int_secure_storage_out_V_ce0 ),
    .we0      ( int_secure_storage_out_V_we0 ),
    .be0      ( int_secure_storage_out_V_be0 ),
    .d0       ( int_secure_storage_out_V_d0 ),
    .q0       ( int_secure_storage_out_V_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_secure_storage_out_V_address1 ),
    .ce1      ( int_secure_storage_out_V_ce1 ),
    .we1      ( int_secure_storage_out_V_we1 ),
    .be1      ( int_secure_storage_out_V_be1 ),
    .d1       ( int_secure_storage_out_V_d1 ),
    .q1       ( int_secure_storage_out_V_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (~ARESET) & (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRIDLE;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (~ARESET) && (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_secure_storage_in_V_read & !int_secure_storage_out_V_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDIDLE;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_AP_RETURN_0: begin
                    rdata <= int_ap_return[31:0];
                end
                ADDR_PIN_ATTEMPT_V_DATA_0: begin
                    rdata <= int_pin_attempt_V[31:0];
                end
                ADDR_PIN_ATTEMPT_V_DATA_1: begin
                    rdata <= int_pin_attempt_V[63:32];
                end
                ADDR_PIN_ATTEMPT_V_DATA_2: begin
                    rdata <= int_pin_attempt_V[95:64];
                end
                ADDR_PIN_ATTEMPT_V_DATA_3: begin
                    rdata <= int_pin_attempt_V[127:96];
                end
                ADDR_PIN_ATTEMPT_V_CTRL: begin
                    rdata[0] <= int_pin_attempt_V_ap_vld;
                end
                ADDR_COUNTER_IN_DATA_0: begin
                    rdata <= int_counter_in[31:0];
                end
                ADDR_COUNTER_IN_CTRL: begin
                    rdata[0] <= int_counter_in_ap_vld;
                end
                ADDR_INCREMENT_COUNTER_DATA_0: begin
                    rdata <= int_increment_counter[31:0];
                end
                ADDR_INCREMENT_COUNTER_CTRL: begin
                    rdata[0] <= int_increment_counter_ap_vld;
                end
                ADDR_RESET_COUNTER_DATA_0: begin
                    rdata <= int_reset_counter[31:0];
                end
                ADDR_RESET_COUNTER_CTRL: begin
                    rdata[0] <= int_reset_counter_ap_vld;
                end
            endcase
        end
        else if (int_secure_storage_in_V_read) begin
            rdata <= int_secure_storage_in_V_q1 >> (int_secure_storage_in_V_shift * 32);
        end
        else if (int_secure_storage_out_V_read) begin
            rdata <= int_secure_storage_out_V_q1 >> (int_secure_storage_out_V_shift * 32);
        end
    end
end


//------------------------Register logic-----------------
assign interrupt            = int_gie & (|int_isr);
assign ap_start             = int_ap_start;
assign int_ap_idle          = ap_idle;
assign int_ap_ready         = ap_ready;
assign pin_attempt_V        = int_pin_attempt_V;
assign pin_attempt_V_ap_vld = int_pin_attempt_V_ap_vld;
assign counter_in           = int_counter_in;
assign counter_in_ap_vld    = int_counter_in_ap_vld;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_ap_return
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_return <= 0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_return <= ap_return;
    end
end

// int_pin_attempt_V[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_pin_attempt_V[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_PIN_ATTEMPT_V_DATA_0)
            int_pin_attempt_V[31:0] <= (WDATA[31:0] & wmask) | (int_pin_attempt_V[31:0] & ~wmask);
    end
end

// int_pin_attempt_V[63:32]
always @(posedge ACLK) begin
    if (ARESET)
        int_pin_attempt_V[63:32] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_PIN_ATTEMPT_V_DATA_1)
            int_pin_attempt_V[63:32] <= (WDATA[31:0] & wmask) | (int_pin_attempt_V[63:32] & ~wmask);
    end
end

// int_pin_attempt_V[95:64]
always @(posedge ACLK) begin
    if (ARESET)
        int_pin_attempt_V[95:64] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_PIN_ATTEMPT_V_DATA_2)
            int_pin_attempt_V[95:64] <= (WDATA[31:0] & wmask) | (int_pin_attempt_V[95:64] & ~wmask);
    end
end

// int_pin_attempt_V[127:96]
always @(posedge ACLK) begin
    if (ARESET)
        int_pin_attempt_V[127:96] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_PIN_ATTEMPT_V_DATA_3)
            int_pin_attempt_V[127:96] <= (WDATA[31:0] & wmask) | (int_pin_attempt_V[127:96] & ~wmask);
    end
end

// int_pin_attempt_V_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_pin_attempt_V_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_PIN_ATTEMPT_V_CTRL && WSTRB[0] && WDATA[0])
            int_pin_attempt_V_ap_vld <= 1'b1;
        else
            int_pin_attempt_V_ap_vld <= 1'b0; // self clear
    end
end

// int_counter_in[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_counter_in[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_COUNTER_IN_DATA_0)
            int_counter_in[31:0] <= (WDATA[31:0] & wmask) | (int_counter_in[31:0] & ~wmask);
    end
end

// int_counter_in_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_counter_in_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_COUNTER_IN_CTRL && WSTRB[0] && WDATA[0])
            int_counter_in_ap_vld <= 1'b1;
        else
            int_counter_in_ap_vld <= 1'b0; // self clear
    end
end

// int_increment_counter
always @(posedge ACLK) begin
    if (ARESET)
        int_increment_counter <= 0;
    else if (ACLK_EN) begin
        if (increment_counter_ap_vld)
            int_increment_counter <= increment_counter;
    end
end

// int_increment_counter_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_increment_counter_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (increment_counter_ap_vld)
            int_increment_counter_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_INCREMENT_COUNTER_CTRL)
            int_increment_counter_ap_vld <= 1'b0; // clear on read
    end
end

// int_reset_counter
always @(posedge ACLK) begin
    if (ARESET)
        int_reset_counter <= 0;
    else if (ACLK_EN) begin
        if (reset_counter_ap_vld)
            int_reset_counter <= reset_counter;
    end
end

// int_reset_counter_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_reset_counter_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (reset_counter_ap_vld)
            int_reset_counter_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_RESET_COUNTER_CTRL)
            int_reset_counter_ap_vld <= 1'b0; // clear on read
    end
end


//------------------------Memory logic-------------------
// secure_storage_in_V
assign int_secure_storage_in_V_address0  = secure_storage_in_V_address0;
assign int_secure_storage_in_V_ce0       = secure_storage_in_V_ce0;
assign int_secure_storage_in_V_we0       = 1'b0;
assign int_secure_storage_in_V_be0       = 1'b0;
assign int_secure_storage_in_V_d0        = 1'b0;
assign secure_storage_in_V_q0            = int_secure_storage_in_V_q0;
assign int_secure_storage_in_V_address1  = ar_hs? raddr[4:4] : waddr[4:4];
assign int_secure_storage_in_V_ce1       = ar_hs | (int_secure_storage_in_V_write & WVALID);
assign int_secure_storage_in_V_we1       = int_secure_storage_in_V_write & WVALID;
assign int_secure_storage_in_V_be1       = WSTRB << (waddr[3:2] * 4);
assign int_secure_storage_in_V_d1        = {4{WDATA}};
// secure_storage_out_V
assign int_secure_storage_out_V_address0 = secure_storage_out_V_address0;
assign int_secure_storage_out_V_ce0      = secure_storage_out_V_ce0;
assign int_secure_storage_out_V_we0      = secure_storage_out_V_we0;
assign int_secure_storage_out_V_be0      = {16{secure_storage_out_V_we0}};
assign int_secure_storage_out_V_d0       = secure_storage_out_V_d0;
assign int_secure_storage_out_V_address1 = ar_hs? raddr[4:4] : waddr[4:4];
assign int_secure_storage_out_V_ce1      = ar_hs | (int_secure_storage_out_V_write & WVALID);
assign int_secure_storage_out_V_we1      = int_secure_storage_out_V_write & WVALID;
assign int_secure_storage_out_V_be1      = WSTRB << (waddr[3:2] * 4);
assign int_secure_storage_out_V_d1       = {4{WDATA}};
// int_secure_storage_in_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_secure_storage_in_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SECURE_STORAGE_IN_V_BASE && raddr <= ADDR_SECURE_STORAGE_IN_V_HIGH)
            int_secure_storage_in_V_read <= 1'b1;
        else
            int_secure_storage_in_V_read <= 1'b0;
    end
end

// int_secure_storage_in_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_secure_storage_in_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SECURE_STORAGE_IN_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SECURE_STORAGE_IN_V_HIGH)
            int_secure_storage_in_V_write <= 1'b1;
        else if (WVALID)
            int_secure_storage_in_V_write <= 1'b0;
    end
end

// int_secure_storage_in_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_secure_storage_in_V_shift <= raddr[3:2];
    end
end

// int_secure_storage_out_V_read
always @(posedge ACLK) begin
    if (ARESET)
        int_secure_storage_out_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SECURE_STORAGE_OUT_V_BASE && raddr <= ADDR_SECURE_STORAGE_OUT_V_HIGH)
            int_secure_storage_out_V_read <= 1'b1;
        else
            int_secure_storage_out_V_read <= 1'b0;
    end
end

// int_secure_storage_out_V_write
always @(posedge ACLK) begin
    if (ARESET)
        int_secure_storage_out_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SECURE_STORAGE_OUT_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SECURE_STORAGE_OUT_V_HIGH)
            int_secure_storage_out_V_write <= 1'b1;
        else if (WVALID)
            int_secure_storage_out_V_write <= 1'b0;
    end
end

// int_secure_storage_out_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_secure_storage_out_V_shift <= raddr[3:2];
    end
end


endmodule


`timescale 1ns/1ps

module secure_enclave_AXILiteS_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

