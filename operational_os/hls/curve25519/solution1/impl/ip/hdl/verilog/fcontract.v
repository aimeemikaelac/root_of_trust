// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fcontract (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        input_limbs_address0,
        input_limbs_ce0,
        input_limbs_q0
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_state3 = 50'd4;
parameter    ap_ST_fsm_state4 = 50'd8;
parameter    ap_ST_fsm_state5 = 50'd16;
parameter    ap_ST_fsm_state6 = 50'd32;
parameter    ap_ST_fsm_state7 = 50'd64;
parameter    ap_ST_fsm_state8 = 50'd128;
parameter    ap_ST_fsm_state9 = 50'd256;
parameter    ap_ST_fsm_state10 = 50'd512;
parameter    ap_ST_fsm_state11 = 50'd1024;
parameter    ap_ST_fsm_state12 = 50'd2048;
parameter    ap_ST_fsm_state13 = 50'd4096;
parameter    ap_ST_fsm_state14 = 50'd8192;
parameter    ap_ST_fsm_state15 = 50'd16384;
parameter    ap_ST_fsm_state16 = 50'd32768;
parameter    ap_ST_fsm_state17 = 50'd65536;
parameter    ap_ST_fsm_state18 = 50'd131072;
parameter    ap_ST_fsm_state19 = 50'd262144;
parameter    ap_ST_fsm_state20 = 50'd524288;
parameter    ap_ST_fsm_state21 = 50'd1048576;
parameter    ap_ST_fsm_state22 = 50'd2097152;
parameter    ap_ST_fsm_state23 = 50'd4194304;
parameter    ap_ST_fsm_state24 = 50'd8388608;
parameter    ap_ST_fsm_state25 = 50'd16777216;
parameter    ap_ST_fsm_state26 = 50'd33554432;
parameter    ap_ST_fsm_state27 = 50'd67108864;
parameter    ap_ST_fsm_state28 = 50'd134217728;
parameter    ap_ST_fsm_state29 = 50'd268435456;
parameter    ap_ST_fsm_state30 = 50'd536870912;
parameter    ap_ST_fsm_state31 = 50'd1073741824;
parameter    ap_ST_fsm_state32 = 50'd2147483648;
parameter    ap_ST_fsm_state33 = 50'd4294967296;
parameter    ap_ST_fsm_state34 = 50'd8589934592;
parameter    ap_ST_fsm_state35 = 50'd17179869184;
parameter    ap_ST_fsm_state36 = 50'd34359738368;
parameter    ap_ST_fsm_state37 = 50'd68719476736;
parameter    ap_ST_fsm_state38 = 50'd137438953472;
parameter    ap_ST_fsm_state39 = 50'd274877906944;
parameter    ap_ST_fsm_state40 = 50'd549755813888;
parameter    ap_ST_fsm_state41 = 50'd1099511627776;
parameter    ap_ST_fsm_state42 = 50'd2199023255552;
parameter    ap_ST_fsm_state43 = 50'd4398046511104;
parameter    ap_ST_fsm_state44 = 50'd8796093022208;
parameter    ap_ST_fsm_state45 = 50'd17592186044416;
parameter    ap_ST_fsm_state46 = 50'd35184372088832;
parameter    ap_ST_fsm_state47 = 50'd70368744177664;
parameter    ap_ST_fsm_state48 = 50'd140737488355328;
parameter    ap_ST_fsm_state49 = 50'd281474976710656;
parameter    ap_ST_fsm_state50 = 50'd562949953421312;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [7:0] output_r_d0;
output  [3:0] input_limbs_address0;
output   input_limbs_ce0;
input  [63:0] input_limbs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[7:0] output_r_d0;
reg input_limbs_ce0;

(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] input_q1;
reg   [31:0] reg_836;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state31;
wire   [31:0] input_q0;
reg   [31:0] reg_840;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state32;
reg   [31:0] reg_844;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state33;
reg   [7:0] reg_849;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state34;
reg   [7:0] reg_854;
reg   [7:0] reg_859;
reg   [7:0] reg_864;
wire   [3:0] i_6_fu_875_p2;
reg   [3:0] i_6_reg_1960;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_881_p1;
reg   [63:0] tmp_reg_1965;
wire   [0:0] exitcond6_fu_869_p2;
wire   [1:0] j_2_fu_897_p2;
reg   [1:0] j_2_reg_1990;
wire    ap_CS_fsm_state4;
wire   [3:0] input_addr_33_reg_1995;
wire   [0:0] exitcond5_fu_891_p2;
wire   [0:0] tmp_883_fu_903_p1;
reg   [0:0] tmp_883_reg_2001;
wire    ap_CS_fsm_state5;
wire   [3:0] i_7_fu_913_p2;
reg   [3:0] i_7_reg_2008;
reg   [3:0] input_addr_34_reg_2015;
wire   [0:0] exitcond4_fu_907_p2;
wire   [5:0] tmp_387_fu_946_p4;
reg   [5:0] tmp_387_reg_2021;
wire    ap_CS_fsm_state6;
reg   [3:0] input_addr_35_reg_2026;
wire   [6:0] tmp_389_fu_975_p4;
reg   [6:0] tmp_389_reg_2032;
reg   [3:0] input_addr_36_reg_2037;
wire   [31:0] tmp_752_fu_1119_p2;
wire    ap_CS_fsm_state9;
wire   [1:0] j_3_fu_1139_p2;
reg   [1:0] j_3_reg_2051;
wire    ap_CS_fsm_state10;
wire   [31:0] mask_2_cast_fu_1165_p3;
wire   [0:0] exitcond3_fu_1133_p2;
wire   [0:0] tmp_887_fu_1173_p1;
reg   [0:0] tmp_887_reg_2061;
wire    ap_CS_fsm_state11;
wire   [3:0] i_9_fu_1183_p2;
reg   [3:0] i_9_reg_2068;
reg   [3:0] input_addr_37_reg_2075;
wire   [0:0] exitcond2_fu_1177_p2;
reg   [5:0] tmp_393_reg_2080;
wire    ap_CS_fsm_state12;
reg   [3:0] input_addr_39_reg_2085;
wire  signed [6:0] grp_fu_766_p4;
reg   [6:0] tmp_395_reg_2091;
reg   [3:0] input_addr_40_reg_2096;
wire  signed [31:0] grp_fu_1943_p3;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [0:0] exitcond1_fu_1263_p2;
wire   [25:0] tmp_888_fu_1274_p1;
reg   [25:0] tmp_888_reg_2115;
wire   [31:0] mask_1_fu_1495_p2;
wire    ap_CS_fsm_state16;
wire   [3:0] i_8_fu_1501_p2;
reg   [3:0] input_addr_48_reg_2133;
wire    ap_CS_fsm_state17;
wire   [0:0] exitcond_fu_1507_p2;
wire   [3:0] i_13_fu_1546_p2;
wire    ap_CS_fsm_state18;
wire   [3:0] input_addr_42_reg_2144;
wire   [5:0] tmp_915_fu_1552_p1;
reg   [5:0] tmp_915_reg_2149;
reg   [7:0] tmp_784_reg_2154;
reg   [7:0] tmp_785_reg_2159;
wire   [3:0] input_addr_41_reg_2164;
wire   [2:0] tmp_917_fu_1587_p1;
reg   [2:0] tmp_917_reg_2175;
reg   [7:0] tmp_793_reg_2180;
reg   [7:0] tmp_794_reg_2185;
reg   [7:0] tmp_795_reg_2190;
reg   [31:0] input_load_45_reg_2195;
reg   [7:0] tmp_788_reg_2206;
reg   [7:0] tmp_789_reg_2211;
wire   [7:0] tmp_792_fu_1676_p2;
reg   [7:0] tmp_792_reg_2216;
wire   [6:0] tmp_920_fu_1682_p1;
reg   [6:0] tmp_920_reg_2221;
reg   [7:0] tmp_806_reg_2226;
reg   [7:0] tmp_807_reg_2231;
reg   [7:0] tmp_808_reg_2236;
reg   [31:0] input_load_50_reg_2241;
wire    ap_CS_fsm_state22;
wire   [3:0] tmp_922_fu_1716_p1;
reg   [3:0] tmp_922_reg_2246;
reg   [7:0] tmp_816_reg_2251;
reg   [7:0] tmp_817_reg_2256;
reg   [7:0] tmp_818_reg_2261;
wire   [7:0] tmp_782_fu_1769_p2;
reg   [7:0] tmp_782_reg_2266;
wire    ap_CS_fsm_state30;
reg   [7:0] tmp_800_reg_2283;
wire   [7:0] tmp_810_fu_1825_p2;
reg   [7:0] tmp_810_reg_2288;
reg   [7:0] tmp_811_reg_2293;
reg   [7:0] tmp_812_reg_2298;
wire   [7:0] tmp_815_fu_1867_p2;
reg   [7:0] tmp_815_reg_2303;
wire   [7:0] tmp_820_fu_1885_p2;
reg   [7:0] tmp_820_reg_2313;
reg   [7:0] tmp_823_reg_2318;
wire   [7:0] tmp_919_fu_1896_p1;
reg   [7:0] tmp_919_reg_2323;
wire   [7:0] tmp_805_fu_1907_p2;
reg   [7:0] tmp_805_reg_2328;
reg   [3:0] input_address0;
reg    input_ce0;
reg    input_we0;
reg   [31:0] input_d0;
reg   [3:0] input_address1;
reg    input_ce1;
reg    input_we1;
reg   [31:0] input_d1;
reg   [3:0] i_reg_667;
wire    ap_CS_fsm_state3;
reg   [1:0] j_reg_678;
wire    ap_CS_fsm_state8;
reg   [3:0] i_1_reg_689;
wire    ap_CS_fsm_state7;
reg   [31:0] a_assign_reg_700;
reg   [1:0] j_1_reg_710;
reg   [3:0] i_2_reg_721;
wire    ap_CS_fsm_state13;
reg   [3:0] i_3_reg_732;
reg   [31:0] mask4_reg_744;
reg   [3:0] i_4_reg_754;
wire   [63:0] tmp_758_fu_919_p1;
wire   [63:0] tmp_766_fu_971_p1;
wire   [63:0] tmp_762_fu_1000_p1;
wire   [63:0] tmp_773_fu_1189_p1;
wire   [63:0] tmp_776_fu_1217_p1;
wire   [63:0] tmp_774_fu_1226_p1;
wire   [63:0] tmp_770_fu_1269_p1;
wire   [63:0] tmp_824_fu_1513_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire   [31:0] tmp_881_fu_886_p1;
wire   [31:0] tmp_765_fu_964_p2;
wire   [31:0] tmp_761_fu_993_p2;
wire   [31:0] tmp_767_fu_1007_p2;
wire   [31:0] tmp_763_fu_1017_p2;
wire   [31:0] tmp_755_fu_1068_p2;
wire  signed [31:0] grp_fu_1934_p3;
wire   [31:0] tmp_753_fu_1126_p2;
wire   [31:0] tmp_964_cast_fu_1212_p1;
wire   [31:0] tmp_968_cast_fu_1221_p1;
wire   [31:0] tmp_777_fu_1233_p2;
wire   [31:0] tmp_775_fu_1243_p2;
wire   [31:0] tmp_954_cast_fu_1258_p1;
wire   [31:0] tmp_769_fu_1320_p2;
wire   [31:0] storemerge_fu_1539_p2;
wire   [31:0] tmp_906_fu_1750_p2;
wire   [31:0] tmp_908_fu_1775_p2;
wire   [31:0] tmp_910_fu_1782_p2;
wire   [31:0] tmp_912_fu_1789_p2;
wire   [31:0] tmp_907_fu_1890_p2;
wire   [31:0] tmp_909_fu_1913_p2;
wire   [31:0] tmp_911_fu_1920_p2;
wire   [31:0] tmp_913_fu_1927_p2;
wire   [7:0] tmp_787_fu_1633_p2;
wire   [7:0] tmp_914_fu_1757_p1;
wire   [7:0] tmp_797_fu_1807_p2;
wire   [0:0] tmp_886_fu_924_p3;
wire   [31:0] mask_4_fu_932_p3;
wire   [31:0] tmp_759_fu_940_p2;
wire   [31:0] p_shl3_fu_956_p3;
wire   [31:0] p_shl_fu_985_p3;
wire  signed [31:0] tmp_764_fu_1004_p1;
wire  signed [31:0] tmp_760_fu_1014_p1;
wire   [0:0] tmp_885_fu_1024_p3;
wire   [31:0] mask_3_fu_1032_p3;
wire   [31:0] tmp_754_fu_1040_p2;
wire  signed [6:0] tmp_383_fu_1046_p4;
wire   [31:0] p_shl2_fu_1060_p3;
wire   [0:0] tmp_882_fu_1075_p3;
wire   [31:0] mask_fu_1083_p3;
wire   [31:0] tmp_s_fu_1091_p2;
wire   [5:0] tmp_379_fu_1097_p4;
wire   [31:0] p_shl1_fu_1111_p3;
wire  signed [31:0] tmp_751_fu_1107_p1;
wire   [31:0] a_assign_1_fu_1145_p2;
wire   [0:0] tmp_884_fu_1151_p3;
wire   [0:0] mask_2_fu_1159_p2;
wire   [25:0] tmp_904_fu_1194_p1;
wire   [24:0] tmp_905_fu_1198_p1;
wire  signed [31:0] carry_1_fu_1230_p1;
wire  signed [31:0] carry_fu_1240_p1;
wire   [24:0] tmp_903_fu_1250_p1;
wire   [20:0] tmp_597_fu_1278_p4;
wire   [1:0] tmp_598_fu_1288_p4;
wire   [0:0] tmp_889_fu_1298_p1;
wire   [25:0] tmp_768_fu_1302_p6;
wire   [31:0] tmp_953_cast_fu_1316_p1;
wire   [31:0] a_assign_3_fu_1327_p2;
wire   [31:0] tmp_890_fu_1333_p2;
wire   [31:0] a_assign_4_fu_1339_p2;
wire   [31:0] tmp_891_fu_1345_p2;
wire   [31:0] a_assign_5_fu_1351_p2;
wire   [31:0] tmp_892_fu_1357_p2;
wire   [31:0] a_assign_6_fu_1363_p2;
wire   [31:0] tmp_893_fu_1369_p2;
wire   [31:0] a_assign_7_fu_1375_p2;
wire   [31:0] tmp_894_fu_1381_p2;
wire   [31:0] a_assign_9_fu_1393_p2;
wire   [31:0] tmp_895_fu_1399_p2;
wire   [31:0] a_assign_s_fu_1405_p2;
wire   [31:0] tmp_896_fu_1411_p2;
wire   [31:0] a_assign_2_fu_1417_p2;
wire   [31:0] tmp_897_fu_1423_p2;
wire   [31:0] a_assign_10_fu_1429_p2;
wire   [31:0] tmp_898_fu_1435_p2;
wire   [31:0] a_assign_11_fu_1441_p2;
wire   [31:0] tmp_899_fu_1447_p2;
wire   [31:0] a_assign_12_fu_1453_p2;
wire   [31:0] a_assign_8_fu_1387_p2;
wire   [0:0] tmp_902_fu_1475_p1;
wire   [0:0] tmp_900_fu_1459_p3;
wire   [0:0] tmp_901_fu_1467_p3;
wire   [0:0] tmp_612_fu_1479_p3;
wire   [31:0] p_pn_fu_1487_p3;
wire   [0:0] tmp_924_fu_1518_p1;
wire   [25:0] tmp_1121_pn_v_fu_1522_p3;
wire   [25:0] tmp_1121_pn_fu_1530_p2;
wire   [31:0] tmp_1121_pn_cast_fu_1535_p1;
wire   [4:0] tmp_916_fu_1621_p1;
wire   [7:0] tmp_786_fu_1625_p3;
wire   [7:0] tmp_791_fu_1669_p3;
wire   [7:0] tmp_790_fu_1659_p4;
wire   [7:0] grp_fu_796_p4;
wire   [7:0] tmp_781_fu_1762_p3;
wire   [1:0] tmp_918_fu_1795_p1;
wire   [7:0] tmp_796_fu_1799_p3;
wire   [4:0] tmp_921_fu_1813_p1;
wire   [7:0] tmp_809_fu_1817_p3;
wire   [7:0] tmp_814_fu_1860_p3;
wire   [7:0] tmp_813_fu_1850_p4;
wire   [1:0] tmp_923_fu_1873_p1;
wire   [7:0] tmp_819_fu_1877_p3;
wire   [7:0] tmp_804_fu_1900_p3;
wire   [5:0] grp_fu_1934_p0;
wire   [5:0] grp_fu_1943_p0;
reg   [49:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 50'd1;
end

fcontract_input #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
input_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_address0),
    .ce0(input_ce0),
    .we0(input_we0),
    .d0(input_d0),
    .q0(input_q0),
    .address1(input_address1),
    .ce1(input_ce1),
    .we1(input_we1),
    .d1(input_d1),
    .q1(input_q1)
);

curve25519_donna_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
curve25519_donna_bkb_U71(
    .din0(grp_fu_1934_p0),
    .din1(tmp_383_fu_1046_p4),
    .din2(input_q0),
    .dout(grp_fu_1934_p3)
);

curve25519_donna_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
curve25519_donna_bkb_U72(
    .din0(grp_fu_1943_p0),
    .din1(grp_fu_766_p4),
    .din2(input_q0),
    .dout(grp_fu_1943_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        a_assign_reg_700 <= grp_fu_1943_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        a_assign_reg_700 <= tmp_752_fu_1119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_891_p2))) begin
        i_1_reg_689 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_689 <= i_7_reg_2008;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond3_fu_1133_p2))) begin
        i_2_reg_721 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_2_reg_721 <= i_9_reg_2068;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_3_reg_732 <= i_8_fu_1501_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond3_fu_1133_p2))) begin
        i_3_reg_732 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_4_reg_754 <= i_13_fu_1546_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond1_fu_1263_p2))) begin
        i_4_reg_754 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_667 <= i_6_reg_1960;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_667 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_1_reg_710 <= j_3_reg_2051;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_1_reg_710 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_869_p2 == 1'd1))) begin
        j_reg_678 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_678 <= j_2_reg_1990;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mask4_reg_744 <= mask_1_fu_1495_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond3_fu_1133_p2))) begin
        mask4_reg_744 <= mask_2_cast_fu_1165_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        reg_844 <= input_q1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        reg_844 <= input_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_6_reg_1960 <= i_6_fu_875_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_7_reg_2008 <= i_7_fu_913_p2;
        tmp_883_reg_2001 <= tmp_883_fu_903_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_9_reg_2068 <= i_9_fu_1183_p2;
        tmp_887_reg_2061 <= tmp_887_fu_1173_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_907_p2))) begin
        input_addr_34_reg_2015 <= tmp_758_fu_919_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_883_reg_2001))) begin
        input_addr_35_reg_2026 <= tmp_766_fu_971_p1;
        tmp_387_reg_2021 <= {{tmp_759_fu_940_p2[31:26]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_883_reg_2001))) begin
        input_addr_36_reg_2037 <= tmp_762_fu_1000_p1;
        tmp_389_reg_2032 <= {{tmp_759_fu_940_p2[31:25]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond2_fu_1177_p2))) begin
        input_addr_37_reg_2075 <= tmp_773_fu_1189_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_887_reg_2061))) begin
        input_addr_39_reg_2085 <= tmp_776_fu_1217_p1;
        tmp_393_reg_2080 <= {{input_q1[31:26]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_887_reg_2061))) begin
        input_addr_40_reg_2096 <= tmp_774_fu_1226_p1;
        tmp_395_reg_2091 <= {{input_q1[31:25]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'd0 == exitcond_fu_1507_p2))) begin
        input_addr_48_reg_2133 <= tmp_824_fu_1513_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        input_load_45_reg_2195 <= input_q1;
        tmp_788_reg_2206 <= {{input_q1[12:5]}};
        tmp_789_reg_2211 <= {{input_q1[20:13]}};
        tmp_792_reg_2216 <= tmp_792_fu_1676_p2;
        tmp_806_reg_2226 <= {{input_q0[14:7]}};
        tmp_807_reg_2231 <= {{input_q0[22:15]}};
        tmp_808_reg_2236 <= {{input_q0[30:23]}};
        tmp_920_reg_2221 <= tmp_920_fu_1682_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        input_load_50_reg_2241 <= input_q1;
        tmp_816_reg_2251 <= {{input_q1[11:4]}};
        tmp_817_reg_2256 <= {{input_q1[19:12]}};
        tmp_818_reg_2261 <= {{input_q1[27:20]}};
        tmp_922_reg_2246 <= tmp_922_fu_1716_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_2_reg_1990 <= j_2_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_3_reg_2051 <= j_3_fu_1139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_836 <= input_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_840 <= input_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state34))) begin
        reg_849 <= {{input_q0[15:8]}};
        reg_854 <= {{input_q0[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_859 <= {{input_q1[9:2]}};
        reg_864 <= {{input_q1[17:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_782_reg_2266 <= tmp_782_fu_1769_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_784_reg_2154 <= {{input_q1[21:14]}};
        tmp_785_reg_2159 <= {{input_q1[29:22]}};
        tmp_915_reg_2149 <= tmp_915_fu_1552_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_793_reg_2180 <= {{input_q0[10:3]}};
        tmp_794_reg_2185 <= {{input_q0[18:11]}};
        tmp_795_reg_2190 <= {{input_q0[26:19]}};
        tmp_917_reg_2175 <= tmp_917_fu_1587_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_800_reg_2283 <= {{input_q1[25:18]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_805_reg_2328 <= tmp_805_fu_1907_p2;
        tmp_919_reg_2323 <= tmp_919_fu_1896_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_810_reg_2288 <= tmp_810_fu_1825_p2;
        tmp_811_reg_2293 <= {{input_q0[12:5]}};
        tmp_812_reg_2298 <= {{input_q0[20:13]}};
        tmp_815_reg_2303 <= tmp_815_fu_1867_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_820_reg_2313 <= tmp_820_fu_1885_p2;
        tmp_823_reg_2318 <= {{input_q1[25:18]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond1_fu_1263_p2))) begin
        tmp_888_reg_2115 <= tmp_888_fu_1274_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_869_p2 == 1'd0))) begin
        tmp_reg_1965[3 : 0] <= tmp_fu_881_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state50))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        input_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        input_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        input_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        input_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        input_address0 = input_addr_42_reg_2144;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        input_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        input_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        input_address0 = input_addr_48_reg_2133;
    end else if (((1'b1 == ap_CS_fsm_state15) & (1'd0 == exitcond1_fu_1263_p2))) begin
        input_address0 = tmp_770_fu_1269_p1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state37))) begin
        input_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_887_reg_2061))) begin
        input_address0 = tmp_774_fu_1226_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_887_reg_2061))) begin
        input_address0 = tmp_776_fu_1217_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_address0 = 64'd1;
    end else if (((1'd1 == tmp_883_reg_2001) & (1'b1 == ap_CS_fsm_state7))) begin
        input_address0 = input_addr_36_reg_2037;
    end else if (((1'd0 == tmp_883_reg_2001) & (1'b1 == ap_CS_fsm_state7))) begin
        input_address0 = input_addr_35_reg_2026;
    end else if ((((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_883_reg_2001)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_883_reg_2001)))) begin
        input_address0 = input_addr_34_reg_2015;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond1_fu_1263_p2)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        input_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_address0 = tmp_reg_1965;
    end else begin
        input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        input_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        input_address1 = input_addr_41_reg_2164;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        input_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        input_address1 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (1'd1 == exitcond_fu_1507_p2)))) begin
        input_address1 = input_addr_33_reg_1995;
    end else if (((1'b1 == ap_CS_fsm_state17) & (1'd0 == exitcond_fu_1507_p2))) begin
        input_address1 = tmp_824_fu_1513_p1;
    end else if (((1'd1 == tmp_887_reg_2061) & (1'b1 == ap_CS_fsm_state13))) begin
        input_address1 = input_addr_40_reg_2096;
    end else if (((1'd0 == tmp_887_reg_2061) & (1'b1 == ap_CS_fsm_state13))) begin
        input_address1 = input_addr_39_reg_2085;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_887_reg_2061)) | ((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_887_reg_2061)))) begin
        input_address1 = input_addr_37_reg_2075;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond2_fu_1177_p2))) begin
        input_address1 = tmp_773_fu_1189_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14))) begin
        input_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_883_reg_2001))) begin
        input_address1 = tmp_762_fu_1000_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_883_reg_2001))) begin
        input_address1 = tmp_766_fu_971_p1;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_907_p2)) | ((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond2_fu_1177_p2)))) begin
        input_address1 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_907_p2))) begin
        input_address1 = tmp_758_fu_919_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_address1 = 64'd1;
    end else begin
        input_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_883_reg_2001)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_883_reg_2001)) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_887_reg_2061)) | ((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_887_reg_2061)) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state15) & (1'd0 == exitcond1_fu_1263_p2)) | ((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond1_fu_1263_p2)) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state37) | ((1'd0 == tmp_883_reg_2001) & (1'b1 == ap_CS_fsm_state7)) | ((1'd1 == tmp_883_reg_2001) & (1'b1 == ap_CS_fsm_state7)))) begin
        input_ce0 = 1'b1;
    end else begin
        input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_907_p2)) | ((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_883_reg_2001)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_883_reg_2001)) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond2_fu_1177_p2)) | ((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_887_reg_2061)) | ((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_887_reg_2061)) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state17) & (1'd0 == exitcond_fu_1507_p2)) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_907_p2)) | ((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond2_fu_1177_p2)) | ((1'd0 == tmp_887_reg_2061) & (1'b1 == ap_CS_fsm_state13)) | ((1'd1 == tmp_887_reg_2061) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_CS_fsm_state17) & (1'd1 == exitcond_fu_1507_p2)))) begin
        input_ce1 = 1'b1;
    end else begin
        input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        input_d0 = tmp_913_fu_1927_p2;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        input_d0 = tmp_909_fu_1913_p2;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        input_d0 = tmp_912_fu_1789_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        input_d0 = tmp_908_fu_1775_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        input_d0 = storemerge_fu_1539_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond1_fu_1263_p2))) begin
        input_d0 = tmp_769_fu_1320_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        input_d0 = tmp_954_cast_fu_1258_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_d0 = tmp_753_fu_1126_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_d0 = grp_fu_1934_p3;
    end else if (((1'd1 == tmp_883_reg_2001) & (1'b1 == ap_CS_fsm_state7))) begin
        input_d0 = tmp_763_fu_1017_p2;
    end else if (((1'd0 == tmp_883_reg_2001) & (1'b1 == ap_CS_fsm_state7))) begin
        input_d0 = tmp_767_fu_1007_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_883_reg_2001))) begin
        input_d0 = tmp_761_fu_993_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_883_reg_2001))) begin
        input_d0 = tmp_765_fu_964_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_d0 = tmp_881_fu_886_p1;
    end else begin
        input_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        input_d1 = tmp_911_fu_1920_p2;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        input_d1 = tmp_907_fu_1890_p2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input_d1 = tmp_910_fu_1782_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        input_d1 = tmp_906_fu_1750_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        input_d1 = grp_fu_1943_p3;
    end else if (((1'd1 == tmp_887_reg_2061) & (1'b1 == ap_CS_fsm_state13))) begin
        input_d1 = tmp_775_fu_1243_p2;
    end else if (((1'd0 == tmp_887_reg_2061) & (1'b1 == ap_CS_fsm_state13))) begin
        input_d1 = tmp_777_fu_1233_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_887_reg_2061))) begin
        input_d1 = tmp_968_cast_fu_1221_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_887_reg_2061))) begin
        input_d1 = tmp_964_cast_fu_1212_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_d1 = tmp_752_fu_1119_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_d1 = tmp_755_fu_1068_p2;
    end else begin
        input_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_limbs_ce0 = 1'b1;
    end else begin
        input_limbs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_883_reg_2001)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_883_reg_2001)) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond1_fu_1263_p2)) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state37) | ((1'd0 == tmp_883_reg_2001) & (1'b1 == ap_CS_fsm_state7)) | ((1'd1 == tmp_883_reg_2001) & (1'b1 == ap_CS_fsm_state7)))) begin
        input_we0 = 1'b1;
    end else begin
        input_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state12) & (1'd0 == tmp_887_reg_2061)) | ((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_887_reg_2061)) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state36) | ((1'd0 == tmp_887_reg_2061) & (1'b1 == ap_CS_fsm_state13)) | ((1'd1 == tmp_887_reg_2061) & (1'b1 == ap_CS_fsm_state13)))) begin
        input_we1 = 1'b1;
    end else begin
        input_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        output_r_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        output_r_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        output_r_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        output_r_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        output_r_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        output_r_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        output_r_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        output_r_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        output_r_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        output_r_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        output_r_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        output_r_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        output_r_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        output_r_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        output_r_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        output_r_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_r_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        output_r_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        output_r_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_r_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        output_r_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        output_r_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        output_r_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_r_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_address0 = 64'd4;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        output_r_d0 = tmp_823_reg_2318;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        output_r_d0 = tmp_820_reg_2313;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        output_r_d0 = tmp_817_reg_2256;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        output_r_d0 = tmp_816_reg_2251;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        output_r_d0 = tmp_815_reg_2303;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        output_r_d0 = tmp_812_reg_2298;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        output_r_d0 = tmp_811_reg_2293;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        output_r_d0 = tmp_810_reg_2288;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        output_r_d0 = tmp_807_reg_2231;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        output_r_d0 = tmp_806_reg_2226;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        output_r_d0 = tmp_805_reg_2328;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        output_r_d0 = tmp_919_reg_2323;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        output_r_d0 = tmp_800_reg_2283;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state49))) begin
        output_r_d0 = reg_864;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state48))) begin
        output_r_d0 = reg_859;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_r_d0 = tmp_797_fu_1807_p2;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        output_r_d0 = tmp_794_reg_2185;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_d0 = tmp_793_reg_2180;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        output_r_d0 = tmp_792_reg_2216;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_d0 = tmp_789_reg_2211;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        output_r_d0 = tmp_782_reg_2266;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state37))) begin
        output_r_d0 = reg_854;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state36))) begin
        output_r_d0 = reg_849;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_d0 = tmp_914_fu_1757_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_d0 = tmp_788_reg_2206;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_d0 = tmp_787_fu_1633_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output_r_d0 = tmp_784_reg_2154;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_d0 = {{input_q1[13:6]}};
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_869_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_891_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_907_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond3_fu_1133_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond2_fu_1177_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond1_fu_1263_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (1'd1 == exitcond_fu_1507_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_10_fu_1429_p2 = (tmp_897_fu_1423_p2 & a_assign_2_fu_1417_p2);

assign a_assign_11_fu_1441_p2 = (tmp_898_fu_1435_p2 & a_assign_10_fu_1429_p2);

assign a_assign_12_fu_1453_p2 = (tmp_899_fu_1447_p2 & a_assign_11_fu_1441_p2);

assign a_assign_1_fu_1145_p2 = ($signed(32'd4227858451) + $signed(a_assign_reg_700));

assign a_assign_2_fu_1417_p2 = (tmp_896_fu_1411_p2 & a_assign_s_fu_1405_p2);

assign a_assign_3_fu_1327_p2 = (input_q0 ^ 32'd4227858432);

assign a_assign_4_fu_1339_p2 = (tmp_890_fu_1333_p2 & a_assign_3_fu_1327_p2);

assign a_assign_5_fu_1351_p2 = (tmp_891_fu_1345_p2 & a_assign_4_fu_1339_p2);

assign a_assign_6_fu_1363_p2 = (tmp_892_fu_1357_p2 & a_assign_5_fu_1351_p2);

assign a_assign_7_fu_1375_p2 = (tmp_893_fu_1369_p2 & a_assign_6_fu_1363_p2);

assign a_assign_8_fu_1387_p2 = (tmp_894_fu_1381_p2 & a_assign_7_fu_1375_p2);

assign a_assign_9_fu_1393_p2 = (input_q0 ^ 32'd4261412864);

assign a_assign_s_fu_1405_p2 = (tmp_895_fu_1399_p2 & a_assign_9_fu_1393_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign carry_1_fu_1230_p1 = $signed(tmp_393_reg_2080);

assign carry_fu_1240_p1 = $signed(tmp_395_reg_2091);

assign exitcond1_fu_1263_p2 = ((i_3_reg_732 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond2_fu_1177_p2 = ((i_2_reg_721 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond3_fu_1133_p2 = ((j_1_reg_710 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond4_fu_907_p2 = ((i_1_reg_689 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond5_fu_891_p2 = ((j_reg_678 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond6_fu_869_p2 = ((i_reg_667 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_1507_p2 = ((i_4_reg_754 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_1934_p0 = 13'd19;

assign grp_fu_1943_p0 = 13'd19;

assign grp_fu_766_p4 = {{input_q1[31:25]}};

assign grp_fu_796_p4 = {{input_q0[31:24]}};

assign i_13_fu_1546_p2 = (4'd1 + i_4_reg_754);

assign i_6_fu_875_p2 = (i_reg_667 + 4'd1);

assign i_7_fu_913_p2 = (4'd1 + i_1_reg_689);

assign i_8_fu_1501_p2 = (4'd1 + i_3_reg_732);

assign i_9_fu_1183_p2 = (4'd1 + i_2_reg_721);

assign input_addr_33_reg_1995 = 64'd1;

assign input_addr_41_reg_2164 = 64'd2;

assign input_addr_42_reg_2144 = 64'd3;

assign input_limbs_address0 = tmp_fu_881_p1;

assign j_2_fu_897_p2 = (j_reg_678 + 2'd1);

assign j_3_fu_1139_p2 = (j_1_reg_710 + 2'd1);

assign mask_1_fu_1495_p2 = (p_pn_fu_1487_p3 & mask4_reg_744);

assign mask_2_cast_fu_1165_p3 = ((mask_2_fu_1159_p2[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign mask_2_fu_1159_p2 = (tmp_884_fu_1151_p3 ^ 1'd1);

assign mask_3_fu_1032_p3 = ((tmp_885_fu_1024_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign mask_4_fu_932_p3 = ((tmp_886_fu_924_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign mask_fu_1083_p3 = ((tmp_882_fu_1075_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign p_pn_fu_1487_p3 = ((tmp_612_fu_1479_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign p_shl1_fu_1111_p3 = {{tmp_379_fu_1097_p4}, {26'd0}};

assign p_shl2_fu_1060_p3 = {{tmp_383_fu_1046_p4}, {25'd0}};

assign p_shl3_fu_956_p3 = {{tmp_387_fu_946_p4}, {26'd0}};

assign p_shl_fu_985_p3 = {{tmp_389_fu_975_p4}, {25'd0}};

assign storemerge_fu_1539_p2 = (input_q1 - tmp_1121_pn_cast_fu_1535_p1);

assign tmp_1121_pn_cast_fu_1535_p1 = tmp_1121_pn_fu_1530_p2;

assign tmp_1121_pn_fu_1530_p2 = (tmp_888_reg_2115 & tmp_1121_pn_v_fu_1522_p3);

assign tmp_1121_pn_v_fu_1522_p3 = ((tmp_924_fu_1518_p1[0:0] === 1'b1) ? 26'd33554431 : 26'd67108863);

assign tmp_379_fu_1097_p4 = {{tmp_s_fu_1091_p2[31:26]}};

assign tmp_383_fu_1046_p4 = {{tmp_754_fu_1040_p2[31:25]}};

assign tmp_387_fu_946_p4 = {{tmp_759_fu_940_p2[31:26]}};

assign tmp_389_fu_975_p4 = {{tmp_759_fu_940_p2[31:25]}};

assign tmp_597_fu_1278_p4 = {{mask4_reg_744[25:5]}};

assign tmp_598_fu_1288_p4 = {{mask4_reg_744[3:2]}};

assign tmp_612_fu_1479_p3 = ((tmp_902_fu_1475_p1[0:0] === 1'b1) ? tmp_900_fu_1459_p3 : tmp_901_fu_1467_p3);

assign tmp_751_fu_1107_p1 = $signed(tmp_379_fu_1097_p4);

assign tmp_752_fu_1119_p2 = (input_q0 - p_shl1_fu_1111_p3);

assign tmp_753_fu_1126_p2 = ($signed(input_q1) + $signed(tmp_751_fu_1107_p1));

assign tmp_754_fu_1040_p2 = (input_q1 & mask_3_fu_1032_p3);

assign tmp_755_fu_1068_p2 = (input_q1 - p_shl2_fu_1060_p3);

assign tmp_758_fu_919_p1 = i_1_reg_689;

assign tmp_759_fu_940_p2 = (input_q1 & mask_4_fu_932_p3);

assign tmp_760_fu_1014_p1 = $signed(tmp_389_reg_2032);

assign tmp_761_fu_993_p2 = (input_q1 - p_shl_fu_985_p3);

assign tmp_762_fu_1000_p1 = i_7_reg_2008;

assign tmp_763_fu_1017_p2 = ($signed(input_q1) + $signed(tmp_760_fu_1014_p1));

assign tmp_764_fu_1004_p1 = $signed(tmp_387_reg_2021);

assign tmp_765_fu_964_p2 = (input_q1 - p_shl3_fu_956_p3);

assign tmp_766_fu_971_p1 = i_7_reg_2008;

assign tmp_767_fu_1007_p2 = ($signed(input_q1) + $signed(tmp_764_fu_1004_p1));

assign tmp_768_fu_1302_p6 = {{{{{tmp_597_fu_1278_p4}, {1'd0}}, {tmp_598_fu_1288_p4}}, {1'd0}}, {tmp_889_fu_1298_p1}};

assign tmp_769_fu_1320_p2 = (a_assign_reg_700 - tmp_953_cast_fu_1316_p1);

assign tmp_770_fu_1269_p1 = i_3_reg_732;

assign tmp_773_fu_1189_p1 = i_2_reg_721;

assign tmp_774_fu_1226_p1 = i_9_reg_2068;

assign tmp_775_fu_1243_p2 = ($signed(input_q0) + $signed(carry_fu_1240_p1));

assign tmp_776_fu_1217_p1 = i_9_reg_2068;

assign tmp_777_fu_1233_p2 = ($signed(input_q0) + $signed(carry_1_fu_1230_p1));

assign tmp_781_fu_1762_p3 = {{tmp_915_reg_2149}, {2'd0}};

assign tmp_782_fu_1769_p2 = (grp_fu_796_p4 | tmp_781_fu_1762_p3);

assign tmp_786_fu_1625_p3 = {{tmp_916_fu_1621_p1}, {3'd0}};

assign tmp_787_fu_1633_p2 = (tmp_786_fu_1625_p3 | tmp_785_reg_2159);

assign tmp_790_fu_1659_p4 = {{input_q1[28:21]}};

assign tmp_791_fu_1669_p3 = {{tmp_917_reg_2175}, {5'd0}};

assign tmp_792_fu_1676_p2 = (tmp_791_fu_1669_p3 | tmp_790_fu_1659_p4);

assign tmp_796_fu_1799_p3 = {{tmp_918_fu_1795_p1}, {6'd0}};

assign tmp_797_fu_1807_p2 = (tmp_796_fu_1799_p3 | tmp_795_reg_2190);

assign tmp_804_fu_1900_p3 = {{tmp_920_reg_2221}, {1'd0}};

assign tmp_805_fu_1907_p2 = (grp_fu_796_p4 | tmp_804_fu_1900_p3);

assign tmp_809_fu_1817_p3 = {{tmp_921_fu_1813_p1}, {3'd0}};

assign tmp_810_fu_1825_p2 = (tmp_809_fu_1817_p3 | tmp_808_reg_2236);

assign tmp_813_fu_1850_p4 = {{input_q0[28:21]}};

assign tmp_814_fu_1860_p3 = {{tmp_922_reg_2246}, {4'd0}};

assign tmp_815_fu_1867_p2 = (tmp_814_fu_1860_p3 | tmp_813_fu_1850_p4);

assign tmp_819_fu_1877_p3 = {{tmp_923_fu_1873_p1}, {6'd0}};

assign tmp_820_fu_1885_p2 = (tmp_819_fu_1877_p3 | tmp_818_reg_2261);

assign tmp_824_fu_1513_p1 = i_4_reg_754;

assign tmp_881_fu_886_p1 = input_limbs_q0[31:0];

assign tmp_882_fu_1075_p3 = input_q0[32'd31];

assign tmp_883_fu_903_p1 = i_1_reg_689[0:0];

assign tmp_884_fu_1151_p3 = a_assign_1_fu_1145_p2[32'd31];

assign tmp_885_fu_1024_p3 = input_q1[32'd31];

assign tmp_886_fu_924_p3 = input_q1[32'd31];

assign tmp_887_fu_1173_p1 = i_2_reg_721[0:0];

assign tmp_888_fu_1274_p1 = mask4_reg_744[25:0];

assign tmp_889_fu_1298_p1 = mask4_reg_744[0:0];

assign tmp_890_fu_1333_p2 = a_assign_3_fu_1327_p2 << 32'd16;

assign tmp_891_fu_1345_p2 = a_assign_4_fu_1339_p2 << 32'd8;

assign tmp_892_fu_1357_p2 = a_assign_5_fu_1351_p2 << 32'd4;

assign tmp_893_fu_1369_p2 = a_assign_6_fu_1363_p2 << 32'd2;

assign tmp_894_fu_1381_p2 = a_assign_7_fu_1375_p2 << 32'd1;

assign tmp_895_fu_1399_p2 = a_assign_9_fu_1393_p2 << 32'd16;

assign tmp_896_fu_1411_p2 = a_assign_s_fu_1405_p2 << 32'd8;

assign tmp_897_fu_1423_p2 = a_assign_2_fu_1417_p2 << 32'd4;

assign tmp_898_fu_1435_p2 = a_assign_10_fu_1429_p2 << 32'd2;

assign tmp_899_fu_1447_p2 = a_assign_11_fu_1441_p2 << 32'd1;

assign tmp_900_fu_1459_p3 = a_assign_12_fu_1453_p2[32'd31];

assign tmp_901_fu_1467_p3 = a_assign_8_fu_1387_p2[32'd31];

assign tmp_902_fu_1475_p1 = i_3_reg_732[0:0];

assign tmp_903_fu_1250_p1 = input_q1[24:0];

assign tmp_904_fu_1194_p1 = input_q1[25:0];

assign tmp_905_fu_1198_p1 = input_q1[24:0];

assign tmp_906_fu_1750_p2 = reg_836 << 32'd2;

assign tmp_907_fu_1890_p2 = input_load_45_reg_2195 << 32'd3;

assign tmp_908_fu_1775_p2 = reg_840 << 32'd5;

assign tmp_909_fu_1913_p2 = reg_836 << 32'd6;

assign tmp_910_fu_1782_p2 = reg_844 << 32'd1;

assign tmp_911_fu_1920_p2 = reg_840 << 32'd3;

assign tmp_912_fu_1789_p2 = input_load_50_reg_2241 << 32'd4;

assign tmp_913_fu_1927_p2 = reg_844 << 32'd6;

assign tmp_914_fu_1757_p1 = input_q0[7:0];

assign tmp_915_fu_1552_p1 = input_q1[5:0];

assign tmp_916_fu_1621_p1 = input_q1[4:0];

assign tmp_917_fu_1587_p1 = input_q0[2:0];

assign tmp_918_fu_1795_p1 = input_q1[1:0];

assign tmp_919_fu_1896_p1 = input_q0[7:0];

assign tmp_920_fu_1682_p1 = input_q0[6:0];

assign tmp_921_fu_1813_p1 = input_q0[4:0];

assign tmp_922_fu_1716_p1 = input_q1[3:0];

assign tmp_923_fu_1873_p1 = input_q1[1:0];

assign tmp_924_fu_1518_p1 = i_4_reg_754[0:0];

assign tmp_953_cast_fu_1316_p1 = tmp_768_fu_1302_p6;

assign tmp_954_cast_fu_1258_p1 = tmp_903_fu_1250_p1;

assign tmp_964_cast_fu_1212_p1 = tmp_904_fu_1194_p1;

assign tmp_968_cast_fu_1221_p1 = tmp_905_fu_1198_p1;

assign tmp_fu_881_p1 = i_reg_667;

assign tmp_s_fu_1091_p2 = (input_q0 & mask_fu_1083_p3);

always @ (posedge ap_clk) begin
    tmp_reg_1965[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fcontract
