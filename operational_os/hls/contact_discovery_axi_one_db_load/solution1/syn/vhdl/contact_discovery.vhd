-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity contact_discovery is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 16;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of contact_discovery is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "contact_discovery,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.619000,HLS_SYN_LAT=10565025,HLS_SYN_TPT=none,HLS_SYN_MEM=487,HLS_SYN_DSP=0,HLS_SYN_FF=5438,HLS_SYN_LUT=7297}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3A97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011101010010111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv14_3A98 : STD_LOGIC_VECTOR (13 downto 0) := "11101010011000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal operation : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal operation_ap_vld : STD_LOGIC;
    signal operation_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_ap_vld_preg : STD_LOGIC := '0';
    signal operation_ap_vld_in_sig : STD_LOGIC;
    signal contact_in_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal contact_in_ce0 : STD_LOGIC;
    signal contact_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal database_in_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal database_in_ce0 : STD_LOGIC;
    signal database_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matched_out_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal matched_out_ce0 : STD_LOGIC;
    signal matched_out_we0 : STD_LOGIC;
    signal matched_finished_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal matched_finished_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal matched_finished_1_vld_reg : STD_LOGIC := '0';
    signal matched_finished_1_vld_in : STD_LOGIC;
    signal matched_finished_1_ack_in : STD_LOGIC;
    signal error_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal error_out_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal error_out_1_vld_reg : STD_LOGIC := '0';
    signal error_out_1_vld_in : STD_LOGIC;
    signal error_out_1_ack_in : STD_LOGIC;
    signal database_size_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal database_size_out_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal database_size_out_1_vld_reg : STD_LOGIC := '0';
    signal database_size_out_1_vld_in : STD_LOGIC;
    signal database_size_out_1_ack_in : STD_LOGIC;
    signal contacts_size_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contacts_size_out_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal contacts_size_out_1_vld_reg : STD_LOGIC := '0';
    signal contacts_size_out_1_vld_in : STD_LOGIC;
    signal contacts_size_out_1_ack_in : STD_LOGIC;
    signal contacts_size : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal database_size : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contacts_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal contacts_ce0 : STD_LOGIC;
    signal contacts_we0 : STD_LOGIC;
    signal contacts_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal contacts_ce1 : STD_LOGIC;
    signal contacts_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal database_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal database_ce0 : STD_LOGIC;
    signal database_we0 : STD_LOGIC;
    signal database_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal database_ce1 : STD_LOGIC;
    signal database_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal results_ce0 : STD_LOGIC;
    signal results_we0 : STD_LOGIC;
    signal results_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal operation_blk_n : STD_LOGIC;
    signal i_reg_245 : STD_LOGIC_VECTOR (13 downto 0);
    signal operation_read_read_fu_116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal contacts_size_load_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal database_size_load_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_344_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_cast_reg_514 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_7_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_cast_fu_370_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_cast_reg_522 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal database_index_1_fu_384_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal database_index_1_reg_531 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_536 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal i_1_fu_396_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_4_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_545 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_fu_413_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_558 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_i5_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_i9_fu_428_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sum_i9_reg_568 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_3_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_581 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal exitcond_i_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_i_fu_469_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_i_reg_591 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_match_db_contact_fu_302_ap_start : STD_LOGIC;
    signal grp_match_db_contact_fu_302_ap_done : STD_LOGIC;
    signal grp_match_db_contact_fu_302_ap_idle : STD_LOGIC;
    signal grp_match_db_contact_fu_302_ap_ready : STD_LOGIC;
    signal grp_match_db_contact_fu_302_contacts_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_match_db_contact_fu_302_contacts_ce0 : STD_LOGIC;
    signal grp_match_db_contact_fu_302_contacts_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_match_db_contact_fu_302_contacts_ce1 : STD_LOGIC;
    signal grp_match_db_contact_fu_302_database_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_match_db_contact_fu_302_database_ce0 : STD_LOGIC;
    signal grp_match_db_contact_fu_302_database_address1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_match_db_contact_fu_302_database_ce1 : STD_LOGIC;
    signal grp_match_db_contact_fu_302_results_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_match_db_contact_fu_302_results_ce0 : STD_LOGIC;
    signal grp_match_db_contact_fu_302_results_we0 : STD_LOGIC;
    signal grp_match_db_contact_fu_302_results_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal database_index_reg_233 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i4_reg_256 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal storemerge_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_i_reg_279 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal storemerge1_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_reg_grp_match_db_contact_fu_302_ap_start : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_i6_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i9_cast_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_128_fu_341_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_352_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_127_fu_367_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i6_cast_fu_424_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_i_cast_fu_465_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component match_db_contact IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        database_index : IN STD_LOGIC_VECTOR (13 downto 0);
        contacts_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        contacts_ce0 : OUT STD_LOGIC;
        contacts_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        contacts_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        contacts_ce1 : OUT STD_LOGIC;
        contacts_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        database_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        database_ce0 : OUT STD_LOGIC;
        database_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        database_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        database_ce1 : OUT STD_LOGIC;
        database_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        results_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        results_ce0 : OUT STD_LOGIC;
        results_we0 : OUT STD_LOGIC;
        results_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component contact_discoverybkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component contact_discoverycud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component contact_discoverydEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component contact_discovery_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        operation : OUT STD_LOGIC_VECTOR (31 downto 0);
        operation_ap_vld : OUT STD_LOGIC;
        contact_in_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        contact_in_ce0 : IN STD_LOGIC;
        contact_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        database_in_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        database_in_ce0 : IN STD_LOGIC;
        database_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        matched_out_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        matched_out_ce0 : IN STD_LOGIC;
        matched_out_we0 : IN STD_LOGIC;
        matched_out_d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        matched_finished : IN STD_LOGIC_VECTOR (31 downto 0);
        error_out : IN STD_LOGIC_VECTOR (31 downto 0);
        database_size_out : IN STD_LOGIC_VECTOR (31 downto 0);
        contacts_size_out : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    contacts_U : component contact_discoverybkb
    generic map (
        DataWidth => 8,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => contacts_address0,
        ce0 => contacts_ce0,
        we0 => contacts_we0,
        d0 => contact_in_q0,
        q0 => contacts_q0,
        address1 => grp_match_db_contact_fu_302_contacts_address1,
        ce1 => contacts_ce1,
        q1 => contacts_q1);

    database_U : component contact_discoverycud
    generic map (
        DataWidth => 8,
        AddressRange => 960000,
        AddressWidth => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => database_address0,
        ce0 => database_ce0,
        we0 => database_we0,
        d0 => database_in_q0,
        q0 => database_q0,
        address1 => grp_match_db_contact_fu_302_database_address1,
        ce1 => database_ce1,
        q1 => database_q1);

    results_U : component contact_discoverydEe
    generic map (
        DataWidth => 1,
        AddressRange => 15000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => results_address0,
        ce0 => results_ce0,
        we0 => results_we0,
        d0 => grp_match_db_contact_fu_302_results_d0,
        q0 => results_q0);

    contact_discovery_AXILiteS_s_axi_U : component contact_discovery_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        operation => operation,
        operation_ap_vld => operation_ap_vld,
        contact_in_address0 => contact_in_address0,
        contact_in_ce0 => contact_in_ce0,
        contact_in_q0 => contact_in_q0,
        database_in_address0 => database_in_address0,
        database_in_ce0 => database_in_ce0,
        database_in_q0 => database_in_q0,
        matched_out_address0 => matched_out_address0,
        matched_out_ce0 => matched_out_ce0,
        matched_out_we0 => matched_out_we0,
        matched_out_d0 => results_q0,
        matched_finished => matched_finished_1_data_reg,
        error_out => error_out_1_data_reg,
        database_size_out => database_size_out_1_data_reg,
        contacts_size_out => contacts_size_out_1_data_reg);

    grp_match_db_contact_fu_302 : component match_db_contact
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_match_db_contact_fu_302_ap_start,
        ap_done => grp_match_db_contact_fu_302_ap_done,
        ap_idle => grp_match_db_contact_fu_302_ap_idle,
        ap_ready => grp_match_db_contact_fu_302_ap_ready,
        database_index => database_index_reg_233,
        contacts_address0 => grp_match_db_contact_fu_302_contacts_address0,
        contacts_ce0 => grp_match_db_contact_fu_302_contacts_ce0,
        contacts_q0 => contacts_q0,
        contacts_address1 => grp_match_db_contact_fu_302_contacts_address1,
        contacts_ce1 => grp_match_db_contact_fu_302_contacts_ce1,
        contacts_q1 => contacts_q1,
        database_address0 => grp_match_db_contact_fu_302_database_address0,
        database_ce0 => grp_match_db_contact_fu_302_database_ce0,
        database_q0 => database_q0,
        database_address1 => grp_match_db_contact_fu_302_database_address1,
        database_ce1 => grp_match_db_contact_fu_302_database_ce1,
        database_q1 => database_q1,
        results_address0 => grp_match_db_contact_fu_302_results_address0,
        results_ce0 => grp_match_db_contact_fu_302_results_ce0,
        results_we0 => grp_match_db_contact_fu_302_results_we0,
        results_d0 => grp_match_db_contact_fu_302_results_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_378_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state5 xor ap_const_logic_1);
                elsif ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_378_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_match_db_contact_fu_302_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_match_db_contact_fu_302_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_378_p2))) then 
                    ap_reg_grp_match_db_contact_fu_302_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_match_db_contact_fu_302_ap_ready)) then 
                    ap_reg_grp_match_db_contact_fu_302_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    operation_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                operation_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = matched_finished_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = database_size_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
                    operation_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = operation_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    operation_ap_vld_preg <= operation_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    operation_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                operation_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = operation_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    operation_preg <= operation;
                end if; 
            end if;
        end if;
    end process;


    contacts_size_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_i_fu_448_p2))) then 
                contacts_size <= tmp_s_fu_474_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_4))) then 
                contacts_size <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    contacts_size_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    database_index_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_match_db_contact_fu_302_ap_done = ap_const_logic_1))) then 
                database_index_reg_233 <= database_index_1_reg_531;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_116_p2 = ap_const_lv32_2))) then 
                database_index_reg_233 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    database_size_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i5_fu_407_p2 = ap_const_lv1_1))) then 
                database_size <= tmp_3_fu_433_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_3))) then 
                database_size <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    database_size_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    error_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_i4_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_i4_reg_256 <= i_3_reg_558;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_116_p2 = ap_const_lv32_1) and (tmp_7_fu_336_p2 = ap_const_lv1_0))) then 
                i_i4_reg_256 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_i_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_i_reg_279 <= i_2_reg_581;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_116_p2) and (ap_const_lv1_0 = icmp_fu_361_p2))) then 
                i_i_reg_279 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_378_p2 = ap_const_lv1_1))) then 
                i_reg_245 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_fu_390_p2))) then 
                i_reg_245 <= i_1_fu_396_p2;
            end if; 
        end if;
    end process;

    matched_finished_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    storemerge1_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                storemerge1_reg_290 <= contacts_size_load_reg_493;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_i_fu_448_p2))) then 
                storemerge1_reg_290 <= tmp_s_fu_474_p2;
            end if; 
        end if;
    end process;

    storemerge_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                storemerge_reg_267 <= database_size_load_reg_502;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i5_fu_407_p2 = ap_const_lv1_1))) then 
                storemerge_reg_267 <= tmp_3_fu_433_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))))) then
                contacts_size_load_reg_493 <= contacts_size;
                database_size_load_reg_502 <= database_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = contacts_size_out_1_vld_in) and (ap_const_logic_0 = contacts_size_out_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = contacts_size_out_1_vld_in) and (ap_const_logic_1 = contacts_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                contacts_size_out_1_data_reg <= contacts_size_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                database_index_1_reg_531 <= database_index_1_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = database_size_out_1_vld_in) and (ap_const_logic_0 = database_size_out_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = database_size_out_1_vld_in) and (ap_const_logic_1 = database_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                database_size_out_1_data_reg <= database_size_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = error_out_1_vld_in) and (ap_const_logic_0 = error_out_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = error_out_1_vld_in) and (ap_const_logic_1 = error_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                error_out_1_data_reg <= error_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                exitcond_reg_536 <= exitcond_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_2_reg_581 <= i_2_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_3_reg_558 <= i_3_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = matched_finished_1_vld_in) and (ap_const_logic_0 = matched_finished_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = matched_finished_1_vld_in) and (ap_const_logic_1 = matched_finished_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                matched_finished_1_data_reg <= matched_finished_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_i5_fu_407_p2))) then
                sum_i9_reg_568 <= sum_i9_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond_i_fu_448_p2))) then
                sum_i_reg_591 <= sum_i_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_116_p2 = ap_const_lv32_1) and (tmp_7_fu_336_p2 = ap_const_lv1_0))) then
                    tmp_2_cast_reg_514(20 downto 6) <= tmp_2_cast_fu_344_p3(20 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_fu_390_p2))) then
                    tmp_4_reg_545(13 downto 0) <= tmp_4_fu_402_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_116_p2) and (ap_const_lv1_0 = icmp_fu_361_p2))) then
                    tmp_9_cast_reg_522(14 downto 6) <= tmp_9_cast_fu_370_p3(14 downto 6);
            end if;
        end if;
    end process;
    tmp_2_cast_reg_514(5 downto 0) <= "000000";
    tmp_9_cast_reg_522(5 downto 0) <= "000000";
    tmp_4_reg_545(63 downto 14) <= "00000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, operation_ap_vld_in_sig, matched_finished_1_ack_in, error_out_1_ack_in, database_size_out_1_ack_in, contacts_size_out_1_ack_in, operation_read_read_fu_116_p2, ap_CS_fsm_state2, tmp_7_fu_336_p2, icmp_fu_361_p2, exitcond2_fu_378_p2, ap_CS_fsm_state3, exitcond_fu_390_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state9, exitcond_i5_fu_407_p2, ap_CS_fsm_state14, exitcond_i_fu_448_p2, ap_block_pp0_stage0_flag00011011, grp_match_db_contact_fu_302_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_116_p2) and (ap_const_lv1_0 = icmp_fu_361_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_116_p2) and (icmp_fu_361_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_116_p2 = ap_const_lv32_1) and (tmp_7_fu_336_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_116_p2 = ap_const_lv32_1) and (tmp_7_fu_336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_116_p2 = ap_const_lv32_2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_378_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_match_db_contact_fu_302_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_fu_390_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_fu_390_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = matched_finished_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = database_size_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i5_fu_407_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_i_fu_448_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, operation_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_assign_proc : process(matched_finished_1_ack_in, error_out_1_ack_in, database_size_out_1_ack_in, contacts_size_out_1_ack_in)
    begin
                ap_block_state8 <= ((ap_const_logic_0 = matched_finished_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = database_size_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(exitcond_fu_390_p2)
    begin
        if ((exitcond_fu_390_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(matched_finished_1_ack_in, error_out_1_ack_in, database_size_out_1_ack_in, contacts_size_out_1_ack_in, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = matched_finished_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = database_size_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(matched_finished_1_ack_in, error_out_1_ack_in, database_size_out_1_ack_in, contacts_size_out_1_ack_in, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = matched_finished_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = database_size_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    contact_in_address0 <= tmp_i_fu_460_p1(6 - 1 downto 0);

    contact_in_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            contact_in_ce0 <= ap_const_logic_1;
        else 
            contact_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    contacts_address0_assign_proc : process(grp_match_db_contact_fu_302_contacts_address0, ap_CS_fsm_state4, ap_CS_fsm_state15, sum_i_cast_fu_485_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            contacts_address0 <= sum_i_cast_fu_485_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            contacts_address0 <= grp_match_db_contact_fu_302_contacts_address0;
        else 
            contacts_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    contacts_ce0_assign_proc : process(grp_match_db_contact_fu_302_contacts_ce0, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            contacts_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            contacts_ce0 <= grp_match_db_contact_fu_302_contacts_ce0;
        else 
            contacts_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    contacts_ce1_assign_proc : process(grp_match_db_contact_fu_302_contacts_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            contacts_ce1 <= grp_match_db_contact_fu_302_contacts_ce1;
        else 
            contacts_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    contacts_size_out_1_ack_in_assign_proc : process(contacts_size_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = contacts_size_out_1_vld_reg) or ((ap_const_logic_1 = contacts_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            contacts_size_out_1_ack_in <= ap_const_logic_1;
        else 
            contacts_size_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    contacts_size_out_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, contacts_size, operation_read_read_fu_116_p2, storemerge1_reg_290, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            contacts_size_out_1_data_in <= storemerge1_reg_290;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_116_p2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_3)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_4))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_2)))) then 
            contacts_size_out_1_data_in <= contacts_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_4))) then 
            contacts_size_out_1_data_in <= ap_const_lv32_0;
        else 
            contacts_size_out_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    contacts_size_out_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_116_p2, ap_CS_fsm_state17)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_116_p2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_3)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_4))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_2)) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            contacts_size_out_1_vld_in <= ap_const_logic_1;
        else 
            contacts_size_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    contacts_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            contacts_we0 <= ap_const_logic_1;
        else 
            contacts_we0 <= ap_const_logic_0;
        end if; 
    end process;


    database_address0_assign_proc : process(grp_match_db_contact_fu_302_database_address0, ap_CS_fsm_state4, ap_CS_fsm_state10, sum_i9_cast_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            database_address0 <= sum_i9_cast_fu_444_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            database_address0 <= grp_match_db_contact_fu_302_database_address0;
        else 
            database_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    database_ce0_assign_proc : process(grp_match_db_contact_fu_302_database_ce0, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            database_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            database_ce0 <= grp_match_db_contact_fu_302_database_ce0;
        else 
            database_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    database_ce1_assign_proc : process(grp_match_db_contact_fu_302_database_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            database_ce1 <= grp_match_db_contact_fu_302_database_ce1;
        else 
            database_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    database_in_address0 <= tmp_i6_fu_419_p1(6 - 1 downto 0);

    database_in_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            database_in_ce0 <= ap_const_logic_1;
        else 
            database_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    database_index_1_fu_384_p2 <= std_logic_vector(unsigned(database_index_reg_233) + unsigned(ap_const_lv14_1));

    database_size_out_1_ack_in_assign_proc : process(database_size_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = database_size_out_1_vld_reg) or ((ap_const_logic_1 = database_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            database_size_out_1_ack_in <= ap_const_logic_1;
        else 
            database_size_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    database_size_out_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, database_size, operation_read_read_fu_116_p2, storemerge_reg_267, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            database_size_out_1_data_in <= storemerge_reg_267;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_3))) then 
            database_size_out_1_data_in <= ap_const_lv32_0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_116_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_116_p2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_3)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_4))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_2)))) then 
            database_size_out_1_data_in <= database_size;
        else 
            database_size_out_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    database_size_out_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_116_p2, ap_CS_fsm_state12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_116_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_116_p2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_3)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_4))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_2)) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            database_size_out_1_vld_in <= ap_const_logic_1;
        else 
            database_size_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    database_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            database_we0 <= ap_const_logic_1;
        else 
            database_we0 <= ap_const_logic_0;
        end if; 
    end process;


    error_out_1_ack_in_assign_proc : process(error_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = error_out_1_vld_reg) or ((ap_const_logic_1 = error_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            error_out_1_ack_in <= ap_const_logic_1;
        else 
            error_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    error_out_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_116_p2, ap_CS_fsm_state2, tmp_7_fu_336_p2, icmp_fu_361_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_116_p2) and (icmp_fu_361_p2 = ap_const_lv1_1))) then 
            error_out_1_data_in <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_116_p2 = ap_const_lv32_1) and (tmp_7_fu_336_p2 = ap_const_lv1_1))) then 
            error_out_1_data_in <= ap_const_lv32_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_116_p2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_3)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_4)))) then 
            error_out_1_data_in <= ap_const_lv32_3;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_116_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_2)))) then 
            error_out_1_data_in <= ap_const_lv32_0;
        else 
            error_out_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    error_out_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_116_p2, ap_CS_fsm_state2, tmp_7_fu_336_p2, icmp_fu_361_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_116_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_116_p2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_3)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_4))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_116_p2 = ap_const_lv32_1) and (tmp_7_fu_336_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_116_p2) and (icmp_fu_361_p2 = ap_const_lv1_1)))) then 
            error_out_1_vld_in <= ap_const_logic_1;
        else 
            error_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_378_p2 <= "1" when (database_index_reg_233 = ap_const_lv14_3A98) else "0";
    exitcond_fu_390_p2 <= "1" when (i_reg_245 = ap_const_lv14_3A98) else "0";
    exitcond_i5_fu_407_p2 <= "1" when (i_i4_reg_256 = ap_const_lv7_40) else "0";
    exitcond_i_fu_448_p2 <= "1" when (i_i_reg_279 = ap_const_lv7_40) else "0";
    grp_match_db_contact_fu_302_ap_start <= ap_reg_grp_match_db_contact_fu_302_ap_start;
    i_1_fu_396_p2 <= std_logic_vector(unsigned(i_reg_245) + unsigned(ap_const_lv14_1));
    i_2_fu_454_p2 <= std_logic_vector(unsigned(i_i_reg_279) + unsigned(ap_const_lv7_1));
    i_3_fu_413_p2 <= std_logic_vector(unsigned(i_i4_reg_256) + unsigned(ap_const_lv7_1));
    icmp_fu_361_p2 <= "1" when (signed(tmp_fu_352_p4) > signed(ap_const_lv25_0)) else "0";

    matched_finished_1_ack_in_assign_proc : process(matched_finished_1_vld_reg)
    begin
        if (((ap_const_logic_0 = matched_finished_1_vld_reg) or ((ap_const_logic_1 = matched_finished_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            matched_finished_1_ack_in <= ap_const_logic_1;
        else 
            matched_finished_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    matched_finished_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_116_p2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            matched_finished_1_data_in <= ap_const_lv32_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_116_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_116_p2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_3)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_4))))) then 
            matched_finished_1_data_in <= ap_const_lv32_0;
        else 
            matched_finished_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    matched_finished_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_116_p2, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_116_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_116_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_116_p2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_2)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_3)) and not((operation_read_read_fu_116_p2 = ap_const_lv32_4))) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            matched_finished_1_vld_in <= ap_const_logic_1;
        else 
            matched_finished_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    matched_out_address0 <= tmp_4_reg_545(14 - 1 downto 0);

    matched_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            matched_out_ce0 <= ap_const_logic_1;
        else 
            matched_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matched_out_we0_assign_proc : process(exitcond_reg_536, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_reg_536))) then 
            matched_out_we0 <= ap_const_logic_1;
        else 
            matched_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    operation_ap_vld_in_sig_assign_proc : process(operation_ap_vld, operation_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = operation_ap_vld)) then 
            operation_ap_vld_in_sig <= operation_ap_vld;
        else 
            operation_ap_vld_in_sig <= operation_ap_vld_preg;
        end if; 
    end process;


    operation_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            operation_blk_n <= operation_ap_vld;
        else 
            operation_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    operation_in_sig_assign_proc : process(operation, operation_preg, operation_ap_vld)
    begin
        if ((ap_const_logic_1 = operation_ap_vld)) then 
            operation_in_sig <= operation;
        else 
            operation_in_sig <= operation_preg;
        end if; 
    end process;

    operation_read_read_fu_116_p2 <= operation_in_sig;

    results_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_4_fu_402_p1, grp_match_db_contact_fu_302_results_address0, ap_CS_fsm_state4, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            results_address0 <= tmp_4_fu_402_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            results_address0 <= grp_match_db_contact_fu_302_results_address0;
        else 
            results_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    results_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0, grp_match_db_contact_fu_302_results_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            results_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            results_ce0 <= grp_match_db_contact_fu_302_results_ce0;
        else 
            results_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    results_we0_assign_proc : process(grp_match_db_contact_fu_302_results_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            results_we0 <= grp_match_db_contact_fu_302_results_we0;
        else 
            results_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sum_i9_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i9_reg_568),64));

    sum_i9_fu_428_p2 <= std_logic_vector(unsigned(tmp_i6_cast_fu_424_p1) + unsigned(tmp_2_cast_reg_514));
        sum_i_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i_reg_591),64));

    sum_i_fu_469_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_465_p1) + unsigned(tmp_9_cast_reg_522));
    tmp_127_fu_367_p1 <= contacts_size_load_reg_493(9 - 1 downto 0);
    tmp_128_fu_341_p1 <= database_size_load_reg_502(15 - 1 downto 0);
    tmp_2_cast_fu_344_p3 <= (tmp_128_fu_341_p1 & ap_const_lv6_0);
    tmp_3_fu_433_p2 <= std_logic_vector(unsigned(database_size_load_reg_502) + unsigned(ap_const_lv32_1));
    tmp_4_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_245),64));
    tmp_7_fu_336_p2 <= "1" when (signed(database_size_load_reg_502) > signed(ap_const_lv32_3A97)) else "0";
    tmp_9_cast_fu_370_p3 <= (tmp_127_fu_367_p1 & ap_const_lv6_0);
    tmp_fu_352_p4 <= contacts_size_load_reg_493(31 downto 7);
    tmp_i6_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_256),21));
    tmp_i6_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_256),64));
    tmp_i_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_279),15));
    tmp_i_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_279),64));
    tmp_s_fu_474_p2 <= std_logic_vector(unsigned(contacts_size_load_reg_493) + unsigned(ap_const_lv32_1));
end behav;
