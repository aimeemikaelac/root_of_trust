// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_tpg_0_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        strmPix_V_val_0_V_dout,
        strmPix_V_val_0_V_empty_n,
        strmPix_V_val_0_V_read,
        strmPix_V_val_1_V_dout,
        strmPix_V_val_1_V_empty_n,
        strmPix_V_val_1_V_read,
        strmPix_V_val_2_V_dout,
        strmPix_V_val_2_V_empty_n,
        strmPix_V_val_2_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        Height,
        WidthOut,
        colorFormat
);

parameter    ap_ST_fsm_state1 = 5'b1;
parameter    ap_ST_fsm_state2 = 5'b10;
parameter    ap_ST_fsm_state3 = 5'b100;
parameter    ap_ST_fsm_pp0_stage0 = 5'b1000;
parameter    ap_ST_fsm_state7 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv12_FFF = 12'b111111111111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv16_FFFF = 16'b1111111111111111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_17 = 32'b10111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] strmPix_V_val_0_V_dout;
input   strmPix_V_val_0_V_empty_n;
output   strmPix_V_val_0_V_read;
input  [7:0] strmPix_V_val_1_V_dout;
input   strmPix_V_val_1_V_empty_n;
output   strmPix_V_val_1_V_read;
input  [7:0] strmPix_V_val_2_V_dout;
input   strmPix_V_val_2_V_empty_n;
output   strmPix_V_val_2_V_read;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] Height;
input  [15:0] WidthOut;
input  [7:0] colorFormat;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [23:0] AXI_video_strm_V_data_V_1_data_out;
reg    AXI_video_strm_V_data_V_1_vld_in;
wire    AXI_video_strm_V_data_V_1_vld_out;
wire    AXI_video_strm_V_data_V_1_ack_in;
wire    AXI_video_strm_V_data_V_1_ack_out;
reg   [23:0] AXI_video_strm_V_data_V_1_payload_A;
reg   [23:0] AXI_video_strm_V_data_V_1_payload_B;
reg    AXI_video_strm_V_data_V_1_sel_rd;
reg    AXI_video_strm_V_data_V_1_sel_wr;
wire    AXI_video_strm_V_data_V_1_sel;
wire    AXI_video_strm_V_data_V_1_load_A;
wire    AXI_video_strm_V_data_V_1_load_B;
reg   [1:0] AXI_video_strm_V_data_V_1_state;
wire    AXI_video_strm_V_data_V_1_state_cmp_full;
wire   [2:0] AXI_video_strm_V_keep_V_1_data_out;
reg    AXI_video_strm_V_keep_V_1_vld_in;
wire    AXI_video_strm_V_keep_V_1_vld_out;
wire    AXI_video_strm_V_keep_V_1_ack_in;
wire    AXI_video_strm_V_keep_V_1_ack_out;
reg    AXI_video_strm_V_keep_V_1_sel_rd;
wire    AXI_video_strm_V_keep_V_1_sel;
reg   [1:0] AXI_video_strm_V_keep_V_1_state;
wire   [2:0] AXI_video_strm_V_strb_V_1_data_out;
reg    AXI_video_strm_V_strb_V_1_vld_in;
wire    AXI_video_strm_V_strb_V_1_vld_out;
wire    AXI_video_strm_V_strb_V_1_ack_in;
wire    AXI_video_strm_V_strb_V_1_ack_out;
reg    AXI_video_strm_V_strb_V_1_sel_rd;
wire    AXI_video_strm_V_strb_V_1_sel;
reg   [1:0] AXI_video_strm_V_strb_V_1_state;
reg   [0:0] AXI_video_strm_V_user_V_1_data_out;
reg    AXI_video_strm_V_user_V_1_vld_in;
wire    AXI_video_strm_V_user_V_1_vld_out;
wire    AXI_video_strm_V_user_V_1_ack_in;
wire    AXI_video_strm_V_user_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_B;
reg    AXI_video_strm_V_user_V_1_sel_rd;
reg    AXI_video_strm_V_user_V_1_sel_wr;
wire    AXI_video_strm_V_user_V_1_sel;
wire    AXI_video_strm_V_user_V_1_load_A;
wire    AXI_video_strm_V_user_V_1_load_B;
reg   [1:0] AXI_video_strm_V_user_V_1_state;
wire    AXI_video_strm_V_user_V_1_state_cmp_full;
reg   [0:0] AXI_video_strm_V_last_V_1_data_out;
reg    AXI_video_strm_V_last_V_1_vld_in;
wire    AXI_video_strm_V_last_V_1_vld_out;
wire    AXI_video_strm_V_last_V_1_ack_in;
wire    AXI_video_strm_V_last_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_B;
reg    AXI_video_strm_V_last_V_1_sel_rd;
reg    AXI_video_strm_V_last_V_1_sel_wr;
wire    AXI_video_strm_V_last_V_1_sel;
wire    AXI_video_strm_V_last_V_1_load_A;
wire    AXI_video_strm_V_last_V_1_load_B;
reg   [1:0] AXI_video_strm_V_last_V_1_state;
wire    AXI_video_strm_V_last_V_1_state_cmp_full;
wire   [0:0] AXI_video_strm_V_id_V_1_data_out;
reg    AXI_video_strm_V_id_V_1_vld_in;
wire    AXI_video_strm_V_id_V_1_vld_out;
wire    AXI_video_strm_V_id_V_1_ack_in;
wire    AXI_video_strm_V_id_V_1_ack_out;
reg    AXI_video_strm_V_id_V_1_sel_rd;
wire    AXI_video_strm_V_id_V_1_sel;
reg   [1:0] AXI_video_strm_V_id_V_1_state;
wire   [0:0] AXI_video_strm_V_dest_V_1_data_out;
reg    AXI_video_strm_V_dest_V_1_vld_in;
wire    AXI_video_strm_V_dest_V_1_vld_out;
wire    AXI_video_strm_V_dest_V_1_ack_in;
wire    AXI_video_strm_V_dest_V_1_ack_out;
reg    AXI_video_strm_V_dest_V_1_sel_rd;
wire    AXI_video_strm_V_dest_V_1_sel;
reg   [1:0] AXI_video_strm_V_dest_V_1_state;
reg    strmPix_V_val_0_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond2_reg_384;
reg    strmPix_V_val_1_V_blk_n;
reg    strmPix_V_val_2_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond2_reg_384;
reg   [10:0] j_reg_174;
wire   [11:0] tmp_137_fu_202_p1;
reg   [11:0] tmp_137_reg_353;
wire   [0:0] ap_CS_fsm_state2;
wire    grp_reg_unsigned_short_s_fu_185_ap_done;
wire    grp_reg_unsigned_short_s_fu_191_ap_done;
wire   [11:0] tmp_138_fu_206_p1;
reg   [11:0] tmp_138_reg_358;
wire   [11:0] tmp_123_fu_210_p2;
reg   [11:0] tmp_123_reg_363;
wire   [0:0] sel_tmp2_fu_216_p2;
wire   [0:0] exitcond1_fu_226_p2;
wire   [0:0] ap_CS_fsm_state3;
reg    ap_condition_525;
wire   [10:0] i_1_fu_231_p2;
reg   [10:0] i_1_reg_379;
wire   [0:0] exitcond2_fu_241_p2;
wire    strmPix_V_val_0_V0_status;
wire   [10:0] j_1_fu_246_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] axi_last_V_fu_252_p2;
reg   [0:0] axi_last_V_reg_393;
wire   [23:0] tmp_data_V_fu_318_p5;
wire    grp_reg_unsigned_short_s_fu_185_ap_start;
wire    grp_reg_unsigned_short_s_fu_185_ap_idle;
wire    grp_reg_unsigned_short_s_fu_185_ap_ready;
wire   [15:0] grp_reg_unsigned_short_s_fu_185_ap_return;
wire    grp_reg_unsigned_short_s_fu_191_ap_start;
wire    grp_reg_unsigned_short_s_fu_191_ap_idle;
wire    grp_reg_unsigned_short_s_fu_191_ap_ready;
wire   [15:0] grp_reg_unsigned_short_s_fu_191_ap_return;
reg   [10:0] i_reg_163;
wire   [0:0] ap_CS_fsm_state7;
reg    ap_reg_grp_reg_unsigned_short_s_fu_185_ap_start;
reg    ap_reg_grp_reg_unsigned_short_s_fu_191_ap_start;
reg    strmPix_V_val_0_V0_update;
reg   [0:0] tmp_user_V_fu_102;
wire   [11:0] i_cast_fu_222_p1;
wire   [11:0] j_cast_fu_237_p1;
wire   [23:0] p_Result_s_fu_281_p3;
wire   [23:0] p_Result_2_fu_273_p3;
wire   [7:0] tmp_25_fu_303_p3;
wire   [7:0] tmp_24_fu_296_p3;
wire   [23:0] axi_0_2_fu_289_p3;
wire   [15:0] tmp_26_fu_310_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'b1;
#0 AXI_video_strm_V_data_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_data_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_data_V_1_state = 2'b00;
#0 AXI_video_strm_V_keep_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_keep_V_1_state = 2'b00;
#0 AXI_video_strm_V_strb_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_strb_V_1_state = 2'b00;
#0 AXI_video_strm_V_user_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_user_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_user_V_1_state = 2'b00;
#0 AXI_video_strm_V_last_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_last_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_last_V_1_state = 2'b00;
#0 AXI_video_strm_V_id_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_id_V_1_state = 2'b00;
#0 AXI_video_strm_V_dest_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_dest_V_1_state = 2'b00;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_grp_reg_unsigned_short_s_fu_185_ap_start = 1'b0;
#0 ap_reg_grp_reg_unsigned_short_s_fu_191_ap_start = 1'b0;
end

design_1_v_tpg_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_185(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_185_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_185_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_185_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_185_ap_ready),
    .in_r(Height),
    .ap_return(grp_reg_unsigned_short_s_fu_185_ap_return)
);

design_1_v_tpg_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_191(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_191_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_191_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_191_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_191_ap_ready),
    .in_r(WidthOut),
    .ap_return(grp_reg_unsigned_short_s_fu_191_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_out))) begin
            AXI_video_strm_V_data_V_1_sel_rd <= ~AXI_video_strm_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_in))) begin
            AXI_video_strm_V_data_V_1_sel_wr <= ~AXI_video_strm_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_2)))) begin
            AXI_video_strm_V_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_data_V_1_vld_in) & (1'b0 == AXI_video_strm_V_data_V_1_ack_out) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == AXI_video_strm_V_data_V_1_ack_out) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_1)))) begin
            AXI_video_strm_V_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_data_V_1_vld_in) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_2)) | ((1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (AXI_video_strm_V_data_V_1_state == ap_const_lv2_1)) | ((AXI_video_strm_V_data_V_1_state == ap_const_lv2_3) & ~((1'b1 == AXI_video_strm_V_data_V_1_vld_in) & (1'b0 == AXI_video_strm_V_data_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out))))) begin
            AXI_video_strm_V_data_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_out))) begin
            AXI_video_strm_V_dest_V_1_sel_rd <= ~AXI_video_strm_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_dest_V_1_state)) | ((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_dest_V_1_state)))) begin
            AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b0 == AXI_video_strm_V_dest_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_dest_V_1_state)) | ((1'b0 == AXI_video_strm_V_dest_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_dest_V_1_state)))) begin
            AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_dest_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_dest_V_1_state)) | ((1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_dest_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_dest_V_1_state) & ~((1'b1 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b0 == AXI_video_strm_V_dest_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out))))) begin
            AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_dest_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_out))) begin
            AXI_video_strm_V_id_V_1_sel_rd <= ~AXI_video_strm_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_id_V_1_state)) | ((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_id_V_1_state)))) begin
            AXI_video_strm_V_id_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_id_V_1_vld_in) & (1'b0 == AXI_video_strm_V_id_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_id_V_1_state)) | ((1'b0 == AXI_video_strm_V_id_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_id_V_1_state)))) begin
            AXI_video_strm_V_id_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_id_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_id_V_1_state)) | ((1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_id_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_id_V_1_state) & ~((1'b1 == AXI_video_strm_V_id_V_1_vld_in) & (1'b0 == AXI_video_strm_V_id_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out))))) begin
            AXI_video_strm_V_id_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_id_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_out))) begin
            AXI_video_strm_V_keep_V_1_sel_rd <= ~AXI_video_strm_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_keep_V_1_state)) | ((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_keep_V_1_state)))) begin
            AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b0 == AXI_video_strm_V_keep_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_keep_V_1_state)) | ((1'b0 == AXI_video_strm_V_keep_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_keep_V_1_state)))) begin
            AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_keep_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_keep_V_1_state)) | ((1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_keep_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_keep_V_1_state) & ~((1'b1 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b0 == AXI_video_strm_V_keep_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out))))) begin
            AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_keep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_out))) begin
            AXI_video_strm_V_last_V_1_sel_rd <= ~AXI_video_strm_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_in))) begin
            AXI_video_strm_V_last_V_1_sel_wr <= ~AXI_video_strm_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_last_V_1_state)) | ((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_last_V_1_state)))) begin
            AXI_video_strm_V_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_last_V_1_vld_in) & (1'b0 == AXI_video_strm_V_last_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_last_V_1_state)) | ((1'b0 == AXI_video_strm_V_last_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_last_V_1_state)))) begin
            AXI_video_strm_V_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_last_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_last_V_1_state)) | ((1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_last_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_last_V_1_state) & ~((1'b1 == AXI_video_strm_V_last_V_1_vld_in) & (1'b0 == AXI_video_strm_V_last_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out))))) begin
            AXI_video_strm_V_last_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_out))) begin
            AXI_video_strm_V_strb_V_1_sel_rd <= ~AXI_video_strm_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_strb_V_1_state)) | ((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_strb_V_1_state)))) begin
            AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b0 == AXI_video_strm_V_strb_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_strb_V_1_state)) | ((1'b0 == AXI_video_strm_V_strb_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_strb_V_1_state)))) begin
            AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_strb_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_strb_V_1_state)) | ((1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_strb_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_strb_V_1_state) & ~((1'b1 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b0 == AXI_video_strm_V_strb_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out))))) begin
            AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_strb_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_out))) begin
            AXI_video_strm_V_user_V_1_sel_rd <= ~AXI_video_strm_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_in))) begin
            AXI_video_strm_V_user_V_1_sel_wr <= ~AXI_video_strm_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_user_V_1_state)) | ((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_user_V_1_state)))) begin
            AXI_video_strm_V_user_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == AXI_video_strm_V_user_V_1_vld_in) & (1'b0 == AXI_video_strm_V_user_V_1_ack_out) & (ap_const_lv2_3 == AXI_video_strm_V_user_V_1_state)) | ((1'b0 == AXI_video_strm_V_user_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_user_V_1_state)))) begin
            AXI_video_strm_V_user_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == AXI_video_strm_V_user_V_1_vld_in) & (ap_const_lv2_2 == AXI_video_strm_V_user_V_1_state)) | ((1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (ap_const_lv2_1 == AXI_video_strm_V_user_V_1_state)) | ((ap_const_lv2_3 == AXI_video_strm_V_user_V_1_state) & ~((1'b1 == AXI_video_strm_V_user_V_1_vld_in) & (1'b0 == AXI_video_strm_V_user_V_1_ack_out)) & ~((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out))))) begin
            AXI_video_strm_V_user_V_1_state <= ap_const_lv2_3;
        end else begin
            AXI_video_strm_V_user_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond1_fu_226_p2) & ~(ap_condition_525 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & ~(1'b0 == exitcond2_fu_241_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond1_fu_226_p2) & ~(ap_condition_525 == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b0 == exitcond2_fu_241_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond1_fu_226_p2) & ~(ap_condition_525 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & ~(1'b0 == exitcond2_fu_241_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond1_fu_226_p2) & ~(ap_condition_525 == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_reg_unsigned_short_s_fu_185_ap_start <= 1'b0;
    end else begin
        if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
            ap_reg_grp_reg_unsigned_short_s_fu_185_ap_start <= 1'b1;
        end else if ((1'b1 == grp_reg_unsigned_short_s_fu_185_ap_ready)) begin
            ap_reg_grp_reg_unsigned_short_s_fu_185_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_reg_unsigned_short_s_fu_191_ap_start <= 1'b0;
    end else begin
        if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
            ap_reg_grp_reg_unsigned_short_s_fu_191_ap_start <= 1'b1;
        end else if ((1'b1 == grp_reg_unsigned_short_s_fu_191_ap_ready)) begin
            ap_reg_grp_reg_unsigned_short_s_fu_191_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_163 <= i_1_reg_379;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == grp_reg_unsigned_short_s_fu_185_ap_done) | (1'b0 == grp_reg_unsigned_short_s_fu_191_ap_done)))) begin
        i_reg_163 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond1_fu_226_p2) & ~(ap_condition_525 == 1'b1))) begin
        j_reg_174 <= ap_const_lv11_0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond2_fu_241_p2))) begin
        j_reg_174 <= j_1_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        tmp_user_V_fu_102 <= 1'b0;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        tmp_user_V_fu_102 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_A)) begin
        AXI_video_strm_V_data_V_1_payload_A <= tmp_data_V_fu_318_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_B)) begin
        AXI_video_strm_V_data_V_1_payload_B <= tmp_data_V_fu_318_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_A)) begin
        AXI_video_strm_V_last_V_1_payload_A <= axi_last_V_reg_393;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_B)) begin
        AXI_video_strm_V_last_V_1_payload_B <= axi_last_V_reg_393;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_A)) begin
        AXI_video_strm_V_user_V_1_payload_A <= tmp_user_V_fu_102;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_B)) begin
        AXI_video_strm_V_user_V_1_payload_B <= tmp_user_V_fu_102;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        ap_pipeline_reg_pp0_iter1_exitcond2_reg_384 <= exitcond2_reg_384;
        exitcond2_reg_384 <= exitcond2_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b0 == exitcond2_fu_241_p2))) begin
        axi_last_V_reg_393 <= axi_last_V_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(ap_condition_525 == 1'b1))) begin
        i_1_reg_379 <= i_1_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == grp_reg_unsigned_short_s_fu_185_ap_done) | (1'b0 == grp_reg_unsigned_short_s_fu_191_ap_done)))) begin
        tmp_123_reg_363 <= tmp_123_fu_210_p2;
        tmp_137_reg_353 <= tmp_137_fu_202_p1;
        tmp_138_reg_358 <= tmp_138_fu_206_p1;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_sel)) begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_B;
    end else begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_sel)) begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_B;
    end else begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_sel)) begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_B;
    end else begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond1_fu_226_p2) & ~(ap_condition_525 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond1_fu_226_p2) & ~(ap_condition_525 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384)))) begin
        m_axis_video_TDATA_blk_n = AXI_video_strm_V_data_V_1_state[1'b1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))))) begin
        strmPix_V_val_0_V0_update = 1'b1;
    end else begin
        strmPix_V_val_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384))) begin
        strmPix_V_val_0_V_blk_n = strmPix_V_val_0_V_empty_n;
    end else begin
        strmPix_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384))) begin
        strmPix_V_val_1_V_blk_n = strmPix_V_val_1_V_empty_n;
    end else begin
        strmPix_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond2_reg_384))) begin
        strmPix_V_val_2_V_blk_n = strmPix_V_val_2_V_empty_n;
    end else begin
        strmPix_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~((1'b0 == grp_reg_unsigned_short_s_fu_185_ap_done) | (1'b0 == grp_reg_unsigned_short_s_fu_191_ap_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(1'b0 == exitcond1_fu_226_p2) & ~(ap_condition_525 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == exitcond1_fu_226_p2) & ~(ap_condition_525 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond2_fu_241_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | (~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond2_reg_384) & (strmPix_V_val_0_V0_status == 1'b0)) | ((1'b0 == exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond2_reg_384) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond2_fu_241_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_1_ack_in = AXI_video_strm_V_data_V_1_state[1'b1];

assign AXI_video_strm_V_data_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_data_V_1_load_A = (AXI_video_strm_V_data_V_1_state_cmp_full & ~AXI_video_strm_V_data_V_1_sel_wr);

assign AXI_video_strm_V_data_V_1_load_B = (AXI_video_strm_V_data_V_1_sel_wr & AXI_video_strm_V_data_V_1_state_cmp_full);

assign AXI_video_strm_V_data_V_1_sel = AXI_video_strm_V_data_V_1_sel_rd;

assign AXI_video_strm_V_data_V_1_state_cmp_full = ((AXI_video_strm_V_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_data_V_1_vld_out = AXI_video_strm_V_data_V_1_state[1'b0];

assign AXI_video_strm_V_dest_V_1_ack_in = AXI_video_strm_V_dest_V_1_state[1'b1];

assign AXI_video_strm_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_dest_V_1_data_out = 1'b0;

assign AXI_video_strm_V_dest_V_1_sel = AXI_video_strm_V_dest_V_1_sel_rd;

assign AXI_video_strm_V_dest_V_1_vld_out = AXI_video_strm_V_dest_V_1_state[1'b0];

assign AXI_video_strm_V_id_V_1_ack_in = AXI_video_strm_V_id_V_1_state[1'b1];

assign AXI_video_strm_V_id_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_id_V_1_data_out = 1'b0;

assign AXI_video_strm_V_id_V_1_sel = AXI_video_strm_V_id_V_1_sel_rd;

assign AXI_video_strm_V_id_V_1_vld_out = AXI_video_strm_V_id_V_1_state[1'b0];

assign AXI_video_strm_V_keep_V_1_ack_in = AXI_video_strm_V_keep_V_1_state[1'b1];

assign AXI_video_strm_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_keep_V_1_data_out = ap_const_lv3_7;

assign AXI_video_strm_V_keep_V_1_sel = AXI_video_strm_V_keep_V_1_sel_rd;

assign AXI_video_strm_V_keep_V_1_vld_out = AXI_video_strm_V_keep_V_1_state[1'b0];

assign AXI_video_strm_V_last_V_1_ack_in = AXI_video_strm_V_last_V_1_state[1'b1];

assign AXI_video_strm_V_last_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_last_V_1_load_A = (AXI_video_strm_V_last_V_1_state_cmp_full & ~AXI_video_strm_V_last_V_1_sel_wr);

assign AXI_video_strm_V_last_V_1_load_B = (AXI_video_strm_V_last_V_1_sel_wr & AXI_video_strm_V_last_V_1_state_cmp_full);

assign AXI_video_strm_V_last_V_1_sel = AXI_video_strm_V_last_V_1_sel_rd;

assign AXI_video_strm_V_last_V_1_state_cmp_full = ((AXI_video_strm_V_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_last_V_1_vld_out = AXI_video_strm_V_last_V_1_state[1'b0];

assign AXI_video_strm_V_strb_V_1_ack_in = AXI_video_strm_V_strb_V_1_state[1'b1];

assign AXI_video_strm_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_strb_V_1_data_out = ap_const_lv3_0;

assign AXI_video_strm_V_strb_V_1_sel = AXI_video_strm_V_strb_V_1_sel_rd;

assign AXI_video_strm_V_strb_V_1_vld_out = AXI_video_strm_V_strb_V_1_state[1'b0];

assign AXI_video_strm_V_user_V_1_ack_in = AXI_video_strm_V_user_V_1_state[1'b1];

assign AXI_video_strm_V_user_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_user_V_1_load_A = (AXI_video_strm_V_user_V_1_state_cmp_full & ~AXI_video_strm_V_user_V_1_sel_wr);

assign AXI_video_strm_V_user_V_1_load_B = (AXI_video_strm_V_user_V_1_sel_wr & AXI_video_strm_V_user_V_1_state_cmp_full);

assign AXI_video_strm_V_user_V_1_sel = AXI_video_strm_V_user_V_1_sel_rd;

assign AXI_video_strm_V_user_V_1_state_cmp_full = ((AXI_video_strm_V_user_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_user_V_1_vld_out = AXI_video_strm_V_user_V_1_state[1'b0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_4];

always @ (*) begin
    ap_condition_525 = ((AXI_video_strm_V_data_V_1_ack_in == 1'b0) | (AXI_video_strm_V_keep_V_1_ack_in == 1'b0) | (AXI_video_strm_V_strb_V_1_ack_in == 1'b0) | (AXI_video_strm_V_user_V_1_ack_in == 1'b0) | (AXI_video_strm_V_last_V_1_ack_in == 1'b0) | (AXI_video_strm_V_id_V_1_ack_in == 1'b0) | (AXI_video_strm_V_dest_V_1_ack_in == 1'b0));
end

assign axi_0_2_fu_289_p3 = ((sel_tmp2_fu_216_p2[0:0] === 1'b1) ? p_Result_s_fu_281_p3 : p_Result_2_fu_273_p3);

assign axi_last_V_fu_252_p2 = ((j_cast_fu_237_p1 == tmp_123_reg_363) ? 1'b1 : 1'b0);

assign exitcond1_fu_226_p2 = ((i_cast_fu_222_p1 == tmp_138_reg_358) ? 1'b1 : 1'b0);

assign exitcond2_fu_241_p2 = ((j_cast_fu_237_p1 == tmp_137_reg_353) ? 1'b1 : 1'b0);

assign grp_reg_unsigned_short_s_fu_185_ap_start = ap_reg_grp_reg_unsigned_short_s_fu_185_ap_start;

assign grp_reg_unsigned_short_s_fu_191_ap_start = ap_reg_grp_reg_unsigned_short_s_fu_191_ap_start;

assign i_1_fu_231_p2 = (i_reg_163 + ap_const_lv11_1);

assign i_cast_fu_222_p1 = i_reg_163;

assign j_1_fu_246_p2 = (j_reg_174 + ap_const_lv11_1);

assign j_cast_fu_237_p1 = j_reg_174;

assign m_axis_video_TDATA = AXI_video_strm_V_data_V_1_data_out;

assign m_axis_video_TDEST = AXI_video_strm_V_dest_V_1_data_out;

assign m_axis_video_TID = AXI_video_strm_V_id_V_1_data_out;

assign m_axis_video_TKEEP = AXI_video_strm_V_keep_V_1_data_out;

assign m_axis_video_TLAST = AXI_video_strm_V_last_V_1_data_out;

assign m_axis_video_TSTRB = AXI_video_strm_V_strb_V_1_data_out;

assign m_axis_video_TUSER = AXI_video_strm_V_user_V_1_data_out;

assign m_axis_video_TVALID = AXI_video_strm_V_dest_V_1_state[1'b0];

assign p_Result_2_fu_273_p3 = {{ap_const_lv16_FFFF}, {strmPix_V_val_0_V_dout}};

assign p_Result_s_fu_281_p3 = {{ap_const_lv16_FFFF}, {strmPix_V_val_1_V_dout}};

assign sel_tmp2_fu_216_p2 = ((colorFormat == ap_const_lv8_0) ? 1'b1 : 1'b0);

assign strmPix_V_val_0_V0_status = (strmPix_V_val_0_V_empty_n & strmPix_V_val_1_V_empty_n & strmPix_V_val_2_V_empty_n);

assign strmPix_V_val_0_V_read = strmPix_V_val_0_V0_update;

assign strmPix_V_val_1_V_read = strmPix_V_val_0_V0_update;

assign strmPix_V_val_2_V_read = strmPix_V_val_0_V0_update;

assign tmp_123_fu_210_p2 = ($signed(ap_const_lv12_FFF) + $signed(tmp_137_fu_202_p1));

assign tmp_137_fu_202_p1 = grp_reg_unsigned_short_s_fu_191_ap_return[11:0];

assign tmp_138_fu_206_p1 = grp_reg_unsigned_short_s_fu_185_ap_return[11:0];

assign tmp_24_fu_296_p3 = ((sel_tmp2_fu_216_p2[0:0] === 1'b1) ? strmPix_V_val_2_V_dout : strmPix_V_val_1_V_dout);

assign tmp_25_fu_303_p3 = ((sel_tmp2_fu_216_p2[0:0] === 1'b1) ? strmPix_V_val_0_V_dout : strmPix_V_val_2_V_dout);

assign tmp_26_fu_310_p3 = {{tmp_25_fu_303_p3}, {tmp_24_fu_296_p3}};

assign tmp_data_V_fu_318_p5 = {{tmp_26_fu_310_p3}, {axi_0_2_fu_289_p3[32'd7 : 32'd0]}};

endmodule //design_1_v_tpg_0_0_MultiPixStream2AXIvi
