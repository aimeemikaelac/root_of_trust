// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _reduce_add_sub_HH_
#define _reduce_add_sub_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "reduce_add_sub_m.h"
#include "reduce_add_sub_t.h"

namespace ap_rtl {

struct reduce_add_sub : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > r_v_address0;
    sc_out< sc_logic > r_v_ce0;
    sc_out< sc_logic > r_v_we0;
    sc_out< sc_lv<32> > r_v_d0;
    sc_in< sc_lv<32> > r_v_q0;


    // Module declarations
    reduce_add_sub(sc_module_name name);
    SC_HAS_PROCESS(reduce_add_sub);

    ~reduce_add_sub();

    sc_trace_file* mVcdFile;

    reduce_add_sub_m* m_U;
    reduce_add_sub_t* t_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > m_address0;
    sc_signal< sc_logic > m_ce0;
    sc_signal< sc_lv<8> > m_q0;
    sc_signal< sc_lv<6> > i_20_fu_130_p2;
    sc_signal< sc_lv<6> > i_20_reg_250;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_fu_136_p1;
    sc_signal< sc_lv<64> > tmp_reg_255;
    sc_signal< sc_lv<1> > exitcond2_fu_124_p2;
    sc_signal< sc_lv<32> > mask_cast_fu_145_p1;
    sc_signal< sc_lv<32> > mask_cast_reg_270;
    sc_signal< sc_lv<1> > tmp_756_fu_169_p3;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<6> > i_21_fu_207_p2;
    sc_signal< sc_lv<6> > i_21_reg_283;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<5> > r_v_addr_1_reg_288;
    sc_signal< sc_lv<1> > exitcond_fu_201_p2;
    sc_signal< sc_lv<5> > t_address0;
    sc_signal< sc_logic > t_ce0;
    sc_signal< sc_logic > t_we0;
    sc_signal< sc_lv<8> > t_d0;
    sc_signal< sc_lv<8> > t_q0;
    sc_signal< sc_lv<1> > pb_reg_90;
    sc_signal< sc_lv<6> > i_reg_102;
    sc_signal< sc_lv<6> > i_1_reg_113;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > tmp_s_fu_213_p1;
    sc_signal< sc_lv<2> > mask_fu_32;
    sc_signal< sc_lv<2> > phitmp_cast_cast_fu_188_p3;
    sc_signal< sc_lv<8> > pb_cast1_fu_149_p1;
    sc_signal< sc_lv<8> > pb_1_fu_153_p2;
    sc_signal< sc_lv<32> > pb_3_cast_fu_159_p1;
    sc_signal< sc_lv<32> > x_1_fu_163_p2;
    sc_signal< sc_lv<1> > phitmp_fu_182_p2;
    sc_signal< sc_lv<32> > tmp_738_fu_219_p1;
    sc_signal< sc_lv<32> > tmp_739_fu_223_p2;
    sc_signal< sc_lv<32> > tmp_740_fu_229_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond2_fu_124_p2();
    void thread_exitcond_fu_201_p2();
    void thread_i_20_fu_130_p2();
    void thread_i_21_fu_207_p2();
    void thread_m_address0();
    void thread_m_ce0();
    void thread_mask_cast_fu_145_p1();
    void thread_pb_1_fu_153_p2();
    void thread_pb_3_cast_fu_159_p1();
    void thread_pb_cast1_fu_149_p1();
    void thread_phitmp_cast_cast_fu_188_p3();
    void thread_phitmp_fu_182_p2();
    void thread_r_v_address0();
    void thread_r_v_ce0();
    void thread_r_v_d0();
    void thread_r_v_we0();
    void thread_t_address0();
    void thread_t_ce0();
    void thread_t_d0();
    void thread_t_we0();
    void thread_tmp_738_fu_219_p1();
    void thread_tmp_739_fu_223_p2();
    void thread_tmp_740_fu_229_p2();
    void thread_tmp_756_fu_169_p3();
    void thread_tmp_fu_136_p1();
    void thread_tmp_s_fu_213_p1();
    void thread_x_1_fu_163_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
