// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XCRYPTO_SIGN_H
#define XCRYPTO_SIGN_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xcrypto_sign_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XCrypto_sign_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XCrypto_sign;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XCrypto_sign_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XCrypto_sign_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XCrypto_sign_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XCrypto_sign_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XCrypto_sign_Initialize(XCrypto_sign *InstancePtr, u16 DeviceId);
XCrypto_sign_Config* XCrypto_sign_LookupConfig(u16 DeviceId);
int XCrypto_sign_CfgInitialize(XCrypto_sign *InstancePtr, XCrypto_sign_Config *ConfigPtr);
#else
int XCrypto_sign_Initialize(XCrypto_sign *InstancePtr, const char* InstanceName);
int XCrypto_sign_Release(XCrypto_sign *InstancePtr);
#endif

void XCrypto_sign_Start(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_IsDone(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_IsIdle(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_IsReady(XCrypto_sign *InstancePtr);
void XCrypto_sign_EnableAutoRestart(XCrypto_sign *InstancePtr);
void XCrypto_sign_DisableAutoRestart(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_return(XCrypto_sign *InstancePtr);

void XCrypto_sign_Set_num_blocks(XCrypto_sign *InstancePtr, u32 Data);
u32 XCrypto_sign_Get_num_blocks(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_sk_BaseAddress(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_sk_HighAddress(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_sk_TotalBytes(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_sk_BitWidth(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_sk_Depth(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Write_sk_Words(XCrypto_sign *InstancePtr, int offset, int *data, int length);
u32 XCrypto_sign_Read_sk_Words(XCrypto_sign *InstancePtr, int offset, int *data, int length);
u32 XCrypto_sign_Write_sk_Bytes(XCrypto_sign *InstancePtr, int offset, char *data, int length);
u32 XCrypto_sign_Read_sk_Bytes(XCrypto_sign *InstancePtr, int offset, char *data, int length);
u32 XCrypto_sign_Get_signature_out_BaseAddress(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_signature_out_HighAddress(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_signature_out_TotalBytes(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_signature_out_BitWidth(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Get_signature_out_Depth(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_Write_signature_out_Words(XCrypto_sign *InstancePtr, int offset, int *data, int length);
u32 XCrypto_sign_Read_signature_out_Words(XCrypto_sign *InstancePtr, int offset, int *data, int length);
u32 XCrypto_sign_Write_signature_out_Bytes(XCrypto_sign *InstancePtr, int offset, char *data, int length);
u32 XCrypto_sign_Read_signature_out_Bytes(XCrypto_sign *InstancePtr, int offset, char *data, int length);

void XCrypto_sign_InterruptGlobalEnable(XCrypto_sign *InstancePtr);
void XCrypto_sign_InterruptGlobalDisable(XCrypto_sign *InstancePtr);
void XCrypto_sign_InterruptEnable(XCrypto_sign *InstancePtr, u32 Mask);
void XCrypto_sign_InterruptDisable(XCrypto_sign *InstancePtr, u32 Mask);
void XCrypto_sign_InterruptClear(XCrypto_sign *InstancePtr, u32 Mask);
u32 XCrypto_sign_InterruptGetEnabled(XCrypto_sign *InstancePtr);
u32 XCrypto_sign_InterruptGetStatus(XCrypto_sign *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
