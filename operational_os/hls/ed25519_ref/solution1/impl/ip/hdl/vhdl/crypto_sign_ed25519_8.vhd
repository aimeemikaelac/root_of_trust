-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign_ed25519_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_v_ce0 : OUT STD_LOGIC;
    r_v_we0 : OUT STD_LOGIC;
    r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_v_ce1 : OUT STD_LOGIC;
    r_v_we1 : OUT STD_LOGIC;
    r_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_v_ce0 : OUT STD_LOGIC;
    x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_v_ce1 : OUT STD_LOGIC;
    x_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_v_ce0 : OUT STD_LOGIC;
    y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign_ed25519_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_1DA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011010";
    constant ap_const_lv32_FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111110";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_1FE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_742_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_742_reg_405 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond1_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_23_fu_258_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_23_reg_415 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_24_fu_277_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_24_reg_423 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_744_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_744_reg_428 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rep_fu_302_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal rep_reg_458 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_25_fu_337_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_25_reg_466 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal r_v_addr_4_reg_471 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_i_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_v_addr_5_reg_477 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_189 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_200 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal rep_i_reg_211 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_reg_222 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_759_i_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_760_i_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_743_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_745_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_cast_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_761_i_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_762_i_cast_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_746_fu_312_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_759_fu_308_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal t_7_fu_357_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_2_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_760_fu_353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_383_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal exitcond1_i_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_383_p10 : STD_LOGIC_VECTOR (30 downto 0);

    component crypto_sign_mac_mpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_ed255ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    t_U : component crypto_sign_ed255ocq
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);

    crypto_sign_mac_mpcA_x_U68 : component crypto_sign_mac_mpcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 25,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_383_p0,
        din1 => grp_fu_383_p1,
        din2 => r_v_q1,
        dout => grp_fu_383_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_247_p2 = ap_const_lv1_1))) then 
                i_1_reg_200 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_200 <= i_24_reg_423;
            end if; 
        end if;
    end process;

    i_i_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_i_reg_222 <= i_25_reg_466;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i_reg_222 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_189 <= i_23_reg_415;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_189 <= ap_const_lv5_1;
            end if; 
        end if;
    end process;

    rep_i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_i_fu_331_p2))) then 
                rep_i_reg_211 <= rep_reg_458;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_271_p2 = ap_const_lv1_1))) then 
                rep_i_reg_211 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_247_p2 = ap_const_lv1_0))) then
                i_23_reg_415 <= i_23_fu_258_p2;
                    tmp_742_reg_405(4 downto 0) <= tmp_742_fu_253_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_24_reg_423 <= i_24_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_25_reg_466 <= i_25_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_i_fu_331_p2))) then
                r_v_addr_4_reg_471 <= tmp_759_i_fu_343_p1(5 - 1 downto 0);
                r_v_addr_5_reg_477 <= tmp_760_i_fu_348_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                rep_reg_458 <= rep_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_271_p2))) then
                    tmp_744_reg_428(5 downto 0) <= tmp_744_fu_283_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_742_reg_405(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_744_reg_428(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond1_fu_247_p2, ap_CS_fsm_state5, exitcond_fu_271_p2, ap_CS_fsm_state7, ap_CS_fsm_state9, exitcond_i_fu_331_p2, exitcond1_i_fu_296_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_247_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_271_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond1_i_fu_296_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_i_fu_331_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, exitcond1_i_fu_296_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond1_i_fu_296_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, exitcond1_i_fu_296_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond1_i_fu_296_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_247_p2 <= "1" when (i_reg_189 = ap_const_lv5_1F) else "0";
    exitcond1_i_fu_296_p2 <= "1" when (rep_i_reg_211 = ap_const_lv3_4) else "0";
    exitcond_fu_271_p2 <= "1" when (i_1_reg_200 = ap_const_lv6_20) else "0";
    exitcond_i_fu_331_p2 <= "1" when (i_i_reg_222 = ap_const_lv5_1F) else "0";
    grp_fu_383_p0 <= ap_const_lv31_13(6 - 1 downto 0);
    grp_fu_383_p1 <= grp_fu_383_p10(25 - 1 downto 0);
    grp_fu_383_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_746_fu_312_p4),31));
    i_23_fu_258_p2 <= std_logic_vector(unsigned(i_reg_189) + unsigned(ap_const_lv5_1));
    i_24_fu_277_p2 <= std_logic_vector(unsigned(i_1_reg_200) + unsigned(ap_const_lv6_1));
    i_25_fu_337_p2 <= std_logic_vector(unsigned(i_i_reg_222) + unsigned(ap_const_lv5_1));

    r_v_address0_assign_proc : process(tmp_744_reg_428, ap_CS_fsm_state7, ap_CS_fsm_state9, r_v_addr_4_reg_471, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, tmp_760_i_fu_348_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_v_address0 <= r_v_addr_4_reg_471;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_v_address0 <= tmp_760_i_fu_348_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_v_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_v_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_v_address0 <= tmp_744_reg_428(5 - 1 downto 0);
        else 
            r_v_address0 <= "XXXXX";
        end if; 
    end process;


    r_v_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, r_v_addr_5_reg_477, ap_CS_fsm_state8, ap_CS_fsm_state10, tmp_759_i_fu_343_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_v_address1 <= r_v_addr_5_reg_477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_v_address1 <= tmp_759_i_fu_343_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_v_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_v_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            r_v_address1 <= "XXXXX";
        end if; 
    end process;


    r_v_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            r_v_ce0 <= ap_const_logic_1;
        else 
            r_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_v_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            r_v_ce1 <= ap_const_logic_1;
        else 
            r_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_v_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, tmp_745_fu_289_p2, grp_fu_383_p3, tmp_762_i_cast_fu_378_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_v_d0 <= tmp_762_i_cast_fu_378_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_v_d0 <= grp_fu_383_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_v_d0 <= tmp_745_fu_289_p2;
        else 
            r_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_v_d1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, tmp_i_cast_fu_326_p1, tmp_761_i_fu_371_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_v_d1 <= tmp_761_i_fu_371_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_v_d1 <= tmp_i_cast_fu_326_p1;
        else 
            r_v_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_v_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            r_v_we0 <= ap_const_logic_1;
        else 
            r_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_v_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            r_v_we1 <= ap_const_logic_1;
        else 
            r_v_we1 <= ap_const_logic_0;
        end if; 
    end process;

    rep_fu_302_p2 <= std_logic_vector(unsigned(rep_i_reg_211) + unsigned(ap_const_lv3_1));
    t_2_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_7_fu_357_p4),32));
    t_7_fu_357_p4 <= r_v_q1(31 downto 8);

    t_address0_assign_proc : process(tmp_742_reg_405, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= tmp_742_reg_405(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            t_address0 <= "XXXXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state5, tmp_744_fu_283_p1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address1 <= tmp_744_fu_283_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        else 
            t_address1 <= "XXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_fu_233_p2, tmp_743_fu_264_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_d0 <= tmp_743_fu_264_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_d0 <= tmp_fu_233_p2;
        else 
            t_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    t_d1 <= std_logic_vector(unsigned(x_v_q1) + unsigned(ap_const_lv32_FE));

    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_742_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_189),64));
    tmp_743_fu_264_p2 <= std_logic_vector(unsigned(x_v_q0) + unsigned(ap_const_lv32_1FE));
    tmp_744_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_200),64));
    tmp_745_fu_289_p2 <= std_logic_vector(unsigned(t_q1) - unsigned(y_v_q0));
    tmp_746_fu_312_p4 <= r_v_q0(31 downto 7);
    tmp_759_fu_308_p1 <= r_v_q0(7 - 1 downto 0);
    tmp_759_i_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_222),64));
    tmp_760_fu_353_p1 <= r_v_q1(8 - 1 downto 0);
    tmp_760_i_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_25_fu_337_p2),64));
    tmp_761_i_fu_371_p2 <= std_logic_vector(unsigned(t_2_fu_367_p1) + unsigned(r_v_q0));
    tmp_762_i_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_760_fu_353_p1),32));
    tmp_fu_233_p2 <= std_logic_vector(unsigned(x_v_q0) + unsigned(ap_const_lv32_1DA));
    tmp_i_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_759_fu_308_p1),32));

    x_v_address0_assign_proc : process(ap_CS_fsm_state1, tmp_742_fu_253_p1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_v_address0 <= tmp_742_fu_253_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_v_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            x_v_address0 <= "XXXXX";
        end if; 
    end process;

    x_v_address1 <= ap_const_lv64_1F(5 - 1 downto 0);

    x_v_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            x_v_ce0 <= ap_const_logic_1;
        else 
            x_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_v_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            x_v_ce1 <= ap_const_logic_1;
        else 
            x_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    y_v_address0 <= tmp_744_fu_283_p1(5 - 1 downto 0);

    y_v_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_v_ce0 <= ap_const_logic_1;
        else 
            y_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
