// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="secure_enclave,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i-es2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.134000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=640,HLS_SYN_LUT=1108}" *)

module secure_enclave (
        ap_clk,
        ap_rst_n,
        key_out_V,
        key_out_V_ap_vld,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'b1;
parameter    ap_ST_fsm_state2 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv128_lc_1 = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output  [127:0] key_out_V;
output   key_out_V_ap_vld;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg[127:0] key_out_V;
reg key_out_V_ap_vld;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [0:0] secure_storage_in_V_address0;
reg    secure_storage_in_V_ce0;
wire   [127:0] secure_storage_in_V_q0;
wire   [127:0] pin_attempt_V;
reg   [127:0] pin_attempt_V_preg;
wire    pin_attempt_V_ap_vld;
reg   [127:0] pin_attempt_V_in_sig;
reg    pin_attempt_V_ap_vld_preg;
reg    pin_attempt_V_ap_vld_in_sig;
wire   [31:0] counter_in;
reg   [31:0] counter_in_preg;
wire    counter_in_ap_vld;
reg   [31:0] counter_in_in_sig;
reg    counter_in_ap_vld_preg;
reg    counter_in_ap_vld_in_sig;
reg   [31:0] increment_counter;
reg    increment_counter_ap_vld;
reg   [31:0] reset_counter;
reg    reset_counter_ap_vld;
wire   [31:0] ap_return;
reg    pin_attempt_V_blk_n;
wire   [0:0] ap_CS_fsm_state2;
reg    counter_in_blk_n;
reg   [0:0] p_s_phi_fu_119_p4;
wire   [0:0] or_cond_fu_139_p2;
wire   [0:0] tmp_fu_127_p2;
wire   [0:0] tmp_1_fu_133_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_condition_118;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
#0 pin_attempt_V_preg = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
#0 pin_attempt_V_ap_vld_preg = 1'b0;
#0 counter_in_preg = 32'b00000000000000000000000000000000;
#0 counter_in_ap_vld_preg = 1'b0;
end

secure_enclave_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
secure_enclave_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .secure_storage_in_V_address0(secure_storage_in_V_address0),
    .secure_storage_in_V_ce0(secure_storage_in_V_ce0),
    .secure_storage_in_V_q0(secure_storage_in_V_q0),
    .pin_attempt_V(pin_attempt_V),
    .pin_attempt_V_ap_vld(pin_attempt_V_ap_vld),
    .counter_in(counter_in),
    .counter_in_ap_vld(counter_in_ap_vld),
    .increment_counter(increment_counter),
    .increment_counter_ap_vld(increment_counter_ap_vld),
    .reset_counter(reset_counter),
    .reset_counter_ap_vld(reset_counter_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        counter_in_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)))) begin
            counter_in_ap_vld_preg <= 1'b0;
        end else if ((~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) & (1'b1 == counter_in_ap_vld))) begin
            counter_in_ap_vld_preg <= counter_in_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        counter_in_preg <= ap_const_lv32_0;
    end else begin
        if ((~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) & (1'b1 == counter_in_ap_vld))) begin
            counter_in_preg <= counter_in;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pin_attempt_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)))) begin
            pin_attempt_V_ap_vld_preg <= 1'b0;
        end else if (((1'b1 == pin_attempt_V_ap_vld) & ~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)))) begin
            pin_attempt_V_ap_vld_preg <= pin_attempt_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        pin_attempt_V_preg <= ap_const_lv128_lc_1;
    end else begin
        if (((1'b1 == pin_attempt_V_ap_vld) & ~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)))) begin
            pin_attempt_V_preg <= pin_attempt_V;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == counter_in_ap_vld)) begin
        counter_in_ap_vld_in_sig = counter_in_ap_vld;
    end else begin
        counter_in_ap_vld_in_sig = counter_in_ap_vld_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        counter_in_blk_n = counter_in_ap_vld;
    end else begin
        counter_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == counter_in_ap_vld)) begin
        counter_in_in_sig = counter_in;
    end else begin
        counter_in_in_sig = counter_in_preg;
    end
end

always @ (*) begin
    if ((ap_condition_118 == 1'b1)) begin
        if (~(or_cond_fu_139_p2 == 1'b0)) begin
            increment_counter = ap_const_lv32_0;
        end else if ((or_cond_fu_139_p2 == 1'b0)) begin
            increment_counter = ap_const_lv32_1;
        end else begin
            increment_counter = 'bx;
        end
    end else begin
        increment_counter = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)) & ~(or_cond_fu_139_p2 == 1'b0)) | ((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)) & (or_cond_fu_139_p2 == 1'b0)))) begin
        increment_counter_ap_vld = 1'b1;
    end else begin
        increment_counter_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_condition_118 == 1'b1)) begin
        if (~(or_cond_fu_139_p2 == 1'b0)) begin
            key_out_V = pin_attempt_V_in_sig;
        end else if ((or_cond_fu_139_p2 == 1'b0)) begin
            key_out_V = ap_const_lv128_lc_1;
        end else begin
            key_out_V = 'bx;
        end
    end else begin
        key_out_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)) & ~(or_cond_fu_139_p2 == 1'b0)) | ((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)) & (or_cond_fu_139_p2 == 1'b0)))) begin
        key_out_V_ap_vld = 1'b1;
    end else begin
        key_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((or_cond_fu_139_p2 == 1'b0)) begin
            p_s_phi_fu_119_p4 = 1'b0;
        end else if (~(or_cond_fu_139_p2 == 1'b0)) begin
            p_s_phi_fu_119_p4 = 1'b1;
        end else begin
            p_s_phi_fu_119_p4 = 'bx;
        end
    end else begin
        p_s_phi_fu_119_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == pin_attempt_V_ap_vld)) begin
        pin_attempt_V_ap_vld_in_sig = pin_attempt_V_ap_vld;
    end else begin
        pin_attempt_V_ap_vld_in_sig = pin_attempt_V_ap_vld_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pin_attempt_V_blk_n = pin_attempt_V_ap_vld;
    end else begin
        pin_attempt_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == pin_attempt_V_ap_vld)) begin
        pin_attempt_V_in_sig = pin_attempt_V;
    end else begin
        pin_attempt_V_in_sig = pin_attempt_V_preg;
    end
end

always @ (*) begin
    if ((ap_condition_118 == 1'b1)) begin
        if (~(or_cond_fu_139_p2 == 1'b0)) begin
            reset_counter = ap_const_lv32_1;
        end else if ((or_cond_fu_139_p2 == 1'b0)) begin
            reset_counter = ap_const_lv32_0;
        end else begin
            reset_counter = 'bx;
        end
    end else begin
        reset_counter = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)) & ~(or_cond_fu_139_p2 == 1'b0)) | ((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)) & (or_cond_fu_139_p2 == 1'b0)))) begin
        reset_counter_ap_vld = 1'b1;
    end else begin
        reset_counter_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        secure_storage_in_V_ce0 = 1'b1;
    end else begin
        secure_storage_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

always @ (*) begin
    ap_condition_118 = ((1'b1 == ap_CS_fsm_state2) & ~((counter_in_ap_vld_in_sig == 1'b0) | (pin_attempt_V_ap_vld_in_sig == 1'b0)));
end

assign ap_return = p_s_phi_fu_119_p4;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign or_cond_fu_139_p2 = (tmp_fu_127_p2 & tmp_1_fu_133_p2);

assign secure_storage_in_V_address0 = ap_const_lv64_0;

assign tmp_1_fu_133_p2 = ((secure_storage_in_V_q0 == pin_attempt_V_in_sig) ? 1'b1 : 1'b0);

assign tmp_fu_127_p2 = ((counter_in_in_sig < ap_const_lv32_5) ? 1'b1 : 1'b0);

endmodule //secure_enclave
