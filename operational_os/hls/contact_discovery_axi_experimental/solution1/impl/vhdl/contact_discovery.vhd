-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity contact_discovery is
generic (
    C_M_AXI_DB_MEM_V_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DB_MEM_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DB_MEM_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DB_MEM_V_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_DB_MEM_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DB_MEM_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DB_MEM_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DB_MEM_V_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DB_MEM_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DB_MEM_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DB_MEM_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_DB_MEM_V_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_db_mem_V_AWVALID : OUT STD_LOGIC;
    m_axi_db_mem_V_AWREADY : IN STD_LOGIC;
    m_axi_db_mem_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_ADDR_WIDTH-1 downto 0);
    m_axi_db_mem_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_ID_WIDTH-1 downto 0);
    m_axi_db_mem_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_db_mem_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_db_mem_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_db_mem_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_db_mem_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_db_mem_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_db_mem_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_db_mem_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_db_mem_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_AWUSER_WIDTH-1 downto 0);
    m_axi_db_mem_V_WVALID : OUT STD_LOGIC;
    m_axi_db_mem_V_WREADY : IN STD_LOGIC;
    m_axi_db_mem_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_DATA_WIDTH-1 downto 0);
    m_axi_db_mem_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_DATA_WIDTH/8-1 downto 0);
    m_axi_db_mem_V_WLAST : OUT STD_LOGIC;
    m_axi_db_mem_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_ID_WIDTH-1 downto 0);
    m_axi_db_mem_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_WUSER_WIDTH-1 downto 0);
    m_axi_db_mem_V_ARVALID : OUT STD_LOGIC;
    m_axi_db_mem_V_ARREADY : IN STD_LOGIC;
    m_axi_db_mem_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_ADDR_WIDTH-1 downto 0);
    m_axi_db_mem_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_ID_WIDTH-1 downto 0);
    m_axi_db_mem_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_db_mem_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_db_mem_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_db_mem_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_db_mem_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_db_mem_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_db_mem_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_db_mem_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_db_mem_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_ARUSER_WIDTH-1 downto 0);
    m_axi_db_mem_V_RVALID : IN STD_LOGIC;
    m_axi_db_mem_V_RREADY : OUT STD_LOGIC;
    m_axi_db_mem_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_DATA_WIDTH-1 downto 0);
    m_axi_db_mem_V_RLAST : IN STD_LOGIC;
    m_axi_db_mem_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_ID_WIDTH-1 downto 0);
    m_axi_db_mem_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_RUSER_WIDTH-1 downto 0);
    m_axi_db_mem_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_db_mem_V_BVALID : IN STD_LOGIC;
    m_axi_db_mem_V_BREADY : OUT STD_LOGIC;
    m_axi_db_mem_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_db_mem_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_ID_WIDTH-1 downto 0);
    m_axi_db_mem_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DB_MEM_V_BUSER_WIDTH-1 downto 0);
    results_out_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    results_out_V_TVALID : OUT STD_LOGIC;
    results_out_V_TREADY : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of contact_discovery is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "contact_discovery,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=45,HLS_SYN_DSP=0,HLS_SYN_FF=3781,HLS_SYN_LUT=4072}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal operation : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal operation_ap_vld : STD_LOGIC;
    signal operation_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_ap_vld_preg : STD_LOGIC := '0';
    signal operation_ap_vld_in_sig : STD_LOGIC;
    signal contact_in_V : STD_LOGIC_VECTOR (511 downto 0);
    signal offset : STD_LOGIC_VECTOR (63 downto 0);
    signal db_size_in : STD_LOGIC_VECTOR (31 downto 0);
    signal error_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal error_out_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal error_out_1_vld_reg : STD_LOGIC := '0';
    signal error_out_1_vld_in : STD_LOGIC;
    signal error_out_1_ack_in : STD_LOGIC;
    signal contacts_size_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contacts_size_out_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal contacts_size_out_1_vld_reg : STD_LOGIC := '0';
    signal contacts_size_out_1_vld_in : STD_LOGIC;
    signal contacts_size_out_1_ack_in : STD_LOGIC;
    signal results_out_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal results_out_V_1_vld_in : STD_LOGIC;
    signal results_out_V_1_vld_out : STD_LOGIC;
    signal results_out_V_1_ack_in : STD_LOGIC;
    signal results_out_V_1_ack_out : STD_LOGIC;
    signal results_out_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal results_out_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal results_out_V_1_sel_rd : STD_LOGIC := '0';
    signal results_out_V_1_sel_wr : STD_LOGIC := '0';
    signal results_out_V_1_sel : STD_LOGIC;
    signal results_out_V_1_load_A : STD_LOGIC;
    signal results_out_V_1_load_B : STD_LOGIC;
    signal results_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal results_out_V_1_state_cmp_full : STD_LOGIC;
    signal current_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal contacts_size : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contacts_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal contacts_V_ce0 : STD_LOGIC;
    signal contacts_V_we0 : STD_LOGIC;
    signal contacts_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal operation_blk_n : STD_LOGIC;
    signal db_mem_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal db_mem_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal results_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_i_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal db_mem_V_AWREADY : STD_LOGIC;
    signal db_mem_V_WREADY : STD_LOGIC;
    signal db_mem_V_ARVALID : STD_LOGIC;
    signal db_mem_V_ARREADY : STD_LOGIC;
    signal db_mem_V_RVALID : STD_LOGIC;
    signal db_mem_V_RREADY : STD_LOGIC;
    signal db_mem_V_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal db_mem_V_RLAST : STD_LOGIC;
    signal db_mem_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal db_mem_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal db_mem_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal db_mem_V_BVALID : STD_LOGIC;
    signal db_mem_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal db_mem_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal db_mem_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal contact_in_V_read_reg_426 : STD_LOGIC_VECTOR (511 downto 0);
    signal operation_read_read_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal contacts_size_load_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_271_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_2_reg_444 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_5_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_317_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_460 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_6_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_322_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_8_cast_reg_465 : STD_LOGIC_VECTOR (24 downto 0);
    signal i_1_fu_339_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_473 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sum_fu_360_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sum_reg_481 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_10_fu_331_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal database_index_1_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_db_mem_V_ARREADY : STD_LOGIC;
    signal db_mem_V_addr_read_reg_497 : STD_LOGIC_VECTOR (511 downto 0);
    signal contacts_index_fu_387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal contacts_index_reg_505 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state13_io : BOOLEAN;
    signal tmp_3_fu_398_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matched_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal database_index_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_214 : STD_LOGIC_VECTOR (5 downto 0);
    signal contacts_index_i_reg_225 : STD_LOGIC_VECTOR (7 downto 0);
    signal matched_i_reg_236 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_4_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_db_mem_V_ARREADY : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal current_offset_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal tmp_fu_274_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_7_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_313_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal i_cast2_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_356_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_i_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component contact_discoverybkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component contact_discovery_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        operation : OUT STD_LOGIC_VECTOR (31 downto 0);
        operation_ap_vld : OUT STD_LOGIC;
        contact_in_V : OUT STD_LOGIC_VECTOR (511 downto 0);
        offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        db_size_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        error_out : IN STD_LOGIC_VECTOR (31 downto 0);
        contacts_size_out : IN STD_LOGIC_VECTOR (31 downto 0);
        current_offset : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component contact_discovery_db_mem_V_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    contacts_V_U : component contact_discoverybkb
    generic map (
        DataWidth => 512,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => contacts_V_address0,
        ce0 => contacts_V_ce0,
        we0 => contacts_V_we0,
        d0 => contact_in_V_read_reg_426,
        q0 => contacts_V_q0);

    contact_discovery_AXILiteS_s_axi_U : component contact_discovery_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        operation => operation,
        operation_ap_vld => operation_ap_vld,
        contact_in_V => contact_in_V,
        offset => offset,
        db_size_in => db_size_in,
        error_out => error_out_1_data_reg,
        contacts_size_out => contacts_size_out_1_data_reg,
        current_offset => current_offset);

    contact_discovery_db_mem_V_m_axi_U : component contact_discovery_db_mem_V_m_axi
    generic map (
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 4,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DB_MEM_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DB_MEM_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DB_MEM_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DB_MEM_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DB_MEM_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DB_MEM_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DB_MEM_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DB_MEM_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DB_MEM_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DB_MEM_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DB_MEM_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DB_MEM_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_db_mem_V_AWVALID,
        AWREADY => m_axi_db_mem_V_AWREADY,
        AWADDR => m_axi_db_mem_V_AWADDR,
        AWID => m_axi_db_mem_V_AWID,
        AWLEN => m_axi_db_mem_V_AWLEN,
        AWSIZE => m_axi_db_mem_V_AWSIZE,
        AWBURST => m_axi_db_mem_V_AWBURST,
        AWLOCK => m_axi_db_mem_V_AWLOCK,
        AWCACHE => m_axi_db_mem_V_AWCACHE,
        AWPROT => m_axi_db_mem_V_AWPROT,
        AWQOS => m_axi_db_mem_V_AWQOS,
        AWREGION => m_axi_db_mem_V_AWREGION,
        AWUSER => m_axi_db_mem_V_AWUSER,
        WVALID => m_axi_db_mem_V_WVALID,
        WREADY => m_axi_db_mem_V_WREADY,
        WDATA => m_axi_db_mem_V_WDATA,
        WSTRB => m_axi_db_mem_V_WSTRB,
        WLAST => m_axi_db_mem_V_WLAST,
        WID => m_axi_db_mem_V_WID,
        WUSER => m_axi_db_mem_V_WUSER,
        ARVALID => m_axi_db_mem_V_ARVALID,
        ARREADY => m_axi_db_mem_V_ARREADY,
        ARADDR => m_axi_db_mem_V_ARADDR,
        ARID => m_axi_db_mem_V_ARID,
        ARLEN => m_axi_db_mem_V_ARLEN,
        ARSIZE => m_axi_db_mem_V_ARSIZE,
        ARBURST => m_axi_db_mem_V_ARBURST,
        ARLOCK => m_axi_db_mem_V_ARLOCK,
        ARCACHE => m_axi_db_mem_V_ARCACHE,
        ARPROT => m_axi_db_mem_V_ARPROT,
        ARQOS => m_axi_db_mem_V_ARQOS,
        ARREGION => m_axi_db_mem_V_ARREGION,
        ARUSER => m_axi_db_mem_V_ARUSER,
        RVALID => m_axi_db_mem_V_RVALID,
        RREADY => m_axi_db_mem_V_RREADY,
        RDATA => m_axi_db_mem_V_RDATA,
        RLAST => m_axi_db_mem_V_RLAST,
        RID => m_axi_db_mem_V_RID,
        RUSER => m_axi_db_mem_V_RUSER,
        RRESP => m_axi_db_mem_V_RRESP,
        BVALID => m_axi_db_mem_V_BVALID,
        BREADY => m_axi_db_mem_V_BREADY,
        BRESP => m_axi_db_mem_V_BRESP,
        BID => m_axi_db_mem_V_BID,
        BUSER => m_axi_db_mem_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => db_mem_V_ARVALID,
        I_ARREADY => db_mem_V_ARREADY,
        I_ARADDR => sum_cast_fu_371_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => db_mem_V_RVALID,
        I_RREADY => db_mem_V_RREADY,
        I_RDATA => db_mem_V_RDATA,
        I_RID => db_mem_V_RID,
        I_RUSER => db_mem_V_RUSER,
        I_RRESP => db_mem_V_RRESP,
        I_RLAST => db_mem_V_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => db_mem_V_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => db_mem_V_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => db_mem_V_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => db_mem_V_BRESP,
        I_BID => db_mem_V_BID,
        I_BUSER => db_mem_V_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_db_mem_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_db_mem_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    if ((ap_sig_ioackin_db_mem_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_db_mem_V_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = db_mem_V_ARREADY)) then 
                        ap_reg_ioackin_db_mem_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    current_offset_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                current_offset_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond_i_fu_381_p2))) then 
                    current_offset_preg <= tmp_8_reg_460;
                end if; 
            end if;
        end if;
    end process;


    operation_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                operation_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
                    operation_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = operation_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    operation_ap_vld_preg <= operation_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    operation_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                operation_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = operation_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    operation_preg <= operation;
                end if; 
            end if;
        end if;
    end process;


    results_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                results_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = results_out_V_1_ack_out) and (ap_const_logic_1 = results_out_V_1_vld_out))) then 
                                        results_out_V_1_sel_rd <= not(results_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    results_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                results_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = results_out_V_1_vld_in) and (ap_const_logic_1 = results_out_V_1_ack_in))) then 
                                        results_out_V_1_sel_wr <= not(results_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    results_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                results_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = results_out_V_1_vld_in) and (ap_const_logic_1 = results_out_V_1_ack_out) and (results_out_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = results_out_V_1_vld_in) and (results_out_V_1_state = ap_const_lv2_2)))) then 
                    results_out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = results_out_V_1_vld_in) and (ap_const_logic_0 = results_out_V_1_ack_out) and (results_out_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = results_out_V_1_ack_out) and (results_out_V_1_state = ap_const_lv2_1)))) then 
                    results_out_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = results_out_V_1_vld_in) and (results_out_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = results_out_V_1_ack_out) and (results_out_V_1_state = ap_const_lv2_1)) or ((results_out_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = results_out_V_1_vld_in) and (ap_const_logic_0 = results_out_V_1_ack_out))) and not(((ap_const_logic_0 = results_out_V_1_vld_in) and (ap_const_logic_1 = results_out_V_1_ack_out)))))) then 
                    results_out_V_1_state <= ap_const_lv2_3;
                else 
                    results_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    contacts_index_i_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                contacts_index_i_reg_225 <= contacts_index_reg_505;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (db_mem_V_RVALID = ap_const_logic_1))) then 
                contacts_index_i_reg_225 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    contacts_size_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_132_p2) and (ap_const_lv1_0 = icmp_fu_283_p2))) then 
                contacts_size <= tmp_5_fu_293_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_132_p2 = ap_const_lv32_2))) then 
                contacts_size <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    contacts_size_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    database_index_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((ap_const_lv1_1 = tmp_10_fu_331_p3) or (ap_const_lv1_0 = tmp_1_fu_351_p2)))) then 
                database_index_reg_202 <= database_index_1_fu_365_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_132_p2 = ap_const_lv32_1))) then 
                database_index_reg_202 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    error_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_6_fu_304_p2))) then 
                i_reg_214 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (results_out_V_1_ack_in = ap_const_logic_1))) then 
                i_reg_214 <= i_1_reg_473;
            end if; 
        end if;
    end process;

    matched_i_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                matched_i_reg_236 <= matched_fu_408_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (db_mem_V_RVALID = ap_const_logic_1))) then 
                matched_i_reg_236 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    storemerge_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                storemerge_reg_248 <= contacts_size_load_reg_435;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_132_p2) and (ap_const_lv1_0 = icmp_fu_283_p2))) then 
                storemerge_reg_248 <= tmp_5_fu_293_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))))) then
                contact_in_V_read_reg_426 <= contact_in_V;
                contacts_size_load_reg_435 <= contacts_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_block_state13_io = ap_const_boolean_0))) then
                contacts_index_reg_505 <= contacts_index_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = contacts_size_out_1_vld_in) and (ap_const_logic_0 = contacts_size_out_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = contacts_size_out_1_vld_in) and (ap_const_logic_1 = contacts_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                contacts_size_out_1_data_reg <= contacts_size_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (db_mem_V_RVALID = ap_const_logic_1))) then
                db_mem_V_addr_read_reg_497 <= db_mem_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = error_out_1_vld_in) and (ap_const_logic_0 = error_out_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = error_out_1_vld_in) and (ap_const_logic_1 = error_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                error_out_1_data_reg <= error_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_473 <= i_1_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = results_out_V_1_load_A)) then
                results_out_V_1_payload_A <= tmp_3_fu_398_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = results_out_V_1_load_B)) then
                results_out_V_1_payload_B <= tmp_3_fu_398_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_10_fu_331_p3) and (ap_const_lv1_1 = tmp_1_fu_351_p2))) then
                sum_reg_481 <= sum_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_132_p2 = ap_const_lv32_1))) then
                tmp_2_reg_444 <= tmp_2_fu_271_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_6_fu_304_p2))) then
                tmp_8_cast_reg_465 <= tmp_8_cast_fu_322_p2;
                tmp_8_reg_460 <= tmp_8_fu_317_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, operation_ap_vld_in_sig, error_out_1_ack_in, contacts_size_out_1_ack_in, results_out_V_1_ack_in, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13, exitcond_i_fu_381_p2, ap_CS_fsm_state15, db_mem_V_RVALID, operation_read_read_fu_132_p2, ap_CS_fsm_state2, icmp_fu_283_p2, ap_CS_fsm_state3, tmp_6_fu_304_p2, ap_CS_fsm_state4, tmp_10_fu_331_p3, tmp_1_fu_351_p2, ap_sig_ioackin_db_mem_V_ARREADY, ap_block_state13_io, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_132_p2) and (ap_const_lv1_0 = icmp_fu_283_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_132_p2) and (ap_const_lv1_1 = icmp_fu_283_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_132_p2 = ap_const_lv32_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_6_fu_304_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((ap_const_lv1_1 = tmp_10_fu_331_p3) or (ap_const_lv1_0 = tmp_1_fu_351_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sig_ioackin_db_mem_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (db_mem_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond_i_fu_381_p2) and (ap_block_state13_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_block_state13_io = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_fu_381_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (results_out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, operation_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig));
    end process;


    ap_block_state13_io_assign_proc : process(results_out_V_1_ack_in, exitcond_i_fu_381_p2)
    begin
                ap_block_state13_io <= ((ap_const_lv1_1 = exitcond_i_fu_381_p2) and (ap_const_logic_0 = results_out_V_1_ack_in));
    end process;


    ap_block_state18_assign_proc : process(error_out_1_ack_in, contacts_size_out_1_ack_in, results_out_V_1_ack_in)
    begin
                ap_block_state18 <= ((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in));
    end process;


    ap_done_assign_proc : process(error_out_1_ack_in, contacts_size_out_1_ack_in, results_out_V_1_ack_in, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(error_out_1_ack_in, contacts_size_out_1_ack_in, results_out_V_1_ack_in, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_db_mem_V_ARREADY_assign_proc : process(db_mem_V_ARREADY, ap_reg_ioackin_db_mem_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_db_mem_V_ARREADY)) then 
            ap_sig_ioackin_db_mem_V_ARREADY <= db_mem_V_ARREADY;
        else 
            ap_sig_ioackin_db_mem_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    contacts_V_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state2, tmp_4_fu_289_p1, tmp_i_fu_393_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            contacts_V_address0 <= tmp_i_fu_393_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            contacts_V_address0 <= tmp_4_fu_289_p1(7 - 1 downto 0);
        else 
            contacts_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    contacts_V_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state2, ap_block_state13_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_block_state13_io = ap_const_boolean_0)))) then 
            contacts_V_ce0 <= ap_const_logic_1;
        else 
            contacts_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    contacts_V_we0_assign_proc : process(operation_read_read_fu_132_p2, ap_CS_fsm_state2, icmp_fu_283_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_132_p2) and (ap_const_lv1_0 = icmp_fu_283_p2))) then 
            contacts_V_we0 <= ap_const_logic_1;
        else 
            contacts_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    contacts_index_fu_387_p2 <= std_logic_vector(unsigned(contacts_index_i_reg_225) + unsigned(ap_const_lv8_1));

    contacts_size_out_1_ack_in_assign_proc : process(contacts_size_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = contacts_size_out_1_vld_reg) or ((ap_const_logic_1 = contacts_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            contacts_size_out_1_ack_in <= ap_const_logic_1;
        else 
            contacts_size_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    contacts_size_out_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, contacts_size, operation_read_read_fu_132_p2, storemerge_reg_248, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            contacts_size_out_1_data_in <= storemerge_reg_248;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_132_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_132_p2)) and not((operation_read_read_fu_132_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_132_p2 = ap_const_lv32_2))))) then 
            contacts_size_out_1_data_in <= contacts_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_132_p2 = ap_const_lv32_2))) then 
            contacts_size_out_1_data_in <= ap_const_lv32_0;
        else 
            contacts_size_out_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    contacts_size_out_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_132_p2, ap_CS_fsm_state17)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_132_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_132_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_132_p2)) and not((operation_read_read_fu_132_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_132_p2 = ap_const_lv32_2))) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            contacts_size_out_1_vld_in <= ap_const_logic_1;
        else 
            contacts_size_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    current_offset_assign_proc : process(ap_CS_fsm_state13, exitcond_i_fu_381_p2, tmp_8_reg_460, current_offset_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond_i_fu_381_p2))) then 
            current_offset <= tmp_8_reg_460;
        else 
            current_offset <= current_offset_preg;
        end if; 
    end process;

    database_index_1_fu_365_p2 <= std_logic_vector(unsigned(database_index_reg_202) + unsigned(ap_const_lv32_20));

    db_mem_V_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_reg_ioackin_db_mem_V_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_0 = ap_reg_ioackin_db_mem_V_ARREADY))) then 
            db_mem_V_ARVALID <= ap_const_logic_1;
        else 
            db_mem_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    db_mem_V_RREADY_assign_proc : process(ap_CS_fsm_state12, db_mem_V_RVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (db_mem_V_RVALID = ap_const_logic_1))) then 
            db_mem_V_RREADY <= ap_const_logic_1;
        else 
            db_mem_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    db_mem_V_blk_n_AR_assign_proc : process(m_axi_db_mem_V_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            db_mem_V_blk_n_AR <= m_axi_db_mem_V_ARREADY;
        else 
            db_mem_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    db_mem_V_blk_n_R_assign_proc : process(m_axi_db_mem_V_RVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            db_mem_V_blk_n_R <= m_axi_db_mem_V_RVALID;
        else 
            db_mem_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    error_out_1_ack_in_assign_proc : process(error_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = error_out_1_vld_reg) or ((ap_const_logic_1 = error_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            error_out_1_ack_in <= ap_const_logic_1;
        else 
            error_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    error_out_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_132_p2, ap_CS_fsm_state2, icmp_fu_283_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_132_p2) and (ap_const_lv1_1 = icmp_fu_283_p2))) then 
            error_out_1_data_in <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_132_p2)) and not((operation_read_read_fu_132_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_132_p2 = ap_const_lv32_2)))) then 
            error_out_1_data_in <= ap_const_lv32_3;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_132_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_132_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_132_p2)))) then 
            error_out_1_data_in <= ap_const_lv32_0;
        else 
            error_out_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    error_out_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_132_p2, ap_CS_fsm_state2, icmp_fu_283_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_132_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_132_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_132_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_132_p2)) and not((operation_read_read_fu_132_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_132_p2 = ap_const_lv32_2))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_132_p2) and (ap_const_lv1_1 = icmp_fu_283_p2)))) then 
            error_out_1_vld_in <= ap_const_logic_1;
        else 
            error_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_381_p2 <= "1" when (contacts_index_i_reg_225 = ap_const_lv8_80) else "0";
    i_1_fu_339_p2 <= std_logic_vector(unsigned(i_reg_214) + unsigned(ap_const_lv6_1));
    i_cast2_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_214),32));
    icmp_fu_283_p2 <= "1" when (signed(tmp_fu_274_p4) > signed(ap_const_lv25_0)) else "0";
    matched_fu_408_p2 <= (tmp_1_i_fu_403_p2 or matched_i_reg_236);

    operation_ap_vld_in_sig_assign_proc : process(operation_ap_vld, operation_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = operation_ap_vld)) then 
            operation_ap_vld_in_sig <= operation_ap_vld;
        else 
            operation_ap_vld_in_sig <= operation_ap_vld_preg;
        end if; 
    end process;


    operation_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            operation_blk_n <= operation_ap_vld;
        else 
            operation_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    operation_in_sig_assign_proc : process(operation, operation_preg, operation_ap_vld)
    begin
        if ((ap_const_logic_1 = operation_ap_vld)) then 
            operation_in_sig <= operation;
        else 
            operation_in_sig <= operation_preg;
        end if; 
    end process;

    operation_read_read_fu_132_p2 <= operation_in_sig;
    results_out_V_1_ack_in <= results_out_V_1_state(1);
    results_out_V_1_ack_out <= results_out_V_TREADY;

    results_out_V_1_data_out_assign_proc : process(results_out_V_1_payload_A, results_out_V_1_payload_B, results_out_V_1_sel)
    begin
        if ((ap_const_logic_1 = results_out_V_1_sel)) then 
            results_out_V_1_data_out <= results_out_V_1_payload_B;
        else 
            results_out_V_1_data_out <= results_out_V_1_payload_A;
        end if; 
    end process;

    results_out_V_1_load_A <= (results_out_V_1_state_cmp_full and not(results_out_V_1_sel_wr));
    results_out_V_1_load_B <= (results_out_V_1_sel_wr and results_out_V_1_state_cmp_full);
    results_out_V_1_sel <= results_out_V_1_sel_rd;
    results_out_V_1_state_cmp_full <= '0' when (results_out_V_1_state = ap_const_lv2_1) else '1';

    results_out_V_1_vld_in_assign_proc : process(ap_CS_fsm_state13, exitcond_i_fu_381_p2, ap_block_state13_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond_i_fu_381_p2) and (ap_block_state13_io = ap_const_boolean_0))) then 
            results_out_V_1_vld_in <= ap_const_logic_1;
        else 
            results_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    results_out_V_1_vld_out <= results_out_V_1_state(0);
    results_out_V_TDATA <= results_out_V_1_data_out;

    results_out_V_TDATA_blk_n_assign_proc : process(results_out_V_1_state, ap_CS_fsm_state13, exitcond_i_fu_381_p2, ap_CS_fsm_state15)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond_i_fu_381_p2)) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            results_out_V_TDATA_blk_n <= results_out_V_1_state(1);
        else 
            results_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    results_out_V_TVALID <= results_out_V_1_state(0);
    sum_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_481),64));
    sum_fu_360_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_465) + unsigned(tmp_2_cast_fu_356_p1));
    tmp_10_fu_331_p3 <= i_reg_214(5 downto 5);
    tmp_1_fu_351_p2 <= "1" when (unsigned(tmp_s_fu_345_p2) < unsigned(db_size_in)) else "0";
    tmp_1_i_fu_403_p2 <= "1" when (contacts_V_q0 = db_mem_V_addr_read_reg_497) else "0";
    tmp_2_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_214),25));
    tmp_2_fu_271_p1 <= offset(25 - 1 downto 0);
    tmp_3_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(matched_i_reg_236),8));
        tmp_4_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(contacts_size_load_reg_435),64));

    tmp_5_fu_293_p2 <= std_logic_vector(unsigned(contacts_size_load_reg_435) + unsigned(ap_const_lv32_1));
    tmp_6_fu_304_p2 <= "1" when (unsigned(database_index_reg_202) < unsigned(db_size_in)) else "0";
        tmp_7_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(database_index_reg_202),64));

    tmp_8_cast_fu_322_p2 <= std_logic_vector(unsigned(tmp_9_fu_313_p1) + unsigned(tmp_2_reg_444));
    tmp_8_fu_317_p2 <= std_logic_vector(unsigned(offset) + unsigned(tmp_7_fu_309_p1));
    tmp_9_fu_313_p1 <= database_index_reg_202(25 - 1 downto 0);
    tmp_fu_274_p4 <= contacts_size_load_reg_435(31 downto 7);
    tmp_i_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(contacts_index_i_reg_225),64));
    tmp_s_fu_345_p2 <= std_logic_vector(unsigned(i_cast2_fu_327_p1) + unsigned(database_index_reg_202));
end behav;
