// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "reduce_add_sub.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic reduce_add_sub::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic reduce_add_sub::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> reduce_add_sub::ap_ST_fsm_state1 = "1";
const sc_lv<5> reduce_add_sub::ap_ST_fsm_state2 = "10";
const sc_lv<5> reduce_add_sub::ap_ST_fsm_state3 = "100";
const sc_lv<5> reduce_add_sub::ap_ST_fsm_state4 = "1000";
const sc_lv<5> reduce_add_sub::ap_ST_fsm_state5 = "10000";
const sc_lv<32> reduce_add_sub::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> reduce_add_sub::ap_const_lv32_1 = "1";
const sc_lv<1> reduce_add_sub::ap_const_lv1_0 = "0";
const sc_lv<1> reduce_add_sub::ap_const_lv1_1 = "1";
const sc_lv<32> reduce_add_sub::ap_const_lv32_2 = "10";
const sc_lv<32> reduce_add_sub::ap_const_lv32_3 = "11";
const sc_lv<6> reduce_add_sub::ap_const_lv6_0 = "000000";
const sc_lv<32> reduce_add_sub::ap_const_lv32_4 = "100";
const sc_lv<6> reduce_add_sub::ap_const_lv6_20 = "100000";
const sc_lv<6> reduce_add_sub::ap_const_lv6_1 = "1";
const sc_lv<32> reduce_add_sub::ap_const_lv32_1F = "11111";
const sc_lv<2> reduce_add_sub::ap_const_lv2_3 = "11";
const sc_lv<2> reduce_add_sub::ap_const_lv2_0 = "00";
const bool reduce_add_sub::ap_const_boolean_1 = true;

reduce_add_sub::reduce_add_sub(sc_module_name name) : sc_module(name), mVcdFile(0) {
    m_U = new reduce_add_sub_m("m_U");
    m_U->clk(ap_clk);
    m_U->reset(ap_rst);
    m_U->address0(m_address0);
    m_U->ce0(m_ce0);
    m_U->q0(m_q0);
    t_U = new reduce_add_sub_t("t_U");
    t_U->clk(ap_clk);
    t_U->reset(ap_rst);
    t_U->address0(t_address0);
    t_U->ce0(t_ce0);
    t_U->we0(t_we0);
    t_U->d0(t_d0);
    t_U->q0(t_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_201_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_201_p2 );

    SC_METHOD(thread_exitcond2_fu_124_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_102 );

    SC_METHOD(thread_exitcond_fu_201_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_1_reg_113 );

    SC_METHOD(thread_i_20_fu_130_p2);
    sensitive << ( i_reg_102 );

    SC_METHOD(thread_i_21_fu_207_p2);
    sensitive << ( i_1_reg_113 );

    SC_METHOD(thread_m_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_136_p1 );

    SC_METHOD(thread_m_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_mask_cast_fu_145_p1);
    sensitive << ( mask_fu_32 );

    SC_METHOD(thread_pb_1_fu_153_p2);
    sensitive << ( m_q0 );
    sensitive << ( pb_cast1_fu_149_p1 );

    SC_METHOD(thread_pb_3_cast_fu_159_p1);
    sensitive << ( pb_1_fu_153_p2 );

    SC_METHOD(thread_pb_cast1_fu_149_p1);
    sensitive << ( pb_reg_90 );

    SC_METHOD(thread_phitmp_cast_cast_fu_188_p3);
    sensitive << ( phitmp_fu_182_p2 );

    SC_METHOD(thread_phitmp_fu_182_p2);
    sensitive << ( tmp_756_fu_169_p3 );

    SC_METHOD(thread_r_v_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_136_p1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( r_v_addr_1_reg_288 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_s_fu_213_p1 );

    SC_METHOD(thread_r_v_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_r_v_d0);
    sensitive << ( r_v_q0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_740_fu_229_p2 );

    SC_METHOD(thread_r_v_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_t_address0);
    sensitive << ( tmp_reg_255 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_s_fu_213_p1 );

    SC_METHOD(thread_t_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_t_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( x_1_fu_163_p2 );

    SC_METHOD(thread_t_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_738_fu_219_p1);
    sensitive << ( t_q0 );

    SC_METHOD(thread_tmp_739_fu_223_p2);
    sensitive << ( r_v_q0 );
    sensitive << ( tmp_738_fu_219_p1 );

    SC_METHOD(thread_tmp_740_fu_229_p2);
    sensitive << ( mask_cast_reg_270 );
    sensitive << ( tmp_739_fu_223_p2 );

    SC_METHOD(thread_tmp_756_fu_169_p3);
    sensitive << ( x_1_fu_163_p2 );

    SC_METHOD(thread_tmp_fu_136_p1);
    sensitive << ( i_reg_102 );

    SC_METHOD(thread_tmp_s_fu_213_p1);
    sensitive << ( i_1_reg_113 );

    SC_METHOD(thread_x_1_fu_163_p2);
    sensitive << ( r_v_q0 );
    sensitive << ( pb_3_cast_fu_159_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_124_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_201_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "reduce_add_sub_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, r_v_address0, "(port)r_v_address0");
    sc_trace(mVcdFile, r_v_ce0, "(port)r_v_ce0");
    sc_trace(mVcdFile, r_v_we0, "(port)r_v_we0");
    sc_trace(mVcdFile, r_v_d0, "(port)r_v_d0");
    sc_trace(mVcdFile, r_v_q0, "(port)r_v_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, m_address0, "m_address0");
    sc_trace(mVcdFile, m_ce0, "m_ce0");
    sc_trace(mVcdFile, m_q0, "m_q0");
    sc_trace(mVcdFile, i_20_fu_130_p2, "i_20_fu_130_p2");
    sc_trace(mVcdFile, i_20_reg_250, "i_20_reg_250");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_136_p1, "tmp_fu_136_p1");
    sc_trace(mVcdFile, tmp_reg_255, "tmp_reg_255");
    sc_trace(mVcdFile, exitcond2_fu_124_p2, "exitcond2_fu_124_p2");
    sc_trace(mVcdFile, mask_cast_fu_145_p1, "mask_cast_fu_145_p1");
    sc_trace(mVcdFile, mask_cast_reg_270, "mask_cast_reg_270");
    sc_trace(mVcdFile, tmp_756_fu_169_p3, "tmp_756_fu_169_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_21_fu_207_p2, "i_21_fu_207_p2");
    sc_trace(mVcdFile, i_21_reg_283, "i_21_reg_283");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, r_v_addr_1_reg_288, "r_v_addr_1_reg_288");
    sc_trace(mVcdFile, exitcond_fu_201_p2, "exitcond_fu_201_p2");
    sc_trace(mVcdFile, t_address0, "t_address0");
    sc_trace(mVcdFile, t_ce0, "t_ce0");
    sc_trace(mVcdFile, t_we0, "t_we0");
    sc_trace(mVcdFile, t_d0, "t_d0");
    sc_trace(mVcdFile, t_q0, "t_q0");
    sc_trace(mVcdFile, pb_reg_90, "pb_reg_90");
    sc_trace(mVcdFile, i_reg_102, "i_reg_102");
    sc_trace(mVcdFile, i_1_reg_113, "i_1_reg_113");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_s_fu_213_p1, "tmp_s_fu_213_p1");
    sc_trace(mVcdFile, mask_fu_32, "mask_fu_32");
    sc_trace(mVcdFile, phitmp_cast_cast_fu_188_p3, "phitmp_cast_cast_fu_188_p3");
    sc_trace(mVcdFile, pb_cast1_fu_149_p1, "pb_cast1_fu_149_p1");
    sc_trace(mVcdFile, pb_1_fu_153_p2, "pb_1_fu_153_p2");
    sc_trace(mVcdFile, pb_3_cast_fu_159_p1, "pb_3_cast_fu_159_p1");
    sc_trace(mVcdFile, x_1_fu_163_p2, "x_1_fu_163_p2");
    sc_trace(mVcdFile, phitmp_fu_182_p2, "phitmp_fu_182_p2");
    sc_trace(mVcdFile, tmp_738_fu_219_p1, "tmp_738_fu_219_p1");
    sc_trace(mVcdFile, tmp_739_fu_223_p2, "tmp_739_fu_223_p2");
    sc_trace(mVcdFile, tmp_740_fu_229_p2, "tmp_740_fu_229_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

reduce_add_sub::~reduce_add_sub() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete m_U;
    delete t_U;
}

void reduce_add_sub::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_124_p2.read(), ap_const_lv1_1))) {
        i_1_reg_113 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_1_reg_113 = i_21_reg_283.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_102 = i_20_reg_250.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_102 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        pb_reg_90 = x_1_fu_163_p2.read().range(31, 31);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        pb_reg_90 = ap_const_lv1_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_20_reg_250 = i_20_fu_130_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_21_reg_283 = i_21_fu_207_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_124_p2.read(), ap_const_lv1_1))) {
        mask_cast_reg_270 = mask_cast_fu_145_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mask_fu_32 = phitmp_cast_cast_fu_188_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_201_p2.read()))) {
        r_v_addr_1_reg_288 =  (sc_lv<5>) (tmp_s_fu_213_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_124_p2.read(), ap_const_lv1_0))) {
        tmp_reg_255 = tmp_fu_136_p1.read();
    }
}

void reduce_add_sub::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void reduce_add_sub::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void reduce_add_sub::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void reduce_add_sub::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void reduce_add_sub::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void reduce_add_sub::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_201_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void reduce_add_sub::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void reduce_add_sub::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_201_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void reduce_add_sub::thread_exitcond2_fu_124_p2() {
    exitcond2_fu_124_p2 = (!i_reg_102.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_102.read() == ap_const_lv6_20);
}

void reduce_add_sub::thread_exitcond_fu_201_p2() {
    exitcond_fu_201_p2 = (!i_1_reg_113.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_113.read() == ap_const_lv6_20);
}

void reduce_add_sub::thread_i_20_fu_130_p2() {
    i_20_fu_130_p2 = (!i_reg_102.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_102.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void reduce_add_sub::thread_i_21_fu_207_p2() {
    i_21_fu_207_p2 = (!i_1_reg_113.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_1_reg_113.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void reduce_add_sub::thread_m_address0() {
    m_address0 =  (sc_lv<5>) (tmp_fu_136_p1.read());
}

void reduce_add_sub::thread_m_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        m_ce0 = ap_const_logic_1;
    } else {
        m_ce0 = ap_const_logic_0;
    }
}

void reduce_add_sub::thread_mask_cast_fu_145_p1() {
    mask_cast_fu_145_p1 = esl_sext<32,2>(mask_fu_32.read());
}

void reduce_add_sub::thread_pb_1_fu_153_p2() {
    pb_1_fu_153_p2 = (!m_q0.read().is_01() || !pb_cast1_fu_149_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(m_q0.read()) + sc_biguint<8>(pb_cast1_fu_149_p1.read()));
}

void reduce_add_sub::thread_pb_3_cast_fu_159_p1() {
    pb_3_cast_fu_159_p1 = esl_zext<32,8>(pb_1_fu_153_p2.read());
}

void reduce_add_sub::thread_pb_cast1_fu_149_p1() {
    pb_cast1_fu_149_p1 = esl_zext<8,1>(pb_reg_90.read());
}

void reduce_add_sub::thread_phitmp_cast_cast_fu_188_p3() {
    phitmp_cast_cast_fu_188_p3 = (!phitmp_fu_182_p2.read()[0].is_01())? sc_lv<2>(): ((phitmp_fu_182_p2.read()[0].to_bool())? ap_const_lv2_3: ap_const_lv2_0);
}

void reduce_add_sub::thread_phitmp_fu_182_p2() {
    phitmp_fu_182_p2 = (tmp_756_fu_169_p3.read() ^ ap_const_lv1_1);
}

void reduce_add_sub::thread_r_v_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        r_v_address0 = r_v_addr_1_reg_288.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        r_v_address0 =  (sc_lv<5>) (tmp_s_fu_213_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_v_address0 =  (sc_lv<5>) (tmp_fu_136_p1.read());
    } else {
        r_v_address0 = "XXXXX";
    }
}

void reduce_add_sub::thread_r_v_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        r_v_ce0 = ap_const_logic_1;
    } else {
        r_v_ce0 = ap_const_logic_0;
    }
}

void reduce_add_sub::thread_r_v_d0() {
    r_v_d0 = (r_v_q0.read() ^ tmp_740_fu_229_p2.read());
}

void reduce_add_sub::thread_r_v_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        r_v_we0 = ap_const_logic_1;
    } else {
        r_v_we0 = ap_const_logic_0;
    }
}

void reduce_add_sub::thread_t_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        t_address0 =  (sc_lv<5>) (tmp_s_fu_213_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        t_address0 =  (sc_lv<5>) (tmp_reg_255.read());
    } else {
        t_address0 = "XXXXX";
    }
}

void reduce_add_sub::thread_t_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        t_ce0 = ap_const_logic_1;
    } else {
        t_ce0 = ap_const_logic_0;
    }
}

void reduce_add_sub::thread_t_d0() {
    t_d0 = x_1_fu_163_p2.read().range(8-1, 0);
}

void reduce_add_sub::thread_t_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        t_we0 = ap_const_logic_1;
    } else {
        t_we0 = ap_const_logic_0;
    }
}

void reduce_add_sub::thread_tmp_738_fu_219_p1() {
    tmp_738_fu_219_p1 = esl_zext<32,8>(t_q0.read());
}

void reduce_add_sub::thread_tmp_739_fu_223_p2() {
    tmp_739_fu_223_p2 = (r_v_q0.read() ^ tmp_738_fu_219_p1.read());
}

void reduce_add_sub::thread_tmp_740_fu_229_p2() {
    tmp_740_fu_229_p2 = (tmp_739_fu_223_p2.read() & mask_cast_reg_270.read());
}

void reduce_add_sub::thread_tmp_756_fu_169_p3() {
    tmp_756_fu_169_p3 = x_1_fu_163_p2.read().range(31, 31);
}

void reduce_add_sub::thread_tmp_fu_136_p1() {
    tmp_fu_136_p1 = esl_zext<64,6>(i_reg_102.read());
}

void reduce_add_sub::thread_tmp_s_fu_213_p1() {
    tmp_s_fu_213_p1 = esl_zext<64,6>(i_1_reg_113.read());
}

void reduce_add_sub::thread_x_1_fu_163_p2() {
    x_1_fu_163_p2 = (!r_v_q0.read().is_01() || !pb_3_cast_fu_159_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(r_v_q0.read()) - sc_biguint<32>(pb_3_cast_fu_159_p1.read()));
}

void reduce_add_sub::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_124_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_201_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

