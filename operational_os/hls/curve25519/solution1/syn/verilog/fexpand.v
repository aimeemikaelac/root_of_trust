// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fexpand (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        input_r_address0,
        input_r_ce0,
        input_r_q0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [25:0] output_r_d0;
output  [4:0] input_r_address0;
output   input_r_ce0;
input  [7:0] input_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[25:0] output_r_d0;
reg[4:0] input_r_address0;
reg input_r_ce0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_528;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state31;
reg   [7:0] reg_532;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state32;
reg   [7:0] reg_536;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state20;
reg   [4:0] reg_540;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state24;
reg   [1:0] reg_544;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state5;
reg   [5:0] tmp_585_reg_795;
wire    ap_CS_fsm_state11;
reg   [2:0] tmp_587_reg_830;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state21;
reg   [6:0] tmp_589_reg_885;
wire    ap_CS_fsm_state27;
reg   [3:0] tmp_591_reg_920;
wire    ap_CS_fsm_state33;
wire   [25:0] tmp_365_fu_552_p5;
wire   [25:0] tmp_907_cast_cast_ca_fu_590_p1;
wire   [25:0] tmp_909_cast_fu_599_p5;
wire   [25:0] tmp_913_cast_cast_ca_fu_637_p1;
wire   [25:0] tmp_s_fu_642_p5;
wire   [25:0] tmp_916_cast_cast_fu_671_p1;
wire   [25:0] tmp_918_cast_fu_690_p5;
wire   [25:0] tmp_922_cast_cast_ca_fu_718_p1;
wire   [25:0] tmp_924_cast_fu_737_p5;
wire   [25:0] tmp_928_cast_cast_ca_fu_765_p1;
wire   [1:0] tmp_fu_548_p1;
wire   [2:0] tmp_873_fu_575_p1;
wire   [24:0] tmp_906_cast_fu_579_p5;
wire   [4:0] tmp_874_fu_595_p1;
wire   [5:0] tmp_875_fu_622_p1;
wire   [24:0] tmp_912_cast_fu_626_p5;
wire   [0:0] tmp_876_fu_655_p1;
wire   [24:0] tmp_371_fu_659_p5;
wire   [2:0] tmp_877_fu_686_p1;
wire   [3:0] tmp_878_fu_702_p1;
wire   [24:0] tmp_921_cast_fu_706_p5;
wire   [5:0] tmp_879_fu_733_p1;
wire   [6:0] tmp_880_fu_749_p1;
wire   [24:0] tmp_927_cast_fu_753_p5;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_528 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_532 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_536 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_540 <= {{input_r_q0[7:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_544 <= {{input_r_q0[7:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_585_reg_795 <= {{input_r_q0[7:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_587_reg_830 <= {{input_r_q0[7:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_589_reg_885 <= {{input_r_q0[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_591_reg_920 <= {{input_r_q0[7:4]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        input_r_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        input_r_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        input_r_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        input_r_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        input_r_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        input_r_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        input_r_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input_r_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        input_r_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        input_r_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        input_r_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input_r_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        input_r_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        input_r_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        input_r_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input_r_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        input_r_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        input_r_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        input_r_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        input_r_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        input_r_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_r_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        input_r_address0 = 64'd0;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state27))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        output_r_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        output_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = 64'd0;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state33))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        output_r_d0 = tmp_928_cast_cast_ca_fu_765_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        output_r_d0 = tmp_924_cast_fu_737_p5;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_d0 = tmp_922_cast_cast_ca_fu_718_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_d0 = tmp_918_cast_fu_690_p5;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        output_r_d0 = tmp_916_cast_cast_fu_671_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_d0 = tmp_s_fu_642_p5;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_d0 = tmp_913_cast_cast_ca_fu_637_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_d0 = tmp_909_cast_fu_599_p5;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_d0 = tmp_907_cast_cast_ca_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = tmp_365_fu_552_p5;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state33))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign tmp_365_fu_552_p5 = {{{{tmp_fu_548_p1}, {reg_536}}, {reg_532}}, {reg_528}};

assign tmp_371_fu_659_p5 = {{{{tmp_876_fu_655_p1}, {reg_536}}, {reg_532}}, {reg_528}};

assign tmp_873_fu_575_p1 = input_r_q0[2:0];

assign tmp_874_fu_595_p1 = input_r_q0[4:0];

assign tmp_875_fu_622_p1 = input_r_q0[5:0];

assign tmp_876_fu_655_p1 = input_r_q0[0:0];

assign tmp_877_fu_686_p1 = input_r_q0[2:0];

assign tmp_878_fu_702_p1 = input_r_q0[3:0];

assign tmp_879_fu_733_p1 = input_r_q0[5:0];

assign tmp_880_fu_749_p1 = input_r_q0[6:0];

assign tmp_906_cast_fu_579_p5 = {{{{tmp_873_fu_575_p1}, {reg_532}}, {reg_528}}, {tmp_585_reg_795}};

assign tmp_907_cast_cast_ca_fu_590_p1 = tmp_906_cast_fu_579_p5;

assign tmp_909_cast_fu_599_p5 = {{{{tmp_874_fu_595_p1}, {reg_532}}, {reg_528}}, {reg_540}};

assign tmp_912_cast_fu_626_p5 = {{{{tmp_875_fu_622_p1}, {reg_532}}, {reg_528}}, {tmp_587_reg_830}};

assign tmp_913_cast_cast_ca_fu_637_p1 = tmp_912_cast_fu_626_p5;

assign tmp_916_cast_cast_fu_671_p1 = tmp_371_fu_659_p5;

assign tmp_918_cast_fu_690_p5 = {{{{tmp_877_fu_686_p1}, {reg_532}}, {reg_528}}, {tmp_589_reg_885}};

assign tmp_921_cast_fu_706_p5 = {{{{tmp_878_fu_702_p1}, {reg_532}}, {reg_528}}, {reg_540}};

assign tmp_922_cast_cast_ca_fu_718_p1 = tmp_921_cast_fu_706_p5;

assign tmp_924_cast_fu_737_p5 = {{{{tmp_879_fu_733_p1}, {reg_532}}, {reg_528}}, {tmp_591_reg_920}};

assign tmp_927_cast_fu_753_p5 = {{{{tmp_880_fu_749_p1}, {reg_532}}, {reg_528}}, {reg_544}};

assign tmp_928_cast_cast_ca_fu_765_p1 = tmp_927_cast_fu_753_p5;

assign tmp_fu_548_p1 = input_r_q0[1:0];

assign tmp_s_fu_642_p5 = {{{{input_r_q0}, {reg_532}}, {reg_528}}, {reg_544}};

endmodule //fexpand
