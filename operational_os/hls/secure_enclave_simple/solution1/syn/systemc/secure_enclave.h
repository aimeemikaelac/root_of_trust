// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _secure_enclave_HH_
#define _secure_enclave_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "secure_enclave_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 8,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct secure_enclave : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<128> > key_out_V;
    sc_out< sc_logic > key_out_V_ap_vld;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    secure_enclave(sc_module_name name);
    SC_HAS_PROCESS(secure_enclave);

    ~secure_enclave();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    secure_enclave_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* secure_enclave_AXILiteS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<1> > secure_storage_in_V_address0;
    sc_signal< sc_logic > secure_storage_in_V_ce0;
    sc_signal< sc_lv<128> > secure_storage_in_V_q0;
    sc_signal< sc_lv<128> > pin_attempt_V;
    sc_signal< sc_lv<128> > pin_attempt_V_preg;
    sc_signal< sc_logic > pin_attempt_V_ap_vld;
    sc_signal< sc_lv<128> > pin_attempt_V_in_sig;
    sc_signal< sc_logic > pin_attempt_V_ap_vld_preg;
    sc_signal< sc_logic > pin_attempt_V_ap_vld_in_sig;
    sc_signal< sc_lv<32> > counter_in;
    sc_signal< sc_lv<32> > counter_in_preg;
    sc_signal< sc_logic > counter_in_ap_vld;
    sc_signal< sc_lv<32> > counter_in_in_sig;
    sc_signal< sc_logic > counter_in_ap_vld_preg;
    sc_signal< sc_logic > counter_in_ap_vld_in_sig;
    sc_signal< sc_lv<32> > increment_counter;
    sc_signal< sc_logic > increment_counter_ap_vld;
    sc_signal< sc_lv<32> > reset_counter;
    sc_signal< sc_logic > reset_counter_ap_vld;
    sc_signal< sc_lv<32> > ap_return;
    sc_signal< sc_logic > pin_attempt_V_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_logic > counter_in_blk_n;
    sc_signal< sc_lv<1> > p_s_phi_fu_119_p4;
    sc_signal< sc_lv<1> > or_cond_fu_139_p2;
    sc_signal< sc_lv<1> > tmp_fu_127_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_133_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< bool > ap_condition_118;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_condition_118();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_counter_in_ap_vld_in_sig();
    void thread_counter_in_blk_n();
    void thread_counter_in_in_sig();
    void thread_increment_counter();
    void thread_increment_counter_ap_vld();
    void thread_key_out_V();
    void thread_key_out_V_ap_vld();
    void thread_or_cond_fu_139_p2();
    void thread_p_s_phi_fu_119_p4();
    void thread_pin_attempt_V_ap_vld_in_sig();
    void thread_pin_attempt_V_blk_n();
    void thread_pin_attempt_V_in_sig();
    void thread_reset_counter();
    void thread_reset_counter_ap_vld();
    void thread_secure_storage_in_V_address0();
    void thread_secure_storage_in_V_ce0();
    void thread_tmp_1_fu_133_p2();
    void thread_tmp_fu_127_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
