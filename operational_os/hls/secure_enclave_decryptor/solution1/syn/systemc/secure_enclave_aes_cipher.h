// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _secure_enclave_aes_cipher_HH_
#define _secure_enclave_aes_cipher_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "secure_enclave_aes_cipher_aestest.h"
#include "secure_enclave_aes_cipher_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct secure_enclave_aes_cipher : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<128> > key_V;
    sc_in< sc_logic > key_V_ap_vld;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    secure_enclave_aes_cipher(sc_module_name name);
    SC_HAS_PROCESS(secure_enclave_aes_cipher);

    ~secure_enclave_aes_cipher();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    secure_enclave_aes_cipher_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* secure_enclave_aes_cipher_AXILiteS_s_axi_U;
    secure_enclave_aes_cipher_aestest* grp_secure_enclave_aes_cipher_aestest_fu_59;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<21> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_38;
    sc_signal< sc_lv<128> > key_V_in_sig;
    sc_signal< sc_lv<128> > key_V_preg;
    sc_signal< sc_logic > key_V_ap_vld_in_sig;
    sc_signal< sc_logic > key_V_ap_vld_preg;
    sc_signal< sc_lv<128> > data_in_V;
    sc_signal< sc_logic > data_out_V_ap_vld;
    sc_signal< sc_lv<128> > counter_V;
    sc_signal< sc_logic > key_V_blk_n;
    sc_signal< sc_lv<128> > data_in_V_read_reg_74;
    sc_signal< bool > ap_sig_102;
    sc_signal< sc_lv<128> > r_V_fu_69_p2;
    sc_signal< sc_lv<128> > r_V_reg_79;
    sc_signal< sc_logic > ap_sig_cseq_ST_st20_fsm_19;
    sc_signal< bool > ap_sig_112;
    sc_signal< sc_logic > grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start;
    sc_signal< sc_logic > grp_secure_enclave_aes_cipher_aestest_fu_59_ap_done;
    sc_signal< sc_logic > grp_secure_enclave_aes_cipher_aestest_fu_59_ap_idle;
    sc_signal< sc_logic > grp_secure_enclave_aes_cipher_aestest_fu_59_ap_ready;
    sc_signal< sc_lv<128> > grp_secure_enclave_aes_cipher_aestest_fu_59_ap_return;
    sc_signal< sc_lv<21> > ap_NS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st21_fsm_20;
    sc_signal< bool > ap_sig_1705;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<21> ap_ST_st1_fsm_0;
    static const sc_lv<21> ap_ST_st2_fsm_1;
    static const sc_lv<21> ap_ST_st3_fsm_2;
    static const sc_lv<21> ap_ST_st4_fsm_3;
    static const sc_lv<21> ap_ST_st5_fsm_4;
    static const sc_lv<21> ap_ST_st6_fsm_5;
    static const sc_lv<21> ap_ST_st7_fsm_6;
    static const sc_lv<21> ap_ST_st8_fsm_7;
    static const sc_lv<21> ap_ST_st9_fsm_8;
    static const sc_lv<21> ap_ST_st10_fsm_9;
    static const sc_lv<21> ap_ST_st11_fsm_10;
    static const sc_lv<21> ap_ST_st12_fsm_11;
    static const sc_lv<21> ap_ST_st13_fsm_12;
    static const sc_lv<21> ap_ST_st14_fsm_13;
    static const sc_lv<21> ap_ST_st15_fsm_14;
    static const sc_lv<21> ap_ST_st16_fsm_15;
    static const sc_lv<21> ap_ST_st17_fsm_16;
    static const sc_lv<21> ap_ST_st18_fsm_17;
    static const sc_lv<21> ap_ST_st19_fsm_18;
    static const sc_lv<21> ap_ST_st20_fsm_19;
    static const sc_lv<21> ap_ST_st21_fsm_20;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_14;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_102();
    void thread_ap_sig_112();
    void thread_ap_sig_1705();
    void thread_ap_sig_38();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st20_fsm_19();
    void thread_ap_sig_cseq_ST_st21_fsm_20();
    void thread_data_out_V_ap_vld();
    void thread_grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start();
    void thread_key_V_ap_vld_in_sig();
    void thread_key_V_blk_n();
    void thread_key_V_in_sig();
    void thread_r_V_fu_69_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
