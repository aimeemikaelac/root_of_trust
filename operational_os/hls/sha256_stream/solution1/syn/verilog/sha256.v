// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i-es1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.729000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=0,HLS_SYN_FF=2245,HLS_SYN_LUT=6203}" *)

module sha256 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_V_TDATA,
        stream_in_V_TVALID,
        stream_in_V_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] stream_in_V_TDATA;
input   stream_in_V_TVALID;
output   stream_in_V_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] stream_in_V_0_data_out;
wire    stream_in_V_0_vld_in;
wire    stream_in_V_0_vld_out;
wire    stream_in_V_0_ack_in;
reg    stream_in_V_0_ack_out;
reg   [7:0] stream_in_V_0_payload_A;
reg   [7:0] stream_in_V_0_payload_B;
reg    stream_in_V_0_sel_rd;
reg    stream_in_V_0_sel_wr;
wire    stream_in_V_0_sel;
wire    stream_in_V_0_load_A;
wire    stream_in_V_0_load_B;
reg   [1:0] stream_in_V_0_state;
wire    stream_in_V_0_state_cmp_full;
wire   [31:0] num_blocks;
reg   [31:0] num_blocks_preg;
wire    num_blocks_ap_vld;
reg   [31:0] num_blocks_in_sig;
reg    num_blocks_ap_vld_preg;
reg    num_blocks_ap_vld_in_sig;
reg    stream_in_V_TDATA_blk_n;
wire    ap_CS_fsm_state7;
reg    num_blocks_blk_n;
wire    ap_CS_fsm_state4;
wire   [30:0] block_counter_1_fu_292_p2;
reg   [30:0] block_counter_1_reg_331;
wire    ap_CS_fsm_state5;
wire   [6:0] data_index_1_fu_304_p2;
reg   [6:0] data_index_1_reg_339;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    grp_update_fu_256_ap_done;
reg   [5:0] data_buffer_address0;
reg    data_buffer_ce0;
reg    data_buffer_we0;
wire   [7:0] data_buffer_q0;
reg    data_buffer_ce1;
wire   [7:0] data_buffer_q1;
reg   [6:0] cipher_m_block_address0;
reg    cipher_m_block_ce0;
reg    cipher_m_block_we0;
reg   [7:0] cipher_m_block_d0;
wire   [7:0] cipher_m_block_q0;
reg   [6:0] cipher_m_block_address1;
reg    cipher_m_block_ce1;
wire   [7:0] cipher_m_block_q1;
reg   [2:0] cipher_m_h_address0;
reg    cipher_m_h_ce0;
reg    cipher_m_h_we0;
reg   [31:0] cipher_m_h_d0;
wire   [31:0] cipher_m_h_q0;
reg   [2:0] cipher_m_h_address1;
reg    cipher_m_h_ce1;
reg    cipher_m_h_we1;
reg   [31:0] cipher_m_h_d1;
wire    grp_update_fu_256_ap_start;
wire    grp_update_fu_256_ap_idle;
wire    grp_update_fu_256_ap_ready;
wire   [6:0] grp_update_fu_256_SHA256_m_block_address0;
wire    grp_update_fu_256_SHA256_m_block_ce0;
wire    grp_update_fu_256_SHA256_m_block_we0;
wire   [7:0] grp_update_fu_256_SHA256_m_block_d0;
wire   [6:0] grp_update_fu_256_SHA256_m_block_address1;
wire    grp_update_fu_256_SHA256_m_block_ce1;
wire   [2:0] grp_update_fu_256_SHA256_m_h_address0;
wire    grp_update_fu_256_SHA256_m_h_ce0;
wire    grp_update_fu_256_SHA256_m_h_we0;
wire   [31:0] grp_update_fu_256_SHA256_m_h_d0;
wire   [5:0] grp_update_fu_256_message_address0;
wire    grp_update_fu_256_message_ce0;
wire   [5:0] grp_update_fu_256_message_address1;
wire    grp_update_fu_256_message_ce1;
wire   [31:0] grp_update_fu_256_ap_return_0;
wire   [31:0] grp_update_fu_256_ap_return_1;
wire    grp_final_fu_269_ap_start;
wire    grp_final_fu_269_ap_done;
wire    grp_final_fu_269_ap_idle;
wire    grp_final_fu_269_ap_ready;
wire   [6:0] grp_final_fu_269_SHA256_m_block_address0;
wire    grp_final_fu_269_SHA256_m_block_ce0;
wire    grp_final_fu_269_SHA256_m_block_we0;
wire   [7:0] grp_final_fu_269_SHA256_m_block_d0;
wire   [6:0] grp_final_fu_269_SHA256_m_block_address1;
wire    grp_final_fu_269_SHA256_m_block_ce1;
wire   [2:0] grp_final_fu_269_SHA256_m_h_address0;
wire    grp_final_fu_269_SHA256_m_h_ce0;
wire    grp_final_fu_269_SHA256_m_h_we0;
wire   [31:0] grp_final_fu_269_SHA256_m_h_d0;
wire   [4:0] grp_final_fu_269_digest_address0;
wire    grp_final_fu_269_digest_ce0;
wire    grp_final_fu_269_digest_we0;
wire   [7:0] grp_final_fu_269_digest_d0;
reg   [31:0] cipher_m_len_reg_209;
reg   [31:0] cipher_m_tot_len_reg_221;
reg   [30:0] block_counter_reg_233;
reg   [6:0] data_index_reg_244;
wire   [0:0] tmp_fu_287_p2;
reg    ap_reg_grp_update_fu_256_ap_start;
wire   [0:0] exitcond_fu_298_p2;
reg    ap_reg_grp_final_fu_269_ap_start;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_3_fu_310_p1;
wire   [31:0] block_counter_cast_fu_283_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 stream_in_V_0_sel_rd = 1'b0;
#0 stream_in_V_0_sel_wr = 1'b0;
#0 stream_in_V_0_state = 2'd0;
#0 num_blocks_preg = 32'd0;
#0 num_blocks_ap_vld_preg = 1'b0;
#0 ap_reg_grp_update_fu_256_ap_start = 1'b0;
#0 ap_reg_grp_final_fu_269_ap_start = 1'b0;
end

sha256_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sha256_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .num_blocks(num_blocks),
    .num_blocks_ap_vld(num_blocks_ap_vld),
    .digest_out_address0(grp_final_fu_269_digest_address0),
    .digest_out_ce0(grp_final_fu_269_digest_ce0),
    .digest_out_we0(grp_final_fu_269_digest_we0),
    .digest_out_d0(grp_final_fu_269_digest_d0)
);

sha256_data_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
data_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_buffer_address0),
    .ce0(data_buffer_ce0),
    .we0(data_buffer_we0),
    .d0(stream_in_V_0_data_out),
    .q0(data_buffer_q0),
    .address1(grp_update_fu_256_message_address1),
    .ce1(data_buffer_ce1),
    .q1(data_buffer_q1)
);

sha256_cipher_m_bdEe #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
cipher_m_block_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cipher_m_block_address0),
    .ce0(cipher_m_block_ce0),
    .we0(cipher_m_block_we0),
    .d0(cipher_m_block_d0),
    .q0(cipher_m_block_q0),
    .address1(cipher_m_block_address1),
    .ce1(cipher_m_block_ce1),
    .q1(cipher_m_block_q1)
);

sha256_cipher_m_h #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
cipher_m_h_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cipher_m_h_address0),
    .ce0(cipher_m_h_ce0),
    .we0(cipher_m_h_we0),
    .d0(cipher_m_h_d0),
    .q0(cipher_m_h_q0),
    .address1(cipher_m_h_address1),
    .ce1(cipher_m_h_ce1),
    .we1(cipher_m_h_we1),
    .d1(cipher_m_h_d1)
);

update grp_update_fu_256(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_update_fu_256_ap_start),
    .ap_done(grp_update_fu_256_ap_done),
    .ap_idle(grp_update_fu_256_ap_idle),
    .ap_ready(grp_update_fu_256_ap_ready),
    .SHA256_m_tot_len_read(cipher_m_tot_len_reg_221),
    .SHA256_m_len_read(cipher_m_len_reg_209),
    .SHA256_m_block_address0(grp_update_fu_256_SHA256_m_block_address0),
    .SHA256_m_block_ce0(grp_update_fu_256_SHA256_m_block_ce0),
    .SHA256_m_block_we0(grp_update_fu_256_SHA256_m_block_we0),
    .SHA256_m_block_d0(grp_update_fu_256_SHA256_m_block_d0),
    .SHA256_m_block_q0(cipher_m_block_q0),
    .SHA256_m_block_address1(grp_update_fu_256_SHA256_m_block_address1),
    .SHA256_m_block_ce1(grp_update_fu_256_SHA256_m_block_ce1),
    .SHA256_m_block_q1(cipher_m_block_q1),
    .SHA256_m_h_address0(grp_update_fu_256_SHA256_m_h_address0),
    .SHA256_m_h_ce0(grp_update_fu_256_SHA256_m_h_ce0),
    .SHA256_m_h_we0(grp_update_fu_256_SHA256_m_h_we0),
    .SHA256_m_h_d0(grp_update_fu_256_SHA256_m_h_d0),
    .SHA256_m_h_q0(cipher_m_h_q0),
    .message_address0(grp_update_fu_256_message_address0),
    .message_ce0(grp_update_fu_256_message_ce0),
    .message_q0(data_buffer_q0),
    .message_address1(grp_update_fu_256_message_address1),
    .message_ce1(grp_update_fu_256_message_ce1),
    .message_q1(data_buffer_q1),
    .ap_return_0(grp_update_fu_256_ap_return_0),
    .ap_return_1(grp_update_fu_256_ap_return_1)
);

final grp_final_fu_269(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_final_fu_269_ap_start),
    .ap_done(grp_final_fu_269_ap_done),
    .ap_idle(grp_final_fu_269_ap_idle),
    .ap_ready(grp_final_fu_269_ap_ready),
    .SHA256_m_tot_len_read(cipher_m_tot_len_reg_221),
    .SHA256_m_len_read(cipher_m_len_reg_209),
    .SHA256_m_block_address0(grp_final_fu_269_SHA256_m_block_address0),
    .SHA256_m_block_ce0(grp_final_fu_269_SHA256_m_block_ce0),
    .SHA256_m_block_we0(grp_final_fu_269_SHA256_m_block_we0),
    .SHA256_m_block_d0(grp_final_fu_269_SHA256_m_block_d0),
    .SHA256_m_block_q0(cipher_m_block_q0),
    .SHA256_m_block_address1(grp_final_fu_269_SHA256_m_block_address1),
    .SHA256_m_block_ce1(grp_final_fu_269_SHA256_m_block_ce1),
    .SHA256_m_block_q1(cipher_m_block_q1),
    .SHA256_m_h_address0(grp_final_fu_269_SHA256_m_h_address0),
    .SHA256_m_h_ce0(grp_final_fu_269_SHA256_m_h_ce0),
    .SHA256_m_h_we0(grp_final_fu_269_SHA256_m_h_we0),
    .SHA256_m_h_d0(grp_final_fu_269_SHA256_m_h_d0),
    .SHA256_m_h_q0(cipher_m_h_q0),
    .digest_address0(grp_final_fu_269_digest_address0),
    .digest_ce0(grp_final_fu_269_digest_ce0),
    .digest_we0(grp_final_fu_269_digest_we0),
    .digest_d0(grp_final_fu_269_digest_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_final_fu_269_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_fu_287_p2))) begin
            ap_reg_grp_final_fu_269_ap_start <= 1'b1;
        end else if ((1'b1 == grp_final_fu_269_ap_ready)) begin
            ap_reg_grp_final_fu_269_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_update_fu_256_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_298_p2))) begin
            ap_reg_grp_update_fu_256_ap_start <= 1'b1;
        end else if ((1'b1 == grp_update_fu_256_ap_ready)) begin
            ap_reg_grp_update_fu_256_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        num_blocks_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (grp_final_fu_269_ap_done == 1'b1))) begin
            num_blocks_ap_vld_preg <= 1'b0;
        end else if ((~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == num_blocks_ap_vld))) begin
            num_blocks_ap_vld_preg <= num_blocks_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        num_blocks_preg <= 32'd0;
    end else begin
        if ((~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) & (1'b1 == num_blocks_ap_vld))) begin
            num_blocks_preg <= num_blocks;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_0_ack_out) & (1'b1 == stream_in_V_0_vld_out))) begin
            stream_in_V_0_sel_rd <= ~stream_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == stream_in_V_0_vld_in) & (1'b1 == stream_in_V_0_ack_in))) begin
            stream_in_V_0_sel_wr <= ~stream_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == stream_in_V_0_vld_in) & (1'b1 == stream_in_V_0_ack_out) & (stream_in_V_0_state == 2'd3)) | ((1'b0 == stream_in_V_0_vld_in) & (stream_in_V_0_state == 2'd2)))) begin
            stream_in_V_0_state <= 2'd2;
        end else if ((((1'b1 == stream_in_V_0_vld_in) & (1'b0 == stream_in_V_0_ack_out) & (stream_in_V_0_state == 2'd3)) | ((1'b0 == stream_in_V_0_ack_out) & (stream_in_V_0_state == 2'd1)))) begin
            stream_in_V_0_state <= 2'd1;
        end else if ((((1'b1 == stream_in_V_0_vld_in) & (stream_in_V_0_state == 2'd2)) | ((1'b1 == stream_in_V_0_ack_out) & (stream_in_V_0_state == 2'd1)) | ((stream_in_V_0_state == 2'd3) & ~((1'b1 == stream_in_V_0_vld_in) & (1'b0 == stream_in_V_0_ack_out)) & ~((1'b0 == stream_in_V_0_vld_in) & (1'b1 == stream_in_V_0_ack_out))))) begin
            stream_in_V_0_state <= 2'd3;
        end else begin
            stream_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_update_fu_256_ap_done == 1'b1))) begin
        block_counter_reg_233 <= block_counter_1_reg_331;
    end else if (((1'b1 == ap_CS_fsm_state4) & (num_blocks_ap_vld_in_sig == 1'b1))) begin
        block_counter_reg_233 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_update_fu_256_ap_done == 1'b1))) begin
        cipher_m_len_reg_209 <= grp_update_fu_256_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (num_blocks_ap_vld_in_sig == 1'b1))) begin
        cipher_m_len_reg_209 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_update_fu_256_ap_done == 1'b1))) begin
        cipher_m_tot_len_reg_221 <= grp_update_fu_256_ap_return_0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (num_blocks_ap_vld_in_sig == 1'b1))) begin
        cipher_m_tot_len_reg_221 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_fu_287_p2))) begin
        data_index_reg_244 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (stream_in_V_0_vld_out == 1'b1))) begin
        data_index_reg_244 <= data_index_1_reg_339;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_counter_1_reg_331 <= block_counter_1_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        data_index_1_reg_339 <= data_index_1_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_0_load_A)) begin
        stream_in_V_0_payload_A <= stream_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == stream_in_V_0_load_B)) begin
        stream_in_V_0_payload_B <= stream_in_V_TDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (grp_final_fu_269_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (grp_final_fu_269_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_block_address0 = grp_final_fu_269_SHA256_m_block_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_block_address0 = grp_update_fu_256_SHA256_m_block_address0;
    end else begin
        cipher_m_block_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_block_address1 = grp_final_fu_269_SHA256_m_block_address1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_block_address1 = grp_update_fu_256_SHA256_m_block_address1;
    end else begin
        cipher_m_block_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_block_ce0 = grp_final_fu_269_SHA256_m_block_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_block_ce0 = grp_update_fu_256_SHA256_m_block_ce0;
    end else begin
        cipher_m_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_block_ce1 = grp_final_fu_269_SHA256_m_block_ce1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_block_ce1 = grp_update_fu_256_SHA256_m_block_ce1;
    end else begin
        cipher_m_block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_block_d0 = grp_final_fu_269_SHA256_m_block_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_block_d0 = grp_update_fu_256_SHA256_m_block_d0;
    end else begin
        cipher_m_block_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_block_we0 = grp_final_fu_269_SHA256_m_block_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_block_we0 = grp_update_fu_256_SHA256_m_block_we0;
    end else begin
        cipher_m_block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_m_h_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_m_h_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_m_h_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cipher_m_h_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_h_address0 = grp_final_fu_269_SHA256_m_h_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_h_address0 = grp_update_fu_256_SHA256_m_h_address0;
    end else begin
        cipher_m_h_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_m_h_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_m_h_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_m_h_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cipher_m_h_address1 = 64'd1;
    end else begin
        cipher_m_h_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (num_blocks_ap_vld_in_sig == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cipher_m_h_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_h_ce0 = grp_final_fu_269_SHA256_m_h_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_h_ce0 = grp_update_fu_256_SHA256_m_h_ce0;
    end else begin
        cipher_m_h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (num_blocks_ap_vld_in_sig == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cipher_m_h_ce1 = 1'b1;
    end else begin
        cipher_m_h_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_m_h_d0 = 32'd528734635;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_m_h_d0 = 32'd1359893119;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_m_h_d0 = 32'd1013904242;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cipher_m_h_d0 = 32'd1779033703;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_h_d0 = grp_final_fu_269_SHA256_m_h_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_h_d0 = grp_update_fu_256_SHA256_m_h_d0;
    end else begin
        cipher_m_h_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cipher_m_h_d1 = 32'd1541459225;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cipher_m_h_d1 = 32'd2600822924;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cipher_m_h_d1 = 32'd2773480762;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cipher_m_h_d1 = 32'd3144134277;
    end else begin
        cipher_m_h_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (num_blocks_ap_vld_in_sig == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cipher_m_h_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        cipher_m_h_we0 = grp_final_fu_269_SHA256_m_h_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        cipher_m_h_we0 = grp_update_fu_256_SHA256_m_h_we0;
    end else begin
        cipher_m_h_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (num_blocks_ap_vld_in_sig == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        cipher_m_h_we1 = 1'b1;
    end else begin
        cipher_m_h_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_buffer_address0 = tmp_3_fu_310_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_buffer_address0 = grp_update_fu_256_message_address0;
    end else begin
        data_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (stream_in_V_0_vld_out == 1'b1))) begin
        data_buffer_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        data_buffer_ce0 = grp_update_fu_256_message_ce0;
    end else begin
        data_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        data_buffer_ce1 = grp_update_fu_256_message_ce1;
    end else begin
        data_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (stream_in_V_0_vld_out == 1'b1))) begin
        data_buffer_we0 = 1'b1;
    end else begin
        data_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == num_blocks_ap_vld)) begin
        num_blocks_ap_vld_in_sig = num_blocks_ap_vld;
    end else begin
        num_blocks_ap_vld_in_sig = num_blocks_ap_vld_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        num_blocks_blk_n = num_blocks_ap_vld;
    end else begin
        num_blocks_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == num_blocks_ap_vld)) begin
        num_blocks_in_sig = num_blocks;
    end else begin
        num_blocks_in_sig = num_blocks_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (stream_in_V_0_vld_out == 1'b1))) begin
        stream_in_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == stream_in_V_0_sel)) begin
        stream_in_V_0_data_out = stream_in_V_0_payload_B;
    end else begin
        stream_in_V_0_data_out = stream_in_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        stream_in_V_TDATA_blk_n = stream_in_V_0_state[1'd0];
    end else begin
        stream_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (num_blocks_ap_vld_in_sig == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_fu_287_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_298_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (stream_in_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_update_fu_256_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_final_fu_269_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign block_counter_1_fu_292_p2 = (block_counter_reg_233 + 31'd1);

assign block_counter_cast_fu_283_p1 = block_counter_reg_233;

assign data_index_1_fu_304_p2 = (data_index_reg_244 + 7'd1);

assign exitcond_fu_298_p2 = ((data_index_reg_244 == 7'd64) ? 1'b1 : 1'b0);

assign grp_final_fu_269_ap_start = ap_reg_grp_final_fu_269_ap_start;

assign grp_update_fu_256_ap_start = ap_reg_grp_update_fu_256_ap_start;

assign stream_in_V_0_ack_in = stream_in_V_0_state[1'd1];

assign stream_in_V_0_load_A = (stream_in_V_0_state_cmp_full & ~stream_in_V_0_sel_wr);

assign stream_in_V_0_load_B = (stream_in_V_0_sel_wr & stream_in_V_0_state_cmp_full);

assign stream_in_V_0_sel = stream_in_V_0_sel_rd;

assign stream_in_V_0_state_cmp_full = ((stream_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_0_vld_in = stream_in_V_TVALID;

assign stream_in_V_0_vld_out = stream_in_V_0_state[1'd0];

assign stream_in_V_TREADY = stream_in_V_0_state[1'd1];

assign tmp_3_fu_310_p1 = data_index_reg_244;

assign tmp_fu_287_p2 = (($signed(block_counter_cast_fu_283_p1) < $signed(num_blocks_in_sig)) ? 1'b1 : 1'b0);

endmodule //sha256
