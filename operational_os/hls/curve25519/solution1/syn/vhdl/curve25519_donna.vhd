-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity curve25519_donna is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of curve25519_donna is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "curve25519_donna,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.111743,HLS_SYN_LAT=502158,HLS_SYN_TPT=none,HLS_SYN_MEM=95,HLS_SYN_DSP=39,HLS_SYN_FF=34322,HLS_SYN_LUT=35276}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal mypublic_in_ce0 : STD_LOGIC;
    signal mypublic_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal basepoint_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mypublic_out_ce0 : STD_LOGIC;
    signal mypublic_out_we0 : STD_LOGIC;
    signal secret_out_ce0 : STD_LOGIC;
    signal secret_out_we0 : STD_LOGIC;
    signal basepoint_out_ce0 : STD_LOGIC;
    signal basepoint_out_we0 : STD_LOGIC;
    signal indvarinc_fu_292_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_14_fu_315_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_14_reg_378 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_827_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_827_reg_383 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_addr_2_reg_393 : STD_LOGIC_VECTOR (4 downto 0);
    signal bp_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bp_ce0 : STD_LOGIC;
    signal bp_we0 : STD_LOGIC;
    signal bp_q0 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_ce0 : STD_LOGIC;
    signal x_we0 : STD_LOGIC;
    signal x_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal z_ce0 : STD_LOGIC;
    signal z_we0 : STD_LOGIC;
    signal z_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal z_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zmone_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zmone_ce0 : STD_LOGIC;
    signal zmone_we0 : STD_LOGIC;
    signal zmone_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal e_ce0 : STD_LOGIC;
    signal e_we0 : STD_LOGIC;
    signal e_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal e_ce1 : STD_LOGIC;
    signal e_we1 : STD_LOGIC;
    signal e_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mypublic_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mypublic_ce0 : STD_LOGIC;
    signal mypublic_we0 : STD_LOGIC;
    signal mypublic_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mypublic_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal secret_ce0 : STD_LOGIC;
    signal secret_we0 : STD_LOGIC;
    signal secret_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal basepoint_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal basepoint_ce0 : STD_LOGIC;
    signal basepoint_we0 : STD_LOGIC;
    signal basepoint_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_cmult_fu_216_ap_start : STD_LOGIC;
    signal grp_cmult_fu_216_ap_done : STD_LOGIC;
    signal grp_cmult_fu_216_ap_idle : STD_LOGIC;
    signal grp_cmult_fu_216_ap_ready : STD_LOGIC;
    signal grp_cmult_fu_216_resultx_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cmult_fu_216_resultx_ce0 : STD_LOGIC;
    signal grp_cmult_fu_216_resultx_we0 : STD_LOGIC;
    signal grp_cmult_fu_216_resultx_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cmult_fu_216_resultz_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cmult_fu_216_resultz_ce0 : STD_LOGIC;
    signal grp_cmult_fu_216_resultz_we0 : STD_LOGIC;
    signal grp_cmult_fu_216_resultz_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cmult_fu_216_n_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_cmult_fu_216_n_ce0 : STD_LOGIC;
    signal grp_cmult_fu_216_q_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cmult_fu_216_q_ce0 : STD_LOGIC;
    signal grp_crecip_fu_234_ap_start : STD_LOGIC;
    signal grp_crecip_fu_234_ap_done : STD_LOGIC;
    signal grp_crecip_fu_234_ap_idle : STD_LOGIC;
    signal grp_crecip_fu_234_ap_ready : STD_LOGIC;
    signal grp_crecip_fu_234_out_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_crecip_fu_234_out_r_ce0 : STD_LOGIC;
    signal grp_crecip_fu_234_out_r_we0 : STD_LOGIC;
    signal grp_crecip_fu_234_out_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_crecip_fu_234_z_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_crecip_fu_234_z_ce0 : STD_LOGIC;
    signal grp_fmul_2_fu_249_ap_start : STD_LOGIC;
    signal grp_fmul_2_fu_249_ap_done : STD_LOGIC;
    signal grp_fmul_2_fu_249_ap_idle : STD_LOGIC;
    signal grp_fmul_2_fu_249_ap_ready : STD_LOGIC;
    signal grp_fmul_2_fu_249_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fmul_2_fu_249_output_r_ce0 : STD_LOGIC;
    signal grp_fmul_2_fu_249_output_r_we0 : STD_LOGIC;
    signal grp_fmul_2_fu_249_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fmul_2_fu_249_in_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fmul_2_fu_249_in_r_ce0 : STD_LOGIC;
    signal grp_fmul_2_fu_249_in2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fmul_2_fu_249_in2_ce0 : STD_LOGIC;
    signal grp_fcontract_fu_256_ap_start : STD_LOGIC;
    signal grp_fcontract_fu_256_ap_done : STD_LOGIC;
    signal grp_fcontract_fu_256_ap_idle : STD_LOGIC;
    signal grp_fcontract_fu_256_ap_ready : STD_LOGIC;
    signal grp_fcontract_fu_256_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fcontract_fu_256_output_r_ce0 : STD_LOGIC;
    signal grp_fcontract_fu_256_output_r_we0 : STD_LOGIC;
    signal grp_fcontract_fu_256_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fcontract_fu_256_input_limbs_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fcontract_fu_256_input_limbs_ce0 : STD_LOGIC;
    signal grp_fexpand_fu_262_ap_start : STD_LOGIC;
    signal grp_fexpand_fu_262_ap_done : STD_LOGIC;
    signal grp_fexpand_fu_262_ap_idle : STD_LOGIC;
    signal grp_fexpand_fu_262_ap_ready : STD_LOGIC;
    signal grp_fexpand_fu_262_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fexpand_fu_262_output_r_ce0 : STD_LOGIC;
    signal grp_fexpand_fu_262_output_r_we0 : STD_LOGIC;
    signal grp_fexpand_fu_262_output_r_d0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fexpand_fu_262_input_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fexpand_fu_262_input_r_ce0 : STD_LOGIC;
    signal grp_p_memcpy_char_fu_268_ap_start : STD_LOGIC;
    signal grp_p_memcpy_char_fu_268_ap_done : STD_LOGIC;
    signal grp_p_memcpy_char_fu_268_ap_idle : STD_LOGIC;
    signal grp_p_memcpy_char_fu_268_ap_ready : STD_LOGIC;
    signal grp_p_memcpy_char_fu_268_dst_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_p_memcpy_char_fu_268_dst_ce0 : STD_LOGIC;
    signal grp_p_memcpy_char_fu_268_dst_we0 : STD_LOGIC;
    signal grp_p_memcpy_char_fu_268_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_memcpy_char_fu_268_src_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_p_memcpy_char_fu_268_src_ce0 : STD_LOGIC;
    signal grp_p_memcpy_char_fu_268_src_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_memcpy_char_fu_275_ap_start : STD_LOGIC;
    signal grp_p_memcpy_char_fu_275_ap_done : STD_LOGIC;
    signal grp_p_memcpy_char_fu_275_ap_idle : STD_LOGIC;
    signal grp_p_memcpy_char_fu_275_ap_ready : STD_LOGIC;
    signal grp_p_memcpy_char_fu_275_dst_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_p_memcpy_char_fu_275_dst_ce0 : STD_LOGIC;
    signal grp_p_memcpy_char_fu_275_dst_we0 : STD_LOGIC;
    signal grp_p_memcpy_char_fu_275_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_memcpy_char_fu_275_src_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_p_memcpy_char_fu_275_src_ce0 : STD_LOGIC;
    signal grp_p_memcpy_char_fu_282_ap_start : STD_LOGIC;
    signal grp_p_memcpy_char_fu_282_ap_done : STD_LOGIC;
    signal grp_p_memcpy_char_fu_282_ap_idle : STD_LOGIC;
    signal grp_p_memcpy_char_fu_282_ap_ready : STD_LOGIC;
    signal grp_p_memcpy_char_fu_282_dst_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_p_memcpy_char_fu_282_dst_ce0 : STD_LOGIC;
    signal grp_p_memcpy_char_fu_282_dst_we0 : STD_LOGIC;
    signal grp_p_memcpy_char_fu_282_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_memcpy_char_fu_282_src_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_p_memcpy_char_fu_282_src_ce0 : STD_LOGIC;
    signal invdar_reg_194 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_205 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_reg_grp_cmult_fu_216_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_reg_grp_crecip_fu_234_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_reg_grp_fmul_2_fu_249_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_reg_grp_fcontract_fu_256_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_reg_grp_fexpand_fu_262_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_reg_grp_p_memcpy_char_fu_268_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_reg_grp_p_memcpy_char_fu_275_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_p_memcpy_char_fu_282_ap_start : STD_LOGIC := '0';
    signal tmp_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal tmp_825_fu_336_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1063_cast_fu_357_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_629_fu_326_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_925_fu_345_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_826_fu_349_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component cmult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        resultx_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        resultx_ce0 : OUT STD_LOGIC;
        resultx_we0 : OUT STD_LOGIC;
        resultx_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        resultz_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        resultz_ce0 : OUT STD_LOGIC;
        resultz_we0 : OUT STD_LOGIC;
        resultz_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        n_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        n_ce0 : OUT STD_LOGIC;
        n_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        q_ce0 : OUT STD_LOGIC;
        q_q0 : IN STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component crecip IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        z_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        z_ce0 : OUT STD_LOGIC;
        z_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fmul_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in2_ce0 : OUT STD_LOGIC;
        in2_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fcontract IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_limbs_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_limbs_ce0 : OUT STD_LOGIC;
        input_limbs_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fexpand IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component p_memcpy_char IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component curve25519_donna_bp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (25 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component curve25519_donna_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component curve25519_donna_z IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component curve25519_donna_e IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component curve25519_donna_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component curve25519_donna_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        mypublic_in_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        mypublic_in_ce0 : IN STD_LOGIC;
        mypublic_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        secret_in_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        secret_in_ce0 : IN STD_LOGIC;
        secret_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        basepoint_in_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        basepoint_in_ce0 : IN STD_LOGIC;
        basepoint_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        mypublic_out_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        mypublic_out_ce0 : IN STD_LOGIC;
        mypublic_out_we0 : IN STD_LOGIC;
        mypublic_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        secret_out_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        secret_out_ce0 : IN STD_LOGIC;
        secret_out_we0 : IN STD_LOGIC;
        secret_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        basepoint_out_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        basepoint_out_ce0 : IN STD_LOGIC;
        basepoint_out_we0 : IN STD_LOGIC;
        basepoint_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    curve25519_donna_AXILiteS_s_axi_U : component curve25519_donna_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_0,
        mypublic_in_address0 => grp_p_memcpy_char_fu_268_src_address0,
        mypublic_in_ce0 => mypublic_in_ce0,
        mypublic_in_q0 => mypublic_in_q0,
        secret_in_address0 => grp_p_memcpy_char_fu_275_src_address0,
        secret_in_ce0 => grp_p_memcpy_char_fu_275_src_ce0,
        secret_in_q0 => secret_in_q0,
        basepoint_in_address0 => grp_p_memcpy_char_fu_282_src_address0,
        basepoint_in_ce0 => grp_p_memcpy_char_fu_282_src_ce0,
        basepoint_in_q0 => basepoint_in_q0,
        mypublic_out_address0 => grp_p_memcpy_char_fu_268_dst_address0,
        mypublic_out_ce0 => mypublic_out_ce0,
        mypublic_out_we0 => mypublic_out_we0,
        mypublic_out_d0 => grp_p_memcpy_char_fu_268_dst_d0,
        secret_out_address0 => grp_p_memcpy_char_fu_268_dst_address0,
        secret_out_ce0 => secret_out_ce0,
        secret_out_we0 => secret_out_we0,
        secret_out_d0 => grp_p_memcpy_char_fu_268_dst_d0,
        basepoint_out_address0 => grp_p_memcpy_char_fu_268_dst_address0,
        basepoint_out_ce0 => basepoint_out_ce0,
        basepoint_out_we0 => basepoint_out_we0,
        basepoint_out_d0 => grp_p_memcpy_char_fu_268_dst_d0);

    bp_U : component curve25519_donna_bp
    generic map (
        DataWidth => 26,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bp_address0,
        ce0 => bp_ce0,
        we0 => bp_we0,
        d0 => grp_fexpand_fu_262_output_r_d0,
        q0 => bp_q0);

    x_U : component curve25519_donna_x
    generic map (
        DataWidth => 64,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x_address0,
        ce0 => x_ce0,
        we0 => x_we0,
        d0 => grp_cmult_fu_216_resultx_d0,
        q0 => x_q0);

    z_U : component curve25519_donna_z
    generic map (
        DataWidth => 64,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => z_address0,
        ce0 => z_ce0,
        we0 => z_we0,
        d0 => z_d0,
        q0 => z_q0);

    zmone_U : component curve25519_donna_x
    generic map (
        DataWidth => 64,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => zmone_address0,
        ce0 => zmone_ce0,
        we0 => zmone_we0,
        d0 => grp_crecip_fu_234_out_r_d0,
        q0 => zmone_q0);

    e_U : component curve25519_donna_e
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => e_address0,
        ce0 => e_ce0,
        we0 => e_we0,
        d0 => e_d0,
        q0 => e_q0,
        address1 => e_address1,
        ce1 => e_ce1,
        we1 => e_we1,
        d1 => e_d1,
        q1 => e_q1);

    mypublic_U : component curve25519_donna_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mypublic_address0,
        ce0 => mypublic_ce0,
        we0 => mypublic_we0,
        d0 => mypublic_d0,
        q0 => mypublic_q0);

    secret_U : component curve25519_donna_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => secret_address0,
        ce0 => secret_ce0,
        we0 => secret_we0,
        d0 => grp_p_memcpy_char_fu_275_dst_d0,
        q0 => secret_q0);

    basepoint_U : component curve25519_donna_dEe
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => basepoint_address0,
        ce0 => basepoint_ce0,
        we0 => basepoint_we0,
        d0 => grp_p_memcpy_char_fu_282_dst_d0,
        q0 => basepoint_q0);

    grp_cmult_fu_216 : component cmult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_cmult_fu_216_ap_start,
        ap_done => grp_cmult_fu_216_ap_done,
        ap_idle => grp_cmult_fu_216_ap_idle,
        ap_ready => grp_cmult_fu_216_ap_ready,
        resultx_address0 => grp_cmult_fu_216_resultx_address0,
        resultx_ce0 => grp_cmult_fu_216_resultx_ce0,
        resultx_we0 => grp_cmult_fu_216_resultx_we0,
        resultx_d0 => grp_cmult_fu_216_resultx_d0,
        resultz_address0 => grp_cmult_fu_216_resultz_address0,
        resultz_ce0 => grp_cmult_fu_216_resultz_ce0,
        resultz_we0 => grp_cmult_fu_216_resultz_we0,
        resultz_d0 => grp_cmult_fu_216_resultz_d0,
        n_address0 => grp_cmult_fu_216_n_address0,
        n_ce0 => grp_cmult_fu_216_n_ce0,
        n_q0 => e_q0,
        q_address0 => grp_cmult_fu_216_q_address0,
        q_ce0 => grp_cmult_fu_216_q_ce0,
        q_q0 => bp_q0);

    grp_crecip_fu_234 : component crecip
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crecip_fu_234_ap_start,
        ap_done => grp_crecip_fu_234_ap_done,
        ap_idle => grp_crecip_fu_234_ap_idle,
        ap_ready => grp_crecip_fu_234_ap_ready,
        out_r_address0 => grp_crecip_fu_234_out_r_address0,
        out_r_ce0 => grp_crecip_fu_234_out_r_ce0,
        out_r_we0 => grp_crecip_fu_234_out_r_we0,
        out_r_d0 => grp_crecip_fu_234_out_r_d0,
        z_address0 => grp_crecip_fu_234_z_address0,
        z_ce0 => grp_crecip_fu_234_z_ce0,
        z_q0 => z_q0);

    grp_fmul_2_fu_249 : component fmul_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fmul_2_fu_249_ap_start,
        ap_done => grp_fmul_2_fu_249_ap_done,
        ap_idle => grp_fmul_2_fu_249_ap_idle,
        ap_ready => grp_fmul_2_fu_249_ap_ready,
        output_r_address0 => grp_fmul_2_fu_249_output_r_address0,
        output_r_ce0 => grp_fmul_2_fu_249_output_r_ce0,
        output_r_we0 => grp_fmul_2_fu_249_output_r_we0,
        output_r_d0 => grp_fmul_2_fu_249_output_r_d0,
        in_r_address0 => grp_fmul_2_fu_249_in_r_address0,
        in_r_ce0 => grp_fmul_2_fu_249_in_r_ce0,
        in_r_q0 => x_q0,
        in2_address0 => grp_fmul_2_fu_249_in2_address0,
        in2_ce0 => grp_fmul_2_fu_249_in2_ce0,
        in2_q0 => zmone_q0);

    grp_fcontract_fu_256 : component fcontract
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fcontract_fu_256_ap_start,
        ap_done => grp_fcontract_fu_256_ap_done,
        ap_idle => grp_fcontract_fu_256_ap_idle,
        ap_ready => grp_fcontract_fu_256_ap_ready,
        output_r_address0 => grp_fcontract_fu_256_output_r_address0,
        output_r_ce0 => grp_fcontract_fu_256_output_r_ce0,
        output_r_we0 => grp_fcontract_fu_256_output_r_we0,
        output_r_d0 => grp_fcontract_fu_256_output_r_d0,
        input_limbs_address0 => grp_fcontract_fu_256_input_limbs_address0,
        input_limbs_ce0 => grp_fcontract_fu_256_input_limbs_ce0,
        input_limbs_q0 => z_q0);

    grp_fexpand_fu_262 : component fexpand
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fexpand_fu_262_ap_start,
        ap_done => grp_fexpand_fu_262_ap_done,
        ap_idle => grp_fexpand_fu_262_ap_idle,
        ap_ready => grp_fexpand_fu_262_ap_ready,
        output_r_address0 => grp_fexpand_fu_262_output_r_address0,
        output_r_ce0 => grp_fexpand_fu_262_output_r_ce0,
        output_r_we0 => grp_fexpand_fu_262_output_r_we0,
        output_r_d0 => grp_fexpand_fu_262_output_r_d0,
        input_r_address0 => grp_fexpand_fu_262_input_r_address0,
        input_r_ce0 => grp_fexpand_fu_262_input_r_ce0,
        input_r_q0 => basepoint_q0);

    grp_p_memcpy_char_fu_268 : component p_memcpy_char
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_p_memcpy_char_fu_268_ap_start,
        ap_done => grp_p_memcpy_char_fu_268_ap_done,
        ap_idle => grp_p_memcpy_char_fu_268_ap_idle,
        ap_ready => grp_p_memcpy_char_fu_268_ap_ready,
        dst_address0 => grp_p_memcpy_char_fu_268_dst_address0,
        dst_ce0 => grp_p_memcpy_char_fu_268_dst_ce0,
        dst_we0 => grp_p_memcpy_char_fu_268_dst_we0,
        dst_d0 => grp_p_memcpy_char_fu_268_dst_d0,
        src_address0 => grp_p_memcpy_char_fu_268_src_address0,
        src_ce0 => grp_p_memcpy_char_fu_268_src_ce0,
        src_q0 => grp_p_memcpy_char_fu_268_src_q0);

    grp_p_memcpy_char_fu_275 : component p_memcpy_char
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_p_memcpy_char_fu_275_ap_start,
        ap_done => grp_p_memcpy_char_fu_275_ap_done,
        ap_idle => grp_p_memcpy_char_fu_275_ap_idle,
        ap_ready => grp_p_memcpy_char_fu_275_ap_ready,
        dst_address0 => grp_p_memcpy_char_fu_275_dst_address0,
        dst_ce0 => grp_p_memcpy_char_fu_275_dst_ce0,
        dst_we0 => grp_p_memcpy_char_fu_275_dst_we0,
        dst_d0 => grp_p_memcpy_char_fu_275_dst_d0,
        src_address0 => grp_p_memcpy_char_fu_275_src_address0,
        src_ce0 => grp_p_memcpy_char_fu_275_src_ce0,
        src_q0 => secret_in_q0);

    grp_p_memcpy_char_fu_282 : component p_memcpy_char
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_p_memcpy_char_fu_282_ap_start,
        ap_done => grp_p_memcpy_char_fu_282_ap_done,
        ap_idle => grp_p_memcpy_char_fu_282_ap_idle,
        ap_ready => grp_p_memcpy_char_fu_282_ap_ready,
        dst_address0 => grp_p_memcpy_char_fu_282_dst_address0,
        dst_ce0 => grp_p_memcpy_char_fu_282_dst_ce0,
        dst_we0 => grp_p_memcpy_char_fu_282_dst_we0,
        dst_d0 => grp_p_memcpy_char_fu_282_dst_d0,
        src_address0 => grp_p_memcpy_char_fu_282_src_address0,
        src_ce0 => grp_p_memcpy_char_fu_282_src_ce0,
        src_q0 => basepoint_in_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_cmult_fu_216_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_cmult_fu_216_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_reg_grp_cmult_fu_216_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_cmult_fu_216_ap_ready)) then 
                    ap_reg_grp_cmult_fu_216_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_crecip_fu_234_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_crecip_fu_234_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_reg_grp_crecip_fu_234_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_crecip_fu_234_ap_ready)) then 
                    ap_reg_grp_crecip_fu_234_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fcontract_fu_256_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_fcontract_fu_256_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_reg_grp_fcontract_fu_256_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fcontract_fu_256_ap_ready)) then 
                    ap_reg_grp_fcontract_fu_256_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fexpand_fu_262_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_fexpand_fu_262_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_309_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_fexpand_fu_262_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fexpand_fu_262_ap_ready)) then 
                    ap_reg_grp_fexpand_fu_262_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fmul_2_fu_249_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_fmul_2_fu_249_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_reg_grp_fmul_2_fu_249_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fmul_2_fu_249_ap_ready)) then 
                    ap_reg_grp_fmul_2_fu_249_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_p_memcpy_char_fu_268_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_p_memcpy_char_fu_268_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_309_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_s_fu_303_p2)) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_reg_grp_p_memcpy_char_fu_268_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_p_memcpy_char_fu_268_ap_ready)) then 
                    ap_reg_grp_p_memcpy_char_fu_268_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_p_memcpy_char_fu_275_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_p_memcpy_char_fu_275_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_s_fu_303_p2))) then 
                    ap_reg_grp_p_memcpy_char_fu_275_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_p_memcpy_char_fu_275_ap_ready)) then 
                    ap_reg_grp_p_memcpy_char_fu_275_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_p_memcpy_char_fu_282_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_p_memcpy_char_fu_282_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_s_fu_303_p2))) then 
                    ap_reg_grp_p_memcpy_char_fu_282_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_p_memcpy_char_fu_282_ap_ready)) then 
                    ap_reg_grp_p_memcpy_char_fu_282_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_205 <= i_14_reg_378;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_on_subcall_done = ap_const_boolean_0))) then 
                i_reg_205 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    invdar_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_s_fu_303_p2))) then 
                invdar_reg_194 <= indvarinc_fu_292_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_194 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_14_reg_378 <= i_14_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_309_p2 = ap_const_lv1_0))) then
                    tmp_827_reg_383(5 downto 0) <= tmp_827_fu_321_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_827_reg_383(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond_fu_309_p2, grp_crecip_fu_234_ap_done, grp_fmul_2_fu_249_ap_done, grp_fcontract_fu_256_ap_done, grp_p_memcpy_char_fu_268_ap_done, tmp_s_fu_303_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_block_state6_on_subcall_done, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_s_fu_303_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_309_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_block_state8_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_crecip_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_fmul_2_fu_249_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fcontract_fu_256_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_p_memcpy_char_fu_268_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state3_on_subcall_done_assign_proc : process(grp_p_memcpy_char_fu_268_ap_done, grp_p_memcpy_char_fu_275_ap_done, grp_p_memcpy_char_fu_282_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_const_logic_0 = grp_p_memcpy_char_fu_268_ap_done) or (ap_const_logic_0 = grp_p_memcpy_char_fu_275_ap_done) or (ap_const_logic_0 = grp_p_memcpy_char_fu_282_ap_done));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(grp_fexpand_fu_262_ap_done, grp_p_memcpy_char_fu_268_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((ap_const_logic_0 = grp_p_memcpy_char_fu_268_ap_done) or (ap_const_logic_0 = grp_fexpand_fu_262_ap_done));
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(grp_cmult_fu_216_ap_done, grp_p_memcpy_char_fu_268_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((ap_const_logic_0 = grp_p_memcpy_char_fu_268_ap_done) or (ap_const_logic_0 = grp_cmult_fu_216_ap_done));
    end process;


    ap_done_assign_proc : process(grp_p_memcpy_char_fu_268_ap_done, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_p_memcpy_char_fu_268_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_p_memcpy_char_fu_268_ap_done, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_p_memcpy_char_fu_268_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    basepoint_address0_assign_proc : process(grp_fexpand_fu_262_input_r_address0, grp_p_memcpy_char_fu_268_src_address0, grp_p_memcpy_char_fu_282_dst_address0, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            basepoint_address0 <= grp_p_memcpy_char_fu_282_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            basepoint_address0 <= grp_p_memcpy_char_fu_268_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            basepoint_address0 <= grp_fexpand_fu_262_input_r_address0;
        else 
            basepoint_address0 <= "XXXXX";
        end if; 
    end process;


    basepoint_ce0_assign_proc : process(grp_fexpand_fu_262_input_r_ce0, grp_p_memcpy_char_fu_268_src_ce0, grp_p_memcpy_char_fu_282_dst_ce0, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            basepoint_ce0 <= grp_p_memcpy_char_fu_282_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            basepoint_ce0 <= grp_p_memcpy_char_fu_268_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            basepoint_ce0 <= grp_fexpand_fu_262_input_r_ce0;
        else 
            basepoint_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    basepoint_out_ce0_assign_proc : process(grp_p_memcpy_char_fu_268_dst_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            basepoint_out_ce0 <= grp_p_memcpy_char_fu_268_dst_ce0;
        else 
            basepoint_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    basepoint_out_we0_assign_proc : process(grp_p_memcpy_char_fu_268_dst_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            basepoint_out_we0 <= grp_p_memcpy_char_fu_268_dst_we0;
        else 
            basepoint_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    basepoint_we0_assign_proc : process(grp_p_memcpy_char_fu_282_dst_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            basepoint_we0 <= grp_p_memcpy_char_fu_282_dst_we0;
        else 
            basepoint_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bp_address0_assign_proc : process(grp_cmult_fu_216_q_address0, grp_fexpand_fu_262_output_r_address0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bp_address0 <= grp_fexpand_fu_262_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bp_address0 <= grp_cmult_fu_216_q_address0;
        else 
            bp_address0 <= "XXXX";
        end if; 
    end process;


    bp_ce0_assign_proc : process(grp_cmult_fu_216_q_ce0, grp_fexpand_fu_262_output_r_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bp_ce0 <= grp_fexpand_fu_262_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            bp_ce0 <= grp_cmult_fu_216_q_ce0;
        else 
            bp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bp_we0_assign_proc : process(grp_fexpand_fu_262_output_r_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bp_we0 <= grp_fexpand_fu_262_output_r_we0;
        else 
            bp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    e_addr_2_reg_393 <= ap_const_lv64_1F(5 - 1 downto 0);

    e_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_cmult_fu_216_n_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, tmp_fu_298_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            e_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            e_address0 <= tmp_fu_298_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            e_address0 <= grp_cmult_fu_216_n_address0;
        else 
            e_address0 <= "XXXXX";
        end if; 
    end process;


    e_address1_assign_proc : process(ap_CS_fsm_state4, tmp_827_reg_383, e_addr_2_reg_393, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            e_address1 <= e_addr_2_reg_393;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            e_address1 <= tmp_827_reg_383(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            e_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        else 
            e_address1 <= "XXXXX";
        end if; 
    end process;


    e_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_cmult_fu_216_n_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_on_subcall_done = ap_const_boolean_0)))) then 
            e_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            e_ce0 <= grp_cmult_fu_216_n_ce0;
        else 
            e_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    e_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_on_subcall_done = ap_const_boolean_0)))) then 
            e_ce1 <= ap_const_logic_1;
        else 
            e_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    e_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, tmp_825_fu_336_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            e_d0 <= tmp_825_fu_336_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            e_d0 <= ap_const_lv8_0;
        else 
            e_d0 <= "XXXXXXXX";
        end if; 
    end process;


    e_d1_assign_proc : process(secret_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_1063_cast_fu_357_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            e_d1 <= tmp_1063_cast_fu_357_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            e_d1 <= secret_q0;
        else 
            e_d1 <= "XXXXXXXX";
        end if; 
    end process;


    e_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_on_subcall_done = ap_const_boolean_0)))) then 
            e_we0 <= ap_const_logic_1;
        else 
            e_we0 <= ap_const_logic_0;
        end if; 
    end process;


    e_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_on_subcall_done = ap_const_boolean_0)))) then 
            e_we1 <= ap_const_logic_1;
        else 
            e_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_309_p2 <= "1" when (i_reg_205 = ap_const_lv6_20) else "0";
    grp_cmult_fu_216_ap_start <= ap_reg_grp_cmult_fu_216_ap_start;
    grp_crecip_fu_234_ap_start <= ap_reg_grp_crecip_fu_234_ap_start;
    grp_fcontract_fu_256_ap_start <= ap_reg_grp_fcontract_fu_256_ap_start;
    grp_fexpand_fu_262_ap_start <= ap_reg_grp_fexpand_fu_262_ap_start;
    grp_fmul_2_fu_249_ap_start <= ap_reg_grp_fmul_2_fu_249_ap_start;
    grp_p_memcpy_char_fu_268_ap_start <= ap_reg_grp_p_memcpy_char_fu_268_ap_start;

    grp_p_memcpy_char_fu_268_src_q0_assign_proc : process(mypublic_in_q0, mypublic_q0, secret_q0, basepoint_q0, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_p_memcpy_char_fu_268_src_q0 <= mypublic_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_p_memcpy_char_fu_268_src_q0 <= basepoint_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_p_memcpy_char_fu_268_src_q0 <= secret_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_p_memcpy_char_fu_268_src_q0 <= mypublic_in_q0;
        else 
            grp_p_memcpy_char_fu_268_src_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_p_memcpy_char_fu_275_ap_start <= ap_reg_grp_p_memcpy_char_fu_275_ap_start;
    grp_p_memcpy_char_fu_282_ap_start <= ap_reg_grp_p_memcpy_char_fu_282_ap_start;
    i_14_fu_315_p2 <= std_logic_vector(unsigned(i_reg_205) + unsigned(ap_const_lv6_1));
    indvarinc_fu_292_p2 <= std_logic_vector(unsigned(invdar_reg_194) + unsigned(ap_const_lv5_1));

    mypublic_address0_assign_proc : process(grp_fcontract_fu_256_output_r_address0, grp_p_memcpy_char_fu_268_dst_address0, grp_p_memcpy_char_fu_268_src_address0, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mypublic_address0 <= grp_p_memcpy_char_fu_268_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mypublic_address0 <= grp_p_memcpy_char_fu_268_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mypublic_address0 <= grp_fcontract_fu_256_output_r_address0;
        else 
            mypublic_address0 <= "XXXXX";
        end if; 
    end process;


    mypublic_ce0_assign_proc : process(grp_fcontract_fu_256_output_r_ce0, grp_p_memcpy_char_fu_268_dst_ce0, grp_p_memcpy_char_fu_268_src_ce0, ap_CS_fsm_state3, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mypublic_ce0 <= grp_p_memcpy_char_fu_268_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mypublic_ce0 <= grp_p_memcpy_char_fu_268_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mypublic_ce0 <= grp_fcontract_fu_256_output_r_ce0;
        else 
            mypublic_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mypublic_d0_assign_proc : process(grp_fcontract_fu_256_output_r_d0, grp_p_memcpy_char_fu_268_dst_d0, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mypublic_d0 <= grp_p_memcpy_char_fu_268_dst_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mypublic_d0 <= grp_fcontract_fu_256_output_r_d0;
        else 
            mypublic_d0 <= "XXXXXXXX";
        end if; 
    end process;


    mypublic_in_ce0_assign_proc : process(grp_p_memcpy_char_fu_268_src_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mypublic_in_ce0 <= grp_p_memcpy_char_fu_268_src_ce0;
        else 
            mypublic_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mypublic_out_ce0_assign_proc : process(grp_p_memcpy_char_fu_268_dst_ce0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mypublic_out_ce0 <= grp_p_memcpy_char_fu_268_dst_ce0;
        else 
            mypublic_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mypublic_out_we0_assign_proc : process(grp_p_memcpy_char_fu_268_dst_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            mypublic_out_we0 <= grp_p_memcpy_char_fu_268_dst_we0;
        else 
            mypublic_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mypublic_we0_assign_proc : process(grp_fcontract_fu_256_output_r_we0, grp_p_memcpy_char_fu_268_dst_we0, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mypublic_we0 <= grp_p_memcpy_char_fu_268_dst_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mypublic_we0 <= grp_fcontract_fu_256_output_r_we0;
        else 
            mypublic_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_address0_assign_proc : process(ap_CS_fsm_state4, tmp_827_fu_321_p1, exitcond_fu_309_p2, grp_p_memcpy_char_fu_268_src_address0, grp_p_memcpy_char_fu_275_dst_address0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_309_p2 = ap_const_lv1_0))) then 
            secret_address0 <= tmp_827_fu_321_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            secret_address0 <= grp_p_memcpy_char_fu_275_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_address0 <= grp_p_memcpy_char_fu_268_src_address0;
        else 
            secret_address0 <= "XXXXX";
        end if; 
    end process;


    secret_ce0_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_309_p2, grp_p_memcpy_char_fu_268_src_ce0, grp_p_memcpy_char_fu_275_dst_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_309_p2 = ap_const_lv1_0))) then 
            secret_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            secret_ce0 <= grp_p_memcpy_char_fu_275_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_ce0 <= grp_p_memcpy_char_fu_268_src_ce0;
        else 
            secret_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_out_ce0_assign_proc : process(grp_p_memcpy_char_fu_268_dst_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_out_ce0 <= grp_p_memcpy_char_fu_268_dst_ce0;
        else 
            secret_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_out_we0_assign_proc : process(grp_p_memcpy_char_fu_268_dst_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_out_we0 <= grp_p_memcpy_char_fu_268_dst_we0;
        else 
            secret_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_we0_assign_proc : process(grp_p_memcpy_char_fu_275_dst_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            secret_we0 <= grp_p_memcpy_char_fu_275_dst_we0;
        else 
            secret_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1063_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_826_fu_349_p3),8));
    tmp_629_fu_326_p4 <= e_q0(7 downto 3);
    tmp_825_fu_336_p3 <= (tmp_629_fu_326_p4 & ap_const_lv3_0);
    tmp_826_fu_349_p3 <= (ap_const_lv1_1 & tmp_925_fu_345_p1);
    tmp_827_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_205),64));
    tmp_925_fu_345_p1 <= e_q1(6 - 1 downto 0);
    tmp_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_194),64));
    tmp_s_fu_303_p2 <= "1" when (invdar_reg_194 = ap_const_lv5_1F) else "0";

    x_address0_assign_proc : process(grp_cmult_fu_216_resultx_address0, grp_fmul_2_fu_249_in_r_address0, ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_address0 <= grp_fmul_2_fu_249_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_address0 <= grp_cmult_fu_216_resultx_address0;
        else 
            x_address0 <= "XXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(grp_cmult_fu_216_resultx_ce0, grp_fmul_2_fu_249_in_r_ce0, ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_ce0 <= grp_fmul_2_fu_249_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_ce0 <= grp_cmult_fu_216_resultx_ce0;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_we0_assign_proc : process(grp_cmult_fu_216_resultx_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_we0 <= grp_cmult_fu_216_resultx_we0;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z_address0_assign_proc : process(grp_cmult_fu_216_resultz_address0, grp_crecip_fu_234_z_address0, grp_fmul_2_fu_249_output_r_address0, grp_fcontract_fu_256_input_limbs_address0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            z_address0 <= grp_fcontract_fu_256_input_limbs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            z_address0 <= grp_fmul_2_fu_249_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z_address0 <= grp_crecip_fu_234_z_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            z_address0 <= grp_cmult_fu_216_resultz_address0;
        else 
            z_address0 <= "XXXX";
        end if; 
    end process;


    z_ce0_assign_proc : process(grp_cmult_fu_216_resultz_ce0, grp_crecip_fu_234_z_ce0, grp_fmul_2_fu_249_output_r_ce0, grp_fcontract_fu_256_input_limbs_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            z_ce0 <= grp_fcontract_fu_256_input_limbs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            z_ce0 <= grp_fmul_2_fu_249_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            z_ce0 <= grp_crecip_fu_234_z_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            z_ce0 <= grp_cmult_fu_216_resultz_ce0;
        else 
            z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_d0_assign_proc : process(grp_cmult_fu_216_resultz_d0, grp_fmul_2_fu_249_output_r_d0, ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            z_d0 <= grp_fmul_2_fu_249_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            z_d0 <= grp_cmult_fu_216_resultz_d0;
        else 
            z_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z_we0_assign_proc : process(grp_cmult_fu_216_resultz_we0, grp_fmul_2_fu_249_output_r_we0, ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            z_we0 <= grp_fmul_2_fu_249_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            z_we0 <= grp_cmult_fu_216_resultz_we0;
        else 
            z_we0 <= ap_const_logic_0;
        end if; 
    end process;


    zmone_address0_assign_proc : process(grp_crecip_fu_234_out_r_address0, grp_fmul_2_fu_249_in2_address0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            zmone_address0 <= grp_fmul_2_fu_249_in2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            zmone_address0 <= grp_crecip_fu_234_out_r_address0;
        else 
            zmone_address0 <= "XXXX";
        end if; 
    end process;


    zmone_ce0_assign_proc : process(grp_crecip_fu_234_out_r_ce0, grp_fmul_2_fu_249_in2_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            zmone_ce0 <= grp_fmul_2_fu_249_in2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            zmone_ce0 <= grp_crecip_fu_234_out_r_ce0;
        else 
            zmone_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zmone_we0_assign_proc : process(grp_crecip_fu_234_out_r_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            zmone_we0 <= grp_crecip_fu_234_out_r_we0;
        else 
            zmone_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
