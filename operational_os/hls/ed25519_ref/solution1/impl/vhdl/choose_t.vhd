-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity choose_t is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    t_x_v_ce0 : OUT STD_LOGIC;
    t_x_v_we0 : OUT STD_LOGIC;
    t_x_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    t_x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    t_x_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    t_x_v_ce1 : OUT STD_LOGIC;
    t_x_v_we1 : OUT STD_LOGIC;
    t_x_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    t_x_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    t_y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    t_y_v_ce0 : OUT STD_LOGIC;
    t_y_v_we0 : OUT STD_LOGIC;
    t_y_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    t_y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    t_y_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    t_y_v_ce1 : OUT STD_LOGIC;
    t_y_v_we1 : OUT STD_LOGIC;
    t_y_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pos_r : IN STD_LOGIC_VECTOR (6 downto 0);
    b : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of choose_t is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv50_0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv14_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000101";
    constant ap_const_lv14_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000110";
    constant ap_const_lv14_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000111";
    constant ap_const_lv14_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_const_lv14_9 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001001";
    constant ap_const_lv14_A : STD_LOGIC_VECTOR (13 downto 0) := "00000000001010";
    constant ap_const_lv14_B : STD_LOGIC_VECTOR (13 downto 0) := "00000000001011";
    constant ap_const_lv14_C : STD_LOGIC_VECTOR (13 downto 0) := "00000000001100";
    constant ap_const_lv14_D : STD_LOGIC_VECTOR (13 downto 0) := "00000000001101";
    constant ap_const_lv14_E : STD_LOGIC_VECTOR (13 downto 0) := "00000000001110";
    constant ap_const_lv14_F : STD_LOGIC_VECTOR (13 downto 0) := "00000000001111";
    constant ap_const_lv14_10 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_const_lv14_11 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010001";
    constant ap_const_lv14_12 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010010";
    constant ap_const_lv14_13 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010011";
    constant ap_const_lv14_14 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010100";
    constant ap_const_lv14_15 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010101";
    constant ap_const_lv14_16 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010110";
    constant ap_const_lv14_17 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010111";
    constant ap_const_lv14_18 : STD_LOGIC_VECTOR (13 downto 0) := "00000000011000";
    constant ap_const_lv14_19 : STD_LOGIC_VECTOR (13 downto 0) := "00000000011001";
    constant ap_const_lv14_1A : STD_LOGIC_VECTOR (13 downto 0) := "00000000011010";
    constant ap_const_lv14_1B : STD_LOGIC_VECTOR (13 downto 0) := "00000000011011";
    constant ap_const_lv14_1C : STD_LOGIC_VECTOR (13 downto 0) := "00000000011100";
    constant ap_const_lv14_1D : STD_LOGIC_VECTOR (13 downto 0) := "00000000011101";
    constant ap_const_lv14_1E : STD_LOGIC_VECTOR (13 downto 0) := "00000000011110";
    constant ap_const_lv14_1F : STD_LOGIC_VECTOR (13 downto 0) := "00000000011111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ge25519_base_multipl_1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ge25519_base_multipl_1_ce0 : STD_LOGIC;
    signal ge25519_base_multipl_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ge25519_base_multipl_1_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ge25519_base_multipl_1_ce1 : STD_LOGIC;
    signal ge25519_base_multipl_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ge25519_base_multipl_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ge25519_base_multipl_ce0 : STD_LOGIC;
    signal ge25519_base_multipl_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ge25519_base_multipl_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ge25519_base_multipl_ce1 : STD_LOGIC;
    signal ge25519_base_multipl_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_2240 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_792_fu_1463_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_792_reg_2248 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_s_fu_1943_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_2612 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_856_fu_1998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_856_reg_2618 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_857_fu_2005_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_857_reg_2623 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_858_fu_2058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_858_reg_2629 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_859_fu_2065_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_859_reg_2634 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_860_fu_2118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_860_reg_2640 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_861_fu_2125_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_861_reg_2645 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_868_reg_2651 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_2162_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_2659 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_i1_fu_2168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_reg_2664 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_2156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_82_fu_2179_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_869_reg_2682 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_fu_2173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_fu_2197_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_reg_2687 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_crypto_sign_ed25519_7_fu_1424_ap_done : STD_LOGIC;
    signal i_83_fu_2210_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_83_reg_2695 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal exitcond_i5_fu_2204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_x_v_addr_33_reg_2705 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_v_ce0 : STD_LOGIC;
    signal t_v_we0 : STD_LOGIC;
    signal t_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal v_v_ce0 : STD_LOGIC;
    signal v_v_we0 : STD_LOGIC;
    signal v_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_v_ce1 : STD_LOGIC;
    signal v_v_we1 : STD_LOGIC;
    signal v_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_7_fu_1424_ap_start : STD_LOGIC;
    signal grp_crypto_sign_ed25519_7_fu_1424_ap_idle : STD_LOGIC;
    signal grp_crypto_sign_ed25519_7_fu_1424_ap_ready : STD_LOGIC;
    signal grp_crypto_sign_ed25519_7_fu_1424_r_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_7_fu_1424_r_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_7_fu_1424_r_v_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_7_fu_1424_r_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_7_fu_1424_r_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_7_fu_1424_r_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_7_fu_1424_r_v_we1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_7_fu_1424_r_v_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_7_fu_1424_y_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_7_fu_1424_y_v_ce0 : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_ap_start : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_ap_done : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_ap_idle : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_ap_ready : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_r_x_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_cmov_aff_fu_1430_r_x_v_ce0 : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_r_x_v_we0 : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_r_x_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cmov_aff_fu_1430_r_y_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_cmov_aff_fu_1430_r_y_v_ce0 : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_r_y_v_we0 : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_r_y_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cmov_aff_fu_1430_p_x_v_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cmov_aff_fu_1430_p_x_v_ce0 : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_tmp_919 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_cmov_aff_fu_1430_p_y_v_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_cmov_aff_fu_1430_p_y_v_ce0 : STD_LOGIC;
    signal grp_cmov_aff_fu_1430_tmp_9191 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_cmov_aff_fu_1430_b : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_1391 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_i_i_reg_1402 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_i5_reg_1413 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_reg_grp_crypto_sign_ed25519_7_fu_1424_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_cmov_aff_fu_1430_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_793_fu_1471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_795_fu_1483_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_797_fu_1498_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_799_fu_1513_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_801_fu_1528_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_803_fu_1543_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_805_fu_1558_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_807_fu_1573_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_809_fu_1588_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_811_fu_1603_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_813_fu_1618_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_815_fu_1633_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_817_fu_1648_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_819_fu_1663_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_821_fu_1678_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_823_fu_1693_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_825_fu_1708_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_827_fu_1723_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_829_fu_1738_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_831_fu_1753_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_833_fu_1768_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_835_fu_1783_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_837_fu_1798_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_839_fu_1813_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_841_fu_1828_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_843_fu_1843_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_845_fu_1858_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_847_fu_1873_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_849_fu_1888_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_851_fu_1903_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_853_fu_1918_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_855_fu_1933_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_i_i_fu_2185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_2216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_896_i_fu_2233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_1449_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pos_cast4_fu_1445_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_794_fu_1477_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_796_fu_1493_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_798_fu_1508_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_800_fu_1523_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_802_fu_1538_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_804_fu_1553_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_806_fu_1568_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_808_fu_1583_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_810_fu_1598_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_812_fu_1613_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_814_fu_1628_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_816_fu_1643_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_818_fu_1658_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_820_fu_1673_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_822_fu_1688_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_824_fu_1703_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_826_fu_1718_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_828_fu_1733_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_830_fu_1748_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_832_fu_1763_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_834_fu_1778_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_836_fu_1793_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_838_fu_1808_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_840_fu_1823_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_842_fu_1838_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_844_fu_1853_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_846_fu_1868_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_848_fu_1883_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_850_fu_1898_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_852_fu_1913_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_854_fu_1928_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_fu_1950_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_cast_fu_1956_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_fu_1960_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_8_fu_1974_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_cast_fu_1980_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_fu_1984_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_863_fu_1990_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_862_fu_1966_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_9_fu_2012_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_6_cast_fu_2017_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_2_fu_2021_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_10_fu_2035_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_9_cast_fu_2040_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_3_fu_2044_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_865_fu_2050_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_864_fu_2027_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_11_fu_2072_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_12_cast_fu_2077_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_4_fu_2081_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_12_fu_2095_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_15_cast_fu_2100_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_5_fu_2104_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_867_fu_2110_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_866_fu_2087_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_13_fu_2132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_18_cast_fu_2137_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_6_fu_2141_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_894_i_fu_2222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_895_i_fu_2228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);

    component crypto_sign_ed25519_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce0 : OUT STD_LOGIC;
        r_v_we0 : OUT STD_LOGIC;
        r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce1 : OUT STD_LOGIC;
        r_v_we1 : OUT STD_LOGIC;
        r_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        y_v_ce0 : OUT STD_LOGIC;
        y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cmov_aff IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_x_v_ce0 : OUT STD_LOGIC;
        r_x_v_we0 : OUT STD_LOGIC;
        r_x_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_y_v_ce0 : OUT STD_LOGIC;
        r_y_v_we0 : OUT STD_LOGIC;
        r_y_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_x_v_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_x_v_ce0 : OUT STD_LOGIC;
        p_x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_919 : IN STD_LOGIC_VECTOR (8 downto 0);
        p_y_v_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        p_y_v_ce0 : OUT STD_LOGIC;
        p_y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_9191 : IN STD_LOGIC_VECTOR (8 downto 0);
        b : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component choose_t_ge25519_qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component choose_t_ge25519_rcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component choose_t_t_v IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component choose_t_v_v IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ge25519_base_multipl_1_U : component choose_t_ge25519_qcK
    generic map (
        DataWidth => 32,
        AddressRange => 13600,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ge25519_base_multipl_1_address0,
        ce0 => ge25519_base_multipl_1_ce0,
        q0 => ge25519_base_multipl_1_q0,
        address1 => ge25519_base_multipl_1_address1,
        ce1 => ge25519_base_multipl_1_ce1,
        q1 => ge25519_base_multipl_1_q1);

    ge25519_base_multipl_U : component choose_t_ge25519_rcU
    generic map (
        DataWidth => 32,
        AddressRange => 13600,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ge25519_base_multipl_address0,
        ce0 => ge25519_base_multipl_ce0,
        q0 => ge25519_base_multipl_q0,
        address1 => ge25519_base_multipl_address1,
        ce1 => ge25519_base_multipl_ce1,
        q1 => ge25519_base_multipl_q1);

    t_v_U : component choose_t_t_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_v_address0,
        ce0 => t_v_ce0,
        we0 => t_v_we0,
        d0 => t_x_v_q0,
        q0 => t_v_q0);

    v_v_U : component choose_t_v_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => v_v_address0,
        ce0 => v_v_ce0,
        we0 => v_v_we0,
        d0 => v_v_d0,
        q0 => v_v_q0,
        address1 => grp_crypto_sign_ed25519_7_fu_1424_r_v_address1,
        ce1 => v_v_ce1,
        we1 => v_v_we1,
        d1 => grp_crypto_sign_ed25519_7_fu_1424_r_v_d1,
        q1 => v_v_q1);

    grp_crypto_sign_ed25519_7_fu_1424 : component crypto_sign_ed25519_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_crypto_sign_ed25519_7_fu_1424_ap_start,
        ap_done => grp_crypto_sign_ed25519_7_fu_1424_ap_done,
        ap_idle => grp_crypto_sign_ed25519_7_fu_1424_ap_idle,
        ap_ready => grp_crypto_sign_ed25519_7_fu_1424_ap_ready,
        r_v_address0 => grp_crypto_sign_ed25519_7_fu_1424_r_v_address0,
        r_v_ce0 => grp_crypto_sign_ed25519_7_fu_1424_r_v_ce0,
        r_v_we0 => grp_crypto_sign_ed25519_7_fu_1424_r_v_we0,
        r_v_d0 => grp_crypto_sign_ed25519_7_fu_1424_r_v_d0,
        r_v_q0 => v_v_q0,
        r_v_address1 => grp_crypto_sign_ed25519_7_fu_1424_r_v_address1,
        r_v_ce1 => grp_crypto_sign_ed25519_7_fu_1424_r_v_ce1,
        r_v_we1 => grp_crypto_sign_ed25519_7_fu_1424_r_v_we1,
        r_v_d1 => grp_crypto_sign_ed25519_7_fu_1424_r_v_d1,
        r_v_q1 => v_v_q1,
        y_v_address0 => grp_crypto_sign_ed25519_7_fu_1424_y_v_address0,
        y_v_ce0 => grp_crypto_sign_ed25519_7_fu_1424_y_v_ce0,
        y_v_q0 => t_v_q0);

    grp_cmov_aff_fu_1430 : component cmov_aff
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cmov_aff_fu_1430_ap_start,
        ap_done => grp_cmov_aff_fu_1430_ap_done,
        ap_idle => grp_cmov_aff_fu_1430_ap_idle,
        ap_ready => grp_cmov_aff_fu_1430_ap_ready,
        r_x_v_address0 => grp_cmov_aff_fu_1430_r_x_v_address0,
        r_x_v_ce0 => grp_cmov_aff_fu_1430_r_x_v_ce0,
        r_x_v_we0 => grp_cmov_aff_fu_1430_r_x_v_we0,
        r_x_v_d0 => grp_cmov_aff_fu_1430_r_x_v_d0,
        r_x_v_q0 => t_x_v_q0,
        r_y_v_address0 => grp_cmov_aff_fu_1430_r_y_v_address0,
        r_y_v_ce0 => grp_cmov_aff_fu_1430_r_y_v_ce0,
        r_y_v_we0 => grp_cmov_aff_fu_1430_r_y_v_we0,
        r_y_v_d0 => grp_cmov_aff_fu_1430_r_y_v_d0,
        r_y_v_q0 => t_y_v_q0,
        p_x_v_address0 => grp_cmov_aff_fu_1430_p_x_v_address0,
        p_x_v_ce0 => grp_cmov_aff_fu_1430_p_x_v_ce0,
        p_x_v_q0 => ge25519_base_multipl_1_q0,
        tmp_919 => grp_cmov_aff_fu_1430_tmp_919,
        p_y_v_address0 => grp_cmov_aff_fu_1430_p_y_v_address0,
        p_y_v_ce0 => grp_cmov_aff_fu_1430_p_y_v_ce0,
        p_y_v_q0 => ge25519_base_multipl_q0,
        tmp_9191 => grp_cmov_aff_fu_1430_tmp_9191,
        b => grp_cmov_aff_fu_1430_b);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_cmov_aff_fu_1430_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_cmov_aff_fu_1430_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_reg_grp_cmov_aff_fu_1430_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_cmov_aff_fu_1430_ap_ready)) then 
                    ap_reg_grp_cmov_aff_fu_1430_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_crypto_sign_ed25519_7_fu_1424_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_crypto_sign_ed25519_7_fu_1424_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_i_i_fu_2173_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_crypto_sign_ed25519_7_fu_1424_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_crypto_sign_ed25519_7_fu_1424_ap_ready)) then 
                    ap_reg_grp_crypto_sign_ed25519_7_fu_1424_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i5_reg_1413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_i5_reg_1413 <= i_83_reg_2695;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_crypto_sign_ed25519_7_fu_1424_ap_done = ap_const_logic_1))) then 
                i_i5_reg_1413 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_1402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i_fu_2156_p2 = ap_const_lv1_1))) then 
                i_i_i_reg_1402 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond_i_i_fu_2173_p2))) then 
                i_i_i_reg_1402 <= i_82_fu_2179_p2;
            end if; 
        end if;
    end process;

    i_i_reg_1391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_i_reg_1391 <= i_reg_2659;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_cmov_aff_fu_1430_ap_done = ap_const_logic_1))) then 
                i_i_reg_1391 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i_83_reg_2695 <= i_83_fu_2210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                i_reg_2659 <= i_fu_2162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_crypto_sign_ed25519_7_fu_1424_ap_done = ap_const_logic_1))) then
                mask_reg_2687 <= mask_fu_2197_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond_i5_fu_2204_p2))) then
                t_x_v_addr_33_reg_2705 <= tmp_i_fu_2216_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_792_reg_2248(13 downto 5) <= tmp_792_fu_1463_p3(13 downto 5);
                tmp_reg_2240 <= tmp_fu_1457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_856_reg_2618 <= tmp_856_fu_1998_p2;
                tmp_s_reg_2612 <= tmp_s_fu_1943_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_857_reg_2623 <= tmp_857_fu_2005_p2;
                tmp_858_reg_2629 <= tmp_858_fu_2058_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_859_reg_2634 <= tmp_859_fu_2065_p2;
                tmp_860_reg_2640 <= tmp_860_fu_2118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_861_reg_2645 <= tmp_861_fu_2125_p2;
                tmp_868_reg_2651 <= y_6_fu_2141_p2(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_i_i_fu_2173_p2 = ap_const_lv1_1))) then
                tmp_869_reg_2682 <= b(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i_fu_2156_p2 = ap_const_lv1_0))) then
                    tmp_i1_reg_2664(5 downto 0) <= tmp_i1_fu_2168_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_792_reg_2248(4 downto 0) <= "00000";
    tmp_i1_reg_2664(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state26, exitcond_i_fu_2156_p2, ap_CS_fsm_state28, exitcond_i_i_fu_2173_p2, ap_CS_fsm_state29, grp_crypto_sign_ed25519_7_fu_1424_ap_done, ap_CS_fsm_state30, exitcond_i5_fu_2204_p2, grp_cmov_aff_fu_1430_ap_done, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_cmov_aff_fu_1430_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_cmov_aff_fu_1430_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_cmov_aff_fu_1430_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_cmov_aff_fu_1430_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond_i_fu_2156_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond_i_i_fu_2173_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_crypto_sign_ed25519_7_fu_1424_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_i5_fu_2204_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30, exitcond_i5_fu_2204_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_i5_fu_2204_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, exitcond_i5_fu_2204_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_i5_fu_2204_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i5_fu_2204_p2 <= "1" when (i_i5_reg_1413 = ap_const_lv6_20) else "0";
    exitcond_i_fu_2156_p2 <= "1" when (i_i_reg_1391 = ap_const_lv6_20) else "0";
    exitcond_i_i_fu_2173_p2 <= "1" when (i_i_i_reg_1402 = ap_const_lv6_20) else "0";

    ge25519_base_multipl_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_p_x_v_address0, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, tmp_793_fu_1471_p1, tmp_797_fu_1498_p3, tmp_801_fu_1528_p3, tmp_805_fu_1558_p3, tmp_809_fu_1588_p3, tmp_813_fu_1618_p3, tmp_817_fu_1648_p3, tmp_821_fu_1678_p3, tmp_825_fu_1708_p3, tmp_829_fu_1738_p3, tmp_833_fu_1768_p3, tmp_837_fu_1798_p3, tmp_841_fu_1828_p3, tmp_845_fu_1858_p3, tmp_849_fu_1888_p3, tmp_853_fu_1918_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ge25519_base_multipl_1_address0 <= tmp_853_fu_1918_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ge25519_base_multipl_1_address0 <= tmp_849_fu_1888_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ge25519_base_multipl_1_address0 <= tmp_845_fu_1858_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ge25519_base_multipl_1_address0 <= tmp_841_fu_1828_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ge25519_base_multipl_1_address0 <= tmp_837_fu_1798_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ge25519_base_multipl_1_address0 <= tmp_833_fu_1768_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ge25519_base_multipl_1_address0 <= tmp_829_fu_1738_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ge25519_base_multipl_1_address0 <= tmp_825_fu_1708_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ge25519_base_multipl_1_address0 <= tmp_821_fu_1678_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ge25519_base_multipl_1_address0 <= tmp_817_fu_1648_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ge25519_base_multipl_1_address0 <= tmp_813_fu_1618_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ge25519_base_multipl_1_address0 <= tmp_809_fu_1588_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ge25519_base_multipl_1_address0 <= tmp_805_fu_1558_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ge25519_base_multipl_1_address0 <= tmp_801_fu_1528_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ge25519_base_multipl_1_address0 <= tmp_797_fu_1498_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ge25519_base_multipl_1_address0 <= tmp_793_fu_1471_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ge25519_base_multipl_1_address0 <= grp_cmov_aff_fu_1430_p_x_v_address0;
        else 
            ge25519_base_multipl_1_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ge25519_base_multipl_1_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_795_fu_1483_p3, tmp_799_fu_1513_p3, tmp_803_fu_1543_p3, tmp_807_fu_1573_p3, tmp_811_fu_1603_p3, tmp_815_fu_1633_p3, tmp_819_fu_1663_p3, tmp_823_fu_1693_p3, tmp_827_fu_1723_p3, tmp_831_fu_1753_p3, tmp_835_fu_1783_p3, tmp_839_fu_1813_p3, tmp_843_fu_1843_p3, tmp_847_fu_1873_p3, tmp_851_fu_1903_p3, tmp_855_fu_1933_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ge25519_base_multipl_1_address1 <= tmp_855_fu_1933_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ge25519_base_multipl_1_address1 <= tmp_851_fu_1903_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ge25519_base_multipl_1_address1 <= tmp_847_fu_1873_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ge25519_base_multipl_1_address1 <= tmp_843_fu_1843_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ge25519_base_multipl_1_address1 <= tmp_839_fu_1813_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ge25519_base_multipl_1_address1 <= tmp_835_fu_1783_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ge25519_base_multipl_1_address1 <= tmp_831_fu_1753_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ge25519_base_multipl_1_address1 <= tmp_827_fu_1723_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ge25519_base_multipl_1_address1 <= tmp_823_fu_1693_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ge25519_base_multipl_1_address1 <= tmp_819_fu_1663_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ge25519_base_multipl_1_address1 <= tmp_815_fu_1633_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ge25519_base_multipl_1_address1 <= tmp_811_fu_1603_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ge25519_base_multipl_1_address1 <= tmp_807_fu_1573_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ge25519_base_multipl_1_address1 <= tmp_803_fu_1543_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ge25519_base_multipl_1_address1 <= tmp_799_fu_1513_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ge25519_base_multipl_1_address1 <= tmp_795_fu_1483_p3(14 - 1 downto 0);
        else 
            ge25519_base_multipl_1_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ge25519_base_multipl_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_p_x_v_ce0, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ge25519_base_multipl_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ge25519_base_multipl_1_ce0 <= grp_cmov_aff_fu_1430_p_x_v_ce0;
        else 
            ge25519_base_multipl_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ge25519_base_multipl_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ge25519_base_multipl_1_ce1 <= ap_const_logic_1;
        else 
            ge25519_base_multipl_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ge25519_base_multipl_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_p_y_v_address0, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, tmp_793_fu_1471_p1, tmp_797_fu_1498_p3, tmp_801_fu_1528_p3, tmp_805_fu_1558_p3, tmp_809_fu_1588_p3, tmp_813_fu_1618_p3, tmp_817_fu_1648_p3, tmp_821_fu_1678_p3, tmp_825_fu_1708_p3, tmp_829_fu_1738_p3, tmp_833_fu_1768_p3, tmp_837_fu_1798_p3, tmp_841_fu_1828_p3, tmp_845_fu_1858_p3, tmp_849_fu_1888_p3, tmp_853_fu_1918_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ge25519_base_multipl_address0 <= tmp_853_fu_1918_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ge25519_base_multipl_address0 <= tmp_849_fu_1888_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ge25519_base_multipl_address0 <= tmp_845_fu_1858_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ge25519_base_multipl_address0 <= tmp_841_fu_1828_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ge25519_base_multipl_address0 <= tmp_837_fu_1798_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ge25519_base_multipl_address0 <= tmp_833_fu_1768_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ge25519_base_multipl_address0 <= tmp_829_fu_1738_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ge25519_base_multipl_address0 <= tmp_825_fu_1708_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ge25519_base_multipl_address0 <= tmp_821_fu_1678_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ge25519_base_multipl_address0 <= tmp_817_fu_1648_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ge25519_base_multipl_address0 <= tmp_813_fu_1618_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ge25519_base_multipl_address0 <= tmp_809_fu_1588_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ge25519_base_multipl_address0 <= tmp_805_fu_1558_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ge25519_base_multipl_address0 <= tmp_801_fu_1528_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ge25519_base_multipl_address0 <= tmp_797_fu_1498_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ge25519_base_multipl_address0 <= tmp_793_fu_1471_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ge25519_base_multipl_address0 <= grp_cmov_aff_fu_1430_p_y_v_address0;
        else 
            ge25519_base_multipl_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ge25519_base_multipl_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_795_fu_1483_p3, tmp_799_fu_1513_p3, tmp_803_fu_1543_p3, tmp_807_fu_1573_p3, tmp_811_fu_1603_p3, tmp_815_fu_1633_p3, tmp_819_fu_1663_p3, tmp_823_fu_1693_p3, tmp_827_fu_1723_p3, tmp_831_fu_1753_p3, tmp_835_fu_1783_p3, tmp_839_fu_1813_p3, tmp_843_fu_1843_p3, tmp_847_fu_1873_p3, tmp_851_fu_1903_p3, tmp_855_fu_1933_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ge25519_base_multipl_address1 <= tmp_855_fu_1933_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ge25519_base_multipl_address1 <= tmp_851_fu_1903_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ge25519_base_multipl_address1 <= tmp_847_fu_1873_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ge25519_base_multipl_address1 <= tmp_843_fu_1843_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ge25519_base_multipl_address1 <= tmp_839_fu_1813_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ge25519_base_multipl_address1 <= tmp_835_fu_1783_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ge25519_base_multipl_address1 <= tmp_831_fu_1753_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ge25519_base_multipl_address1 <= tmp_827_fu_1723_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ge25519_base_multipl_address1 <= tmp_823_fu_1693_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ge25519_base_multipl_address1 <= tmp_819_fu_1663_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ge25519_base_multipl_address1 <= tmp_815_fu_1633_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ge25519_base_multipl_address1 <= tmp_811_fu_1603_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ge25519_base_multipl_address1 <= tmp_807_fu_1573_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ge25519_base_multipl_address1 <= tmp_803_fu_1543_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ge25519_base_multipl_address1 <= tmp_799_fu_1513_p3(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ge25519_base_multipl_address1 <= tmp_795_fu_1483_p3(14 - 1 downto 0);
        else 
            ge25519_base_multipl_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ge25519_base_multipl_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_p_y_v_ce0, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ge25519_base_multipl_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            ge25519_base_multipl_ce0 <= grp_cmov_aff_fu_1430_p_y_v_ce0;
        else 
            ge25519_base_multipl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ge25519_base_multipl_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ge25519_base_multipl_ce1 <= ap_const_logic_1;
        else 
            ge25519_base_multipl_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_cmov_aff_fu_1430_ap_start <= ap_reg_grp_cmov_aff_fu_1430_ap_start;

    grp_cmov_aff_fu_1430_b_assign_proc : process(tmp_856_reg_2618, tmp_858_reg_2629, tmp_860_reg_2640, tmp_868_reg_2651, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_cmov_aff_fu_1430_b <= tmp_868_reg_2651;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_cmov_aff_fu_1430_b <= tmp_860_reg_2640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_cmov_aff_fu_1430_b <= tmp_858_reg_2629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_cmov_aff_fu_1430_b <= tmp_856_reg_2618;
        else 
            grp_cmov_aff_fu_1430_b <= "X";
        end if; 
    end process;


    grp_cmov_aff_fu_1430_tmp_919_assign_proc : process(tmp_s_reg_2612, tmp_857_reg_2623, tmp_859_reg_2634, tmp_861_reg_2645, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_cmov_aff_fu_1430_tmp_919 <= tmp_861_reg_2645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_cmov_aff_fu_1430_tmp_919 <= tmp_859_reg_2634;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_cmov_aff_fu_1430_tmp_919 <= tmp_857_reg_2623;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_cmov_aff_fu_1430_tmp_919 <= tmp_s_reg_2612;
        else 
            grp_cmov_aff_fu_1430_tmp_919 <= "XXXXXXXXX";
        end if; 
    end process;


    grp_cmov_aff_fu_1430_tmp_9191_assign_proc : process(tmp_s_reg_2612, tmp_857_reg_2623, tmp_859_reg_2634, tmp_861_reg_2645, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_cmov_aff_fu_1430_tmp_9191 <= tmp_861_reg_2645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_cmov_aff_fu_1430_tmp_9191 <= tmp_859_reg_2634;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_cmov_aff_fu_1430_tmp_9191 <= tmp_857_reg_2623;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_cmov_aff_fu_1430_tmp_9191 <= tmp_s_reg_2612;
        else 
            grp_cmov_aff_fu_1430_tmp_9191 <= "XXXXXXXXX";
        end if; 
    end process;

    grp_crypto_sign_ed25519_7_fu_1424_ap_start <= ap_reg_grp_crypto_sign_ed25519_7_fu_1424_ap_start;
    i_82_fu_2179_p2 <= std_logic_vector(unsigned(i_i_i_reg_1402) + unsigned(ap_const_lv6_1));
    i_83_fu_2210_p2 <= std_logic_vector(unsigned(i_i5_reg_1413) + unsigned(ap_const_lv6_1));
    i_fu_2162_p2 <= std_logic_vector(unsigned(i_i_reg_1391) + unsigned(ap_const_lv6_1));
    mask_fu_2197_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_869_reg_2682(0) = '1') else 
        ap_const_lv32_0;
    p_shl_fu_1449_p3 <= (pos_r & ap_const_lv2_0);
    pos_cast4_fu_1445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_r),9));

    t_v_address0_assign_proc : process(tmp_i1_reg_2664, ap_CS_fsm_state29, grp_crypto_sign_ed25519_7_fu_1424_y_v_address0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            t_v_address0 <= tmp_i1_reg_2664(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_v_address0 <= grp_crypto_sign_ed25519_7_fu_1424_y_v_address0;
        else 
            t_v_address0 <= "XXXXX";
        end if; 
    end process;


    t_v_ce0_assign_proc : process(ap_CS_fsm_state29, grp_crypto_sign_ed25519_7_fu_1424_y_v_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            t_v_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_v_ce0 <= grp_crypto_sign_ed25519_7_fu_1424_y_v_ce0;
        else 
            t_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_v_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            t_v_we0 <= ap_const_logic_1;
        else 
            t_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_x_v_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state26, tmp_i1_fu_2168_p1, t_x_v_addr_33_reg_2705, grp_cmov_aff_fu_1430_r_x_v_address0, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            t_x_v_address0 <= t_x_v_addr_33_reg_2705;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            t_x_v_address0 <= tmp_i1_fu_2168_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_x_v_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_x_v_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_x_v_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_x_v_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_x_v_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_x_v_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_x_v_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_x_v_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_x_v_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_x_v_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_x_v_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_x_v_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_x_v_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_x_v_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_x_v_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_x_v_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            t_x_v_address0 <= grp_cmov_aff_fu_1430_r_x_v_address0;
        else 
            t_x_v_address0 <= "XXXXX";
        end if; 
    end process;


    t_x_v_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state17, tmp_i_fu_2216_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            t_x_v_address1 <= tmp_i_fu_2216_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_x_v_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_x_v_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_x_v_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_x_v_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_x_v_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_x_v_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_x_v_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_x_v_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_x_v_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_x_v_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_x_v_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_x_v_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_x_v_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_x_v_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_x_v_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_x_v_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            t_x_v_address1 <= "XXXXX";
        end if; 
    end process;


    t_x_v_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state26, grp_cmov_aff_fu_1430_r_x_v_ce0, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_x_v_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            t_x_v_ce0 <= grp_cmov_aff_fu_1430_r_x_v_ce0;
        else 
            t_x_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_x_v_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state30, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_x_v_ce1 <= ap_const_logic_1;
        else 
            t_x_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_x_v_d0_assign_proc : process(ge25519_base_multipl_1_q0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_r_x_v_d0, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17, tmp_896_i_fu_2233_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            t_x_v_d0 <= tmp_896_i_fu_2233_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_x_v_d0 <= ge25519_base_multipl_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            t_x_v_d0 <= grp_cmov_aff_fu_1430_r_x_v_d0;
        else 
            t_x_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    t_x_v_d1 <= ge25519_base_multipl_1_q1;

    t_x_v_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_r_x_v_we0, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_x_v_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            t_x_v_we0 <= grp_cmov_aff_fu_1430_r_x_v_we0;
        else 
            t_x_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_x_v_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_x_v_we1 <= ap_const_logic_1;
        else 
            t_x_v_we1 <= ap_const_logic_0;
        end if; 
    end process;


    t_y_v_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_r_y_v_address0, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_y_v_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_y_v_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_y_v_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_y_v_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_y_v_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_y_v_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_y_v_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_y_v_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_y_v_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_y_v_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_y_v_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_y_v_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_y_v_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_y_v_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_y_v_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_y_v_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            t_y_v_address0 <= grp_cmov_aff_fu_1430_r_y_v_address0;
        else 
            t_y_v_address0 <= "XXXXX";
        end if; 
    end process;


    t_y_v_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_y_v_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_y_v_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_y_v_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_y_v_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_y_v_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_y_v_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_y_v_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_y_v_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_y_v_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_y_v_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            t_y_v_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_y_v_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_y_v_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_y_v_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_y_v_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_y_v_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            t_y_v_address1 <= "XXXXX";
        end if; 
    end process;


    t_y_v_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_r_y_v_ce0, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_y_v_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            t_y_v_ce0 <= grp_cmov_aff_fu_1430_r_y_v_ce0;
        else 
            t_y_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_y_v_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_y_v_ce1 <= ap_const_logic_1;
        else 
            t_y_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_y_v_d0_assign_proc : process(ge25519_base_multipl_q0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_r_y_v_d0, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_y_v_d0 <= ge25519_base_multipl_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            t_y_v_d0 <= grp_cmov_aff_fu_1430_r_y_v_d0;
        else 
            t_y_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    t_y_v_d1 <= ge25519_base_multipl_q1;

    t_y_v_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, grp_cmov_aff_fu_1430_r_y_v_we0, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_y_v_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            t_y_v_we0 <= grp_cmov_aff_fu_1430_r_y_v_we0;
        else 
            t_y_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_y_v_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            t_y_v_we1 <= ap_const_logic_1;
        else 
            t_y_v_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_792_fu_1463_p3 <= (tmp_fu_1457_p2 & ap_const_lv5_0);
    tmp_793_fu_1471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_792_fu_1463_p3),64));
    tmp_794_fu_1477_p2 <= (tmp_792_fu_1463_p3 or ap_const_lv14_1);
    tmp_795_fu_1483_p3 <= (ap_const_lv50_0 & tmp_794_fu_1477_p2);
    tmp_796_fu_1493_p2 <= (tmp_792_reg_2248 or ap_const_lv14_2);
    tmp_797_fu_1498_p3 <= (ap_const_lv50_0 & tmp_796_fu_1493_p2);
    tmp_798_fu_1508_p2 <= (tmp_792_reg_2248 or ap_const_lv14_3);
    tmp_799_fu_1513_p3 <= (ap_const_lv50_0 & tmp_798_fu_1508_p2);
    tmp_800_fu_1523_p2 <= (tmp_792_reg_2248 or ap_const_lv14_4);
    tmp_801_fu_1528_p3 <= (ap_const_lv50_0 & tmp_800_fu_1523_p2);
    tmp_802_fu_1538_p2 <= (tmp_792_reg_2248 or ap_const_lv14_5);
    tmp_803_fu_1543_p3 <= (ap_const_lv50_0 & tmp_802_fu_1538_p2);
    tmp_804_fu_1553_p2 <= (tmp_792_reg_2248 or ap_const_lv14_6);
    tmp_805_fu_1558_p3 <= (ap_const_lv50_0 & tmp_804_fu_1553_p2);
    tmp_806_fu_1568_p2 <= (tmp_792_reg_2248 or ap_const_lv14_7);
    tmp_807_fu_1573_p3 <= (ap_const_lv50_0 & tmp_806_fu_1568_p2);
    tmp_808_fu_1583_p2 <= (tmp_792_reg_2248 or ap_const_lv14_8);
    tmp_809_fu_1588_p3 <= (ap_const_lv50_0 & tmp_808_fu_1583_p2);
    tmp_810_fu_1598_p2 <= (tmp_792_reg_2248 or ap_const_lv14_9);
    tmp_811_fu_1603_p3 <= (ap_const_lv50_0 & tmp_810_fu_1598_p2);
    tmp_812_fu_1613_p2 <= (tmp_792_reg_2248 or ap_const_lv14_A);
    tmp_813_fu_1618_p3 <= (ap_const_lv50_0 & tmp_812_fu_1613_p2);
    tmp_814_fu_1628_p2 <= (tmp_792_reg_2248 or ap_const_lv14_B);
    tmp_815_fu_1633_p3 <= (ap_const_lv50_0 & tmp_814_fu_1628_p2);
    tmp_816_fu_1643_p2 <= (tmp_792_reg_2248 or ap_const_lv14_C);
    tmp_817_fu_1648_p3 <= (ap_const_lv50_0 & tmp_816_fu_1643_p2);
    tmp_818_fu_1658_p2 <= (tmp_792_reg_2248 or ap_const_lv14_D);
    tmp_819_fu_1663_p3 <= (ap_const_lv50_0 & tmp_818_fu_1658_p2);
    tmp_820_fu_1673_p2 <= (tmp_792_reg_2248 or ap_const_lv14_E);
    tmp_821_fu_1678_p3 <= (ap_const_lv50_0 & tmp_820_fu_1673_p2);
    tmp_822_fu_1688_p2 <= (tmp_792_reg_2248 or ap_const_lv14_F);
    tmp_823_fu_1693_p3 <= (ap_const_lv50_0 & tmp_822_fu_1688_p2);
    tmp_824_fu_1703_p2 <= (tmp_792_reg_2248 or ap_const_lv14_10);
    tmp_825_fu_1708_p3 <= (ap_const_lv50_0 & tmp_824_fu_1703_p2);
    tmp_826_fu_1718_p2 <= (tmp_792_reg_2248 or ap_const_lv14_11);
    tmp_827_fu_1723_p3 <= (ap_const_lv50_0 & tmp_826_fu_1718_p2);
    tmp_828_fu_1733_p2 <= (tmp_792_reg_2248 or ap_const_lv14_12);
    tmp_829_fu_1738_p3 <= (ap_const_lv50_0 & tmp_828_fu_1733_p2);
    tmp_830_fu_1748_p2 <= (tmp_792_reg_2248 or ap_const_lv14_13);
    tmp_831_fu_1753_p3 <= (ap_const_lv50_0 & tmp_830_fu_1748_p2);
    tmp_832_fu_1763_p2 <= (tmp_792_reg_2248 or ap_const_lv14_14);
    tmp_833_fu_1768_p3 <= (ap_const_lv50_0 & tmp_832_fu_1763_p2);
    tmp_834_fu_1778_p2 <= (tmp_792_reg_2248 or ap_const_lv14_15);
    tmp_835_fu_1783_p3 <= (ap_const_lv50_0 & tmp_834_fu_1778_p2);
    tmp_836_fu_1793_p2 <= (tmp_792_reg_2248 or ap_const_lv14_16);
    tmp_837_fu_1798_p3 <= (ap_const_lv50_0 & tmp_836_fu_1793_p2);
    tmp_838_fu_1808_p2 <= (tmp_792_reg_2248 or ap_const_lv14_17);
    tmp_839_fu_1813_p3 <= (ap_const_lv50_0 & tmp_838_fu_1808_p2);
    tmp_840_fu_1823_p2 <= (tmp_792_reg_2248 or ap_const_lv14_18);
    tmp_841_fu_1828_p3 <= (ap_const_lv50_0 & tmp_840_fu_1823_p2);
    tmp_842_fu_1838_p2 <= (tmp_792_reg_2248 or ap_const_lv14_19);
    tmp_843_fu_1843_p3 <= (ap_const_lv50_0 & tmp_842_fu_1838_p2);
    tmp_844_fu_1853_p2 <= (tmp_792_reg_2248 or ap_const_lv14_1A);
    tmp_845_fu_1858_p3 <= (ap_const_lv50_0 & tmp_844_fu_1853_p2);
    tmp_846_fu_1868_p2 <= (tmp_792_reg_2248 or ap_const_lv14_1B);
    tmp_847_fu_1873_p3 <= (ap_const_lv50_0 & tmp_846_fu_1868_p2);
    tmp_848_fu_1883_p2 <= (tmp_792_reg_2248 or ap_const_lv14_1C);
    tmp_849_fu_1888_p3 <= (ap_const_lv50_0 & tmp_848_fu_1883_p2);
    tmp_850_fu_1898_p2 <= (tmp_792_reg_2248 or ap_const_lv14_1D);
    tmp_851_fu_1903_p3 <= (ap_const_lv50_0 & tmp_850_fu_1898_p2);
    tmp_852_fu_1913_p2 <= (tmp_792_reg_2248 or ap_const_lv14_1E);
    tmp_853_fu_1918_p3 <= (ap_const_lv50_0 & tmp_852_fu_1913_p2);
    tmp_854_fu_1928_p2 <= (tmp_792_reg_2248 or ap_const_lv14_1F);
    tmp_855_fu_1933_p3 <= (ap_const_lv50_0 & tmp_854_fu_1928_p2);
    tmp_856_fu_1998_p2 <= (tmp_863_fu_1990_p3 or tmp_862_fu_1966_p3);
    tmp_857_fu_2005_p2 <= std_logic_vector(unsigned(tmp_reg_2240) + unsigned(ap_const_lv9_2));
    tmp_858_fu_2058_p2 <= (tmp_865_fu_2050_p3 or tmp_864_fu_2027_p3);
    tmp_859_fu_2065_p2 <= std_logic_vector(unsigned(tmp_reg_2240) + unsigned(ap_const_lv9_3));
    tmp_860_fu_2118_p2 <= (tmp_867_fu_2110_p3 or tmp_866_fu_2087_p3);
    tmp_861_fu_2125_p2 <= std_logic_vector(unsigned(tmp_reg_2240) + unsigned(ap_const_lv9_4));
    tmp_862_fu_1966_p3 <= y_fu_1960_p2(8 downto 8);
    tmp_863_fu_1990_p3 <= y_1_fu_1984_p2(8 downto 8);
    tmp_864_fu_2027_p3 <= y_2_fu_2021_p2(8 downto 8);
    tmp_865_fu_2050_p3 <= y_3_fu_2044_p2(8 downto 8);
    tmp_866_fu_2087_p3 <= y_4_fu_2081_p2(8 downto 8);
    tmp_867_fu_2110_p3 <= y_5_fu_2104_p2(8 downto 8);
    tmp_894_i_fu_2222_p2 <= (t_x_v_q1 xor v_v_q0);
    tmp_895_i_fu_2228_p2 <= (tmp_894_i_fu_2222_p2 and mask_reg_2687);
    tmp_896_i_fu_2233_p2 <= (t_x_v_q1 xor tmp_895_i_fu_2228_p2);
    tmp_fu_1457_p2 <= std_logic_vector(unsigned(p_shl_fu_1449_p3) + unsigned(pos_cast4_fu_1445_p1));
    tmp_i1_fu_2168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_1391),64));
    tmp_i_fu_2216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_1413),64));
    tmp_i_i_fu_2185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_1402),64));
    tmp_s_fu_1943_p2 <= std_logic_vector(unsigned(tmp_reg_2240) + unsigned(ap_const_lv9_1));

    v_v_address0_assign_proc : process(ap_CS_fsm_state28, exitcond_i_i_fu_2173_p2, ap_CS_fsm_state29, ap_CS_fsm_state30, grp_crypto_sign_ed25519_7_fu_1424_r_v_address0, tmp_i_i_fu_2185_p1, tmp_i_fu_2216_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            v_v_address0 <= tmp_i_fu_2216_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond_i_i_fu_2173_p2))) then 
            v_v_address0 <= tmp_i_i_fu_2185_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            v_v_address0 <= grp_crypto_sign_ed25519_7_fu_1424_r_v_address0;
        else 
            v_v_address0 <= "XXXXX";
        end if; 
    end process;


    v_v_ce0_assign_proc : process(ap_CS_fsm_state28, exitcond_i_i_fu_2173_p2, ap_CS_fsm_state29, ap_CS_fsm_state30, grp_crypto_sign_ed25519_7_fu_1424_r_v_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond_i_i_fu_2173_p2)))) then 
            v_v_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            v_v_ce0 <= grp_crypto_sign_ed25519_7_fu_1424_r_v_ce0;
        else 
            v_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_v_ce1_assign_proc : process(ap_CS_fsm_state29, grp_crypto_sign_ed25519_7_fu_1424_r_v_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            v_v_ce1 <= grp_crypto_sign_ed25519_7_fu_1424_r_v_ce1;
        else 
            v_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_v_d0_assign_proc : process(ap_CS_fsm_state28, exitcond_i_i_fu_2173_p2, ap_CS_fsm_state29, grp_crypto_sign_ed25519_7_fu_1424_r_v_d0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond_i_i_fu_2173_p2))) then 
            v_v_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            v_v_d0 <= grp_crypto_sign_ed25519_7_fu_1424_r_v_d0;
        else 
            v_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    v_v_we0_assign_proc : process(ap_CS_fsm_state28, exitcond_i_i_fu_2173_p2, ap_CS_fsm_state29, grp_crypto_sign_ed25519_7_fu_1424_r_v_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond_i_i_fu_2173_p2))) then 
            v_v_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            v_v_we0 <= grp_crypto_sign_ed25519_7_fu_1424_r_v_we0;
        else 
            v_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_v_we1_assign_proc : process(ap_CS_fsm_state29, grp_crypto_sign_ed25519_7_fu_1424_r_v_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            v_v_we1 <= grp_crypto_sign_ed25519_7_fu_1424_r_v_we1;
        else 
            v_v_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x_10_fu_2035_p2 <= (b xor ap_const_lv8_FE);
    x_11_fu_2072_p2 <= (b xor ap_const_lv8_3);
    x_12_fu_2095_p2 <= (b xor ap_const_lv8_FD);
    x_13_fu_2132_p2 <= (b xor ap_const_lv8_FC);
    x_8_fu_1974_p2 <= (b xor ap_const_lv8_FF);
    x_9_fu_2012_p2 <= (b xor ap_const_lv8_2);
    x_fu_1950_p2 <= (b xor ap_const_lv8_1);
    y_12_cast_fu_2077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_11_fu_2072_p2),9));
    y_15_cast_fu_2100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_12_fu_2095_p2),9));
    y_18_cast_fu_2137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_13_fu_2132_p2),9));
    y_1_fu_1984_p2 <= std_logic_vector(unsigned(y_3_cast_fu_1980_p1) + unsigned(ap_const_lv9_1FF));
    y_2_fu_2021_p2 <= std_logic_vector(unsigned(y_6_cast_fu_2017_p1) + unsigned(ap_const_lv9_1FF));
    y_3_cast_fu_1980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_8_fu_1974_p2),9));
    y_3_fu_2044_p2 <= std_logic_vector(unsigned(y_9_cast_fu_2040_p1) + unsigned(ap_const_lv9_1FF));
    y_4_fu_2081_p2 <= std_logic_vector(unsigned(y_12_cast_fu_2077_p1) + unsigned(ap_const_lv9_1FF));
    y_5_fu_2104_p2 <= std_logic_vector(unsigned(y_15_cast_fu_2100_p1) + unsigned(ap_const_lv9_1FF));
    y_6_cast_fu_2017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_9_fu_2012_p2),9));
    y_6_fu_2141_p2 <= std_logic_vector(unsigned(y_18_cast_fu_2137_p1) + unsigned(ap_const_lv9_1FF));
    y_9_cast_fu_2040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_10_fu_2035_p2),9));
    y_cast_fu_1956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_1950_p2),9));
    y_fu_1960_p2 <= std_logic_vector(unsigned(y_cast_fu_1956_p1) + unsigned(ap_const_lv9_1FF));
end behav;
