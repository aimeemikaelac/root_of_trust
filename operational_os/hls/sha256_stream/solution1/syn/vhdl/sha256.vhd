-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256 is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    stream_in_V_TVALID : IN STD_LOGIC;
    stream_in_V_TREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of sha256 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i-es1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.729000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=0,HLS_SYN_FF=2245,HLS_SYN_LUT=6203}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_in_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_in_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_in_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_in_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_0_sel : STD_LOGIC;
    signal stream_in_V_0_load_A : STD_LOGIC;
    signal stream_in_V_0_load_B : STD_LOGIC;
    signal stream_in_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_0_state_cmp_full : STD_LOGIC;
    signal num_blocks : STD_LOGIC_VECTOR (31 downto 0);
    signal num_blocks_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal num_blocks_ap_vld : STD_LOGIC;
    signal num_blocks_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal num_blocks_ap_vld_preg : STD_LOGIC := '0';
    signal num_blocks_ap_vld_in_sig : STD_LOGIC;
    signal stream_in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal num_blocks_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal block_counter_1_fu_292_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal block_counter_1_reg_331 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal data_index_1_fu_304_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal data_index_1_reg_339 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_update_fu_256_ap_done : STD_LOGIC;
    signal data_buffer_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_buffer_ce0 : STD_LOGIC;
    signal data_buffer_we0 : STD_LOGIC;
    signal data_buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_buffer_ce1 : STD_LOGIC;
    signal data_buffer_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_block_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cipher_m_block_ce0 : STD_LOGIC;
    signal cipher_m_block_we0 : STD_LOGIC;
    signal cipher_m_block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_block_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal cipher_m_block_ce1 : STD_LOGIC;
    signal cipher_m_block_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_h_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cipher_m_h_ce0 : STD_LOGIC;
    signal cipher_m_h_we0 : STD_LOGIC;
    signal cipher_m_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cipher_m_h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cipher_m_h_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal cipher_m_h_ce1 : STD_LOGIC;
    signal cipher_m_h_we1 : STD_LOGIC;
    signal cipher_m_h_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_256_ap_start : STD_LOGIC;
    signal grp_update_fu_256_ap_idle : STD_LOGIC;
    signal grp_update_fu_256_ap_ready : STD_LOGIC;
    signal grp_update_fu_256_SHA256_m_block_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_update_fu_256_SHA256_m_block_ce0 : STD_LOGIC;
    signal grp_update_fu_256_SHA256_m_block_we0 : STD_LOGIC;
    signal grp_update_fu_256_SHA256_m_block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_256_SHA256_m_block_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_update_fu_256_SHA256_m_block_ce1 : STD_LOGIC;
    signal grp_update_fu_256_SHA256_m_h_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_update_fu_256_SHA256_m_h_ce0 : STD_LOGIC;
    signal grp_update_fu_256_SHA256_m_h_we0 : STD_LOGIC;
    signal grp_update_fu_256_SHA256_m_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_256_message_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_fu_256_message_ce0 : STD_LOGIC;
    signal grp_update_fu_256_message_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_fu_256_message_ce1 : STD_LOGIC;
    signal grp_update_fu_256_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_256_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_final_fu_269_ap_start : STD_LOGIC;
    signal grp_final_fu_269_ap_done : STD_LOGIC;
    signal grp_final_fu_269_ap_idle : STD_LOGIC;
    signal grp_final_fu_269_ap_ready : STD_LOGIC;
    signal grp_final_fu_269_SHA256_m_block_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_final_fu_269_SHA256_m_block_ce0 : STD_LOGIC;
    signal grp_final_fu_269_SHA256_m_block_we0 : STD_LOGIC;
    signal grp_final_fu_269_SHA256_m_block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_final_fu_269_SHA256_m_block_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_final_fu_269_SHA256_m_block_ce1 : STD_LOGIC;
    signal grp_final_fu_269_SHA256_m_h_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_final_fu_269_SHA256_m_h_ce0 : STD_LOGIC;
    signal grp_final_fu_269_SHA256_m_h_we0 : STD_LOGIC;
    signal grp_final_fu_269_SHA256_m_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_final_fu_269_digest_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_final_fu_269_digest_ce0 : STD_LOGIC;
    signal grp_final_fu_269_digest_we0 : STD_LOGIC;
    signal grp_final_fu_269_digest_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_len_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal cipher_m_tot_len_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_counter_reg_233 : STD_LOGIC_VECTOR (30 downto 0);
    signal data_index_reg_244 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_update_fu_256_ap_start : STD_LOGIC := '0';
    signal exitcond_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_final_fu_269_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal block_counter_cast_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SHA256_m_tot_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_block_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        SHA256_m_block_ce0 : OUT STD_LOGIC;
        SHA256_m_block_we0 : OUT STD_LOGIC;
        SHA256_m_block_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_block_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_block_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        SHA256_m_block_ce1 : OUT STD_LOGIC;
        SHA256_m_block_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_h_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        SHA256_m_h_ce0 : OUT STD_LOGIC;
        SHA256_m_h_we0 : OUT STD_LOGIC;
        SHA256_m_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        message_ce1 : OUT STD_LOGIC;
        message_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SHA256_m_tot_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_block_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        SHA256_m_block_ce0 : OUT STD_LOGIC;
        SHA256_m_block_we0 : OUT STD_LOGIC;
        SHA256_m_block_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_block_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_block_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        SHA256_m_block_ce1 : OUT STD_LOGIC;
        SHA256_m_block_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_h_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        SHA256_m_h_ce0 : OUT STD_LOGIC;
        SHA256_m_h_we0 : OUT STD_LOGIC;
        SHA256_m_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        digest_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        digest_ce0 : OUT STD_LOGIC;
        digest_we0 : OUT STD_LOGIC;
        digest_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_data_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_cipher_m_bdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_cipher_m_h IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        num_blocks : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_blocks_ap_vld : OUT STD_LOGIC;
        digest_out_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        digest_out_ce0 : IN STD_LOGIC;
        digest_out_we0 : IN STD_LOGIC;
        digest_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sha256_AXILiteS_s_axi_U : component sha256_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        num_blocks => num_blocks,
        num_blocks_ap_vld => num_blocks_ap_vld,
        digest_out_address0 => grp_final_fu_269_digest_address0,
        digest_out_ce0 => grp_final_fu_269_digest_ce0,
        digest_out_we0 => grp_final_fu_269_digest_we0,
        digest_out_d0 => grp_final_fu_269_digest_d0);

    data_buffer_U : component sha256_data_buffer
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_buffer_address0,
        ce0 => data_buffer_ce0,
        we0 => data_buffer_we0,
        d0 => stream_in_V_0_data_out,
        q0 => data_buffer_q0,
        address1 => grp_update_fu_256_message_address1,
        ce1 => data_buffer_ce1,
        q1 => data_buffer_q1);

    cipher_m_block_U : component sha256_cipher_m_bdEe
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cipher_m_block_address0,
        ce0 => cipher_m_block_ce0,
        we0 => cipher_m_block_we0,
        d0 => cipher_m_block_d0,
        q0 => cipher_m_block_q0,
        address1 => cipher_m_block_address1,
        ce1 => cipher_m_block_ce1,
        q1 => cipher_m_block_q1);

    cipher_m_h_U : component sha256_cipher_m_h
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cipher_m_h_address0,
        ce0 => cipher_m_h_ce0,
        we0 => cipher_m_h_we0,
        d0 => cipher_m_h_d0,
        q0 => cipher_m_h_q0,
        address1 => cipher_m_h_address1,
        ce1 => cipher_m_h_ce1,
        we1 => cipher_m_h_we1,
        d1 => cipher_m_h_d1);

    grp_update_fu_256 : component update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_update_fu_256_ap_start,
        ap_done => grp_update_fu_256_ap_done,
        ap_idle => grp_update_fu_256_ap_idle,
        ap_ready => grp_update_fu_256_ap_ready,
        SHA256_m_tot_len_read => cipher_m_tot_len_reg_221,
        SHA256_m_len_read => cipher_m_len_reg_209,
        SHA256_m_block_address0 => grp_update_fu_256_SHA256_m_block_address0,
        SHA256_m_block_ce0 => grp_update_fu_256_SHA256_m_block_ce0,
        SHA256_m_block_we0 => grp_update_fu_256_SHA256_m_block_we0,
        SHA256_m_block_d0 => grp_update_fu_256_SHA256_m_block_d0,
        SHA256_m_block_q0 => cipher_m_block_q0,
        SHA256_m_block_address1 => grp_update_fu_256_SHA256_m_block_address1,
        SHA256_m_block_ce1 => grp_update_fu_256_SHA256_m_block_ce1,
        SHA256_m_block_q1 => cipher_m_block_q1,
        SHA256_m_h_address0 => grp_update_fu_256_SHA256_m_h_address0,
        SHA256_m_h_ce0 => grp_update_fu_256_SHA256_m_h_ce0,
        SHA256_m_h_we0 => grp_update_fu_256_SHA256_m_h_we0,
        SHA256_m_h_d0 => grp_update_fu_256_SHA256_m_h_d0,
        SHA256_m_h_q0 => cipher_m_h_q0,
        message_address0 => grp_update_fu_256_message_address0,
        message_ce0 => grp_update_fu_256_message_ce0,
        message_q0 => data_buffer_q0,
        message_address1 => grp_update_fu_256_message_address1,
        message_ce1 => grp_update_fu_256_message_ce1,
        message_q1 => data_buffer_q1,
        ap_return_0 => grp_update_fu_256_ap_return_0,
        ap_return_1 => grp_update_fu_256_ap_return_1);

    grp_final_fu_269 : component final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_final_fu_269_ap_start,
        ap_done => grp_final_fu_269_ap_done,
        ap_idle => grp_final_fu_269_ap_idle,
        ap_ready => grp_final_fu_269_ap_ready,
        SHA256_m_tot_len_read => cipher_m_tot_len_reg_221,
        SHA256_m_len_read => cipher_m_len_reg_209,
        SHA256_m_block_address0 => grp_final_fu_269_SHA256_m_block_address0,
        SHA256_m_block_ce0 => grp_final_fu_269_SHA256_m_block_ce0,
        SHA256_m_block_we0 => grp_final_fu_269_SHA256_m_block_we0,
        SHA256_m_block_d0 => grp_final_fu_269_SHA256_m_block_d0,
        SHA256_m_block_q0 => cipher_m_block_q0,
        SHA256_m_block_address1 => grp_final_fu_269_SHA256_m_block_address1,
        SHA256_m_block_ce1 => grp_final_fu_269_SHA256_m_block_ce1,
        SHA256_m_block_q1 => cipher_m_block_q1,
        SHA256_m_h_address0 => grp_final_fu_269_SHA256_m_h_address0,
        SHA256_m_h_ce0 => grp_final_fu_269_SHA256_m_h_ce0,
        SHA256_m_h_we0 => grp_final_fu_269_SHA256_m_h_we0,
        SHA256_m_h_d0 => grp_final_fu_269_SHA256_m_h_d0,
        SHA256_m_h_q0 => cipher_m_h_q0,
        digest_address0 => grp_final_fu_269_digest_address0,
        digest_ce0 => grp_final_fu_269_digest_ce0,
        digest_we0 => grp_final_fu_269_digest_we0,
        digest_d0 => grp_final_fu_269_digest_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_final_fu_269_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_final_fu_269_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_fu_287_p2))) then 
                    ap_reg_grp_final_fu_269_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_final_fu_269_ap_ready)) then 
                    ap_reg_grp_final_fu_269_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_update_fu_256_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_update_fu_256_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_298_p2))) then 
                    ap_reg_grp_update_fu_256_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_update_fu_256_ap_ready)) then 
                    ap_reg_grp_update_fu_256_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    num_blocks_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                num_blocks_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_final_fu_269_ap_done = ap_const_logic_1))) then 
                    num_blocks_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = num_blocks_ap_vld))) then 
                    num_blocks_ap_vld_preg <= num_blocks_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    num_blocks_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                num_blocks_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = num_blocks_ap_vld))) then 
                    num_blocks_preg <= num_blocks;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_0_ack_out) and (ap_const_logic_1 = stream_in_V_0_vld_out))) then 
                                        stream_in_V_0_sel_rd <= not(stream_in_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_0_ack_in))) then 
                                        stream_in_V_0_sel_wr <= not(stream_in_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_in_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_0_ack_out) and (stream_in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_in_V_0_vld_in) and (stream_in_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_in_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_0_ack_out) and (stream_in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_in_V_0_ack_out) and (stream_in_V_0_state = ap_const_lv2_1)))) then 
                    stream_in_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_in_V_0_vld_in) and (stream_in_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = stream_in_V_0_ack_out) and (stream_in_V_0_state = ap_const_lv2_1)) or ((stream_in_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = stream_in_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_0_ack_out))) and not(((ap_const_logic_0 = stream_in_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_0_ack_out)))))) then 
                    stream_in_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    block_counter_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_update_fu_256_ap_done = ap_const_logic_1))) then 
                block_counter_reg_233 <= block_counter_1_reg_331;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (num_blocks_ap_vld_in_sig = ap_const_logic_1))) then 
                block_counter_reg_233 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    cipher_m_len_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_update_fu_256_ap_done = ap_const_logic_1))) then 
                cipher_m_len_reg_209 <= grp_update_fu_256_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (num_blocks_ap_vld_in_sig = ap_const_logic_1))) then 
                cipher_m_len_reg_209 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    cipher_m_tot_len_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_update_fu_256_ap_done = ap_const_logic_1))) then 
                cipher_m_tot_len_reg_221 <= grp_update_fu_256_ap_return_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (num_blocks_ap_vld_in_sig = ap_const_logic_1))) then 
                cipher_m_tot_len_reg_221 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    data_index_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_fu_287_p2))) then 
                data_index_reg_244 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (stream_in_V_0_vld_out = ap_const_logic_1))) then 
                data_index_reg_244 <= data_index_1_reg_339;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                block_counter_1_reg_331 <= block_counter_1_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                data_index_1_reg_339 <= data_index_1_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_0_load_A)) then
                stream_in_V_0_payload_A <= stream_in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_0_load_B)) then
                stream_in_V_0_payload_B <= stream_in_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_in_V_0_vld_out, num_blocks_ap_vld_in_sig, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_update_fu_256_ap_done, grp_final_fu_269_ap_done, tmp_fu_287_p2, exitcond_fu_298_p2, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (num_blocks_ap_vld_in_sig = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = tmp_fu_287_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_298_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (stream_in_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_update_fu_256_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_final_fu_269_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_final_fu_269_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_final_fu_269_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_final_fu_269_ap_done, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_final_fu_269_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    block_counter_1_fu_292_p2 <= std_logic_vector(unsigned(block_counter_reg_233) + unsigned(ap_const_lv31_1));
    block_counter_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(block_counter_reg_233),32));

    cipher_m_block_address0_assign_proc : process(ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_block_address0, grp_final_fu_269_SHA256_m_block_address0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_block_address0 <= grp_final_fu_269_SHA256_m_block_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_block_address0 <= grp_update_fu_256_SHA256_m_block_address0;
        else 
            cipher_m_block_address0 <= "XXXXXXX";
        end if; 
    end process;


    cipher_m_block_address1_assign_proc : process(ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_block_address1, grp_final_fu_269_SHA256_m_block_address1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_block_address1 <= grp_final_fu_269_SHA256_m_block_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_block_address1 <= grp_update_fu_256_SHA256_m_block_address1;
        else 
            cipher_m_block_address1 <= "XXXXXXX";
        end if; 
    end process;


    cipher_m_block_ce0_assign_proc : process(ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_block_ce0, grp_final_fu_269_SHA256_m_block_ce0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_block_ce0 <= grp_final_fu_269_SHA256_m_block_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_block_ce0 <= grp_update_fu_256_SHA256_m_block_ce0;
        else 
            cipher_m_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_block_ce1_assign_proc : process(ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_block_ce1, grp_final_fu_269_SHA256_m_block_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_block_ce1 <= grp_final_fu_269_SHA256_m_block_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_block_ce1 <= grp_update_fu_256_SHA256_m_block_ce1;
        else 
            cipher_m_block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_block_d0_assign_proc : process(ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_block_d0, grp_final_fu_269_SHA256_m_block_d0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_block_d0 <= grp_final_fu_269_SHA256_m_block_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_block_d0 <= grp_update_fu_256_SHA256_m_block_d0;
        else 
            cipher_m_block_d0 <= "XXXXXXXX";
        end if; 
    end process;


    cipher_m_block_we0_assign_proc : process(ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_block_we0, grp_final_fu_269_SHA256_m_block_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_block_we0 <= grp_final_fu_269_SHA256_m_block_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_block_we0 <= grp_update_fu_256_SHA256_m_block_we0;
        else 
            cipher_m_block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_h_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_h_address0, grp_final_fu_269_SHA256_m_h_address0, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_m_h_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_m_h_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipher_m_h_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cipher_m_h_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_h_address0 <= grp_final_fu_269_SHA256_m_h_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_h_address0 <= grp_update_fu_256_SHA256_m_h_address0;
        else 
            cipher_m_h_address0 <= "XXX";
        end if; 
    end process;


    cipher_m_h_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_m_h_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_m_h_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipher_m_h_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cipher_m_h_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            cipher_m_h_address1 <= "XXX";
        end if; 
    end process;


    cipher_m_h_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, num_blocks_ap_vld_in_sig, ap_CS_fsm_state4, ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_h_ce0, grp_final_fu_269_SHA256_m_h_ce0, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (num_blocks_ap_vld_in_sig = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cipher_m_h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_h_ce0 <= grp_final_fu_269_SHA256_m_h_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_h_ce0 <= grp_update_fu_256_SHA256_m_h_ce0;
        else 
            cipher_m_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_h_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, num_blocks_ap_vld_in_sig, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (num_blocks_ap_vld_in_sig = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cipher_m_h_ce1 <= ap_const_logic_1;
        else 
            cipher_m_h_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_h_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_h_d0, grp_final_fu_269_SHA256_m_h_d0, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_m_h_d0 <= ap_const_lv32_1F83D9AB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_m_h_d0 <= ap_const_lv32_510E527F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipher_m_h_d0 <= ap_const_lv32_3C6EF372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cipher_m_h_d0 <= ap_const_lv32_6A09E667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_h_d0 <= grp_final_fu_269_SHA256_m_h_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_h_d0 <= grp_update_fu_256_SHA256_m_h_d0;
        else 
            cipher_m_h_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cipher_m_h_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_m_h_d1 <= ap_const_lv32_5BE0CD19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_m_h_d1 <= ap_const_lv32_9B05688C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipher_m_h_d1 <= ap_const_lv32_A54FF53A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cipher_m_h_d1 <= ap_const_lv32_BB67AE85;
        else 
            cipher_m_h_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cipher_m_h_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, num_blocks_ap_vld_in_sig, ap_CS_fsm_state4, ap_CS_fsm_state8, grp_update_fu_256_SHA256_m_h_we0, grp_final_fu_269_SHA256_m_h_we0, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (num_blocks_ap_vld_in_sig = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cipher_m_h_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            cipher_m_h_we0 <= grp_final_fu_269_SHA256_m_h_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_m_h_we0 <= grp_update_fu_256_SHA256_m_h_we0;
        else 
            cipher_m_h_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_h_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, num_blocks_ap_vld_in_sig, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (num_blocks_ap_vld_in_sig = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cipher_m_h_we1 <= ap_const_logic_1;
        else 
            cipher_m_h_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_buffer_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, grp_update_fu_256_message_address0, tmp_3_fu_310_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_buffer_address0 <= tmp_3_fu_310_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_buffer_address0 <= grp_update_fu_256_message_address0;
        else 
            data_buffer_address0 <= "XXXXXX";
        end if; 
    end process;


    data_buffer_ce0_assign_proc : process(stream_in_V_0_vld_out, ap_CS_fsm_state7, ap_CS_fsm_state8, grp_update_fu_256_message_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (stream_in_V_0_vld_out = ap_const_logic_1))) then 
            data_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_buffer_ce0 <= grp_update_fu_256_message_ce0;
        else 
            data_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buffer_ce1_assign_proc : process(ap_CS_fsm_state8, grp_update_fu_256_message_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_buffer_ce1 <= grp_update_fu_256_message_ce1;
        else 
            data_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_buffer_we0_assign_proc : process(stream_in_V_0_vld_out, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (stream_in_V_0_vld_out = ap_const_logic_1))) then 
            data_buffer_we0 <= ap_const_logic_1;
        else 
            data_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_index_1_fu_304_p2 <= std_logic_vector(unsigned(data_index_reg_244) + unsigned(ap_const_lv7_1));
    exitcond_fu_298_p2 <= "1" when (data_index_reg_244 = ap_const_lv7_40) else "0";
    grp_final_fu_269_ap_start <= ap_reg_grp_final_fu_269_ap_start;
    grp_update_fu_256_ap_start <= ap_reg_grp_update_fu_256_ap_start;

    num_blocks_ap_vld_in_sig_assign_proc : process(num_blocks_ap_vld, num_blocks_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = num_blocks_ap_vld)) then 
            num_blocks_ap_vld_in_sig <= num_blocks_ap_vld;
        else 
            num_blocks_ap_vld_in_sig <= num_blocks_ap_vld_preg;
        end if; 
    end process;


    num_blocks_blk_n_assign_proc : process(num_blocks_ap_vld, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            num_blocks_blk_n <= num_blocks_ap_vld;
        else 
            num_blocks_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    num_blocks_in_sig_assign_proc : process(num_blocks, num_blocks_preg, num_blocks_ap_vld)
    begin
        if ((ap_const_logic_1 = num_blocks_ap_vld)) then 
            num_blocks_in_sig <= num_blocks;
        else 
            num_blocks_in_sig <= num_blocks_preg;
        end if; 
    end process;

    stream_in_V_0_ack_in <= stream_in_V_0_state(1);

    stream_in_V_0_ack_out_assign_proc : process(stream_in_V_0_vld_out, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (stream_in_V_0_vld_out = ap_const_logic_1))) then 
            stream_in_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_0_data_out_assign_proc : process(stream_in_V_0_payload_A, stream_in_V_0_payload_B, stream_in_V_0_sel)
    begin
        if ((ap_const_logic_1 = stream_in_V_0_sel)) then 
            stream_in_V_0_data_out <= stream_in_V_0_payload_B;
        else 
            stream_in_V_0_data_out <= stream_in_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_0_load_A <= (stream_in_V_0_state_cmp_full and not(stream_in_V_0_sel_wr));
    stream_in_V_0_load_B <= (stream_in_V_0_sel_wr and stream_in_V_0_state_cmp_full);
    stream_in_V_0_sel <= stream_in_V_0_sel_rd;
    stream_in_V_0_state_cmp_full <= '0' when (stream_in_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_0_vld_in <= stream_in_V_TVALID;
    stream_in_V_0_vld_out <= stream_in_V_0_state(0);

    stream_in_V_TDATA_blk_n_assign_proc : process(stream_in_V_0_state, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            stream_in_V_TDATA_blk_n <= stream_in_V_0_state(0);
        else 
            stream_in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_V_TREADY <= stream_in_V_0_state(1);
    tmp_3_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_index_reg_244),64));
    tmp_fu_287_p2 <= "1" when (signed(block_counter_cast_fu_283_p1) < signed(num_blocks_in_sig)) else "0";
end behav;
