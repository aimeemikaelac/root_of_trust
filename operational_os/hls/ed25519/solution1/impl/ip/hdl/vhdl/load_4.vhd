-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_offset : IN STD_LOGIC_VECTOR (6 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of load_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1374_fu_66_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1374_reg_116 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_load_reg_127 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal in_load_1_reg_132 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_offset_cast3_fu_61_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_76_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_86_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_96_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_70_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum2_fu_81_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum4_fu_91_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_101_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_preg <= tmp_fu_101_p5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                in_load_1_reg_132 <= in_r_q1;
                in_load_reg_127 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_1374_reg_116 <= tmp_1374_fu_66_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state3, tmp_fu_101_p5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return <= tmp_fu_101_p5;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    in_offset_cast3_fu_61_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_offset),64));

    in_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, in_offset_cast3_fu_61_p1, sum2_cast_fu_86_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_address0 <= sum2_cast_fu_86_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_r_address0 <= in_offset_cast3_fu_61_p1(6 - 1 downto 0);
        else 
            in_r_address0 <= "XXXXXX";
        end if; 
    end process;


    in_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, sum_cast_fu_76_p1, sum4_cast_fu_96_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_address1 <= sum4_cast_fu_96_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            in_r_address1 <= sum_cast_fu_76_p1(6 - 1 downto 0);
        else 
            in_r_address1 <= "XXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sum2_cast_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_81_p2),64));
    sum2_fu_81_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(tmp_1374_reg_116));
    sum4_cast_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_91_p2),64));
    sum4_fu_91_p2 <= std_logic_vector(unsigned(ap_const_lv6_3) + unsigned(tmp_1374_reg_116));
    sum_cast_fu_76_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_70_p2),64));
    sum_fu_70_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(tmp_1374_fu_66_p1));
    tmp_1374_fu_66_p1 <= in_offset(6 - 1 downto 0);
    tmp_fu_101_p5 <= (((in_r_q1 & in_r_q0) & in_load_1_reg_132) & in_load_reg_127);
end behav;
