// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _load_4_HH_
#define _load_4_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct load_4 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<8> > in_r_q0;
    sc_out< sc_lv<6> > in_r_address1;
    sc_out< sc_logic > in_r_ce1;
    sc_in< sc_lv<8> > in_r_q1;
    sc_in< sc_lv<7> > in_offset;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    load_4(sc_module_name name);
    SC_HAS_PROCESS(load_4);

    ~load_4();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > tmp_1374_fu_66_p1;
    sc_signal< sc_lv<6> > tmp_1374_reg_116;
    sc_signal< sc_lv<8> > in_load_reg_127;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > in_load_1_reg_132;
    sc_signal< sc_lv<64> > in_offset_cast3_fu_61_p1;
    sc_signal< sc_lv<64> > sum_cast_fu_76_p1;
    sc_signal< sc_lv<64> > sum2_cast_fu_86_p1;
    sc_signal< sc_lv<64> > sum4_cast_fu_96_p1;
    sc_signal< sc_lv<6> > sum_fu_70_p2;
    sc_signal< sc_lv<6> > sum2_fu_81_p2;
    sc_signal< sc_lv<6> > sum4_fu_91_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > tmp_fu_101_p5;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_2;
    static const sc_lv<6> ap_const_lv6_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_in_offset_cast3_fu_61_p1();
    void thread_in_r_address0();
    void thread_in_r_address1();
    void thread_in_r_ce0();
    void thread_in_r_ce1();
    void thread_sum2_cast_fu_86_p1();
    void thread_sum2_fu_81_p2();
    void thread_sum4_cast_fu_96_p1();
    void thread_sum4_fu_91_p2();
    void thread_sum_cast_fu_76_p1();
    void thread_sum_fu_70_p2();
    void thread_tmp_1374_fu_66_p1();
    void thread_tmp_fu_101_p5();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
