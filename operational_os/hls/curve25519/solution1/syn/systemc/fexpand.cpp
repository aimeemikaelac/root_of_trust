// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fexpand.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fexpand::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fexpand::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<33> fexpand::ap_ST_fsm_state1 = "1";
const sc_lv<33> fexpand::ap_ST_fsm_state2 = "10";
const sc_lv<33> fexpand::ap_ST_fsm_state3 = "100";
const sc_lv<33> fexpand::ap_ST_fsm_state4 = "1000";
const sc_lv<33> fexpand::ap_ST_fsm_state5 = "10000";
const sc_lv<33> fexpand::ap_ST_fsm_state6 = "100000";
const sc_lv<33> fexpand::ap_ST_fsm_state7 = "1000000";
const sc_lv<33> fexpand::ap_ST_fsm_state8 = "10000000";
const sc_lv<33> fexpand::ap_ST_fsm_state9 = "100000000";
const sc_lv<33> fexpand::ap_ST_fsm_state10 = "1000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state11 = "10000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state12 = "100000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<33> fexpand::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<32> fexpand::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fexpand::ap_const_lv32_1 = "1";
const sc_lv<32> fexpand::ap_const_lv32_5 = "101";
const sc_lv<32> fexpand::ap_const_lv32_8 = "1000";
const sc_lv<32> fexpand::ap_const_lv32_B = "1011";
const sc_lv<32> fexpand::ap_const_lv32_E = "1110";
const sc_lv<32> fexpand::ap_const_lv32_11 = "10001";
const sc_lv<32> fexpand::ap_const_lv32_15 = "10101";
const sc_lv<32> fexpand::ap_const_lv32_18 = "11000";
const sc_lv<32> fexpand::ap_const_lv32_1B = "11011";
const sc_lv<32> fexpand::ap_const_lv32_1E = "11110";
const sc_lv<32> fexpand::ap_const_lv32_2 = "10";
const sc_lv<32> fexpand::ap_const_lv32_6 = "110";
const sc_lv<32> fexpand::ap_const_lv32_9 = "1001";
const sc_lv<32> fexpand::ap_const_lv32_C = "1100";
const sc_lv<32> fexpand::ap_const_lv32_F = "1111";
const sc_lv<32> fexpand::ap_const_lv32_12 = "10010";
const sc_lv<32> fexpand::ap_const_lv32_16 = "10110";
const sc_lv<32> fexpand::ap_const_lv32_19 = "11001";
const sc_lv<32> fexpand::ap_const_lv32_1C = "11100";
const sc_lv<32> fexpand::ap_const_lv32_1F = "11111";
const sc_lv<32> fexpand::ap_const_lv32_3 = "11";
const sc_lv<32> fexpand::ap_const_lv32_13 = "10011";
const sc_lv<32> fexpand::ap_const_lv32_7 = "111";
const sc_lv<32> fexpand::ap_const_lv32_17 = "10111";
const sc_lv<32> fexpand::ap_const_lv32_D = "1101";
const sc_lv<32> fexpand::ap_const_lv32_1D = "11101";
const sc_lv<32> fexpand::ap_const_lv32_4 = "100";
const sc_lv<32> fexpand::ap_const_lv32_A = "1010";
const sc_lv<32> fexpand::ap_const_lv32_10 = "10000";
const sc_lv<32> fexpand::ap_const_lv32_14 = "10100";
const sc_lv<32> fexpand::ap_const_lv32_1A = "11010";
const sc_lv<64> fexpand::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> fexpand::ap_const_lv64_1 = "1";
const sc_lv<64> fexpand::ap_const_lv64_2 = "10";
const sc_lv<64> fexpand::ap_const_lv64_3 = "11";
const sc_lv<64> fexpand::ap_const_lv64_4 = "100";
const sc_lv<64> fexpand::ap_const_lv64_5 = "101";
const sc_lv<64> fexpand::ap_const_lv64_6 = "110";
const sc_lv<64> fexpand::ap_const_lv64_7 = "111";
const sc_lv<64> fexpand::ap_const_lv64_8 = "1000";
const sc_lv<64> fexpand::ap_const_lv64_9 = "1001";
const sc_lv<64> fexpand::ap_const_lv64_A = "1010";
const sc_lv<64> fexpand::ap_const_lv64_B = "1011";
const sc_lv<64> fexpand::ap_const_lv64_C = "1100";
const sc_lv<64> fexpand::ap_const_lv64_D = "1101";
const sc_lv<64> fexpand::ap_const_lv64_E = "1110";
const sc_lv<64> fexpand::ap_const_lv64_F = "1111";
const sc_lv<64> fexpand::ap_const_lv64_10 = "10000";
const sc_lv<64> fexpand::ap_const_lv64_11 = "10001";
const sc_lv<64> fexpand::ap_const_lv64_12 = "10010";
const sc_lv<64> fexpand::ap_const_lv64_13 = "10011";
const sc_lv<64> fexpand::ap_const_lv64_14 = "10100";
const sc_lv<64> fexpand::ap_const_lv64_15 = "10101";
const sc_lv<64> fexpand::ap_const_lv64_16 = "10110";
const sc_lv<64> fexpand::ap_const_lv64_17 = "10111";
const sc_lv<64> fexpand::ap_const_lv64_18 = "11000";
const sc_lv<64> fexpand::ap_const_lv64_19 = "11001";
const sc_lv<64> fexpand::ap_const_lv64_1A = "11010";
const sc_lv<64> fexpand::ap_const_lv64_1B = "11011";
const sc_lv<64> fexpand::ap_const_lv64_1C = "11100";
const sc_lv<64> fexpand::ap_const_lv64_1D = "11101";
const sc_lv<64> fexpand::ap_const_lv64_1E = "11110";
const sc_lv<64> fexpand::ap_const_lv64_1F = "11111";
const sc_lv<32> fexpand::ap_const_lv32_20 = "100000";
const bool fexpand::ap_const_boolean_1 = true;

fexpand::fexpand(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( tmp_365_fu_552_p5 );
    sensitive << ( tmp_907_cast_cast_ca_fu_590_p1 );
    sensitive << ( tmp_909_cast_fu_599_p5 );
    sensitive << ( tmp_913_cast_cast_ca_fu_637_p1 );
    sensitive << ( tmp_s_fu_642_p5 );
    sensitive << ( tmp_916_cast_cast_fu_671_p1 );
    sensitive << ( tmp_918_cast_fu_690_p5 );
    sensitive << ( tmp_922_cast_cast_ca_fu_718_p1 );
    sensitive << ( tmp_924_cast_fu_737_p5 );
    sensitive << ( tmp_928_cast_cast_ca_fu_765_p1 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_tmp_365_fu_552_p5);
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( reg_536 );
    sensitive << ( tmp_fu_548_p1 );

    SC_METHOD(thread_tmp_371_fu_659_p5);
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( reg_536 );
    sensitive << ( tmp_876_fu_655_p1 );

    SC_METHOD(thread_tmp_873_fu_575_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_tmp_874_fu_595_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_tmp_875_fu_622_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_tmp_876_fu_655_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_tmp_877_fu_686_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_tmp_878_fu_702_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_tmp_879_fu_733_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_tmp_880_fu_749_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_tmp_906_cast_fu_579_p5);
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( tmp_585_reg_795 );
    sensitive << ( tmp_873_fu_575_p1 );

    SC_METHOD(thread_tmp_907_cast_cast_ca_fu_590_p1);
    sensitive << ( tmp_906_cast_fu_579_p5 );

    SC_METHOD(thread_tmp_909_cast_fu_599_p5);
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( reg_540 );
    sensitive << ( tmp_874_fu_595_p1 );

    SC_METHOD(thread_tmp_912_cast_fu_626_p5);
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( tmp_587_reg_830 );
    sensitive << ( tmp_875_fu_622_p1 );

    SC_METHOD(thread_tmp_913_cast_cast_ca_fu_637_p1);
    sensitive << ( tmp_912_cast_fu_626_p5 );

    SC_METHOD(thread_tmp_916_cast_cast_fu_671_p1);
    sensitive << ( tmp_371_fu_659_p5 );

    SC_METHOD(thread_tmp_918_cast_fu_690_p5);
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( tmp_589_reg_885 );
    sensitive << ( tmp_877_fu_686_p1 );

    SC_METHOD(thread_tmp_921_cast_fu_706_p5);
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( reg_540 );
    sensitive << ( tmp_878_fu_702_p1 );

    SC_METHOD(thread_tmp_922_cast_cast_ca_fu_718_p1);
    sensitive << ( tmp_921_cast_fu_706_p5 );

    SC_METHOD(thread_tmp_924_cast_fu_737_p5);
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( tmp_591_reg_920 );
    sensitive << ( tmp_879_fu_733_p1 );

    SC_METHOD(thread_tmp_927_cast_fu_753_p5);
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( reg_544 );
    sensitive << ( tmp_880_fu_749_p1 );

    SC_METHOD(thread_tmp_928_cast_cast_ca_fu_765_p1);
    sensitive << ( tmp_927_cast_fu_753_p5 );

    SC_METHOD(thread_tmp_fu_548_p1);
    sensitive << ( input_r_q0 );

    SC_METHOD(thread_tmp_s_fu_642_p5);
    sensitive << ( input_r_q0 );
    sensitive << ( reg_528 );
    sensitive << ( reg_532 );
    sensitive << ( reg_544 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fexpand_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_528, "reg_528");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, reg_532, "reg_532");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, reg_536, "reg_536");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, reg_540, "reg_540");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, reg_544, "reg_544");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_585_reg_795, "tmp_585_reg_795");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_587_reg_830, "tmp_587_reg_830");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, tmp_589_reg_885, "tmp_589_reg_885");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, tmp_591_reg_920, "tmp_591_reg_920");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, tmp_365_fu_552_p5, "tmp_365_fu_552_p5");
    sc_trace(mVcdFile, tmp_907_cast_cast_ca_fu_590_p1, "tmp_907_cast_cast_ca_fu_590_p1");
    sc_trace(mVcdFile, tmp_909_cast_fu_599_p5, "tmp_909_cast_fu_599_p5");
    sc_trace(mVcdFile, tmp_913_cast_cast_ca_fu_637_p1, "tmp_913_cast_cast_ca_fu_637_p1");
    sc_trace(mVcdFile, tmp_s_fu_642_p5, "tmp_s_fu_642_p5");
    sc_trace(mVcdFile, tmp_916_cast_cast_fu_671_p1, "tmp_916_cast_cast_fu_671_p1");
    sc_trace(mVcdFile, tmp_918_cast_fu_690_p5, "tmp_918_cast_fu_690_p5");
    sc_trace(mVcdFile, tmp_922_cast_cast_ca_fu_718_p1, "tmp_922_cast_cast_ca_fu_718_p1");
    sc_trace(mVcdFile, tmp_924_cast_fu_737_p5, "tmp_924_cast_fu_737_p5");
    sc_trace(mVcdFile, tmp_928_cast_cast_ca_fu_765_p1, "tmp_928_cast_cast_ca_fu_765_p1");
    sc_trace(mVcdFile, tmp_fu_548_p1, "tmp_fu_548_p1");
    sc_trace(mVcdFile, tmp_873_fu_575_p1, "tmp_873_fu_575_p1");
    sc_trace(mVcdFile, tmp_906_cast_fu_579_p5, "tmp_906_cast_fu_579_p5");
    sc_trace(mVcdFile, tmp_874_fu_595_p1, "tmp_874_fu_595_p1");
    sc_trace(mVcdFile, tmp_875_fu_622_p1, "tmp_875_fu_622_p1");
    sc_trace(mVcdFile, tmp_912_cast_fu_626_p5, "tmp_912_cast_fu_626_p5");
    sc_trace(mVcdFile, tmp_876_fu_655_p1, "tmp_876_fu_655_p1");
    sc_trace(mVcdFile, tmp_371_fu_659_p5, "tmp_371_fu_659_p5");
    sc_trace(mVcdFile, tmp_877_fu_686_p1, "tmp_877_fu_686_p1");
    sc_trace(mVcdFile, tmp_878_fu_702_p1, "tmp_878_fu_702_p1");
    sc_trace(mVcdFile, tmp_921_cast_fu_706_p5, "tmp_921_cast_fu_706_p5");
    sc_trace(mVcdFile, tmp_879_fu_733_p1, "tmp_879_fu_733_p1");
    sc_trace(mVcdFile, tmp_880_fu_749_p1, "tmp_880_fu_749_p1");
    sc_trace(mVcdFile, tmp_927_cast_fu_753_p5, "tmp_927_cast_fu_753_p5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

fexpand::~fexpand() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void fexpand::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        reg_528 = input_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        reg_532 = input_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        reg_536 = input_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        reg_540 = input_r_q0.read().range(7, 3);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        reg_544 = input_r_q0.read().range(7, 6);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_585_reg_795 = input_r_q0.read().range(7, 2);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tmp_587_reg_830 = input_r_q0.read().range(7, 5);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        tmp_589_reg_885 = input_r_q0.read().range(7, 1);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tmp_591_reg_920 = input_r_q0.read().range(7, 4);
    }
}

void fexpand::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fexpand::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void fexpand::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void fexpand::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void fexpand::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void fexpand::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void fexpand::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void fexpand::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void fexpand::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void fexpand::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fexpand::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void fexpand::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fexpand::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void fexpand::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void fexpand::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void fexpand::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void fexpand::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void fexpand::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void fexpand::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void fexpand::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void fexpand::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void fexpand::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void fexpand::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fexpand::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void fexpand::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void fexpand::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void fexpand::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void fexpand::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fexpand::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fexpand::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fexpand::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void fexpand::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fexpand::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fexpand::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fexpand::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fexpand::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fexpand::thread_input_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_1E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_1D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_1C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_1B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_1A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_19);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        input_r_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        input_r_address0 = "XXXXX";
    }
}

void fexpand::thread_input_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void fexpand::thread_output_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_r_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        output_r_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void fexpand::thread_output_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void fexpand::thread_output_r_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        output_r_d0 = tmp_928_cast_cast_ca_fu_765_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        output_r_d0 = tmp_924_cast_fu_737_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        output_r_d0 = tmp_922_cast_cast_ca_fu_718_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        output_r_d0 = tmp_918_cast_fu_690_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        output_r_d0 = tmp_916_cast_cast_fu_671_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        output_r_d0 = tmp_s_fu_642_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        output_r_d0 = tmp_913_cast_cast_ca_fu_637_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        output_r_d0 = tmp_909_cast_fu_599_p5.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        output_r_d0 = tmp_907_cast_cast_ca_fu_590_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_r_d0 = tmp_365_fu_552_p5.read();
    } else {
        output_r_d0 =  (sc_lv<26>) ("XXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fexpand::thread_output_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void fexpand::thread_tmp_365_fu_552_p5() {
    tmp_365_fu_552_p5 = esl_concat<18,8>(esl_concat<10,8>(esl_concat<2,8>(tmp_fu_548_p1.read(), reg_536.read()), reg_532.read()), reg_528.read());
}

void fexpand::thread_tmp_371_fu_659_p5() {
    tmp_371_fu_659_p5 = esl_concat<17,8>(esl_concat<9,8>(esl_concat<1,8>(tmp_876_fu_655_p1.read(), reg_536.read()), reg_532.read()), reg_528.read());
}

void fexpand::thread_tmp_873_fu_575_p1() {
    tmp_873_fu_575_p1 = input_r_q0.read().range(3-1, 0);
}

void fexpand::thread_tmp_874_fu_595_p1() {
    tmp_874_fu_595_p1 = input_r_q0.read().range(5-1, 0);
}

void fexpand::thread_tmp_875_fu_622_p1() {
    tmp_875_fu_622_p1 = input_r_q0.read().range(6-1, 0);
}

void fexpand::thread_tmp_876_fu_655_p1() {
    tmp_876_fu_655_p1 = input_r_q0.read().range(1-1, 0);
}

void fexpand::thread_tmp_877_fu_686_p1() {
    tmp_877_fu_686_p1 = input_r_q0.read().range(3-1, 0);
}

void fexpand::thread_tmp_878_fu_702_p1() {
    tmp_878_fu_702_p1 = input_r_q0.read().range(4-1, 0);
}

void fexpand::thread_tmp_879_fu_733_p1() {
    tmp_879_fu_733_p1 = input_r_q0.read().range(6-1, 0);
}

void fexpand::thread_tmp_880_fu_749_p1() {
    tmp_880_fu_749_p1 = input_r_q0.read().range(7-1, 0);
}

void fexpand::thread_tmp_906_cast_fu_579_p5() {
    tmp_906_cast_fu_579_p5 = esl_concat<19,6>(esl_concat<11,8>(esl_concat<3,8>(tmp_873_fu_575_p1.read(), reg_532.read()), reg_528.read()), tmp_585_reg_795.read());
}

void fexpand::thread_tmp_907_cast_cast_ca_fu_590_p1() {
    tmp_907_cast_cast_ca_fu_590_p1 = esl_zext<26,25>(tmp_906_cast_fu_579_p5.read());
}

void fexpand::thread_tmp_909_cast_fu_599_p5() {
    tmp_909_cast_fu_599_p5 = esl_concat<21,5>(esl_concat<13,8>(esl_concat<5,8>(tmp_874_fu_595_p1.read(), reg_532.read()), reg_528.read()), reg_540.read());
}

void fexpand::thread_tmp_912_cast_fu_626_p5() {
    tmp_912_cast_fu_626_p5 = esl_concat<22,3>(esl_concat<14,8>(esl_concat<6,8>(tmp_875_fu_622_p1.read(), reg_532.read()), reg_528.read()), tmp_587_reg_830.read());
}

void fexpand::thread_tmp_913_cast_cast_ca_fu_637_p1() {
    tmp_913_cast_cast_ca_fu_637_p1 = esl_zext<26,25>(tmp_912_cast_fu_626_p5.read());
}

void fexpand::thread_tmp_916_cast_cast_fu_671_p1() {
    tmp_916_cast_cast_fu_671_p1 = esl_zext<26,25>(tmp_371_fu_659_p5.read());
}

void fexpand::thread_tmp_918_cast_fu_690_p5() {
    tmp_918_cast_fu_690_p5 = esl_concat<19,7>(esl_concat<11,8>(esl_concat<3,8>(tmp_877_fu_686_p1.read(), reg_532.read()), reg_528.read()), tmp_589_reg_885.read());
}

void fexpand::thread_tmp_921_cast_fu_706_p5() {
    tmp_921_cast_fu_706_p5 = esl_concat<20,5>(esl_concat<12,8>(esl_concat<4,8>(tmp_878_fu_702_p1.read(), reg_532.read()), reg_528.read()), reg_540.read());
}

void fexpand::thread_tmp_922_cast_cast_ca_fu_718_p1() {
    tmp_922_cast_cast_ca_fu_718_p1 = esl_zext<26,25>(tmp_921_cast_fu_706_p5.read());
}

void fexpand::thread_tmp_924_cast_fu_737_p5() {
    tmp_924_cast_fu_737_p5 = esl_concat<22,4>(esl_concat<14,8>(esl_concat<6,8>(tmp_879_fu_733_p1.read(), reg_532.read()), reg_528.read()), tmp_591_reg_920.read());
}

void fexpand::thread_tmp_927_cast_fu_753_p5() {
    tmp_927_cast_fu_753_p5 = esl_concat<23,2>(esl_concat<15,8>(esl_concat<7,8>(tmp_880_fu_749_p1.read(), reg_532.read()), reg_528.read()), reg_544.read());
}

void fexpand::thread_tmp_928_cast_cast_ca_fu_765_p1() {
    tmp_928_cast_cast_ca_fu_765_p1 = esl_zext<26,25>(tmp_927_cast_fu_753_p5.read());
}

void fexpand::thread_tmp_fu_548_p1() {
    tmp_fu_548_p1 = input_r_q0.read().range(2-1, 0);
}

void fexpand::thread_tmp_s_fu_642_p5() {
    tmp_s_fu_642_p5 = esl_concat<24,2>(esl_concat<16,8>(esl_concat<8,8>(input_r_q0.read(), reg_532.read()), reg_528.read()), reg_544.read());
}

void fexpand::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<33>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

