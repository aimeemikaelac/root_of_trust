-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity barrett_reduce is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_v_ce0 : OUT STD_LOGIC;
    r_v_we0 : OUT STD_LOGIC;
    r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of barrett_reduce is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1E : STD_LOGIC_VECTOR (6 downto 0) := "0011110";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_21 : STD_LOGIC_VECTOR (6 downto 0) := "0100001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mu_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mu_ce0 : STD_LOGIC;
    signal mu_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_ce0 : STD_LOGIC;
    signal m_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_84_fu_369_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_85_fu_386_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_cast_fu_397_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_cast_reg_737 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_86_fu_407_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_86_reg_745 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond6_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mu_load_cast_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mu_load_cast_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_5_fu_432_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_5_reg_768 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_866_fu_438_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_866_reg_773 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond5_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_867_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_867_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_870_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_870_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal q2_addr_4_reg_792 : STD_LOGIC_VECTOR (6 downto 0);
    signal carry_reg_797 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_87_fu_522_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_87_reg_817 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_865_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_865_reg_822 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_88_fu_539_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_88_reg_835 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond3_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_load_cast_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_load_cast_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal j_6_fu_560_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_6_reg_853 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_877_fu_566_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_877_reg_858 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_878_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_878_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_879_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_879_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal r2_addr_3_reg_877 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_89_fu_614_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_89_reg_885 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal r2_addr_1_reg_890 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r2_addr_2_reg_895 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_90_fu_666_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_90_reg_903 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_882_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_882_reg_908 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_886_fu_694_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal q2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal q2_ce0 : STD_LOGIC;
    signal q2_we0 : STD_LOGIC;
    signal q2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal q2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal q2_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal q2_ce1 : STD_LOGIC;
    signal q2_we1 : STD_LOGIC;
    signal q2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r1_ce0 : STD_LOGIC;
    signal r1_we0 : STD_LOGIC;
    signal r1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r2_ce0 : STD_LOGIC;
    signal r2_we0 : STD_LOGIC;
    signal r2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r2_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r2_ce1 : STD_LOGIC;
    signal r2_we1 : STD_LOGIC;
    signal r2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reduce_add_sub_fu_355_ap_start : STD_LOGIC;
    signal grp_reduce_add_sub_fu_355_ap_done : STD_LOGIC;
    signal grp_reduce_add_sub_fu_355_ap_idle : STD_LOGIC;
    signal grp_reduce_add_sub_fu_355_ap_ready : STD_LOGIC;
    signal grp_reduce_add_sub_fu_355_r_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_reduce_add_sub_fu_355_r_v_ce0 : STD_LOGIC;
    signal grp_reduce_add_sub_fu_355_r_v_we0 : STD_LOGIC;
    signal grp_reduce_add_sub_fu_355_r_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_243 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond8_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_254 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond7_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_265 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_276 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_3_reg_287 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_4_reg_298 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_310 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_5_reg_321 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_6_reg_332 : STD_LOGIC_VECTOR (5 downto 0);
    signal pb_reg_343 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_reduce_add_sub_fu_355_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_864_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_869_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_871_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_873_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal q3_0_sum_cast_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_880_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_874_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_875_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_872_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_862_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_863_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_881_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_924_cast_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_884_fu_714_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_422_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_868_fu_449_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_870_fu_460_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_870_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal carry_4_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal carry_2_fu_495_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal carry_5_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_927_cast_fu_578_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal q3_0_sum_fu_582_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_879_fu_593_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_879_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal carry_3_fu_634_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal carry_6_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_885_fu_630_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pb_cast1_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pb_2_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_15_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_883_fu_702_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_932_cast_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component reduce_add_sub IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce0 : OUT STD_LOGIC;
        r_v_we0 : OUT STD_LOGIC;
        r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component barrett_reduce_mu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reduce_add_sub_m IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component barrett_reduce_q2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component barrett_reduce_r1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component barrett_reduce_r2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mu_U : component barrett_reduce_mu
    generic map (
        DataWidth => 8,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mu_address0,
        ce0 => mu_ce0,
        q0 => mu_q0);

    m_U : component reduce_add_sub_m
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_address0,
        ce0 => m_ce0,
        q0 => m_q0);

    q2_U : component barrett_reduce_q2
    generic map (
        DataWidth => 32,
        AddressRange => 66,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => q2_address0,
        ce0 => q2_ce0,
        we0 => q2_we0,
        d0 => q2_d0,
        q0 => q2_q0,
        address1 => q2_address1,
        ce1 => q2_ce1,
        we1 => q2_we1,
        d1 => tmp_862_fu_488_p2,
        q1 => q2_q1);

    r1_U : component barrett_reduce_r1
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r1_address0,
        ce0 => r1_ce0,
        we0 => r1_we0,
        d0 => x_q0,
        q0 => r1_q0);

    r2_U : component barrett_reduce_r2
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => r2_address0,
        ce0 => r2_ce0,
        we0 => r2_we0,
        d0 => r2_d0,
        q0 => r2_q0,
        address1 => r2_address1,
        ce1 => r2_ce1,
        we1 => r2_we1,
        d1 => r2_d1,
        q1 => r2_q1);

    grp_reduce_add_sub_fu_355 : component reduce_add_sub
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reduce_add_sub_fu_355_ap_start,
        ap_done => grp_reduce_add_sub_fu_355_ap_done,
        ap_idle => grp_reduce_add_sub_fu_355_ap_idle,
        ap_ready => grp_reduce_add_sub_fu_355_ap_ready,
        r_v_address0 => grp_reduce_add_sub_fu_355_r_v_address0,
        r_v_ce0 => grp_reduce_add_sub_fu_355_r_v_ce0,
        r_v_we0 => grp_reduce_add_sub_fu_355_r_v_we0,
        r_v_d0 => grp_reduce_add_sub_fu_355_r_v_d0,
        r_v_q0 => r_v_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_reduce_add_sub_fu_355_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_reduce_add_sub_fu_355_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = exitcond_fu_660_p2)) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    ap_reg_grp_reduce_add_sub_fu_355_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_reduce_add_sub_fu_355_ap_ready)) then 
                    ap_reg_grp_reduce_add_sub_fu_355_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond8_fu_363_p2))) then 
                i_1_reg_254 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond7_fu_380_p2))) then 
                i_1_reg_254 <= i_85_fu_386_p2;
            end if; 
        end if;
    end process;

    i_2_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond7_fu_380_p2))) then 
                i_2_reg_265 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond5_fu_426_p2))) then 
                i_2_reg_265 <= i_86_reg_745;
            end if; 
        end if;
    end process;

    i_3_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_3_reg_287 <= i_87_reg_817;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_3_reg_287 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_4_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond4_fu_516_p2))) then 
                i_4_reg_298 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond2_fu_554_p2))) then 
                i_4_reg_298 <= i_88_reg_835;
            end if; 
        end if;
    end process;

    i_5_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond3_fu_533_p2))) then 
                i_5_reg_321 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_5_reg_321 <= i_89_reg_885;
            end if; 
        end if;
    end process;

    i_6_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = exitcond1_fu_608_p2))) then 
                i_6_reg_332 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_6_reg_332 <= i_90_reg_903;
            end if; 
        end if;
    end process;

    i_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond8_fu_363_p2))) then 
                i_reg_243 <= i_84_fu_369_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_243 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_1_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_1_reg_310 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_1_reg_310 <= j_6_reg_853;
            end if; 
        end if;
    end process;

    j_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_276 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_276 <= j_5_reg_768;
            end if; 
        end if;
    end process;

    pb_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = exitcond1_fu_608_p2))) then 
                pb_reg_343 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                pb_reg_343 <= x_15_fu_688_p2(31 downto 31);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_797 <= q2_q0(31 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    i_2_cast_reg_737(5 downto 0) <= i_2_cast_fu_397_p1(5 downto 0);
                i_86_reg_745 <= i_86_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_87_reg_817 <= i_87_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_88_reg_835 <= i_88_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_89_reg_885 <= i_89_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_90_reg_903 <= i_90_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_5_reg_768 <= j_5_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_6_reg_853 <= j_6_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    m_load_cast_reg_845(7 downto 0) <= m_load_cast_fu_550_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    mu_load_cast_reg_760(7 downto 0) <= mu_load_cast_fu_418_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                q2_addr_4_reg_792 <= tmp_871_fu_465_p1(7 - 1 downto 0);
                tmp_870_reg_787 <= tmp_870_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = exitcond1_fu_608_p2))) then
                r2_addr_1_reg_890 <= tmp_874_fu_620_p1(6 - 1 downto 0);
                r2_addr_2_reg_895 <= tmp_875_fu_625_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                r2_addr_3_reg_877 <= tmp_880_fu_598_p1(6 - 1 downto 0);
                tmp_879_reg_872 <= tmp_879_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond4_fu_516_p2))) then
                    tmp_865_reg_822(5 downto 0) <= tmp_865_fu_528_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond5_fu_426_p2))) then
                tmp_866_reg_773 <= tmp_866_fu_438_p2;
                tmp_867_reg_778 <= tmp_867_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond2_fu_554_p2))) then
                tmp_877_reg_858 <= tmp_877_fu_566_p2;
                tmp_878_reg_863 <= tmp_878_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = exitcond_fu_660_p2))) then
                    tmp_882_reg_908(5 downto 0) <= tmp_882_fu_672_p1(5 downto 0);
            end if;
        end if;
    end process;
    i_2_cast_reg_737(6) <= '0';
    mu_load_cast_reg_760(31 downto 8) <= "000000000000000000000000";
    tmp_865_reg_822(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    m_load_cast_reg_845(31 downto 8) <= "000000000000000000000000";
    tmp_882_reg_908(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond6_fu_401_p2, ap_CS_fsm_state6, exitcond5_fu_426_p2, tmp_867_fu_443_p2, ap_CS_fsm_state11, exitcond4_fu_516_p2, ap_CS_fsm_state13, exitcond3_fu_533_p2, ap_CS_fsm_state15, exitcond2_fu_554_p2, tmp_878_fu_572_p2, ap_CS_fsm_state18, exitcond1_fu_608_p2, ap_CS_fsm_state20, exitcond_fu_660_p2, grp_reduce_add_sub_fu_355_ap_done, exitcond8_fu_363_p2, exitcond7_fu_380_p2, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond8_fu_363_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond7_fu_380_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_401_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond5_fu_426_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond5_fu_426_p2) and (ap_const_lv1_0 = tmp_867_fu_443_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond4_fu_516_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = exitcond3_fu_533_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond2_fu_554_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond2_fu_554_p2) and (ap_const_lv1_0 = tmp_878_fu_572_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = exitcond1_fu_608_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_1 = exitcond_fu_660_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_reduce_add_sub_fu_355_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_reduce_add_sub_fu_355_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_reduce_add_sub_fu_355_ap_done, ap_CS_fsm_state24)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_reduce_add_sub_fu_355_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_reduce_add_sub_fu_355_ap_done, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_reduce_add_sub_fu_355_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_2_fu_495_p4 <= tmp_862_fu_488_p2(31 downto 8);
    carry_3_fu_634_p4 <= r2_q0(31 downto 8);
    carry_4_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_reg_797),32));
    carry_5_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_2_fu_495_p4),32));
    carry_6_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_3_fu_634_p4),32));
    exitcond1_fu_608_p2 <= "1" when (i_5_reg_321 = ap_const_lv6_20) else "0";
    exitcond2_fu_554_p2 <= "1" when (j_1_reg_310 = ap_const_lv6_21) else "0";
    exitcond3_fu_533_p2 <= "1" when (i_4_reg_298 = ap_const_lv6_20) else "0";
    exitcond4_fu_516_p2 <= "1" when (i_3_reg_287 = ap_const_lv6_21) else "0";
    exitcond5_fu_426_p2 <= "1" when (j_reg_276 = ap_const_lv6_21) else "0";
    exitcond6_fu_401_p2 <= "1" when (i_2_reg_265 = ap_const_lv6_21) else "0";
    exitcond7_fu_380_p2 <= "1" when (i_1_reg_254 = ap_const_lv6_21) else "0";
    exitcond8_fu_363_p2 <= "1" when (i_reg_243 = ap_const_lv7_42) else "0";
    exitcond_fu_660_p2 <= "1" when (i_6_reg_332 = ap_const_lv6_20) else "0";
    grp_reduce_add_sub_fu_355_ap_start <= ap_reg_grp_reduce_add_sub_fu_355_ap_start;
    i_2_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_265),7));
    i_84_fu_369_p2 <= std_logic_vector(unsigned(i_reg_243) + unsigned(ap_const_lv7_1));
    i_85_fu_386_p2 <= std_logic_vector(unsigned(i_1_reg_254) + unsigned(ap_const_lv6_1));
    i_86_fu_407_p2 <= std_logic_vector(unsigned(i_2_reg_265) + unsigned(ap_const_lv6_1));
    i_87_fu_522_p2 <= std_logic_vector(unsigned(i_3_reg_287) + unsigned(ap_const_lv6_1));
    i_88_fu_539_p2 <= std_logic_vector(unsigned(i_4_reg_298) + unsigned(ap_const_lv6_1));
    i_89_fu_614_p2 <= std_logic_vector(unsigned(i_5_reg_321) + unsigned(ap_const_lv6_1));
    i_90_fu_666_p2 <= std_logic_vector(unsigned(i_6_reg_332) + unsigned(ap_const_lv6_1));
    j_5_fu_432_p2 <= std_logic_vector(unsigned(j_reg_276) + unsigned(ap_const_lv6_1));
    j_6_fu_560_p2 <= std_logic_vector(unsigned(j_1_reg_310) + unsigned(ap_const_lv6_1));
    j_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_276),7));

    m_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state24, tmp_873_fu_545_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_address0 <= tmp_873_fu_545_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            m_address0 <= ap_const_lv5_0;
        else 
            m_address0 <= "XXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            m_ce0 <= ap_const_logic_0;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_load_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_q0),32));
    mu_address0 <= tmp_864_fu_413_p1(6 - 1 downto 0);

    mu_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mu_ce0 <= ap_const_logic_1;
        else 
            mu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mu_load_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mu_q0),32));
    pb_2_fu_682_p2 <= std_logic_vector(unsigned(r2_q1) + unsigned(pb_cast1_fu_678_p1));
    pb_cast1_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pb_reg_343),32));

    q2_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, q2_addr_4_reg_792, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, tmp_fu_375_p1, tmp_871_fu_465_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            q2_address0 <= ap_const_lv64_21(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            q2_address0 <= ap_const_lv64_20(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            q2_address0 <= q2_addr_4_reg_792;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            q2_address0 <= tmp_871_fu_465_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            q2_address0 <= ap_const_lv64_1F(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            q2_address0 <= tmp_fu_375_p1(7 - 1 downto 0);
        else 
            q2_address0 <= "XXXXXXX";
        end if; 
    end process;


    q2_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state10, q3_0_sum_cast_fu_588_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            q2_address1 <= q3_0_sum_cast_fu_588_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            q2_address1 <= ap_const_lv64_20(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            q2_address1 <= ap_const_lv64_21(7 - 1 downto 0);
        else 
            q2_address1 <= "XXXXXXX";
        end if; 
    end process;


    q2_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            q2_ce0 <= ap_const_logic_1;
        else 
            q2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    q2_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            q2_ce1 <= ap_const_logic_1;
        else 
            q2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    q2_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state10, tmp_872_fu_469_p2, tmp_863_fu_509_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            q2_d0 <= tmp_863_fu_509_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            q2_d0 <= tmp_872_fu_469_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            q2_d0 <= ap_const_lv32_0;
        else 
            q2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    q2_we0_assign_proc : process(ap_CS_fsm_state2, tmp_867_reg_778, exitcond8_fu_363_p2, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond8_fu_363_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_867_reg_778)))) then 
            q2_we0 <= ap_const_logic_1;
        else 
            q2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    q2_we1_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            q2_we1 <= ap_const_logic_1;
        else 
            q2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    q3_0_sum_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q3_0_sum_fu_582_p2),64));
    q3_0_sum_fu_582_p2 <= std_logic_vector(unsigned(tmp_927_cast_fu_578_p1) + unsigned(ap_const_lv7_21));

    r1_address0_assign_proc : process(tmp_865_reg_822, ap_CS_fsm_state20, tmp_882_fu_672_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            r1_address0 <= tmp_882_fu_672_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r1_address0 <= tmp_865_reg_822(6 - 1 downto 0);
        else 
            r1_address0 <= "XXXXXX";
        end if; 
    end process;


    r1_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            r1_ce0 <= ap_const_logic_1;
        else 
            r1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r1_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r1_we0 <= ap_const_logic_1;
        else 
            r1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r2_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state16, r2_addr_3_reg_877, ap_CS_fsm_state18, r2_addr_1_reg_890, ap_CS_fsm_state17, ap_CS_fsm_state19, tmp_s_fu_392_p1, tmp_880_fu_598_p1, tmp_874_fu_620_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            r2_address0 <= r2_addr_1_reg_890;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r2_address0 <= tmp_874_fu_620_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r2_address0 <= r2_addr_3_reg_877;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            r2_address0 <= tmp_880_fu_598_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r2_address0 <= tmp_s_fu_392_p1(6 - 1 downto 0);
        else 
            r2_address0 <= "XXXXXX";
        end if; 
    end process;


    r2_address1_assign_proc : process(ap_CS_fsm_state18, r2_addr_2_reg_895, ap_CS_fsm_state20, tmp_882_fu_672_p1, ap_CS_fsm_state19, tmp_875_fu_625_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            r2_address1 <= tmp_882_fu_672_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            r2_address1 <= r2_addr_2_reg_895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            r2_address1 <= tmp_875_fu_625_p1(6 - 1 downto 0);
        else 
            r2_address1 <= "XXXXXX";
        end if; 
    end process;


    r2_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            r2_ce0 <= ap_const_logic_1;
        else 
            r2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r2_ce1_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            r2_ce1 <= ap_const_logic_1;
        else 
            r2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r2_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state17, ap_CS_fsm_state19, tmp_881_fu_602_p2, tmp_924_cast_fu_655_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            r2_d0 <= tmp_924_cast_fu_655_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r2_d0 <= tmp_881_fu_602_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r2_d0 <= ap_const_lv32_0;
        else 
            r2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    r2_d1 <= std_logic_vector(unsigned(carry_6_fu_644_p1) + unsigned(r2_q1));

    r2_we0_assign_proc : process(ap_CS_fsm_state3, tmp_878_reg_863, exitcond7_fu_380_p2, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond7_fu_380_p2)) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = tmp_878_reg_863)))) then 
            r2_we0 <= ap_const_logic_1;
        else 
            r2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r2_we1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            r2_we1 <= ap_const_logic_1;
        else 
            r2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    r_v_address0_assign_proc : process(tmp_882_reg_908, ap_CS_fsm_state21, grp_reduce_add_sub_fu_355_r_v_address0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            r_v_address0 <= tmp_882_reg_908(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            r_v_address0 <= grp_reduce_add_sub_fu_355_r_v_address0;
        else 
            r_v_address0 <= "XXXXX";
        end if; 
    end process;


    r_v_ce0_assign_proc : process(ap_CS_fsm_state21, grp_reduce_add_sub_fu_355_r_v_ce0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            r_v_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            r_v_ce0 <= grp_reduce_add_sub_fu_355_r_v_ce0;
        else 
            r_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_v_d0_assign_proc : process(ap_CS_fsm_state21, grp_reduce_add_sub_fu_355_r_v_d0, ap_CS_fsm_state22, ap_CS_fsm_state24, tmp_884_fu_714_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            r_v_d0 <= tmp_884_fu_714_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            r_v_d0 <= grp_reduce_add_sub_fu_355_r_v_d0;
        else 
            r_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_v_we0_assign_proc : process(ap_CS_fsm_state21, grp_reduce_add_sub_fu_355_r_v_we0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            r_v_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            r_v_we0 <= grp_reduce_add_sub_fu_355_r_v_we0;
        else 
            r_v_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_862_fu_488_p2 <= std_logic_vector(unsigned(q2_q0) + unsigned(carry_4_fu_485_p1));
    tmp_863_fu_509_p2 <= std_logic_vector(unsigned(q2_q1) + unsigned(carry_5_fu_505_p1));
    tmp_864_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_265),64));
    tmp_865_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_287),64));
    tmp_866_fu_438_p2 <= std_logic_vector(unsigned(j_cast_fu_422_p1) + unsigned(i_2_cast_reg_737));
    tmp_867_fu_443_p2 <= "1" when (unsigned(tmp_866_fu_438_p2) > unsigned(ap_const_lv7_1E)) else "0";
    tmp_868_fu_449_p2 <= std_logic_vector(unsigned(j_reg_276) + unsigned(ap_const_lv6_1F));
    tmp_869_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_868_fu_449_p2),64));
    tmp_870_fu_460_p0 <= mu_load_cast_reg_760(8 - 1 downto 0);
    tmp_870_fu_460_p1 <= x_q0;
    tmp_870_fu_460_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_870_fu_460_p0) * signed(tmp_870_fu_460_p1))), 32));
    tmp_871_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_866_reg_773),64));
    tmp_872_fu_469_p2 <= std_logic_vector(unsigned(q2_q0) + unsigned(tmp_870_reg_787));
    tmp_873_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_298),64));
    tmp_874_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_321),64));
    tmp_875_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_89_fu_614_p2),64));
    tmp_877_fu_566_p2 <= std_logic_vector(unsigned(j_1_reg_310) + unsigned(i_4_reg_298));
    tmp_878_fu_572_p2 <= "1" when (unsigned(tmp_877_fu_566_p2) < unsigned(ap_const_lv6_21)) else "0";
    tmp_879_fu_593_p0 <= m_load_cast_reg_845(8 - 1 downto 0);
    tmp_879_fu_593_p1 <= q2_q1;
    tmp_879_fu_593_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_879_fu_593_p0) * signed(tmp_879_fu_593_p1))), 32));
    tmp_880_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_877_reg_858),64));
    tmp_881_fu_602_p2 <= std_logic_vector(unsigned(r2_q0) + unsigned(tmp_879_reg_872));
    tmp_882_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_332),64));
    tmp_883_fu_702_p3 <= (tmp_886_fu_694_p3 & ap_const_lv8_0);
    tmp_884_fu_714_p2 <= std_logic_vector(unsigned(tmp_932_cast_fu_710_p1) + unsigned(x_15_fu_688_p2));
    tmp_885_fu_630_p1 <= r2_q0(8 - 1 downto 0);
    tmp_886_fu_694_p3 <= x_15_fu_688_p2(31 downto 31);
    tmp_924_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_885_fu_630_p1),32));
    tmp_927_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_310),7));
    tmp_932_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_883_fu_702_p3),32));
    tmp_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_243),64));
    tmp_s_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_254),64));
    x_15_fu_688_p2 <= std_logic_vector(unsigned(r1_q0) - unsigned(pb_2_fu_682_p2));

    x_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, tmp_865_fu_528_p1, tmp_869_fu_455_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            x_address0 <= tmp_865_fu_528_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_address0 <= tmp_869_fu_455_p1(6 - 1 downto 0);
        else 
            x_address0 <= "XXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
