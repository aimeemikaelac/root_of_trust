-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of crypto_sign is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_sign,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=245,HLS_SYN_DSP=68,HLS_SYN_FF=18000,HLS_SYN_LUT=77498}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (73 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (73 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (73 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (73 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (73 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (73 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (73 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (73 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (73 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (73 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (73 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (73 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal num_blocks : STD_LOGIC_VECTOR (31 downto 0);
    signal sk_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sk_ce0 : STD_LOGIC;
    signal sk_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal signature_out_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal signature_out_ce0 : STD_LOGIC;
    signal signature_out_we0 : STD_LOGIC;
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal exitcond3_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exitcond2_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal exitcond1_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal exitcond_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_880 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_sha512_update_32_1_fu_781_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal reg_886 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_892 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state24 : BOOLEAN;
    signal ap_block_state56 : BOOLEAN;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_sha512_update_128_fu_731_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal num_blocks_read_reg_1258 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvarinc_fu_909_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_73_fu_932_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_73_reg_1275 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_i_i_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hash_length_reg_1285 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_sha512_update_32_fu_671_ap_done : STD_LOGIC;
    signal hash_curlen_reg_1290 : STD_LOGIC_VECTOR (63 downto 0);
    signal az_addr_reg_1295 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal az_addr_1_reg_1300 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_74_fu_1004_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_74_reg_1308 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sum3_i_i_cast_fu_1016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_i_i_cast_reg_1313 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_i1_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_75_fu_1026_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_75_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal ap_block_state17_io : BOOLEAN;
    signal j_3_fu_1055_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_3_reg_1340 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_fu_1072_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_1348 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_i_fu_1078_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_1353 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_crypto_sign_ed25519_20_fu_844_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_crypto_sign_ed25519_18_fu_849_ap_done : STD_LOGIC;
    signal grp_crypto_sign_ed25519_20_fu_844_ap_done : STD_LOGIC;
    signal ap_block_state38_on_subcall_done : BOOLEAN;
    signal signature_addr_2_reg_1368 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal i_76_fu_1107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_76_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state49_io : BOOLEAN;
    signal j_4_fu_1136_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_4_reg_1400 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_fu_1153_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_1408 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal tmp_i2_fu_1159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_reg_1413 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i1_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_77_fu_1175_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_77_reg_1426 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal tmp_i3_fu_1181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_reg_1431 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_i_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_78_fu_1202_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal exitcond_i2_fu_1191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_79_fu_1214_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_79_reg_1452 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal exitcond_i3_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_80_fu_1247_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_80_reg_1465 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal tmp_i5_fu_1253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_reg_1470 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i4_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_11_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_11_ce0 : STD_LOGIC;
    signal t_11_we0 : STD_LOGIC;
    signal t_11_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_10_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_10_ce0 : STD_LOGIC;
    signal t_10_we0 : STD_LOGIC;
    signal t_10_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tx_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_v_ce0 : STD_LOGIC;
    signal tx_v_we0 : STD_LOGIC;
    signal tx_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tx_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tx_v_ce1 : STD_LOGIC;
    signal tx_v_we1 : STD_LOGIC;
    signal tx_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ty_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ty_v_ce0 : STD_LOGIC;
    signal ty_v_we0 : STD_LOGIC;
    signal ty_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ty_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ty_v_ce1 : STD_LOGIC;
    signal ty_v_we1 : STD_LOGIC;
    signal ty_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zi_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zi_v_ce0 : STD_LOGIC;
    signal zi_v_we0 : STD_LOGIC;
    signal zi_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zi_v_ce1 : STD_LOGIC;
    signal zi_v_we1 : STD_LOGIC;
    signal zi_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pk_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pk_ce0 : STD_LOGIC;
    signal pk_we0 : STD_LOGIC;
    signal pk_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal az_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal az_ce0 : STD_LOGIC;
    signal az_we0 : STD_LOGIC;
    signal az_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal az_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal az_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal az_ce1 : STD_LOGIC;
    signal az_we1 : STD_LOGIC;
    signal az_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal az_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal nonce_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal nonce_ce0 : STD_LOGIC;
    signal nonce_we0 : STD_LOGIC;
    signal nonce_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal nonce_ce1 : STD_LOGIC;
    signal nonce_we1 : STD_LOGIC;
    signal hram_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal hram_ce0 : STD_LOGIC;
    signal hram_we0 : STD_LOGIC;
    signal hram_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hram_ce1 : STD_LOGIC;
    signal hram_we1 : STD_LOGIC;
    signal signature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal signature_ce0 : STD_LOGIC;
    signal signature_we0 : STD_LOGIC;
    signal signature_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal signature_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_buf_ce0 : STD_LOGIC;
    signal temp_buf_we0 : STD_LOGIC;
    signal temp_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sck_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sck_v_ce0 : STD_LOGIC;
    signal sck_v_we0 : STD_LOGIC;
    signal sck_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sck_v_ce1 : STD_LOGIC;
    signal sck_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal scs_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scs_v_ce0 : STD_LOGIC;
    signal scs_v_we0 : STD_LOGIC;
    signal scs_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal scs_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal scs_v_ce1 : STD_LOGIC;
    signal scs_v_we1 : STD_LOGIC;
    signal scs_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal scsk_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal scsk_v_ce0 : STD_LOGIC;
    signal scsk_v_we0 : STD_LOGIC;
    signal scsk_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ger_x_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ger_x_v_ce0 : STD_LOGIC;
    signal ger_x_v_we0 : STD_LOGIC;
    signal ger_x_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ger_x_v_ce1 : STD_LOGIC;
    signal ger_x_v_we1 : STD_LOGIC;
    signal ger_x_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ger_y_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ger_y_v_ce0 : STD_LOGIC;
    signal ger_y_v_we0 : STD_LOGIC;
    signal ger_y_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ger_y_v_ce1 : STD_LOGIC;
    signal ger_y_v_we1 : STD_LOGIC;
    signal ger_y_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ger_z_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ger_z_v_ce0 : STD_LOGIC;
    signal ger_z_v_we0 : STD_LOGIC;
    signal ger_z_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ger_z_v_ce1 : STD_LOGIC;
    signal ger_z_v_we1 : STD_LOGIC;
    signal ger_z_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ger_t_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ger_t_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_state_ce0 : STD_LOGIC;
    signal hash_state_we0 : STD_LOGIC;
    signal hash_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal hash_state_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal hash_state_ce1 : STD_LOGIC;
    signal hash_state_we1 : STD_LOGIC;
    signal hash_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hash_buf_ce0 : STD_LOGIC;
    signal hash_buf_we0 : STD_LOGIC;
    signal hash_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hash_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hash_buf_ce1 : STD_LOGIC;
    signal hash_buf_we1 : STD_LOGIC;
    signal hash_buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_init_fu_653_ap_start : STD_LOGIC;
    signal grp_sha512_init_fu_653_ap_done : STD_LOGIC;
    signal grp_sha512_init_fu_653_ap_idle : STD_LOGIC;
    signal grp_sha512_init_fu_653_ap_ready : STD_LOGIC;
    signal grp_sha512_init_fu_653_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_init_fu_653_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_init_fu_653_md_state_we0 : STD_LOGIC;
    signal grp_sha512_init_fu_653_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_init_fu_653_md_state_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_init_fu_653_md_state_ce1 : STD_LOGIC;
    signal grp_sha512_init_fu_653_md_state_we1 : STD_LOGIC;
    signal grp_sha512_init_fu_653_md_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_fu_671_ap_start : STD_LOGIC;
    signal grp_sha512_update_32_fu_671_ap_idle : STD_LOGIC;
    signal grp_sha512_update_32_fu_671_ap_ready : STD_LOGIC;
    signal grp_sha512_update_32_fu_671_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_update_32_fu_671_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_fu_671_md_state_we0 : STD_LOGIC;
    signal grp_sha512_update_32_fu_671_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_fu_671_md_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_32_fu_671_md_buf_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_fu_671_md_buf_we0 : STD_LOGIC;
    signal grp_sha512_update_32_fu_671_md_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_update_32_fu_671_in_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha512_update_32_fu_671_in_r_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_fu_671_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_fu_671_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_final_fu_693_ap_start : STD_LOGIC;
    signal grp_sha512_final_fu_693_ap_done : STD_LOGIC;
    signal grp_sha512_final_fu_693_ap_idle : STD_LOGIC;
    signal grp_sha512_final_fu_693_ap_ready : STD_LOGIC;
    signal grp_sha512_final_fu_693_md_length_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_final_fu_693_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_final_fu_693_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_final_fu_693_md_state_we0 : STD_LOGIC;
    signal grp_sha512_final_fu_693_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_final_fu_693_md_curlen_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_final_fu_693_md_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_final_fu_693_md_buf_ce0 : STD_LOGIC;
    signal grp_sha512_final_fu_693_md_buf_we0 : STD_LOGIC;
    signal grp_sha512_final_fu_693_md_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_final_fu_693_md_buf_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_final_fu_693_md_buf_ce1 : STD_LOGIC;
    signal grp_sha512_final_fu_693_md_buf_we1 : STD_LOGIC;
    signal grp_sha512_final_fu_693_md_buf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_final_fu_693_out_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha512_final_fu_693_out_r_ce0 : STD_LOGIC;
    signal grp_sha512_final_fu_693_out_r_we0 : STD_LOGIC;
    signal grp_sha512_final_fu_693_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_final_fu_693_out_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha512_final_fu_693_out_r_ce1 : STD_LOGIC;
    signal grp_sha512_final_fu_693_out_r_we1 : STD_LOGIC;
    signal grp_sha512_final_fu_693_out_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_update_128_fu_731_ap_start : STD_LOGIC;
    signal grp_sha512_update_128_fu_731_ap_idle : STD_LOGIC;
    signal grp_sha512_update_128_fu_731_ap_ready : STD_LOGIC;
    signal grp_sha512_update_128_fu_731_md_length_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_128_fu_731_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_update_128_fu_731_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_update_128_fu_731_md_state_we0 : STD_LOGIC;
    signal grp_sha512_update_128_fu_731_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_128_fu_731_md_curlen_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_128_fu_731_md_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_128_fu_731_md_buf_ce0 : STD_LOGIC;
    signal grp_sha512_update_128_fu_731_md_buf_we0 : STD_LOGIC;
    signal grp_sha512_update_128_fu_731_md_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_update_128_fu_731_in_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_128_fu_731_in_r_ce0 : STD_LOGIC;
    signal grp_sha512_update_128_fu_731_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_128_fu_731_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_p_memmove_fu_766_ap_start : STD_LOGIC;
    signal grp_p_memmove_fu_766_ap_done : STD_LOGIC;
    signal grp_p_memmove_fu_766_ap_idle : STD_LOGIC;
    signal grp_p_memmove_fu_766_ap_ready : STD_LOGIC;
    signal grp_p_memmove_fu_766_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_p_memmove_fu_766_dst_ce0 : STD_LOGIC;
    signal grp_p_memmove_fu_766_dst_we0 : STD_LOGIC;
    signal grp_p_memmove_fu_766_dst_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_p_memmove_fu_766_src_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_p_memmove_fu_766_src_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_781_ap_start : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_781_ap_idle : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_781_ap_ready : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_781_md_length_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_1_fu_781_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_update_32_1_fu_781_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_781_md_state_we0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_781_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_1_fu_781_md_curlen_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_1_fu_781_md_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_32_1_fu_781_md_buf_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_781_md_buf_we0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_781_md_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_update_32_1_fu_781_in_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha512_update_32_1_fu_781_in_r_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_781_in_offset : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_32_1_fu_781_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_1_fu_781_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_ap_start : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_ap_done : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_ap_idle : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_ap_ready : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_x_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_x_v_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_x_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_x_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_x_v_we1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_x_v_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_y_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_y_v_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_y_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_y_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_y_v_we1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_y_v_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_z_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_z_v_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_z_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_z_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_z_v_we1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_z_v_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_t_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_t_v_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_t_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_t_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_t_v_we1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_r_t_v_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_s_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_s_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_13_fu_797_s_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_13_fu_797_s_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_15_fu_812_ap_start : STD_LOGIC;
    signal grp_crypto_sign_ed25519_15_fu_812_ap_done : STD_LOGIC;
    signal grp_crypto_sign_ed25519_15_fu_812_ap_idle : STD_LOGIC;
    signal grp_crypto_sign_ed25519_15_fu_812_ap_ready : STD_LOGIC;
    signal grp_crypto_sign_ed25519_15_fu_812_r_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_15_fu_812_r_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_15_fu_812_r_v_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_15_fu_812_r_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_15_fu_812_y_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_15_fu_812_y_v_ce0 : STD_LOGIC;
    signal grp_barrett_reduce_fu_822_ap_start : STD_LOGIC;
    signal grp_barrett_reduce_fu_822_ap_done : STD_LOGIC;
    signal grp_barrett_reduce_fu_822_ap_idle : STD_LOGIC;
    signal grp_barrett_reduce_fu_822_ap_ready : STD_LOGIC;
    signal grp_barrett_reduce_fu_822_r_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_barrett_reduce_fu_822_r_v_ce0 : STD_LOGIC;
    signal grp_barrett_reduce_fu_822_r_v_we0 : STD_LOGIC;
    signal grp_barrett_reduce_fu_822_r_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_barrett_reduce_fu_822_r_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_barrett_reduce_fu_822_x_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_barrett_reduce_fu_822_x_ce0 : STD_LOGIC;
    signal grp_barrett_reduce_fu_822_x_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_19_fu_832_ap_start : STD_LOGIC;
    signal grp_crypto_sign_ed25519_19_fu_832_ap_done : STD_LOGIC;
    signal grp_crypto_sign_ed25519_19_fu_832_ap_idle : STD_LOGIC;
    signal grp_crypto_sign_ed25519_19_fu_832_ap_ready : STD_LOGIC;
    signal grp_crypto_sign_ed25519_19_fu_832_r_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_19_fu_832_r_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_19_fu_832_r_v_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_19_fu_832_r_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_19_fu_832_r_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_19_fu_832_r_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_19_fu_832_r_v_we1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_19_fu_832_r_v_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_19_fu_832_x_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_19_fu_832_x_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_9_fu_838_ap_start : STD_LOGIC;
    signal grp_crypto_sign_ed25519_9_fu_838_ap_done : STD_LOGIC;
    signal grp_crypto_sign_ed25519_9_fu_838_ap_idle : STD_LOGIC;
    signal grp_crypto_sign_ed25519_9_fu_838_ap_ready : STD_LOGIC;
    signal grp_crypto_sign_ed25519_9_fu_838_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_crypto_sign_ed25519_9_fu_838_r_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_9_fu_838_r_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_9_fu_838_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_crypto_sign_ed25519_9_fu_838_x_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_9_fu_838_x_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_9_fu_838_x_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_9_fu_838_x_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_20_fu_844_ap_start : STD_LOGIC;
    signal grp_crypto_sign_ed25519_20_fu_844_ap_idle : STD_LOGIC;
    signal grp_crypto_sign_ed25519_20_fu_844_ap_ready : STD_LOGIC;
    signal grp_crypto_sign_ed25519_20_fu_844_x_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_20_fu_844_x_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_20_fu_844_x_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_20_fu_844_x_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_18_fu_849_ap_start : STD_LOGIC;
    signal grp_crypto_sign_ed25519_18_fu_849_ap_idle : STD_LOGIC;
    signal grp_crypto_sign_ed25519_18_fu_849_ap_ready : STD_LOGIC;
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_we1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_18_fu_849_r_v_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_18_fu_849_x_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_18_fu_849_x_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_18_fu_849_x_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_18_fu_849_y_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_18_fu_849_y_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_16_fu_856_ap_start : STD_LOGIC;
    signal grp_crypto_sign_ed25519_16_fu_856_ap_done : STD_LOGIC;
    signal grp_crypto_sign_ed25519_16_fu_856_ap_idle : STD_LOGIC;
    signal grp_crypto_sign_ed25519_16_fu_856_ap_ready : STD_LOGIC;
    signal grp_crypto_sign_ed25519_16_fu_856_r_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_16_fu_856_r_v_ce0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_16_fu_856_r_v_we0 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_16_fu_856_r_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_16_fu_856_r_v_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_16_fu_856_r_v_ce1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_16_fu_856_r_v_we1 : STD_LOGIC;
    signal grp_crypto_sign_ed25519_16_fu_856_r_v_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crypto_sign_ed25519_16_fu_856_y_v_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crypto_sign_ed25519_16_fu_856_y_v_ce0 : STD_LOGIC;
    signal invdar_reg_466 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_i_reg_477 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i_i1_reg_489 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal hash_curlen3_reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal hash_length3_reg_510 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_531 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_i_reg_543 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal hash_curlen_1_reg_554 : STD_LOGIC_VECTOR (63 downto 0);
    signal hash_length_1_reg_564 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_585 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal i_i1_reg_597 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal i_i2_reg_608 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal i_1_i_reg_619 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_i3_reg_630 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal i_i4_reg_642 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_reg_grp_sha512_init_fu_653_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_reg_grp_sha512_update_32_fu_671_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_reg_grp_sha512_final_fu_693_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_reg_grp_sha512_update_128_fu_731_ap_start : STD_LOGIC := '0';
    signal ap_block_state24_ignore_call0 : BOOLEAN;
    signal ap_block_state56_ignore_call0 : BOOLEAN;
    signal ap_reg_grp_p_memmove_fu_766_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_reg_grp_sha512_update_32_1_fu_781_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_reg_grp_barrett_reduce_fu_822_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_i_cast_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_802_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_803_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_858_i_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_fu_1220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_fu_1038_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_808_fu_1119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_863_i_fu_1095_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_809_fu_1225_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_800_fu_972_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_894_cast_fu_993_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i3_96_fu_1186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_i_i_fu_938_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_784_fu_962_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_804_fu_981_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_801_fu_985_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum3_i_i_fu_1010_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_806_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i1_91_fu_1088_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_807_fu_1113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_i_fu_1230_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (73 downto 0);
    signal ap_block_state30_on_subcall_done : BOOLEAN;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component sha512_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce1 : OUT STD_LOGIC;
        md_state_we1 : OUT STD_LOGIC;
        md_state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha512_update_32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce0 : OUT STD_LOGIC;
        md_buf_we0 : OUT STD_LOGIC;
        md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha512_final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_length_read : IN STD_LOGIC_VECTOR (63 downto 0);
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_read : IN STD_LOGIC_VECTOR (63 downto 0);
        md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce0 : OUT STD_LOGIC;
        md_buf_we0 : OUT STD_LOGIC;
        md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        md_buf_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce1 : OUT STD_LOGIC;
        md_buf_we1 : OUT STD_LOGIC;
        md_buf_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha512_update_128 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_length_read : IN STD_LOGIC_VECTOR (63 downto 0);
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_read : IN STD_LOGIC_VECTOR (63 downto 0);
        md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce0 : OUT STD_LOGIC;
        md_buf_we0 : OUT STD_LOGIC;
        md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component p_memmove IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha512_update_32_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_length_read : IN STD_LOGIC_VECTOR (63 downto 0);
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_read : IN STD_LOGIC_VECTOR (63 downto 0);
        md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce0 : OUT STD_LOGIC;
        md_buf_we0 : OUT STD_LOGIC;
        md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_offset : IN STD_LOGIC_VECTOR (6 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_sign_ed25519_13 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_x_v_ce0 : OUT STD_LOGIC;
        r_x_v_we0 : OUT STD_LOGIC;
        r_x_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_x_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_x_v_ce1 : OUT STD_LOGIC;
        r_x_v_we1 : OUT STD_LOGIC;
        r_x_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_x_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_y_v_ce0 : OUT STD_LOGIC;
        r_y_v_we0 : OUT STD_LOGIC;
        r_y_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_y_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_y_v_ce1 : OUT STD_LOGIC;
        r_y_v_we1 : OUT STD_LOGIC;
        r_y_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_y_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_z_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_z_v_ce0 : OUT STD_LOGIC;
        r_z_v_we0 : OUT STD_LOGIC;
        r_z_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_z_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_z_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_z_v_ce1 : OUT STD_LOGIC;
        r_z_v_we1 : OUT STD_LOGIC;
        r_z_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_z_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_t_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_t_v_ce0 : OUT STD_LOGIC;
        r_t_v_we0 : OUT STD_LOGIC;
        r_t_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_t_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_t_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_t_v_ce1 : OUT STD_LOGIC;
        r_t_v_we1 : OUT STD_LOGIC;
        r_t_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_t_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_v_ce0 : OUT STD_LOGIC;
        s_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_v_ce1 : OUT STD_LOGIC;
        s_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_ed25519_15 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce0 : OUT STD_LOGIC;
        r_v_we0 : OUT STD_LOGIC;
        r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        y_v_ce0 : OUT STD_LOGIC;
        y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component barrett_reduce IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce0 : OUT STD_LOGIC;
        r_v_we0 : OUT STD_LOGIC;
        r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_ce0 : OUT STD_LOGIC;
        x_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_ed25519_19 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce0 : OUT STD_LOGIC;
        r_v_we0 : OUT STD_LOGIC;
        r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce1 : OUT STD_LOGIC;
        r_v_we1 : OUT STD_LOGIC;
        r_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_v_ce0 : OUT STD_LOGIC;
        x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_ed25519_9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        r_ce0 : OUT STD_LOGIC;
        r_we0 : OUT STD_LOGIC;
        r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_v_ce0 : OUT STD_LOGIC;
        x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_v_ce1 : OUT STD_LOGIC;
        x_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_ed25519_20 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_v_ce0 : OUT STD_LOGIC;
        x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_v_ce1 : OUT STD_LOGIC;
        x_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crypto_sign_ed25519_18 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce0 : OUT STD_LOGIC;
        r_v_we0 : OUT STD_LOGIC;
        r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce1 : OUT STD_LOGIC;
        r_v_we1 : OUT STD_LOGIC;
        r_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        x_v_ce0 : OUT STD_LOGIC;
        x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        y_v_ce0 : OUT STD_LOGIC;
        y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_ed25519_16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce0 : OUT STD_LOGIC;
        r_v_we0 : OUT STD_LOGIC;
        r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        r_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        r_v_ce1 : OUT STD_LOGIC;
        r_v_we1 : OUT STD_LOGIC;
        r_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        y_v_ce0 : OUT STD_LOGIC;
        y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_t_11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component choose_t_v_v IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component reduce_add_sub_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_az IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_nonce IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_signa2iS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_temp_3i2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_sck_v IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component choose_t_t_v IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_hash_4jc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_sign_hash_5jm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        num_blocks : OUT STD_LOGIC_VECTOR (31 downto 0);
        sk_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        sk_ce0 : IN STD_LOGIC;
        sk_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        signature_out_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        signature_out_ce0 : IN STD_LOGIC;
        signature_out_we0 : IN STD_LOGIC;
        signature_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    crypto_sign_AXILiteS_s_axi_U : component crypto_sign_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_0,
        num_blocks => num_blocks,
        sk_address0 => sk_address0,
        sk_ce0 => sk_ce0,
        sk_q0 => sk_q0,
        signature_out_address0 => signature_out_address0,
        signature_out_ce0 => signature_out_ce0,
        signature_out_we0 => signature_out_we0,
        signature_out_d0 => signature_q0);

    crypto_sign_mem_m_axi_U : component crypto_sign_mem_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_80,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => mem_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => mem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    t_11_U : component crypto_sign_t_11
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => t_11_address0,
        ce0 => t_11_ce0,
        we0 => t_11_we0,
        d0 => t_11_d0,
        q0 => t_11_q0);

    t_10_U : component crypto_sign_t_11
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => t_10_address0,
        ce0 => t_10_ce0,
        we0 => t_10_we0,
        d0 => t_10_d0,
        q0 => t_10_q0);

    tx_v_U : component choose_t_v_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tx_v_address0,
        ce0 => tx_v_ce0,
        we0 => tx_v_we0,
        d0 => grp_crypto_sign_ed25519_18_fu_849_r_v_d0,
        q0 => tx_v_q0,
        address1 => tx_v_address1,
        ce1 => tx_v_ce1,
        we1 => tx_v_we1,
        d1 => grp_crypto_sign_ed25519_18_fu_849_r_v_d1,
        q1 => tx_v_q1);

    ty_v_U : component choose_t_v_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ty_v_address0,
        ce0 => ty_v_ce0,
        we0 => ty_v_we0,
        d0 => grp_crypto_sign_ed25519_18_fu_849_r_v_d0,
        q0 => ty_v_q0,
        address1 => ty_v_address1,
        ce1 => ty_v_ce1,
        we1 => ty_v_we1,
        d1 => grp_crypto_sign_ed25519_18_fu_849_r_v_d1,
        q1 => ty_v_q1);

    zi_v_U : component choose_t_v_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => zi_v_address0,
        ce0 => zi_v_ce0,
        we0 => zi_v_we0,
        d0 => grp_crypto_sign_ed25519_19_fu_832_r_v_d0,
        q0 => zi_v_q0,
        address1 => grp_crypto_sign_ed25519_19_fu_832_r_v_address1,
        ce1 => zi_v_ce1,
        we1 => zi_v_we1,
        d1 => grp_crypto_sign_ed25519_19_fu_832_r_v_d1,
        q1 => zi_v_q1);

    t_U : component crypto_sign_t_11
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0);

    pk_U : component reduce_add_sub_t
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pk_address0,
        ce0 => pk_ce0,
        we0 => pk_we0,
        d0 => sk_q0,
        q0 => pk_q0);

    az_U : component crypto_sign_az
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => az_address0,
        ce0 => az_ce0,
        we0 => az_we0,
        d0 => az_d0,
        q0 => az_q0,
        address1 => az_address1,
        ce1 => az_ce1,
        we1 => az_we1,
        d1 => az_d1,
        q1 => az_q1);

    nonce_U : component crypto_sign_nonce
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => nonce_address0,
        ce0 => nonce_ce0,
        we0 => nonce_we0,
        d0 => grp_sha512_final_fu_693_out_r_d0,
        q0 => nonce_q0,
        address1 => grp_sha512_final_fu_693_out_r_address1,
        ce1 => nonce_ce1,
        we1 => nonce_we1,
        d1 => grp_sha512_final_fu_693_out_r_d1);

    hram_U : component crypto_sign_nonce
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hram_address0,
        ce0 => hram_ce0,
        we0 => hram_we0,
        d0 => grp_sha512_final_fu_693_out_r_d0,
        q0 => hram_q0,
        address1 => grp_sha512_final_fu_693_out_r_address1,
        ce1 => hram_ce1,
        we1 => hram_we1,
        d1 => grp_sha512_final_fu_693_out_r_d1);

    signature_U : component crypto_sign_signa2iS
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => signature_address0,
        ce0 => signature_ce0,
        we0 => signature_we0,
        d0 => signature_d0,
        q0 => signature_q0);

    temp_buf_U : component crypto_sign_temp_3i2
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_buf_address0,
        ce0 => temp_buf_ce0,
        we0 => temp_buf_we0,
        d0 => reg_892,
        q0 => temp_buf_q0);

    sck_v_U : component crypto_sign_sck_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sck_v_address0,
        ce0 => sck_v_ce0,
        we0 => sck_v_we0,
        d0 => grp_barrett_reduce_fu_822_r_v_d0,
        q0 => sck_v_q0,
        address1 => grp_crypto_sign_ed25519_13_fu_797_s_v_address1,
        ce1 => sck_v_ce1,
        q1 => sck_v_q1);

    scs_v_U : component choose_t_v_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => scs_v_address0,
        ce0 => scs_v_ce0,
        we0 => scs_v_we0,
        d0 => scs_v_d0,
        q0 => scs_v_q0,
        address1 => grp_crypto_sign_ed25519_16_fu_856_r_v_address1,
        ce1 => scs_v_ce1,
        we1 => scs_v_we1,
        d1 => grp_crypto_sign_ed25519_16_fu_856_r_v_d1,
        q1 => scs_v_q1);

    scsk_v_U : component choose_t_t_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => scsk_v_address0,
        ce0 => scsk_v_ce0,
        we0 => scsk_v_we0,
        d0 => grp_barrett_reduce_fu_822_r_v_d0,
        q0 => scsk_v_q0);

    ger_x_v_U : component choose_t_v_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ger_x_v_address0,
        ce0 => ger_x_v_ce0,
        we0 => ger_x_v_we0,
        d0 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_d0,
        q0 => ger_x_v_q0,
        address1 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_address1,
        ce1 => ger_x_v_ce1,
        we1 => ger_x_v_we1,
        d1 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_d1,
        q1 => ger_x_v_q1);

    ger_y_v_U : component choose_t_v_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ger_y_v_address0,
        ce0 => ger_y_v_ce0,
        we0 => ger_y_v_we0,
        d0 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_d0,
        q0 => ger_y_v_q0,
        address1 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_address1,
        ce1 => ger_y_v_ce1,
        we1 => ger_y_v_we1,
        d1 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_d1,
        q1 => ger_y_v_q1);

    ger_z_v_U : component choose_t_v_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ger_z_v_address0,
        ce0 => ger_z_v_ce0,
        we0 => ger_z_v_we0,
        d0 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_d0,
        q0 => ger_z_v_q0,
        address1 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_address1,
        ce1 => ger_z_v_ce1,
        we1 => ger_z_v_we1,
        d1 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_d1,
        q1 => ger_z_v_q1);

    ger_t_v_U : component choose_t_v_v
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_address0,
        ce0 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce0,
        we0 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_we0,
        d0 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_d0,
        q0 => ger_t_v_q0,
        address1 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_address1,
        ce1 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce1,
        we1 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_we1,
        d1 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_d1,
        q1 => ger_t_v_q1);

    hash_state_U : component crypto_sign_hash_4jc
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hash_state_address0,
        ce0 => hash_state_ce0,
        we0 => hash_state_we0,
        d0 => hash_state_d0,
        q0 => hash_state_q0,
        address1 => grp_sha512_init_fu_653_md_state_address1,
        ce1 => hash_state_ce1,
        we1 => hash_state_we1,
        d1 => grp_sha512_init_fu_653_md_state_d1);

    hash_buf_U : component crypto_sign_hash_5jm
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hash_buf_address0,
        ce0 => hash_buf_ce0,
        we0 => hash_buf_we0,
        d0 => hash_buf_d0,
        q0 => hash_buf_q0,
        address1 => grp_sha512_final_fu_693_md_buf_address1,
        ce1 => hash_buf_ce1,
        we1 => hash_buf_we1,
        d1 => grp_sha512_final_fu_693_md_buf_d1,
        q1 => hash_buf_q1);

    grp_sha512_init_fu_653 : component sha512_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_init_fu_653_ap_start,
        ap_done => grp_sha512_init_fu_653_ap_done,
        ap_idle => grp_sha512_init_fu_653_ap_idle,
        ap_ready => grp_sha512_init_fu_653_ap_ready,
        md_state_address0 => grp_sha512_init_fu_653_md_state_address0,
        md_state_ce0 => grp_sha512_init_fu_653_md_state_ce0,
        md_state_we0 => grp_sha512_init_fu_653_md_state_we0,
        md_state_d0 => grp_sha512_init_fu_653_md_state_d0,
        md_state_address1 => grp_sha512_init_fu_653_md_state_address1,
        md_state_ce1 => grp_sha512_init_fu_653_md_state_ce1,
        md_state_we1 => grp_sha512_init_fu_653_md_state_we1,
        md_state_d1 => grp_sha512_init_fu_653_md_state_d1);

    grp_sha512_update_32_fu_671 : component sha512_update_32
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_update_32_fu_671_ap_start,
        ap_done => grp_sha512_update_32_fu_671_ap_done,
        ap_idle => grp_sha512_update_32_fu_671_ap_idle,
        ap_ready => grp_sha512_update_32_fu_671_ap_ready,
        md_state_address0 => grp_sha512_update_32_fu_671_md_state_address0,
        md_state_ce0 => grp_sha512_update_32_fu_671_md_state_ce0,
        md_state_we0 => grp_sha512_update_32_fu_671_md_state_we0,
        md_state_d0 => grp_sha512_update_32_fu_671_md_state_d0,
        md_state_q0 => hash_state_q0,
        md_buf_address0 => grp_sha512_update_32_fu_671_md_buf_address0,
        md_buf_ce0 => grp_sha512_update_32_fu_671_md_buf_ce0,
        md_buf_we0 => grp_sha512_update_32_fu_671_md_buf_we0,
        md_buf_d0 => grp_sha512_update_32_fu_671_md_buf_d0,
        md_buf_q0 => hash_buf_q0,
        in_r_address0 => grp_sha512_update_32_fu_671_in_r_address0,
        in_r_ce0 => grp_sha512_update_32_fu_671_in_r_ce0,
        in_r_q0 => sk_q0,
        ap_return_0 => grp_sha512_update_32_fu_671_ap_return_0,
        ap_return_1 => grp_sha512_update_32_fu_671_ap_return_1);

    grp_sha512_final_fu_693 : component sha512_final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_final_fu_693_ap_start,
        ap_done => grp_sha512_final_fu_693_ap_done,
        ap_idle => grp_sha512_final_fu_693_ap_idle,
        ap_ready => grp_sha512_final_fu_693_ap_ready,
        md_length_read => grp_sha512_final_fu_693_md_length_read,
        md_state_address0 => grp_sha512_final_fu_693_md_state_address0,
        md_state_ce0 => grp_sha512_final_fu_693_md_state_ce0,
        md_state_we0 => grp_sha512_final_fu_693_md_state_we0,
        md_state_d0 => grp_sha512_final_fu_693_md_state_d0,
        md_state_q0 => hash_state_q0,
        md_curlen_read => grp_sha512_final_fu_693_md_curlen_read,
        md_buf_address0 => grp_sha512_final_fu_693_md_buf_address0,
        md_buf_ce0 => grp_sha512_final_fu_693_md_buf_ce0,
        md_buf_we0 => grp_sha512_final_fu_693_md_buf_we0,
        md_buf_d0 => grp_sha512_final_fu_693_md_buf_d0,
        md_buf_q0 => hash_buf_q0,
        md_buf_address1 => grp_sha512_final_fu_693_md_buf_address1,
        md_buf_ce1 => grp_sha512_final_fu_693_md_buf_ce1,
        md_buf_we1 => grp_sha512_final_fu_693_md_buf_we1,
        md_buf_d1 => grp_sha512_final_fu_693_md_buf_d1,
        md_buf_q1 => hash_buf_q1,
        out_r_address0 => grp_sha512_final_fu_693_out_r_address0,
        out_r_ce0 => grp_sha512_final_fu_693_out_r_ce0,
        out_r_we0 => grp_sha512_final_fu_693_out_r_we0,
        out_r_d0 => grp_sha512_final_fu_693_out_r_d0,
        out_r_address1 => grp_sha512_final_fu_693_out_r_address1,
        out_r_ce1 => grp_sha512_final_fu_693_out_r_ce1,
        out_r_we1 => grp_sha512_final_fu_693_out_r_we1,
        out_r_d1 => grp_sha512_final_fu_693_out_r_d1);

    grp_sha512_update_128_fu_731 : component sha512_update_128
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_update_128_fu_731_ap_start,
        ap_done => grp_sha512_update_128_fu_731_ap_done,
        ap_idle => grp_sha512_update_128_fu_731_ap_idle,
        ap_ready => grp_sha512_update_128_fu_731_ap_ready,
        md_length_read => grp_sha512_update_128_fu_731_md_length_read,
        md_state_address0 => grp_sha512_update_128_fu_731_md_state_address0,
        md_state_ce0 => grp_sha512_update_128_fu_731_md_state_ce0,
        md_state_we0 => grp_sha512_update_128_fu_731_md_state_we0,
        md_state_d0 => grp_sha512_update_128_fu_731_md_state_d0,
        md_state_q0 => hash_state_q0,
        md_curlen_read => grp_sha512_update_128_fu_731_md_curlen_read,
        md_buf_address0 => grp_sha512_update_128_fu_731_md_buf_address0,
        md_buf_ce0 => grp_sha512_update_128_fu_731_md_buf_ce0,
        md_buf_we0 => grp_sha512_update_128_fu_731_md_buf_we0,
        md_buf_d0 => grp_sha512_update_128_fu_731_md_buf_d0,
        md_buf_q0 => hash_buf_q0,
        in_r_address0 => grp_sha512_update_128_fu_731_in_r_address0,
        in_r_ce0 => grp_sha512_update_128_fu_731_in_r_ce0,
        in_r_q0 => temp_buf_q0,
        ap_return_0 => grp_sha512_update_128_fu_731_ap_return_0,
        ap_return_1 => grp_sha512_update_128_fu_731_ap_return_1);

    grp_p_memmove_fu_766 : component p_memmove
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_p_memmove_fu_766_ap_start,
        ap_done => grp_p_memmove_fu_766_ap_done,
        ap_idle => grp_p_memmove_fu_766_ap_idle,
        ap_ready => grp_p_memmove_fu_766_ap_ready,
        dst_address0 => grp_p_memmove_fu_766_dst_address0,
        dst_ce0 => grp_p_memmove_fu_766_dst_ce0,
        dst_we0 => grp_p_memmove_fu_766_dst_we0,
        dst_d0 => grp_p_memmove_fu_766_dst_d0,
        src_address0 => grp_p_memmove_fu_766_src_address0,
        src_ce0 => grp_p_memmove_fu_766_src_ce0,
        src_q0 => pk_q0);

    grp_sha512_update_32_1_fu_781 : component sha512_update_32_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_update_32_1_fu_781_ap_start,
        ap_done => grp_sha512_update_32_1_fu_781_ap_done,
        ap_idle => grp_sha512_update_32_1_fu_781_ap_idle,
        ap_ready => grp_sha512_update_32_1_fu_781_ap_ready,
        md_length_read => grp_sha512_update_32_1_fu_781_md_length_read,
        md_state_address0 => grp_sha512_update_32_1_fu_781_md_state_address0,
        md_state_ce0 => grp_sha512_update_32_1_fu_781_md_state_ce0,
        md_state_we0 => grp_sha512_update_32_1_fu_781_md_state_we0,
        md_state_d0 => grp_sha512_update_32_1_fu_781_md_state_d0,
        md_state_q0 => hash_state_q0,
        md_curlen_read => grp_sha512_update_32_1_fu_781_md_curlen_read,
        md_buf_address0 => grp_sha512_update_32_1_fu_781_md_buf_address0,
        md_buf_ce0 => grp_sha512_update_32_1_fu_781_md_buf_ce0,
        md_buf_we0 => grp_sha512_update_32_1_fu_781_md_buf_we0,
        md_buf_d0 => grp_sha512_update_32_1_fu_781_md_buf_d0,
        md_buf_q0 => hash_buf_q0,
        in_r_address0 => grp_sha512_update_32_1_fu_781_in_r_address0,
        in_r_ce0 => grp_sha512_update_32_1_fu_781_in_r_ce0,
        in_r_q0 => signature_q0,
        in_offset => grp_sha512_update_32_1_fu_781_in_offset,
        ap_return_0 => grp_sha512_update_32_1_fu_781_ap_return_0,
        ap_return_1 => grp_sha512_update_32_1_fu_781_ap_return_1);

    grp_crypto_sign_ed25519_13_fu_797 : component crypto_sign_ed25519_13
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crypto_sign_ed25519_13_fu_797_ap_start,
        ap_done => grp_crypto_sign_ed25519_13_fu_797_ap_done,
        ap_idle => grp_crypto_sign_ed25519_13_fu_797_ap_idle,
        ap_ready => grp_crypto_sign_ed25519_13_fu_797_ap_ready,
        r_x_v_address0 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_address0,
        r_x_v_ce0 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce0,
        r_x_v_we0 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_we0,
        r_x_v_d0 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_d0,
        r_x_v_q0 => ger_x_v_q0,
        r_x_v_address1 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_address1,
        r_x_v_ce1 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce1,
        r_x_v_we1 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_we1,
        r_x_v_d1 => grp_crypto_sign_ed25519_13_fu_797_r_x_v_d1,
        r_x_v_q1 => ger_x_v_q1,
        r_y_v_address0 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_address0,
        r_y_v_ce0 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce0,
        r_y_v_we0 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_we0,
        r_y_v_d0 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_d0,
        r_y_v_q0 => ger_y_v_q0,
        r_y_v_address1 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_address1,
        r_y_v_ce1 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce1,
        r_y_v_we1 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_we1,
        r_y_v_d1 => grp_crypto_sign_ed25519_13_fu_797_r_y_v_d1,
        r_y_v_q1 => ger_y_v_q1,
        r_z_v_address0 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_address0,
        r_z_v_ce0 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce0,
        r_z_v_we0 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_we0,
        r_z_v_d0 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_d0,
        r_z_v_q0 => ger_z_v_q0,
        r_z_v_address1 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_address1,
        r_z_v_ce1 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce1,
        r_z_v_we1 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_we1,
        r_z_v_d1 => grp_crypto_sign_ed25519_13_fu_797_r_z_v_d1,
        r_z_v_q1 => ger_z_v_q1,
        r_t_v_address0 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_address0,
        r_t_v_ce0 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce0,
        r_t_v_we0 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_we0,
        r_t_v_d0 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_d0,
        r_t_v_q0 => ger_t_v_q0,
        r_t_v_address1 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_address1,
        r_t_v_ce1 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce1,
        r_t_v_we1 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_we1,
        r_t_v_d1 => grp_crypto_sign_ed25519_13_fu_797_r_t_v_d1,
        r_t_v_q1 => ger_t_v_q1,
        s_v_address0 => grp_crypto_sign_ed25519_13_fu_797_s_v_address0,
        s_v_ce0 => grp_crypto_sign_ed25519_13_fu_797_s_v_ce0,
        s_v_q0 => sck_v_q0,
        s_v_address1 => grp_crypto_sign_ed25519_13_fu_797_s_v_address1,
        s_v_ce1 => grp_crypto_sign_ed25519_13_fu_797_s_v_ce1,
        s_v_q1 => sck_v_q1);

    grp_crypto_sign_ed25519_15_fu_812 : component crypto_sign_ed25519_15
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crypto_sign_ed25519_15_fu_812_ap_start,
        ap_done => grp_crypto_sign_ed25519_15_fu_812_ap_done,
        ap_idle => grp_crypto_sign_ed25519_15_fu_812_ap_idle,
        ap_ready => grp_crypto_sign_ed25519_15_fu_812_ap_ready,
        r_v_address0 => grp_crypto_sign_ed25519_15_fu_812_r_v_address0,
        r_v_ce0 => grp_crypto_sign_ed25519_15_fu_812_r_v_ce0,
        r_v_we0 => grp_crypto_sign_ed25519_15_fu_812_r_v_we0,
        r_v_d0 => grp_crypto_sign_ed25519_15_fu_812_r_v_d0,
        r_v_q0 => scs_v_q0,
        y_v_address0 => grp_crypto_sign_ed25519_15_fu_812_y_v_address0,
        y_v_ce0 => grp_crypto_sign_ed25519_15_fu_812_y_v_ce0,
        y_v_q0 => scsk_v_q0);

    grp_barrett_reduce_fu_822 : component barrett_reduce
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_barrett_reduce_fu_822_ap_start,
        ap_done => grp_barrett_reduce_fu_822_ap_done,
        ap_idle => grp_barrett_reduce_fu_822_ap_idle,
        ap_ready => grp_barrett_reduce_fu_822_ap_ready,
        r_v_address0 => grp_barrett_reduce_fu_822_r_v_address0,
        r_v_ce0 => grp_barrett_reduce_fu_822_r_v_ce0,
        r_v_we0 => grp_barrett_reduce_fu_822_r_v_we0,
        r_v_d0 => grp_barrett_reduce_fu_822_r_v_d0,
        r_v_q0 => grp_barrett_reduce_fu_822_r_v_q0,
        x_address0 => grp_barrett_reduce_fu_822_x_address0,
        x_ce0 => grp_barrett_reduce_fu_822_x_ce0,
        x_q0 => grp_barrett_reduce_fu_822_x_q0);

    grp_crypto_sign_ed25519_19_fu_832 : component crypto_sign_ed25519_19
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crypto_sign_ed25519_19_fu_832_ap_start,
        ap_done => grp_crypto_sign_ed25519_19_fu_832_ap_done,
        ap_idle => grp_crypto_sign_ed25519_19_fu_832_ap_idle,
        ap_ready => grp_crypto_sign_ed25519_19_fu_832_ap_ready,
        r_v_address0 => grp_crypto_sign_ed25519_19_fu_832_r_v_address0,
        r_v_ce0 => grp_crypto_sign_ed25519_19_fu_832_r_v_ce0,
        r_v_we0 => grp_crypto_sign_ed25519_19_fu_832_r_v_we0,
        r_v_d0 => grp_crypto_sign_ed25519_19_fu_832_r_v_d0,
        r_v_q0 => zi_v_q0,
        r_v_address1 => grp_crypto_sign_ed25519_19_fu_832_r_v_address1,
        r_v_ce1 => grp_crypto_sign_ed25519_19_fu_832_r_v_ce1,
        r_v_we1 => grp_crypto_sign_ed25519_19_fu_832_r_v_we1,
        r_v_d1 => grp_crypto_sign_ed25519_19_fu_832_r_v_d1,
        r_v_q1 => zi_v_q1,
        x_v_address0 => grp_crypto_sign_ed25519_19_fu_832_x_v_address0,
        x_v_ce0 => grp_crypto_sign_ed25519_19_fu_832_x_v_ce0,
        x_v_q0 => ger_z_v_q0);

    grp_crypto_sign_ed25519_9_fu_838 : component crypto_sign_ed25519_9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crypto_sign_ed25519_9_fu_838_ap_start,
        ap_done => grp_crypto_sign_ed25519_9_fu_838_ap_done,
        ap_idle => grp_crypto_sign_ed25519_9_fu_838_ap_idle,
        ap_ready => grp_crypto_sign_ed25519_9_fu_838_ap_ready,
        r_address0 => grp_crypto_sign_ed25519_9_fu_838_r_address0,
        r_ce0 => grp_crypto_sign_ed25519_9_fu_838_r_ce0,
        r_we0 => grp_crypto_sign_ed25519_9_fu_838_r_we0,
        r_d0 => grp_crypto_sign_ed25519_9_fu_838_r_d0,
        x_v_address0 => grp_crypto_sign_ed25519_9_fu_838_x_v_address0,
        x_v_ce0 => grp_crypto_sign_ed25519_9_fu_838_x_v_ce0,
        x_v_q0 => ty_v_q0,
        x_v_address1 => grp_crypto_sign_ed25519_9_fu_838_x_v_address1,
        x_v_ce1 => grp_crypto_sign_ed25519_9_fu_838_x_v_ce1,
        x_v_q1 => ty_v_q1);

    grp_crypto_sign_ed25519_20_fu_844 : component crypto_sign_ed25519_20
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crypto_sign_ed25519_20_fu_844_ap_start,
        ap_done => grp_crypto_sign_ed25519_20_fu_844_ap_done,
        ap_idle => grp_crypto_sign_ed25519_20_fu_844_ap_idle,
        ap_ready => grp_crypto_sign_ed25519_20_fu_844_ap_ready,
        x_v_address0 => grp_crypto_sign_ed25519_20_fu_844_x_v_address0,
        x_v_ce0 => grp_crypto_sign_ed25519_20_fu_844_x_v_ce0,
        x_v_q0 => tx_v_q0,
        x_v_address1 => grp_crypto_sign_ed25519_20_fu_844_x_v_address1,
        x_v_ce1 => grp_crypto_sign_ed25519_20_fu_844_x_v_ce1,
        x_v_q1 => tx_v_q1,
        ap_return => grp_crypto_sign_ed25519_20_fu_844_ap_return);

    grp_crypto_sign_ed25519_18_fu_849 : component crypto_sign_ed25519_18
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crypto_sign_ed25519_18_fu_849_ap_start,
        ap_done => grp_crypto_sign_ed25519_18_fu_849_ap_done,
        ap_idle => grp_crypto_sign_ed25519_18_fu_849_ap_idle,
        ap_ready => grp_crypto_sign_ed25519_18_fu_849_ap_ready,
        r_v_address0 => grp_crypto_sign_ed25519_18_fu_849_r_v_address0,
        r_v_ce0 => grp_crypto_sign_ed25519_18_fu_849_r_v_ce0,
        r_v_we0 => grp_crypto_sign_ed25519_18_fu_849_r_v_we0,
        r_v_d0 => grp_crypto_sign_ed25519_18_fu_849_r_v_d0,
        r_v_q0 => grp_crypto_sign_ed25519_18_fu_849_r_v_q0,
        r_v_address1 => grp_crypto_sign_ed25519_18_fu_849_r_v_address1,
        r_v_ce1 => grp_crypto_sign_ed25519_18_fu_849_r_v_ce1,
        r_v_we1 => grp_crypto_sign_ed25519_18_fu_849_r_v_we1,
        r_v_d1 => grp_crypto_sign_ed25519_18_fu_849_r_v_d1,
        r_v_q1 => grp_crypto_sign_ed25519_18_fu_849_r_v_q1,
        x_v_address0 => grp_crypto_sign_ed25519_18_fu_849_x_v_address0,
        x_v_ce0 => grp_crypto_sign_ed25519_18_fu_849_x_v_ce0,
        x_v_q0 => grp_crypto_sign_ed25519_18_fu_849_x_v_q0,
        y_v_address0 => grp_crypto_sign_ed25519_18_fu_849_y_v_address0,
        y_v_ce0 => grp_crypto_sign_ed25519_18_fu_849_y_v_ce0,
        y_v_q0 => zi_v_q0);

    grp_crypto_sign_ed25519_16_fu_856 : component crypto_sign_ed25519_16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crypto_sign_ed25519_16_fu_856_ap_start,
        ap_done => grp_crypto_sign_ed25519_16_fu_856_ap_done,
        ap_idle => grp_crypto_sign_ed25519_16_fu_856_ap_idle,
        ap_ready => grp_crypto_sign_ed25519_16_fu_856_ap_ready,
        r_v_address0 => grp_crypto_sign_ed25519_16_fu_856_r_v_address0,
        r_v_ce0 => grp_crypto_sign_ed25519_16_fu_856_r_v_ce0,
        r_v_we0 => grp_crypto_sign_ed25519_16_fu_856_r_v_we0,
        r_v_d0 => grp_crypto_sign_ed25519_16_fu_856_r_v_d0,
        r_v_q0 => scs_v_q0,
        r_v_address1 => grp_crypto_sign_ed25519_16_fu_856_r_v_address1,
        r_v_ce1 => grp_crypto_sign_ed25519_16_fu_856_r_v_ce1,
        r_v_we1 => grp_crypto_sign_ed25519_16_fu_856_r_v_we1,
        r_v_d1 => grp_crypto_sign_ed25519_16_fu_856_r_v_d1,
        r_v_q1 => scs_v_q1,
        y_v_address0 => grp_crypto_sign_ed25519_16_fu_856_y_v_address0,
        y_v_ce0 => grp_crypto_sign_ed25519_16_fu_856_y_v_ce0,
        y_v_q0 => sck_v_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_barrett_reduce_fu_822_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_barrett_reduce_fu_822_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_i_fu_1066_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (exitcond_i1_fu_1147_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state65) and (exitcond_i2_fu_1191_p2 = ap_const_lv1_1)))) then 
                    ap_reg_grp_barrett_reduce_fu_822_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_barrett_reduce_fu_822_ap_ready)) then 
                    ap_reg_grp_barrett_reduce_fu_822_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_crypto_sign_ed25519_13_fu_797_ap_ready)) then 
                    ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                    ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_crypto_sign_ed25519_15_fu_812_ap_ready)) then 
                    ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_crypto_sign_ed25519_16_fu_856_ap_ready)) then 
                    ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_crypto_sign_ed25519_18_fu_849_ap_ready)) then 
                    ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_crypto_sign_ed25519_19_fu_832_ap_ready)) then 
                    ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_crypto_sign_ed25519_20_fu_844_ap_ready)) then 
                    ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_crypto_sign_ed25519_9_fu_838_ap_ready)) then 
                    ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_p_memmove_fu_766_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_p_memmove_fu_766_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_reg_grp_p_memmove_fu_766_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_p_memmove_fu_766_ap_ready)) then 
                    ap_reg_grp_p_memmove_fu_766_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_final_fu_693_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_final_fu_693_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_io = ap_const_boolean_0) and (exitcond3_fu_1021_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_block_state49_io = ap_const_boolean_0) and (exitcond1_fu_1102_p2 = ap_const_lv1_1)))) then 
                    ap_reg_grp_sha512_final_fu_693_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_final_fu_693_ap_ready)) then 
                    ap_reg_grp_sha512_final_fu_693_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_init_fu_653_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_init_fu_653_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_i_i_fu_926_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_i1_fu_998_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_i_fu_1066_p2 = ap_const_lv1_1)))) then 
                    ap_reg_grp_sha512_init_fu_653_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_init_fu_653_ap_ready)) then 
                    ap_reg_grp_sha512_init_fu_653_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_update_128_fu_731_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_update_128_fu_731_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_lv1_0 = exitcond2_fu_1049_p2) and (ap_const_logic_0 = mem_RVALID))) and (exitcond2_fu_1049_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and not(((ap_const_lv1_0 = exitcond_fu_1130_p2) and (ap_const_logic_0 = mem_RVALID))) and (exitcond_fu_1130_p2 = ap_const_lv1_1)))) then 
                    ap_reg_grp_sha512_update_128_fu_731_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_update_128_fu_731_ap_ready)) then 
                    ap_reg_grp_sha512_update_128_fu_731_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_update_32_1_fu_781_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_update_32_1_fu_781_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                    ap_reg_grp_sha512_update_32_1_fu_781_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_update_32_1_fu_781_ap_ready)) then 
                    ap_reg_grp_sha512_update_32_1_fu_781_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_update_32_fu_671_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_update_32_fu_671_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_reg_grp_sha512_update_32_fu_671_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_update_32_fu_671_ap_ready)) then 
                    ap_reg_grp_sha512_update_32_fu_671_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_1021_p2 = ap_const_lv1_0) and (ap_block_state17_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = exitcond1_fu_1102_p2) and (ap_block_state49_io = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_1021_p2 = ap_const_lv1_0) and (ap_const_logic_1 = mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = exitcond1_fu_1102_p2) and (ap_const_logic_1 = mem_ARREADY)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    hash_curlen3_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_sha512_update_128_fu_731_ap_done = ap_const_logic_1))) then 
                hash_curlen3_reg_500 <= grp_sha512_update_128_fu_731_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1))) then 
                hash_curlen3_reg_500 <= grp_sha512_update_32_1_fu_781_ap_return_1;
            end if; 
        end if;
    end process;

    hash_curlen_1_reg_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha512_update_128_fu_731_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                hash_curlen_1_reg_554 <= grp_sha512_update_128_fu_731_ap_return_1;
            elsif (((grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                hash_curlen_1_reg_554 <= grp_sha512_update_32_1_fu_781_ap_return_1;
            end if; 
        end if;
    end process;

    hash_length3_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_sha512_update_128_fu_731_ap_done = ap_const_logic_1))) then 
                hash_length3_reg_510 <= grp_sha512_update_128_fu_731_ap_return_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1))) then 
                hash_length3_reg_510 <= grp_sha512_update_32_1_fu_781_ap_return_0;
            end if; 
        end if;
    end process;

    hash_length_1_reg_564_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha512_update_128_fu_731_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                hash_length_1_reg_564 <= grp_sha512_update_128_fu_731_ap_return_0;
            elsif (((grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                hash_length_1_reg_564 <= grp_sha512_update_32_1_fu_781_ap_return_0;
            end if; 
        end if;
    end process;

    i_1_i_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (exitcond1_i_fu_1169_p2 = ap_const_lv1_1))) then 
                i_1_i_reg_619 <= ap_const_lv7_20;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = exitcond_i2_fu_1191_p2))) then 
                i_1_i_reg_619 <= i_78_fu_1202_p2;
            end if; 
        end if;
    end process;

    i_1_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha512_update_128_fu_731_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                i_1_reg_574 <= i_76_reg_1386;
            elsif (((grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                i_1_reg_574 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_i1_reg_597_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                i_i1_reg_597 <= i_3_reg_1408;
            elsif (((grp_sha512_final_fu_693_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                i_i1_reg_597 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_i2_reg_608_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                i_i2_reg_608 <= i_77_reg_1426;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state62) and (grp_barrett_reduce_fu_822_ap_done = ap_const_logic_1))) then 
                i_i2_reg_608 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i3_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                i_i3_reg_630 <= i_79_reg_1452;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_crypto_sign_ed25519_16_fu_856_ap_done = ap_const_logic_1))) then 
                i_i3_reg_630 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i4_reg_642_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) and (exitcond_i3_fu_1208_p2 = ap_const_lv1_1))) then 
                i_i4_reg_642 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                i_i4_reg_642 <= i_80_reg_1465;
            end if; 
        end if;
    end process;

    i_i_i1_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_i_i1_reg_489 <= i_74_reg_1308;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_i_i1_reg_489 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_920_p2 = ap_const_lv1_1))) then 
                i_i_i_reg_477 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_i_reg_477 <= i_73_reg_1275;
            end if; 
        end if;
    end process;

    i_i_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_i_reg_543 <= i_2_reg_1348;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_sha512_final_fu_693_ap_done = ap_const_logic_1))) then 
                i_i_reg_543 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_sha512_update_128_fu_731_ap_done = ap_const_logic_1))) then 
                i_reg_520 <= i_75_reg_1326;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1))) then 
                i_reg_520 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    invdar_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_s_fu_920_p2))) then 
                invdar_reg_466 <= indvarinc_fu_909_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_466 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                j_1_reg_585 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                j_1_reg_585 <= j_4_reg_1400;
            end if; 
        end if;
    end process;

    j_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j_reg_531 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                j_reg_531 <= j_3_reg_1340;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_sha512_update_32_fu_671_ap_done = ap_const_logic_1))) then
                hash_curlen_reg_1290 <= grp_sha512_update_32_fu_671_ap_return_1;
                hash_length_reg_1285 <= grp_sha512_update_32_fu_671_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_2_reg_1348 <= i_2_fu_1072_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                i_3_reg_1408 <= i_3_fu_1153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_73_reg_1275 <= i_73_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_74_reg_1308 <= i_74_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_io = ap_const_boolean_0))) then
                i_75_reg_1326 <= i_75_fu_1026_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_block_state49_io = ap_const_boolean_0))) then
                i_76_reg_1386 <= i_76_fu_1107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                i_77_reg_1426 <= i_77_fu_1175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                i_79_reg_1452 <= i_79_fu_1214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                i_80_reg_1465 <= i_80_fu_1247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_lv1_0 = exitcond2_fu_1049_p2) and (ap_const_logic_0 = mem_RVALID))))) then
                j_3_reg_1340 <= j_3_fu_1055_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and not(((ap_const_lv1_0 = exitcond_fu_1130_p2) and (ap_const_logic_0 = mem_RVALID))))) then
                j_4_reg_1400 <= j_4_fu_1136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                num_blocks_read_reg_1258 <= num_blocks;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1)) or ((grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)))) then
                reg_880 <= grp_sha512_update_32_1_fu_781_ap_return_0;
                reg_886 <= grp_sha512_update_32_1_fu_781_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = exitcond2_fu_1049_p2) and not(((ap_const_lv1_0 = exitcond2_fu_1049_p2) and (ap_const_logic_0 = mem_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = exitcond_fu_1130_p2) and not(((ap_const_lv1_0 = exitcond_fu_1130_p2) and (ap_const_logic_0 = mem_RVALID)))))) then
                reg_892 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond_i_i1_fu_998_p2))) then
                    sum3_i_i_cast_reg_1313(5 downto 0) <= sum3_i_i_cast_fu_1016_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_block_state38_on_subcall_done = ap_const_boolean_0))) then
                tmp_i1_reg_1363 <= grp_crypto_sign_ed25519_20_fu_844_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) and (ap_const_lv1_0 = exitcond_i1_fu_1147_p2))) then
                    tmp_i2_reg_1413(6 downto 0) <= tmp_i2_fu_1159_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_const_lv1_0 = exitcond1_i_fu_1169_p2))) then
                    tmp_i3_reg_1431(5 downto 0) <= tmp_i3_fu_1181_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state73) and (ap_const_lv1_0 = exitcond_i4_fu_1241_p2))) then
                    tmp_i5_reg_1470(6 downto 0) <= tmp_i5_fu_1253_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond_i_fu_1066_p2))) then
                    tmp_i_reg_1353(6 downto 0) <= tmp_i_fu_1078_p1(6 downto 0);
            end if;
        end if;
    end process;
    sum3_i_i_cast_reg_1313(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_i_reg_1353(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_i2_reg_1413(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_i3_reg_1431(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_i5_reg_1470(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, exitcond3_fu_1021_p2, ap_CS_fsm_state24, exitcond2_fu_1049_p2, ap_CS_fsm_state49, exitcond1_fu_1102_p2, ap_CS_fsm_state56, exitcond_fu_1130_p2, mem_RVALID, ap_CS_fsm_state16, grp_sha512_update_32_1_fu_781_ap_done, ap_CS_fsm_state46, ap_CS_fsm_state26, grp_sha512_update_128_fu_731_ap_done, ap_CS_fsm_state58, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_i_i_fu_926_p2, ap_CS_fsm_state7, grp_sha512_update_32_fu_671_ap_done, ap_CS_fsm_state12, exitcond_i_i1_fu_998_p2, ap_block_state17_io, ap_CS_fsm_state28, exitcond_i_fu_1066_p2, ap_CS_fsm_state38, grp_crypto_sign_ed25519_18_fu_849_ap_done, ap_block_state38_on_subcall_done, ap_CS_fsm_state48, ap_block_state49_io, ap_CS_fsm_state60, exitcond_i1_fu_1147_p2, ap_CS_fsm_state63, exitcond1_i_fu_1169_p2, ap_CS_fsm_state65, exitcond_i2_fu_1191_p2, ap_CS_fsm_state71, exitcond_i3_fu_1208_p2, ap_CS_fsm_state73, exitcond_i4_fu_1241_p2, grp_sha512_init_fu_653_ap_done, grp_sha512_final_fu_693_ap_done, grp_p_memmove_fu_766_ap_done, grp_crypto_sign_ed25519_13_fu_797_ap_done, grp_crypto_sign_ed25519_15_fu_812_ap_done, grp_barrett_reduce_fu_822_ap_done, grp_crypto_sign_ed25519_19_fu_832_ap_done, grp_crypto_sign_ed25519_9_fu_838_ap_done, grp_crypto_sign_ed25519_16_fu_856_ap_done, tmp_s_fu_920_p2, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state62, ap_CS_fsm_state70, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state9, ap_CS_fsm_state44, ap_CS_fsm_state32, ap_CS_fsm_state68, ap_CS_fsm_state66, ap_CS_fsm_state34, ap_CS_fsm_state40, ap_CS_fsm_state36, ap_block_state30_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_920_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_i_i_fu_926_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sha512_init_fu_653_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_sha512_update_32_fu_671_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_sha512_final_fu_693_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_i1_fu_998_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_sha512_init_fu_653_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_io = ap_const_boolean_0) and (exitcond3_fu_1021_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_1021_p2 = ap_const_lv1_0) and (ap_block_state17_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and not(((ap_const_lv1_0 = exitcond2_fu_1049_p2) and (ap_const_logic_0 = mem_RVALID))) and (exitcond2_fu_1049_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = exitcond2_fu_1049_p2) and not(((ap_const_lv1_0 = exitcond2_fu_1049_p2) and (ap_const_logic_0 = mem_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_sha512_update_128_fu_731_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_sha512_final_fu_693_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond_i_fu_1066_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_block_state30_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_crypto_sign_ed25519_13_fu_797_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_crypto_sign_ed25519_19_fu_832_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_crypto_sign_ed25519_18_fu_849_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_block_state38_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_crypto_sign_ed25519_9_fu_838_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_p_memmove_fu_766_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_sha512_update_32_1_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_block_state49_io = ap_const_boolean_0) and (exitcond1_fu_1102_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = exitcond1_fu_1102_p2) and (ap_block_state49_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and not(((ap_const_lv1_0 = exitcond_fu_1130_p2) and (ap_const_logic_0 = mem_RVALID))) and (exitcond_fu_1130_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = exitcond_fu_1130_p2) and not(((ap_const_lv1_0 = exitcond_fu_1130_p2) and (ap_const_logic_0 = mem_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state58 => 
                if (((grp_sha512_update_128_fu_731_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((grp_sha512_final_fu_693_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (exitcond_i1_fu_1147_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (grp_barrett_reduce_fu_822_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (exitcond1_i_fu_1169_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = exitcond_i2_fu_1191_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                if (((grp_barrett_reduce_fu_822_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (grp_crypto_sign_ed25519_15_fu_812_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_crypto_sign_ed25519_16_fu_856_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (exitcond_i3_fu_1208_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (exitcond_i4_fu_1241_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state17_io_assign_proc : process(exitcond3_fu_1021_p2, ap_sig_ioackin_mem_ARREADY)
    begin
                ap_block_state17_io <= ((exitcond3_fu_1021_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY));
    end process;


    ap_block_state24_assign_proc : process(exitcond2_fu_1049_p2, mem_RVALID)
    begin
                ap_block_state24 <= ((ap_const_lv1_0 = exitcond2_fu_1049_p2) and (ap_const_logic_0 = mem_RVALID));
    end process;


    ap_block_state24_ignore_call0_assign_proc : process(exitcond2_fu_1049_p2, mem_RVALID)
    begin
                ap_block_state24_ignore_call0 <= ((ap_const_lv1_0 = exitcond2_fu_1049_p2) and (ap_const_logic_0 = mem_RVALID));
    end process;


    ap_block_state30_on_subcall_done_assign_proc : process(grp_sha512_init_fu_653_ap_done, grp_barrett_reduce_fu_822_ap_done)
    begin
                ap_block_state30_on_subcall_done <= ((ap_const_logic_0 = grp_barrett_reduce_fu_822_ap_done) or (ap_const_logic_0 = grp_sha512_init_fu_653_ap_done));
    end process;


    ap_block_state38_on_subcall_done_assign_proc : process(grp_crypto_sign_ed25519_18_fu_849_ap_done, grp_crypto_sign_ed25519_20_fu_844_ap_done)
    begin
                ap_block_state38_on_subcall_done <= ((ap_const_logic_0 = grp_crypto_sign_ed25519_18_fu_849_ap_done) or (ap_const_logic_0 = grp_crypto_sign_ed25519_20_fu_844_ap_done));
    end process;


    ap_block_state49_io_assign_proc : process(exitcond1_fu_1102_p2, ap_sig_ioackin_mem_ARREADY)
    begin
                ap_block_state49_io <= ((ap_const_lv1_0 = exitcond1_fu_1102_p2) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY));
    end process;


    ap_block_state56_assign_proc : process(exitcond_fu_1130_p2, mem_RVALID)
    begin
                ap_block_state56 <= ((ap_const_lv1_0 = exitcond_fu_1130_p2) and (ap_const_logic_0 = mem_RVALID));
    end process;


    ap_block_state56_ignore_call0_assign_proc : process(exitcond_fu_1130_p2, mem_RVALID)
    begin
                ap_block_state56_ignore_call0 <= ((ap_const_lv1_0 = exitcond_fu_1130_p2) and (ap_const_logic_0 = mem_RVALID));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state73, exitcond_i4_fu_1241_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (exitcond_i4_fu_1241_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state73, exitcond_i4_fu_1241_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (exitcond_i4_fu_1241_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    az_addr_1_reg_1300 <= ap_const_lv64_1F(6 - 1 downto 0);
    az_addr_reg_1295 <= ap_const_lv64_0(6 - 1 downto 0);

    az_address0_assign_proc : process(az_addr_reg_1295, ap_CS_fsm_state10, ap_CS_fsm_state12, sum3_i_i_cast_fu_1016_p1, grp_sha512_final_fu_693_out_r_address0, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            az_address0 <= sum3_i_i_cast_fu_1016_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            az_address0 <= az_addr_reg_1295;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            az_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            az_address0 <= grp_sha512_final_fu_693_out_r_address0;
        else 
            az_address0 <= "XXXXXX";
        end if; 
    end process;


    az_address1_assign_proc : process(ap_CS_fsm_state10, az_addr_1_reg_1300, ap_CS_fsm_state63, tmp_i3_fu_1181_p1, grp_sha512_final_fu_693_out_r_address1, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            az_address1 <= tmp_i3_fu_1181_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            az_address1 <= az_addr_1_reg_1300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            az_address1 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            az_address1 <= grp_sha512_final_fu_693_out_r_address1;
        else 
            az_address1 <= "XXXXXX";
        end if; 
    end process;


    az_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, grp_sha512_final_fu_693_out_r_ce0, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            az_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            az_ce0 <= grp_sha512_final_fu_693_out_r_ce0;
        else 
            az_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    az_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state63, grp_sha512_final_fu_693_out_r_ce1, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            az_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            az_ce1 <= grp_sha512_final_fu_693_out_r_ce1;
        else 
            az_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    az_d0_assign_proc : process(grp_sha512_final_fu_693_out_r_d0, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_800_fu_972_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            az_d0 <= tmp_800_fu_972_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            az_d0 <= grp_sha512_final_fu_693_out_r_d0;
        else 
            az_d0 <= "XXXXXXXX";
        end if; 
    end process;


    az_d1_assign_proc : process(grp_sha512_final_fu_693_out_r_d1, ap_CS_fsm_state11, ap_CS_fsm_state9, tmp_894_cast_fu_993_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            az_d1 <= tmp_894_cast_fu_993_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            az_d1 <= grp_sha512_final_fu_693_out_r_d1;
        else 
            az_d1 <= "XXXXXXXX";
        end if; 
    end process;


    az_we0_assign_proc : process(grp_sha512_final_fu_693_out_r_we0, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            az_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            az_we0 <= grp_sha512_final_fu_693_out_r_we0;
        else 
            az_we0 <= ap_const_logic_0;
        end if; 
    end process;


    az_we1_assign_proc : process(grp_sha512_final_fu_693_out_r_we1, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            az_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            az_we1 <= grp_sha512_final_fu_693_out_r_we1;
        else 
            az_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_1102_p2 <= "1" when (i_1_reg_574 = num_blocks_read_reg_1258) else "0";
    exitcond1_i_fu_1169_p2 <= "1" when (i_i2_reg_608 = ap_const_lv6_20) else "0";
    exitcond2_fu_1049_p2 <= "1" when (j_reg_531 = ap_const_lv8_80) else "0";
    exitcond3_fu_1021_p2 <= "1" when (i_reg_520 = num_blocks_read_reg_1258) else "0";
    exitcond_fu_1130_p2 <= "1" when (j_1_reg_585 = ap_const_lv8_80) else "0";
    exitcond_i1_fu_1147_p2 <= "1" when (i_i1_reg_597 = ap_const_lv7_40) else "0";
    exitcond_i2_fu_1191_p2 <= "1" when (i_1_i_reg_619 = ap_const_lv7_40) else "0";
    exitcond_i3_fu_1208_p2 <= "1" when (i_i3_reg_630 = ap_const_lv6_20) else "0";
    exitcond_i4_fu_1241_p2 <= "1" when (i_i4_reg_642 = ap_const_lv7_40) else "0";
    exitcond_i_fu_1066_p2 <= "1" when (i_i_reg_543 = ap_const_lv7_40) else "0";
    exitcond_i_i1_fu_998_p2 <= "1" when (i_i_i1_reg_489 = ap_const_lv6_20) else "0";
    exitcond_i_i_fu_926_p2 <= "1" when (i_i_i_reg_477 = ap_const_lv6_20) else "0";

    ger_x_v_address0_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_x_v_address0, grp_crypto_sign_ed25519_18_fu_849_x_v_address0, ap_CS_fsm_state32, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ger_x_v_address0 <= grp_crypto_sign_ed25519_18_fu_849_x_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_x_v_address0 <= grp_crypto_sign_ed25519_13_fu_797_r_x_v_address0;
        else 
            ger_x_v_address0 <= "XXXXX";
        end if; 
    end process;


    ger_x_v_ce0_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce0, grp_crypto_sign_ed25519_18_fu_849_x_v_ce0, ap_CS_fsm_state32, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ger_x_v_ce0 <= grp_crypto_sign_ed25519_18_fu_849_x_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_x_v_ce0 <= grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce0;
        else 
            ger_x_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ger_x_v_ce1_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_x_v_ce1 <= grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce1;
        else 
            ger_x_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ger_x_v_we0_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_x_v_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_x_v_we0 <= grp_crypto_sign_ed25519_13_fu_797_r_x_v_we0;
        else 
            ger_x_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ger_x_v_we1_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_x_v_we1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_x_v_we1 <= grp_crypto_sign_ed25519_13_fu_797_r_x_v_we1;
        else 
            ger_x_v_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ger_y_v_address0_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_13_fu_797_r_y_v_address0, grp_crypto_sign_ed25519_18_fu_849_x_v_address0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ger_y_v_address0 <= grp_crypto_sign_ed25519_18_fu_849_x_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_y_v_address0 <= grp_crypto_sign_ed25519_13_fu_797_r_y_v_address0;
        else 
            ger_y_v_address0 <= "XXXXX";
        end if; 
    end process;


    ger_y_v_ce0_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce0, grp_crypto_sign_ed25519_18_fu_849_x_v_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ger_y_v_ce0 <= grp_crypto_sign_ed25519_18_fu_849_x_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_y_v_ce0 <= grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce0;
        else 
            ger_y_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ger_y_v_ce1_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_y_v_ce1 <= grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce1;
        else 
            ger_y_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ger_y_v_we0_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_y_v_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_y_v_we0 <= grp_crypto_sign_ed25519_13_fu_797_r_y_v_we0;
        else 
            ger_y_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ger_y_v_we1_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_y_v_we1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_y_v_we1 <= grp_crypto_sign_ed25519_13_fu_797_r_y_v_we1;
        else 
            ger_y_v_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ger_z_v_address0_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_z_v_address0, grp_crypto_sign_ed25519_19_fu_832_x_v_address0, ap_CS_fsm_state32, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ger_z_v_address0 <= grp_crypto_sign_ed25519_19_fu_832_x_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_z_v_address0 <= grp_crypto_sign_ed25519_13_fu_797_r_z_v_address0;
        else 
            ger_z_v_address0 <= "XXXXX";
        end if; 
    end process;


    ger_z_v_ce0_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce0, grp_crypto_sign_ed25519_19_fu_832_x_v_ce0, ap_CS_fsm_state32, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ger_z_v_ce0 <= grp_crypto_sign_ed25519_19_fu_832_x_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_z_v_ce0 <= grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce0;
        else 
            ger_z_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ger_z_v_ce1_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_z_v_ce1 <= grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce1;
        else 
            ger_z_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ger_z_v_we0_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_z_v_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_z_v_we0 <= grp_crypto_sign_ed25519_13_fu_797_r_z_v_we0;
        else 
            ger_z_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ger_z_v_we1_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_r_z_v_we1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ger_z_v_we1 <= grp_crypto_sign_ed25519_13_fu_797_r_z_v_we1;
        else 
            ger_z_v_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_barrett_reduce_fu_822_ap_start <= ap_reg_grp_barrett_reduce_fu_822_ap_start;

    grp_barrett_reduce_fu_822_r_v_q0_assign_proc : process(sck_v_q0, scs_v_q0, scsk_v_q0, ap_CS_fsm_state62, ap_CS_fsm_state30, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_barrett_reduce_fu_822_r_v_q0 <= scsk_v_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_barrett_reduce_fu_822_r_v_q0 <= scs_v_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_barrett_reduce_fu_822_r_v_q0 <= sck_v_q0;
        else 
            grp_barrett_reduce_fu_822_r_v_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_barrett_reduce_fu_822_x_q0_assign_proc : process(t_11_q0, t_10_q0, t_q0, ap_CS_fsm_state62, ap_CS_fsm_state30, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            grp_barrett_reduce_fu_822_x_q0 <= t_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_barrett_reduce_fu_822_x_q0 <= t_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_barrett_reduce_fu_822_x_q0 <= t_q0;
        else 
            grp_barrett_reduce_fu_822_x_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_crypto_sign_ed25519_13_fu_797_ap_start <= ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start;
    grp_crypto_sign_ed25519_15_fu_812_ap_start <= ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start;
    grp_crypto_sign_ed25519_16_fu_856_ap_start <= ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start;
    grp_crypto_sign_ed25519_18_fu_849_ap_start <= ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start;

    grp_crypto_sign_ed25519_18_fu_849_r_v_q0_assign_proc : process(ap_CS_fsm_state38, tx_v_q0, ty_v_q0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_crypto_sign_ed25519_18_fu_849_r_v_q0 <= ty_v_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_crypto_sign_ed25519_18_fu_849_r_v_q0 <= tx_v_q0;
        else 
            grp_crypto_sign_ed25519_18_fu_849_r_v_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_crypto_sign_ed25519_18_fu_849_r_v_q1_assign_proc : process(ap_CS_fsm_state38, tx_v_q1, ty_v_q1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_crypto_sign_ed25519_18_fu_849_r_v_q1 <= ty_v_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_crypto_sign_ed25519_18_fu_849_r_v_q1 <= tx_v_q1;
        else 
            grp_crypto_sign_ed25519_18_fu_849_r_v_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_crypto_sign_ed25519_18_fu_849_x_v_q0_assign_proc : process(ap_CS_fsm_state38, ger_x_v_q0, ger_y_v_q0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_crypto_sign_ed25519_18_fu_849_x_v_q0 <= ger_y_v_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_crypto_sign_ed25519_18_fu_849_x_v_q0 <= ger_x_v_q0;
        else 
            grp_crypto_sign_ed25519_18_fu_849_x_v_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_crypto_sign_ed25519_19_fu_832_ap_start <= ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start;
    grp_crypto_sign_ed25519_20_fu_844_ap_start <= ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start;
    grp_crypto_sign_ed25519_9_fu_838_ap_start <= ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start;
    grp_p_memmove_fu_766_ap_start <= ap_reg_grp_p_memmove_fu_766_ap_start;
    grp_sha512_final_fu_693_ap_start <= ap_reg_grp_sha512_final_fu_693_ap_start;

    grp_sha512_final_fu_693_md_curlen_read_assign_proc : process(hash_curlen_reg_1290, hash_curlen3_reg_500, ap_CS_fsm_state27, hash_curlen_1_reg_554, ap_CS_fsm_state59, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_sha512_final_fu_693_md_curlen_read <= hash_curlen_1_reg_554;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_sha512_final_fu_693_md_curlen_read <= hash_curlen3_reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_sha512_final_fu_693_md_curlen_read <= hash_curlen_reg_1290;
        else 
            grp_sha512_final_fu_693_md_curlen_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha512_final_fu_693_md_length_read_assign_proc : process(hash_length_reg_1285, hash_length3_reg_510, ap_CS_fsm_state27, hash_length_1_reg_564, ap_CS_fsm_state59, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_sha512_final_fu_693_md_length_read <= hash_length_1_reg_564;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_sha512_final_fu_693_md_length_read <= hash_length3_reg_510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_sha512_final_fu_693_md_length_read <= hash_length_reg_1285;
        else 
            grp_sha512_final_fu_693_md_length_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sha512_init_fu_653_ap_start <= ap_reg_grp_sha512_init_fu_653_ap_start;
    grp_sha512_update_128_fu_731_ap_start <= ap_reg_grp_sha512_update_128_fu_731_ap_start;

    grp_sha512_update_128_fu_731_md_curlen_read_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state58, hash_curlen3_reg_500, hash_curlen_1_reg_554)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_sha512_update_128_fu_731_md_curlen_read <= hash_curlen_1_reg_554;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_sha512_update_128_fu_731_md_curlen_read <= hash_curlen3_reg_500;
        else 
            grp_sha512_update_128_fu_731_md_curlen_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha512_update_128_fu_731_md_length_read_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state58, hash_length3_reg_510, hash_length_1_reg_564)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_sha512_update_128_fu_731_md_length_read <= hash_length_1_reg_564;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_sha512_update_128_fu_731_md_length_read <= hash_length3_reg_510;
        else 
            grp_sha512_update_128_fu_731_md_length_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sha512_update_32_1_fu_781_ap_start <= ap_reg_grp_sha512_update_32_1_fu_781_ap_start;

    grp_sha512_update_32_1_fu_781_in_offset_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_sha512_update_32_1_fu_781_in_offset <= ap_const_lv7_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            grp_sha512_update_32_1_fu_781_in_offset <= ap_const_lv7_20;
        else 
            grp_sha512_update_32_1_fu_781_in_offset <= "XXXXXXX";
        end if; 
    end process;


    grp_sha512_update_32_1_fu_781_md_curlen_read_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, reg_886, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_sha512_update_32_1_fu_781_md_curlen_read <= reg_886;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            grp_sha512_update_32_1_fu_781_md_curlen_read <= ap_const_lv64_0;
        else 
            grp_sha512_update_32_1_fu_781_md_curlen_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_sha512_update_32_1_fu_781_md_length_read_assign_proc : process(reg_880, ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_sha512_update_32_1_fu_781_md_length_read <= reg_880;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            grp_sha512_update_32_1_fu_781_md_length_read <= ap_const_lv64_0;
        else 
            grp_sha512_update_32_1_fu_781_md_length_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sha512_update_32_fu_671_ap_start <= ap_reg_grp_sha512_update_32_fu_671_ap_start;

    hash_buf_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state58, ap_CS_fsm_state7, ap_CS_fsm_state48, grp_sha512_update_32_fu_671_md_buf_address0, grp_sha512_final_fu_693_md_buf_address0, grp_sha512_update_128_fu_731_md_buf_address0, grp_sha512_update_32_1_fu_781_md_buf_address0, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            hash_buf_address0 <= grp_sha512_update_32_1_fu_781_md_buf_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            hash_buf_address0 <= grp_sha512_update_128_fu_731_md_buf_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_buf_address0 <= grp_sha512_final_fu_693_md_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hash_buf_address0 <= grp_sha512_update_32_fu_671_md_buf_address0;
        else 
            hash_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    hash_buf_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state58, ap_CS_fsm_state7, ap_CS_fsm_state48, grp_sha512_update_32_fu_671_md_buf_ce0, grp_sha512_final_fu_693_md_buf_ce0, grp_sha512_update_128_fu_731_md_buf_ce0, grp_sha512_update_32_1_fu_781_md_buf_ce0, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            hash_buf_ce0 <= grp_sha512_update_32_1_fu_781_md_buf_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            hash_buf_ce0 <= grp_sha512_update_128_fu_731_md_buf_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_buf_ce0 <= grp_sha512_final_fu_693_md_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hash_buf_ce0 <= grp_sha512_update_32_fu_671_md_buf_ce0;
        else 
            hash_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_buf_ce1_assign_proc : process(grp_sha512_final_fu_693_md_buf_ce1, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_buf_ce1 <= grp_sha512_final_fu_693_md_buf_ce1;
        else 
            hash_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hash_buf_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state58, ap_CS_fsm_state7, ap_CS_fsm_state48, grp_sha512_update_32_fu_671_md_buf_d0, grp_sha512_final_fu_693_md_buf_d0, grp_sha512_update_128_fu_731_md_buf_d0, grp_sha512_update_32_1_fu_781_md_buf_d0, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            hash_buf_d0 <= grp_sha512_update_32_1_fu_781_md_buf_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            hash_buf_d0 <= grp_sha512_update_128_fu_731_md_buf_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_buf_d0 <= grp_sha512_final_fu_693_md_buf_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hash_buf_d0 <= grp_sha512_update_32_fu_671_md_buf_d0;
        else 
            hash_buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    hash_buf_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state58, ap_CS_fsm_state7, ap_CS_fsm_state48, grp_sha512_update_32_fu_671_md_buf_we0, grp_sha512_final_fu_693_md_buf_we0, grp_sha512_update_128_fu_731_md_buf_we0, grp_sha512_update_32_1_fu_781_md_buf_we0, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            hash_buf_we0 <= grp_sha512_update_32_1_fu_781_md_buf_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            hash_buf_we0 <= grp_sha512_update_128_fu_731_md_buf_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_buf_we0 <= grp_sha512_final_fu_693_md_buf_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hash_buf_we0 <= grp_sha512_update_32_fu_671_md_buf_we0;
        else 
            hash_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_buf_we1_assign_proc : process(grp_sha512_final_fu_693_md_buf_we1, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_buf_we1 <= grp_sha512_final_fu_693_md_buf_we1;
        else 
            hash_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;


    hash_state_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state58, ap_CS_fsm_state7, ap_CS_fsm_state48, grp_sha512_init_fu_653_md_state_address0, grp_sha512_update_32_fu_671_md_state_address0, grp_sha512_final_fu_693_md_state_address0, grp_sha512_update_128_fu_731_md_state_address0, grp_sha512_update_32_1_fu_781_md_state_address0, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            hash_state_address0 <= grp_sha512_update_32_1_fu_781_md_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            hash_state_address0 <= grp_sha512_update_128_fu_731_md_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_state_address0 <= grp_sha512_final_fu_693_md_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hash_state_address0 <= grp_sha512_update_32_fu_671_md_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            hash_state_address0 <= grp_sha512_init_fu_653_md_state_address0;
        else 
            hash_state_address0 <= "XXX";
        end if; 
    end process;


    hash_state_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state58, ap_CS_fsm_state7, ap_CS_fsm_state48, grp_sha512_init_fu_653_md_state_ce0, grp_sha512_update_32_fu_671_md_state_ce0, grp_sha512_final_fu_693_md_state_ce0, grp_sha512_update_128_fu_731_md_state_ce0, grp_sha512_update_32_1_fu_781_md_state_ce0, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            hash_state_ce0 <= grp_sha512_update_32_1_fu_781_md_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            hash_state_ce0 <= grp_sha512_update_128_fu_731_md_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_state_ce0 <= grp_sha512_final_fu_693_md_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hash_state_ce0 <= grp_sha512_update_32_fu_671_md_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            hash_state_ce0 <= grp_sha512_init_fu_653_md_state_ce0;
        else 
            hash_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_state_ce1_assign_proc : process(grp_sha512_init_fu_653_md_state_ce1, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            hash_state_ce1 <= grp_sha512_init_fu_653_md_state_ce1;
        else 
            hash_state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hash_state_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state58, ap_CS_fsm_state7, ap_CS_fsm_state48, grp_sha512_init_fu_653_md_state_d0, grp_sha512_update_32_fu_671_md_state_d0, grp_sha512_final_fu_693_md_state_d0, grp_sha512_update_128_fu_731_md_state_d0, grp_sha512_update_32_1_fu_781_md_state_d0, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            hash_state_d0 <= grp_sha512_update_32_1_fu_781_md_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            hash_state_d0 <= grp_sha512_update_128_fu_731_md_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_state_d0 <= grp_sha512_final_fu_693_md_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hash_state_d0 <= grp_sha512_update_32_fu_671_md_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            hash_state_d0 <= grp_sha512_init_fu_653_md_state_d0;
        else 
            hash_state_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hash_state_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state26, ap_CS_fsm_state58, ap_CS_fsm_state7, ap_CS_fsm_state48, grp_sha512_init_fu_653_md_state_we0, grp_sha512_update_32_fu_671_md_state_we0, grp_sha512_final_fu_693_md_state_we0, grp_sha512_update_128_fu_731_md_state_we0, grp_sha512_update_32_1_fu_781_md_state_we0, ap_CS_fsm_state27, ap_CS_fsm_state59, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            hash_state_we0 <= grp_sha512_update_32_1_fu_781_md_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            hash_state_we0 <= grp_sha512_update_128_fu_731_md_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            hash_state_we0 <= grp_sha512_final_fu_693_md_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            hash_state_we0 <= grp_sha512_update_32_fu_671_md_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            hash_state_we0 <= grp_sha512_init_fu_653_md_state_we0;
        else 
            hash_state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_state_we1_assign_proc : process(grp_sha512_init_fu_653_md_state_we1, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            hash_state_we1 <= grp_sha512_init_fu_653_md_state_we1;
        else 
            hash_state_we1 <= ap_const_logic_0;
        end if; 
    end process;


    hram_address0_assign_proc : process(ap_CS_fsm_state60, tmp_i2_fu_1159_p1, grp_sha512_final_fu_693_out_r_address0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            hram_address0 <= tmp_i2_fu_1159_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            hram_address0 <= grp_sha512_final_fu_693_out_r_address0;
        else 
            hram_address0 <= "XXXXXX";
        end if; 
    end process;


    hram_ce0_assign_proc : process(ap_CS_fsm_state60, grp_sha512_final_fu_693_out_r_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            hram_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            hram_ce0 <= grp_sha512_final_fu_693_out_r_ce0;
        else 
            hram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hram_ce1_assign_proc : process(grp_sha512_final_fu_693_out_r_ce1, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            hram_ce1 <= grp_sha512_final_fu_693_out_r_ce1;
        else 
            hram_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hram_we0_assign_proc : process(grp_sha512_final_fu_693_out_r_we0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            hram_we0 <= grp_sha512_final_fu_693_out_r_we0;
        else 
            hram_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hram_we1_assign_proc : process(grp_sha512_final_fu_693_out_r_we1, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            hram_we1 <= grp_sha512_final_fu_693_out_r_we1;
        else 
            hram_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_1072_p2 <= std_logic_vector(unsigned(i_i_reg_543) + unsigned(ap_const_lv7_1));
    i_3_fu_1153_p2 <= std_logic_vector(unsigned(i_i1_reg_597) + unsigned(ap_const_lv7_1));
    i_73_fu_932_p2 <= std_logic_vector(unsigned(i_i_i_reg_477) + unsigned(ap_const_lv6_1));
    i_74_fu_1004_p2 <= std_logic_vector(unsigned(i_i_i1_reg_489) + unsigned(ap_const_lv6_1));
    i_75_fu_1026_p2 <= std_logic_vector(unsigned(i_reg_520) + unsigned(ap_const_lv32_1));
    i_76_fu_1107_p2 <= std_logic_vector(unsigned(i_1_reg_574) + unsigned(ap_const_lv32_1));
    i_77_fu_1175_p2 <= std_logic_vector(unsigned(i_i2_reg_608) + unsigned(ap_const_lv6_1));
    i_78_fu_1202_p2 <= std_logic_vector(unsigned(i_1_i_reg_619) + unsigned(ap_const_lv7_1));
    i_79_fu_1214_p2 <= std_logic_vector(unsigned(i_i3_reg_630) + unsigned(ap_const_lv6_1));
    i_80_fu_1247_p2 <= std_logic_vector(unsigned(i_i4_reg_642) + unsigned(ap_const_lv7_1));
    indvarinc_fu_909_p2 <= std_logic_vector(unsigned(invdar_reg_466) + unsigned(ap_const_lv6_1));
    j_3_fu_1055_p2 <= std_logic_vector(unsigned(j_reg_531) + unsigned(ap_const_lv8_1));
    j_4_fu_1136_p2 <= std_logic_vector(unsigned(j_1_reg_585) + unsigned(ap_const_lv8_1));

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state17, exitcond3_fu_1021_p2, ap_CS_fsm_state49, exitcond1_fu_1102_p2, tmp_80_fu_1038_p1, tmp_808_fu_1119_p1, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = exitcond1_fu_1102_p2))) then 
                mem_ARADDR <= tmp_808_fu_1119_p1(32 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_1021_p2 = ap_const_lv1_0))) then 
                mem_ARADDR <= tmp_80_fu_1038_p1(32 - 1 downto 0);
            else 
                mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_state17, exitcond3_fu_1021_p2, ap_CS_fsm_state49, exitcond1_fu_1102_p2, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_1021_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = exitcond1_fu_1102_p2) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_state24, exitcond2_fu_1049_p2, ap_CS_fsm_state56, exitcond_fu_1130_p2, mem_RVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = exitcond2_fu_1049_p2) and not(((ap_const_lv1_0 = exitcond2_fu_1049_p2) and (ap_const_logic_0 = mem_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = exitcond_fu_1130_p2) and not(((ap_const_lv1_0 = exitcond_fu_1130_p2) and (ap_const_logic_0 = mem_RVALID)))))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state17, exitcond3_fu_1021_p2, ap_CS_fsm_state49, exitcond1_fu_1102_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond3_fu_1021_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = exitcond1_fu_1102_p2)))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state24, exitcond2_fu_1049_p2, ap_CS_fsm_state56, exitcond_fu_1130_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = exitcond2_fu_1049_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_lv1_0 = exitcond_fu_1130_p2)))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    nonce_address0_assign_proc : process(ap_CS_fsm_state28, tmp_i_fu_1078_p1, grp_sha512_final_fu_693_out_r_address0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            nonce_address0 <= tmp_i_fu_1078_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            nonce_address0 <= grp_sha512_final_fu_693_out_r_address0;
        else 
            nonce_address0 <= "XXXXXX";
        end if; 
    end process;


    nonce_ce0_assign_proc : process(ap_CS_fsm_state28, grp_sha512_final_fu_693_out_r_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            nonce_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            nonce_ce0 <= grp_sha512_final_fu_693_out_r_ce0;
        else 
            nonce_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    nonce_ce1_assign_proc : process(grp_sha512_final_fu_693_out_r_ce1, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            nonce_ce1 <= grp_sha512_final_fu_693_out_r_ce1;
        else 
            nonce_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    nonce_we0_assign_proc : process(grp_sha512_final_fu_693_out_r_we0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            nonce_we0 <= grp_sha512_final_fu_693_out_r_we0;
        else 
            nonce_we0 <= ap_const_logic_0;
        end if; 
    end process;


    nonce_we1_assign_proc : process(grp_sha512_final_fu_693_out_r_we1, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            nonce_we1 <= grp_sha512_final_fu_693_out_r_we1;
        else 
            nonce_we1 <= ap_const_logic_0;
        end if; 
    end process;


    pk_address0_assign_proc : process(grp_p_memmove_fu_766_src_address0, ap_CS_fsm_state4, ap_CS_fsm_state44, tmp_i_i_fu_949_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_address0 <= tmp_i_i_fu_949_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            pk_address0 <= grp_p_memmove_fu_766_src_address0;
        else 
            pk_address0 <= "XXXXX";
        end if; 
    end process;


    pk_ce0_assign_proc : process(grp_p_memmove_fu_766_src_ce0, ap_CS_fsm_state4, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            pk_ce0 <= grp_p_memmove_fu_766_src_ce0;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pk_we0 <= ap_const_logic_1;
        else 
            pk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sck_v_address0_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_s_v_address0, grp_barrett_reduce_fu_822_r_v_address0, grp_crypto_sign_ed25519_16_fu_856_y_v_address0, ap_CS_fsm_state70, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            sck_v_address0 <= grp_crypto_sign_ed25519_16_fu_856_y_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sck_v_address0 <= grp_barrett_reduce_fu_822_r_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sck_v_address0 <= grp_crypto_sign_ed25519_13_fu_797_s_v_address0;
        else 
            sck_v_address0 <= "XXXXX";
        end if; 
    end process;


    sck_v_ce0_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_s_v_ce0, grp_barrett_reduce_fu_822_r_v_ce0, grp_crypto_sign_ed25519_16_fu_856_y_v_ce0, ap_CS_fsm_state70, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            sck_v_ce0 <= grp_crypto_sign_ed25519_16_fu_856_y_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sck_v_ce0 <= grp_barrett_reduce_fu_822_r_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sck_v_ce0 <= grp_crypto_sign_ed25519_13_fu_797_s_v_ce0;
        else 
            sck_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sck_v_ce1_assign_proc : process(grp_crypto_sign_ed25519_13_fu_797_s_v_ce1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            sck_v_ce1 <= grp_crypto_sign_ed25519_13_fu_797_s_v_ce1;
        else 
            sck_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sck_v_we0_assign_proc : process(grp_barrett_reduce_fu_822_r_v_we0, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            sck_v_we0 <= grp_barrett_reduce_fu_822_r_v_we0;
        else 
            sck_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    scs_v_address0_assign_proc : process(ap_CS_fsm_state71, grp_crypto_sign_ed25519_15_fu_812_r_v_address0, grp_barrett_reduce_fu_822_r_v_address0, grp_crypto_sign_ed25519_16_fu_856_r_v_address0, ap_CS_fsm_state62, ap_CS_fsm_state70, ap_CS_fsm_state68, tmp_i4_fu_1220_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            scs_v_address0 <= tmp_i4_fu_1220_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            scs_v_address0 <= grp_crypto_sign_ed25519_16_fu_856_r_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            scs_v_address0 <= grp_barrett_reduce_fu_822_r_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            scs_v_address0 <= grp_crypto_sign_ed25519_15_fu_812_r_v_address0;
        else 
            scs_v_address0 <= "XXXXX";
        end if; 
    end process;


    scs_v_ce0_assign_proc : process(ap_CS_fsm_state71, grp_crypto_sign_ed25519_15_fu_812_r_v_ce0, grp_barrett_reduce_fu_822_r_v_ce0, grp_crypto_sign_ed25519_16_fu_856_r_v_ce0, ap_CS_fsm_state62, ap_CS_fsm_state70, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            scs_v_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            scs_v_ce0 <= grp_crypto_sign_ed25519_16_fu_856_r_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            scs_v_ce0 <= grp_barrett_reduce_fu_822_r_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            scs_v_ce0 <= grp_crypto_sign_ed25519_15_fu_812_r_v_ce0;
        else 
            scs_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    scs_v_ce1_assign_proc : process(grp_crypto_sign_ed25519_16_fu_856_r_v_ce1, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            scs_v_ce1 <= grp_crypto_sign_ed25519_16_fu_856_r_v_ce1;
        else 
            scs_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    scs_v_d0_assign_proc : process(grp_crypto_sign_ed25519_15_fu_812_r_v_d0, grp_barrett_reduce_fu_822_r_v_d0, grp_crypto_sign_ed25519_16_fu_856_r_v_d0, ap_CS_fsm_state62, ap_CS_fsm_state70, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            scs_v_d0 <= grp_crypto_sign_ed25519_16_fu_856_r_v_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            scs_v_d0 <= grp_barrett_reduce_fu_822_r_v_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            scs_v_d0 <= grp_crypto_sign_ed25519_15_fu_812_r_v_d0;
        else 
            scs_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    scs_v_we0_assign_proc : process(grp_crypto_sign_ed25519_15_fu_812_r_v_we0, grp_barrett_reduce_fu_822_r_v_we0, grp_crypto_sign_ed25519_16_fu_856_r_v_we0, ap_CS_fsm_state62, ap_CS_fsm_state70, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            scs_v_we0 <= grp_crypto_sign_ed25519_16_fu_856_r_v_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            scs_v_we0 <= grp_barrett_reduce_fu_822_r_v_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            scs_v_we0 <= grp_crypto_sign_ed25519_15_fu_812_r_v_we0;
        else 
            scs_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    scs_v_we1_assign_proc : process(grp_crypto_sign_ed25519_16_fu_856_r_v_we1, ap_CS_fsm_state70)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            scs_v_we1 <= grp_crypto_sign_ed25519_16_fu_856_r_v_we1;
        else 
            scs_v_we1 <= ap_const_logic_0;
        end if; 
    end process;


    scsk_v_address0_assign_proc : process(grp_crypto_sign_ed25519_15_fu_812_y_v_address0, grp_barrett_reduce_fu_822_r_v_address0, ap_CS_fsm_state68, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            scsk_v_address0 <= grp_barrett_reduce_fu_822_r_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            scsk_v_address0 <= grp_crypto_sign_ed25519_15_fu_812_y_v_address0;
        else 
            scsk_v_address0 <= "XXXXX";
        end if; 
    end process;


    scsk_v_ce0_assign_proc : process(grp_crypto_sign_ed25519_15_fu_812_y_v_ce0, grp_barrett_reduce_fu_822_r_v_ce0, ap_CS_fsm_state68, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            scsk_v_ce0 <= grp_barrett_reduce_fu_822_r_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            scsk_v_ce0 <= grp_crypto_sign_ed25519_15_fu_812_y_v_ce0;
        else 
            scsk_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    scsk_v_we0_assign_proc : process(grp_barrett_reduce_fu_822_r_v_we0, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            scsk_v_we0 <= grp_barrett_reduce_fu_822_r_v_we0;
        else 
            scsk_v_we0 <= ap_const_logic_0;
        end if; 
    end process;

    signature_addr_2_reg_1368 <= ap_const_lv64_1F(6 - 1 downto 0);

    signature_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state2, sum3_i_i_cast_reg_1313, signature_addr_2_reg_1368, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state73, tmp_i5_fu_1253_p1, grp_p_memmove_fu_766_dst_address0, grp_sha512_update_32_1_fu_781_in_r_address0, grp_crypto_sign_ed25519_9_fu_838_r_address0, ap_CS_fsm_state13, ap_CS_fsm_state72, ap_CS_fsm_state44, ap_CS_fsm_state40, tmp_fu_915_p1, sum_i_cast_fu_1236_p1, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            signature_address0 <= tmp_i5_fu_1253_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            signature_address0 <= sum_i_cast_fu_1236_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            signature_address0 <= signature_addr_2_reg_1368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            signature_address0 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            signature_address0 <= sum3_i_i_cast_reg_1313(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signature_address0 <= tmp_fu_915_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            signature_address0 <= grp_crypto_sign_ed25519_9_fu_838_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            signature_address0 <= grp_sha512_update_32_1_fu_781_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            signature_address0 <= grp_p_memmove_fu_766_dst_address0;
        else 
            signature_address0 <= "XXXXXX";
        end if; 
    end process;


    signature_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state46, ap_CS_fsm_state2, ap_CS_fsm_state41, ap_CS_fsm_state48, ap_CS_fsm_state73, grp_p_memmove_fu_766_dst_ce0, grp_sha512_update_32_1_fu_781_in_r_ce0, grp_crypto_sign_ed25519_9_fu_838_r_ce0, ap_CS_fsm_state13, ap_CS_fsm_state72, ap_CS_fsm_state44, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            signature_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            signature_ce0 <= grp_crypto_sign_ed25519_9_fu_838_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            signature_ce0 <= grp_sha512_update_32_1_fu_781_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            signature_ce0 <= grp_p_memmove_fu_766_dst_ce0;
        else 
            signature_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    signature_d0_assign_proc : process(ap_CS_fsm_state2, az_q0, grp_p_memmove_fu_766_dst_d0, grp_crypto_sign_ed25519_9_fu_838_r_d0, ap_CS_fsm_state13, ap_CS_fsm_state72, ap_CS_fsm_state44, ap_CS_fsm_state40, ap_CS_fsm_state42, tmp_863_i_fu_1095_p2, tmp_809_fu_1225_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            signature_d0 <= tmp_809_fu_1225_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            signature_d0 <= tmp_863_i_fu_1095_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            signature_d0 <= az_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            signature_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            signature_d0 <= grp_crypto_sign_ed25519_9_fu_838_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            signature_d0 <= grp_p_memmove_fu_766_dst_d0;
        else 
            signature_d0 <= "XXXXXXXX";
        end if; 
    end process;

    signature_out_address0 <= tmp_i5_reg_1470(6 - 1 downto 0);

    signature_out_ce0_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            signature_out_ce0 <= ap_const_logic_1;
        else 
            signature_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    signature_out_we0_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            signature_out_we0 <= ap_const_logic_1;
        else 
            signature_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    signature_we0_assign_proc : process(ap_CS_fsm_state2, grp_p_memmove_fu_766_dst_we0, grp_crypto_sign_ed25519_9_fu_838_r_we0, ap_CS_fsm_state13, ap_CS_fsm_state72, ap_CS_fsm_state44, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            signature_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            signature_we0 <= grp_crypto_sign_ed25519_9_fu_838_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            signature_we0 <= grp_p_memmove_fu_766_dst_we0;
        else 
            signature_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, grp_sha512_update_32_fu_671_in_r_address0, sum_i_i_cast_fu_944_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sk_address0 <= sum_i_i_cast_fu_944_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sk_address0 <= grp_sha512_update_32_fu_671_in_r_address0;
        else 
            sk_address0 <= "XXXXXX";
        end if; 
    end process;


    sk_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, grp_sha512_update_32_fu_671_in_r_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sk_ce0 <= grp_sha512_update_32_fu_671_in_r_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum3_i_i_cast_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_i_i_fu_1010_p2),64));
    sum3_i_i_fu_1010_p2 <= (i_i_i1_reg_489 xor ap_const_lv6_20);
    sum_i_cast_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_1230_p2),64));
    sum_i_fu_1230_p2 <= (i_i3_reg_630 xor ap_const_lv6_20);
    sum_i_i_cast_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_i_fu_938_p2),64));
    sum_i_i_fu_938_p2 <= (i_i_i_reg_477 xor ap_const_lv6_20);

    t_10_address0_assign_proc : process(tmp_i2_reg_1413, grp_barrett_reduce_fu_822_x_address0, ap_CS_fsm_state61, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            t_10_address0 <= tmp_i2_reg_1413(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            t_10_address0 <= grp_barrett_reduce_fu_822_x_address0;
        else 
            t_10_address0 <= "XXXXXX";
        end if; 
    end process;


    t_10_ce0_assign_proc : process(grp_barrett_reduce_fu_822_x_ce0, ap_CS_fsm_state61, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            t_10_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            t_10_ce0 <= grp_barrett_reduce_fu_822_x_ce0;
        else 
            t_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    t_10_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hram_q0),32));

    t_10_we0_assign_proc : process(ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            t_10_we0 <= ap_const_logic_1;
        else 
            t_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_11_address0_assign_proc : process(tmp_i3_reg_1431, ap_CS_fsm_state65, exitcond_i2_fu_1191_p2, grp_barrett_reduce_fu_822_x_address0, ap_CS_fsm_state64, ap_CS_fsm_state66, tmp_858_i_fu_1197_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = exitcond_i2_fu_1191_p2))) then 
            t_11_address0 <= tmp_858_i_fu_1197_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            t_11_address0 <= tmp_i3_reg_1431(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            t_11_address0 <= grp_barrett_reduce_fu_822_x_address0;
        else 
            t_11_address0 <= "XXXXXX";
        end if; 
    end process;


    t_11_ce0_assign_proc : process(ap_CS_fsm_state65, exitcond_i2_fu_1191_p2, grp_barrett_reduce_fu_822_x_ce0, ap_CS_fsm_state64, ap_CS_fsm_state66)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = exitcond_i2_fu_1191_p2)) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            t_11_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            t_11_ce0 <= grp_barrett_reduce_fu_822_x_ce0;
        else 
            t_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_11_d0_assign_proc : process(ap_CS_fsm_state65, exitcond_i2_fu_1191_p2, ap_CS_fsm_state64, tmp_i3_96_fu_1186_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = exitcond_i2_fu_1191_p2))) then 
            t_11_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            t_11_d0 <= tmp_i3_96_fu_1186_p1;
        else 
            t_11_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t_11_we0_assign_proc : process(ap_CS_fsm_state65, exitcond_i2_fu_1191_p2, ap_CS_fsm_state64)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = exitcond_i2_fu_1191_p2)) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            t_11_we0 <= ap_const_logic_1;
        else 
            t_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_address0_assign_proc : process(tmp_i_reg_1353, grp_barrett_reduce_fu_822_x_address0, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_address0 <= tmp_i_reg_1353(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            t_address0 <= grp_barrett_reduce_fu_822_x_address0;
        else 
            t_address0 <= "XXXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(grp_barrett_reduce_fu_822_x_ce0, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            t_ce0 <= grp_barrett_reduce_fu_822_x_ce0;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    t_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nonce_q0),32));

    t_we0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buf_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state58, grp_sha512_update_128_fu_731_in_r_address0, ap_CS_fsm_state25, ap_CS_fsm_state57, tmp_802_fu_1061_p1, tmp_803_fu_1142_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            temp_buf_address0 <= tmp_803_fu_1142_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_buf_address0 <= tmp_802_fu_1061_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            temp_buf_address0 <= grp_sha512_update_128_fu_731_in_r_address0;
        else 
            temp_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_buf_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state58, grp_sha512_update_128_fu_731_in_r_ce0, ap_CS_fsm_state25, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            temp_buf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            temp_buf_ce0 <= grp_sha512_update_128_fu_731_in_r_ce0;
        else 
            temp_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buf_we0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            temp_buf_we0 <= ap_const_logic_1;
        else 
            temp_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_784_fu_962_p4 <= az_q0(7 downto 3);
    tmp_800_fu_972_p3 <= (tmp_784_fu_962_p4 & ap_const_lv3_0);
    tmp_801_fu_985_p3 <= (ap_const_lv1_1 & tmp_804_fu_981_p1);
    tmp_802_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_531),64));
    tmp_803_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_585),64));
    tmp_804_fu_981_p1 <= az_q1(6 - 1 downto 0);
    tmp_806_fu_1032_p2 <= std_logic_vector(shift_left(unsigned(i_reg_520),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    tmp_807_fu_1113_p2 <= std_logic_vector(shift_left(unsigned(i_1_reg_574),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
        tmp_808_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_807_fu_1113_p2),64));

    tmp_809_fu_1225_p1 <= scs_v_q0(8 - 1 downto 0);
        tmp_80_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_806_fu_1032_p2),64));

    tmp_858_i_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_reg_619),64));
    tmp_863_i_fu_1095_p2 <= (signature_q0 xor tmp_i1_91_fu_1088_p3);
    tmp_894_cast_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_801_fu_985_p3),8));
    tmp_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_466),64));
    tmp_i1_91_fu_1088_p3 <= (tmp_i1_reg_1363 & ap_const_lv7_0);
    tmp_i2_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_597),64));
    tmp_i3_96_fu_1186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(az_q1),32));
    tmp_i3_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_608),64));
    tmp_i4_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_630),64));
    tmp_i5_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_642),64));
    tmp_i_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_543),64));
    tmp_i_i_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_477),64));
    tmp_s_fu_920_p2 <= "1" when (invdar_reg_466 = ap_const_lv6_3F) else "0";

    tx_v_address0_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_20_fu_844_x_v_address0, grp_crypto_sign_ed25519_18_fu_849_r_v_address0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            tx_v_address0 <= grp_crypto_sign_ed25519_18_fu_849_r_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            tx_v_address0 <= grp_crypto_sign_ed25519_20_fu_844_x_v_address0;
        else 
            tx_v_address0 <= "XXXXX";
        end if; 
    end process;


    tx_v_address1_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_20_fu_844_x_v_address1, grp_crypto_sign_ed25519_18_fu_849_r_v_address1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            tx_v_address1 <= grp_crypto_sign_ed25519_18_fu_849_r_v_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            tx_v_address1 <= grp_crypto_sign_ed25519_20_fu_844_x_v_address1;
        else 
            tx_v_address1 <= "XXXXX";
        end if; 
    end process;


    tx_v_ce0_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_20_fu_844_x_v_ce0, grp_crypto_sign_ed25519_18_fu_849_r_v_ce0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            tx_v_ce0 <= grp_crypto_sign_ed25519_18_fu_849_r_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            tx_v_ce0 <= grp_crypto_sign_ed25519_20_fu_844_x_v_ce0;
        else 
            tx_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tx_v_ce1_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_20_fu_844_x_v_ce1, grp_crypto_sign_ed25519_18_fu_849_r_v_ce1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            tx_v_ce1 <= grp_crypto_sign_ed25519_18_fu_849_r_v_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            tx_v_ce1 <= grp_crypto_sign_ed25519_20_fu_844_x_v_ce1;
        else 
            tx_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tx_v_we0_assign_proc : process(grp_crypto_sign_ed25519_18_fu_849_r_v_we0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            tx_v_we0 <= grp_crypto_sign_ed25519_18_fu_849_r_v_we0;
        else 
            tx_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tx_v_we1_assign_proc : process(grp_crypto_sign_ed25519_18_fu_849_r_v_we1, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            tx_v_we1 <= grp_crypto_sign_ed25519_18_fu_849_r_v_we1;
        else 
            tx_v_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ty_v_address0_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_9_fu_838_x_v_address0, grp_crypto_sign_ed25519_18_fu_849_r_v_address0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ty_v_address0 <= grp_crypto_sign_ed25519_18_fu_849_r_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ty_v_address0 <= grp_crypto_sign_ed25519_9_fu_838_x_v_address0;
        else 
            ty_v_address0 <= "XXXXX";
        end if; 
    end process;


    ty_v_address1_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_9_fu_838_x_v_address1, grp_crypto_sign_ed25519_18_fu_849_r_v_address1, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ty_v_address1 <= grp_crypto_sign_ed25519_18_fu_849_r_v_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ty_v_address1 <= grp_crypto_sign_ed25519_9_fu_838_x_v_address1;
        else 
            ty_v_address1 <= "XXXXX";
        end if; 
    end process;


    ty_v_ce0_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_9_fu_838_x_v_ce0, grp_crypto_sign_ed25519_18_fu_849_r_v_ce0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ty_v_ce0 <= grp_crypto_sign_ed25519_18_fu_849_r_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ty_v_ce0 <= grp_crypto_sign_ed25519_9_fu_838_x_v_ce0;
        else 
            ty_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ty_v_ce1_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_9_fu_838_x_v_ce1, grp_crypto_sign_ed25519_18_fu_849_r_v_ce1, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ty_v_ce1 <= grp_crypto_sign_ed25519_18_fu_849_r_v_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            ty_v_ce1 <= grp_crypto_sign_ed25519_9_fu_838_x_v_ce1;
        else 
            ty_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ty_v_we0_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_18_fu_849_r_v_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ty_v_we0 <= grp_crypto_sign_ed25519_18_fu_849_r_v_we0;
        else 
            ty_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ty_v_we1_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_18_fu_849_r_v_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ty_v_we1 <= grp_crypto_sign_ed25519_18_fu_849_r_v_we1;
        else 
            ty_v_we1 <= ap_const_logic_0;
        end if; 
    end process;


    zi_v_address0_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_19_fu_832_r_v_address0, grp_crypto_sign_ed25519_18_fu_849_y_v_address0, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            zi_v_address0 <= grp_crypto_sign_ed25519_18_fu_849_y_v_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            zi_v_address0 <= grp_crypto_sign_ed25519_19_fu_832_r_v_address0;
        else 
            zi_v_address0 <= "XXXXX";
        end if; 
    end process;


    zi_v_ce0_assign_proc : process(ap_CS_fsm_state38, grp_crypto_sign_ed25519_19_fu_832_r_v_ce0, grp_crypto_sign_ed25519_18_fu_849_y_v_ce0, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            zi_v_ce0 <= grp_crypto_sign_ed25519_18_fu_849_y_v_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            zi_v_ce0 <= grp_crypto_sign_ed25519_19_fu_832_r_v_ce0;
        else 
            zi_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zi_v_ce1_assign_proc : process(grp_crypto_sign_ed25519_19_fu_832_r_v_ce1, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            zi_v_ce1 <= grp_crypto_sign_ed25519_19_fu_832_r_v_ce1;
        else 
            zi_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    zi_v_we0_assign_proc : process(grp_crypto_sign_ed25519_19_fu_832_r_v_we0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            zi_v_we0 <= grp_crypto_sign_ed25519_19_fu_832_r_v_we0;
        else 
            zi_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    zi_v_we1_assign_proc : process(grp_crypto_sign_ed25519_19_fu_832_r_v_we1, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            zi_v_we1 <= grp_crypto_sign_ed25519_19_fu_832_r_v_we1;
        else 
            zi_v_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
