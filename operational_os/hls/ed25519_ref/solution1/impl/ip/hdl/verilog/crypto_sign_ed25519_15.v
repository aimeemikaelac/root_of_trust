// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_sign_ed25519_15 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_v_address0,
        r_v_ce0,
        r_v_we0,
        r_v_d0,
        r_v_q0,
        y_v_address0,
        y_v_ce0,
        y_v_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] r_v_address0;
output   r_v_ce0;
output   r_v_we0;
output  [31:0] r_v_d0;
input  [31:0] r_v_q0;
output  [4:0] y_v_address0;
output   y_v_ce0;
input  [31:0] y_v_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] r_v_address0;
reg r_v_ce0;
reg r_v_we0;
reg y_v_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] i_53_fu_170_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] i_54_fu_187_p2;
reg   [5:0] i_54_reg_299;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_181_p2;
reg  signed [31:0] r_v_load_reg_309;
wire    ap_CS_fsm_state4;
wire   [5:0] j_1_fu_204_p2;
reg   [5:0] j_1_reg_317;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond1_fu_198_p2;
wire   [5:0] tmp_787_fu_215_p2;
reg   [5:0] tmp_787_reg_327;
wire   [31:0] tmp_786_fu_221_p2;
reg   [31:0] tmp_786_reg_332;
wire    ap_CS_fsm_state6;
reg   [5:0] t_addr_4_reg_337;
wire   [5:0] i_55_fu_242_p2;
reg   [5:0] i_55_reg_345;
wire    ap_CS_fsm_state8;
reg   [5:0] t_addr_2_reg_350;
wire   [0:0] exitcond_fu_236_p2;
reg   [5:0] t_addr_3_reg_355;
reg   [5:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [31:0] t_d0;
wire   [31:0] t_q0;
reg   [5:0] t_address1;
reg    t_ce1;
reg    t_we1;
wire   [31:0] t_d1;
wire   [31:0] t_q1;
wire    grp_barrett_reduce_fu_153_ap_start;
wire    grp_barrett_reduce_fu_153_ap_done;
wire    grp_barrett_reduce_fu_153_ap_idle;
wire    grp_barrett_reduce_fu_153_ap_ready;
wire   [4:0] grp_barrett_reduce_fu_153_r_v_address0;
wire    grp_barrett_reduce_fu_153_r_v_ce0;
wire    grp_barrett_reduce_fu_153_r_v_we0;
wire   [31:0] grp_barrett_reduce_fu_153_r_v_d0;
wire   [5:0] grp_barrett_reduce_fu_153_x_address0;
wire    grp_barrett_reduce_fu_153_x_ce0;
reg   [6:0] i_reg_108;
wire   [0:0] exitcond3_fu_164_p2;
reg   [5:0] i_1_reg_119;
reg   [5:0] j_reg_131;
wire    ap_CS_fsm_state7;
reg   [5:0] i_2_reg_142;
wire    ap_CS_fsm_state9;
reg    ap_reg_grp_barrett_reduce_fu_153_ap_start;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_fu_176_p1;
wire   [63:0] tmp_s_fu_193_p1;
wire   [63:0] tmp_785_fu_210_p1;
wire   [63:0] tmp_788_fu_226_p1;
wire   [63:0] tmp_782_fu_248_p1;
wire   [63:0] tmp_783_fu_253_p1;
wire   [31:0] tmp_789_fu_230_p2;
wire   [31:0] tmp_843_cast_fu_283_p1;
wire  signed [31:0] tmp_786_fu_221_p1;
wire   [23:0] carry_fu_262_p4;
wire   [31:0] carry_2_fu_272_p1;
wire   [7:0] tmp_790_fu_258_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_reg_grp_barrett_reduce_fu_153_ap_start = 1'b0;
end

crypto_sign_ed255Zio #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0),
    .address1(t_address1),
    .ce1(t_ce1),
    .we1(t_we1),
    .d1(t_d1),
    .q1(t_q1)
);

barrett_reduce grp_barrett_reduce_fu_153(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_barrett_reduce_fu_153_ap_start),
    .ap_done(grp_barrett_reduce_fu_153_ap_done),
    .ap_idle(grp_barrett_reduce_fu_153_ap_idle),
    .ap_ready(grp_barrett_reduce_fu_153_ap_ready),
    .r_v_address0(grp_barrett_reduce_fu_153_r_v_address0),
    .r_v_ce0(grp_barrett_reduce_fu_153_r_v_ce0),
    .r_v_we0(grp_barrett_reduce_fu_153_r_v_we0),
    .r_v_d0(grp_barrett_reduce_fu_153_r_v_d0),
    .r_v_q0(r_v_q0),
    .x_address0(grp_barrett_reduce_fu_153_x_address0),
    .x_ce0(grp_barrett_reduce_fu_153_x_ce0),
    .x_q0(t_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_barrett_reduce_fu_153_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_236_p2 == 1'd1))) begin
            ap_reg_grp_barrett_reduce_fu_153_ap_start <= 1'b1;
        end else if ((1'b1 == grp_barrett_reduce_fu_153_ap_ready)) begin
            ap_reg_grp_barrett_reduce_fu_153_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_164_p2 == 1'd1))) begin
        i_1_reg_119 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_198_p2 == 1'd1))) begin
        i_1_reg_119 <= i_54_reg_299;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_181_p2 == 1'd1))) begin
        i_2_reg_142 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_2_reg_142 <= i_55_reg_345;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond3_fu_164_p2))) begin
        i_reg_108 <= i_53_fu_170_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_108 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_131 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_131 <= j_1_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_54_reg_299 <= i_54_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_55_reg_345 <= i_55_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_317 <= j_1_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_v_load_reg_309 <= r_v_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_236_p2))) begin
        t_addr_2_reg_350 <= tmp_782_fu_248_p1;
        t_addr_3_reg_355 <= tmp_783_fu_253_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_addr_4_reg_337 <= tmp_788_fu_226_p1;
        tmp_786_reg_332 <= tmp_786_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_198_p2))) begin
        tmp_787_reg_327 <= tmp_787_fu_215_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state10) & (grp_barrett_reduce_fu_153_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_barrett_reduce_fu_153_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_v_address0 = tmp_s_fu_193_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_v_address0 = grp_barrett_reduce_fu_153_r_v_address0;
    end else begin
        r_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_v_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_v_ce0 = grp_barrett_reduce_fu_153_r_v_ce0;
    end else begin
        r_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_v_we0 = grp_barrett_reduce_fu_153_r_v_we0;
    end else begin
        r_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_address0 = t_addr_2_reg_350;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_236_p2))) begin
        t_address0 = tmp_782_fu_248_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_address0 = t_addr_4_reg_337;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        t_address0 = tmp_788_fu_226_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_address0 = tmp_fu_176_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_address0 = grp_barrett_reduce_fu_153_x_address0;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_address1 = t_addr_3_reg_355;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_236_p2))) begin
        t_address1 = tmp_783_fu_253_p1;
    end else begin
        t_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_236_p2)) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        t_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_ce0 = grp_barrett_reduce_fu_153_x_ce0;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_236_p2)) | (1'b1 == ap_CS_fsm_state9))) begin
        t_ce1 = 1'b1;
    end else begin
        t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_d0 = tmp_843_cast_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_d0 = tmp_789_fu_230_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_d0 = 32'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond3_fu_164_p2)) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_we1 = 1'b1;
    end else begin
        t_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_v_ce0 = 1'b1;
    end else begin
        y_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_164_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_181_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_198_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_236_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_barrett_reduce_fu_153_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign carry_2_fu_272_p1 = carry_fu_262_p4;

assign carry_fu_262_p4 = {{t_q0[31:8]}};

assign exitcond1_fu_198_p2 = ((j_reg_131 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond2_fu_181_p2 = ((i_1_reg_119 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond3_fu_164_p2 = ((i_reg_108 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_236_p2 = ((i_2_reg_142 == 6'd63) ? 1'b1 : 1'b0);

assign grp_barrett_reduce_fu_153_ap_start = ap_reg_grp_barrett_reduce_fu_153_ap_start;

assign i_53_fu_170_p2 = (i_reg_108 + 7'd1);

assign i_54_fu_187_p2 = (i_1_reg_119 + 6'd1);

assign i_55_fu_242_p2 = (i_2_reg_142 + 6'd1);

assign j_1_fu_204_p2 = (j_reg_131 + 6'd1);

assign r_v_d0 = grp_barrett_reduce_fu_153_r_v_d0;

assign t_d1 = (carry_2_fu_272_p1 + t_q1);

assign tmp_782_fu_248_p1 = i_2_reg_142;

assign tmp_783_fu_253_p1 = i_55_fu_242_p2;

assign tmp_785_fu_210_p1 = j_reg_131;

assign tmp_786_fu_221_p1 = y_v_q0;

assign tmp_786_fu_221_p2 = ($signed(r_v_load_reg_309) * $signed(tmp_786_fu_221_p1));

assign tmp_787_fu_215_p2 = (i_1_reg_119 + j_reg_131);

assign tmp_788_fu_226_p1 = tmp_787_reg_327;

assign tmp_789_fu_230_p2 = (t_q0 + tmp_786_reg_332);

assign tmp_790_fu_258_p1 = t_q0[7:0];

assign tmp_843_cast_fu_283_p1 = tmp_790_fu_258_p1;

assign tmp_fu_176_p1 = i_reg_108;

assign tmp_s_fu_193_p1 = i_1_reg_119;

assign y_v_address0 = tmp_785_fu_210_p1;

endmodule //crypto_sign_ed25519_15
