// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "crypto_sign_ed25519_12.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic crypto_sign_ed25519_12::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic crypto_sign_ed25519_12::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> crypto_sign_ed25519_12::ap_ST_fsm_state1 = "1";
const sc_lv<7> crypto_sign_ed25519_12::ap_ST_fsm_state2 = "10";
const sc_lv<7> crypto_sign_ed25519_12::ap_ST_fsm_state3 = "100";
const sc_lv<7> crypto_sign_ed25519_12::ap_ST_fsm_state4 = "1000";
const sc_lv<7> crypto_sign_ed25519_12::ap_ST_fsm_state5 = "10000";
const sc_lv<7> crypto_sign_ed25519_12::ap_ST_fsm_state6 = "100000";
const sc_lv<7> crypto_sign_ed25519_12::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_1 = "1";
const sc_lv<1> crypto_sign_ed25519_12::ap_const_lv1_0 = "0";
const sc_lv<1> crypto_sign_ed25519_12::ap_const_lv1_1 = "1";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_3 = "11";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_5 = "101";
const sc_lv<6> crypto_sign_ed25519_12::ap_const_lv6_0 = "000000";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_2 = "10";
const sc_lv<3> crypto_sign_ed25519_12::ap_const_lv3_0 = "000";
const sc_lv<5> crypto_sign_ed25519_12::ap_const_lv5_0 = "00000";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_4 = "100";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_6 = "110";
const sc_lv<64> crypto_sign_ed25519_12::ap_const_lv64_1F = "11111";
const sc_lv<64> crypto_sign_ed25519_12::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<6> crypto_sign_ed25519_12::ap_const_lv6_20 = "100000";
const sc_lv<6> crypto_sign_ed25519_12::ap_const_lv6_1 = "1";
const sc_lv<3> crypto_sign_ed25519_12::ap_const_lv3_4 = "100";
const sc_lv<3> crypto_sign_ed25519_12::ap_const_lv3_1 = "1";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_7 = "111";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_1F = "11111";
const sc_lv<5> crypto_sign_ed25519_12::ap_const_lv5_1F = "11111";
const sc_lv<5> crypto_sign_ed25519_12::ap_const_lv5_1 = "1";
const sc_lv<32> crypto_sign_ed25519_12::ap_const_lv32_8 = "1000";
const sc_lv<31> crypto_sign_ed25519_12::ap_const_lv31_13 = "10011";
const bool crypto_sign_ed25519_12::ap_const_boolean_1 = true;

crypto_sign_ed25519_12::crypto_sign_ed25519_12(sc_module_name name) : sc_module(name), mVcdFile(0) {
    crypto_sign_mac_mpcA_x_U72 = new crypto_sign_mac_mpcA<1,1,6,25,32,32>("crypto_sign_mac_mpcA_x_U72");
    crypto_sign_mac_mpcA_x_U72->din0(grp_fu_262_p0);
    crypto_sign_mac_mpcA_x_U72->din1(grp_fu_262_p1);
    crypto_sign_mac_mpcA_x_U72->din2(r_v_q1);
    crypto_sign_mac_mpcA_x_U72->dout(grp_fu_262_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_i_fu_175_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_i_fu_175_p2 );

    SC_METHOD(thread_exitcond1_i_fu_175_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( rep_i_reg_128 );

    SC_METHOD(thread_exitcond_fu_150_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_117 );

    SC_METHOD(thread_exitcond_i_fu_210_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( i_i_reg_139 );

    SC_METHOD(thread_grp_fu_262_p0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_262_p1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_fu_262_p10 );

    SC_METHOD(thread_grp_fu_262_p10);
    sensitive << ( tmp_777_fu_191_p4 );

    SC_METHOD(thread_i_59_fu_156_p2);
    sensitive << ( i_reg_117 );

    SC_METHOD(thread_i_60_fu_216_p2);
    sensitive << ( i_i_reg_139 );

    SC_METHOD(thread_r_v_address0);
    sensitive << ( tmp_reg_279 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( r_v_addr_19_reg_322 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_760_i_fu_227_p1 );

    SC_METHOD(thread_r_v_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( r_v_addr_20_reg_328 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_759_i_fu_222_p1 );

    SC_METHOD(thread_r_v_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_r_v_ce1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_r_v_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_s_fu_168_p2 );
    sensitive << ( grp_fu_262_p3 );
    sensitive << ( tmp_762_i_cast_fu_257_p1 );

    SC_METHOD(thread_r_v_d1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_i_cast_fu_205_p1 );
    sensitive << ( tmp_761_i_fu_250_p2 );

    SC_METHOD(thread_r_v_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_r_v_we1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_rep_fu_181_p2);
    sensitive << ( rep_i_reg_128 );

    SC_METHOD(thread_t_9_fu_246_p1);
    sensitive << ( t_s_fu_236_p4 );

    SC_METHOD(thread_t_s_fu_236_p4);
    sensitive << ( r_v_q1 );

    SC_METHOD(thread_tmp_759_i_fu_222_p1);
    sensitive << ( i_i_reg_139 );

    SC_METHOD(thread_tmp_760_i_fu_227_p1);
    sensitive << ( i_60_fu_216_p2 );

    SC_METHOD(thread_tmp_761_i_fu_250_p2);
    sensitive << ( r_v_q0 );
    sensitive << ( t_9_fu_246_p1 );

    SC_METHOD(thread_tmp_762_i_cast_fu_257_p1);
    sensitive << ( tmp_798_fu_232_p1 );

    SC_METHOD(thread_tmp_777_fu_191_p4);
    sensitive << ( r_v_q0 );

    SC_METHOD(thread_tmp_797_fu_187_p1);
    sensitive << ( r_v_q0 );

    SC_METHOD(thread_tmp_798_fu_232_p1);
    sensitive << ( r_v_q1 );

    SC_METHOD(thread_tmp_fu_162_p1);
    sensitive << ( i_reg_117 );

    SC_METHOD(thread_tmp_i_cast_fu_205_p1);
    sensitive << ( tmp_797_fu_187_p1 );

    SC_METHOD(thread_tmp_s_fu_168_p2);
    sensitive << ( x_v_q0 );
    sensitive << ( y_v_q0 );

    SC_METHOD(thread_x_v_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_162_p1 );

    SC_METHOD(thread_x_v_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_y_v_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_162_p1 );

    SC_METHOD(thread_y_v_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_150_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_i_fu_210_p2 );
    sensitive << ( exitcond1_i_fu_175_p2 );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "crypto_sign_ed25519_12_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, r_v_address0, "(port)r_v_address0");
    sc_trace(mVcdFile, r_v_ce0, "(port)r_v_ce0");
    sc_trace(mVcdFile, r_v_we0, "(port)r_v_we0");
    sc_trace(mVcdFile, r_v_d0, "(port)r_v_d0");
    sc_trace(mVcdFile, r_v_q0, "(port)r_v_q0");
    sc_trace(mVcdFile, r_v_address1, "(port)r_v_address1");
    sc_trace(mVcdFile, r_v_ce1, "(port)r_v_ce1");
    sc_trace(mVcdFile, r_v_we1, "(port)r_v_we1");
    sc_trace(mVcdFile, r_v_d1, "(port)r_v_d1");
    sc_trace(mVcdFile, r_v_q1, "(port)r_v_q1");
    sc_trace(mVcdFile, x_v_address0, "(port)x_v_address0");
    sc_trace(mVcdFile, x_v_ce0, "(port)x_v_ce0");
    sc_trace(mVcdFile, x_v_q0, "(port)x_v_q0");
    sc_trace(mVcdFile, y_v_address0, "(port)y_v_address0");
    sc_trace(mVcdFile, y_v_ce0, "(port)y_v_ce0");
    sc_trace(mVcdFile, y_v_q0, "(port)y_v_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_59_fu_156_p2, "i_59_fu_156_p2");
    sc_trace(mVcdFile, i_59_reg_274, "i_59_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_162_p1, "tmp_fu_162_p1");
    sc_trace(mVcdFile, tmp_reg_279, "tmp_reg_279");
    sc_trace(mVcdFile, exitcond_fu_150_p2, "exitcond_fu_150_p2");
    sc_trace(mVcdFile, rep_fu_181_p2, "rep_fu_181_p2");
    sc_trace(mVcdFile, rep_reg_309, "rep_reg_309");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_60_fu_216_p2, "i_60_fu_216_p2");
    sc_trace(mVcdFile, i_60_reg_317, "i_60_reg_317");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, r_v_addr_19_reg_322, "r_v_addr_19_reg_322");
    sc_trace(mVcdFile, exitcond_i_fu_210_p2, "exitcond_i_fu_210_p2");
    sc_trace(mVcdFile, r_v_addr_20_reg_328, "r_v_addr_20_reg_328");
    sc_trace(mVcdFile, i_reg_117, "i_reg_117");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, rep_i_reg_128, "rep_i_reg_128");
    sc_trace(mVcdFile, i_i_reg_139, "i_i_reg_139");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_759_i_fu_222_p1, "tmp_759_i_fu_222_p1");
    sc_trace(mVcdFile, tmp_760_i_fu_227_p1, "tmp_760_i_fu_227_p1");
    sc_trace(mVcdFile, tmp_s_fu_168_p2, "tmp_s_fu_168_p2");
    sc_trace(mVcdFile, tmp_i_cast_fu_205_p1, "tmp_i_cast_fu_205_p1");
    sc_trace(mVcdFile, grp_fu_262_p3, "grp_fu_262_p3");
    sc_trace(mVcdFile, tmp_761_i_fu_250_p2, "tmp_761_i_fu_250_p2");
    sc_trace(mVcdFile, tmp_762_i_cast_fu_257_p1, "tmp_762_i_cast_fu_257_p1");
    sc_trace(mVcdFile, tmp_777_fu_191_p4, "tmp_777_fu_191_p4");
    sc_trace(mVcdFile, tmp_797_fu_187_p1, "tmp_797_fu_187_p1");
    sc_trace(mVcdFile, t_s_fu_236_p4, "t_s_fu_236_p4");
    sc_trace(mVcdFile, t_9_fu_246_p1, "t_9_fu_246_p1");
    sc_trace(mVcdFile, tmp_798_fu_232_p1, "tmp_798_fu_232_p1");
    sc_trace(mVcdFile, grp_fu_262_p0, "grp_fu_262_p0");
    sc_trace(mVcdFile, grp_fu_262_p1, "grp_fu_262_p1");
    sc_trace(mVcdFile, exitcond1_i_fu_175_p2, "exitcond1_i_fu_175_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_262_p10, "grp_fu_262_p10");
#endif

    }
}

crypto_sign_ed25519_12::~crypto_sign_ed25519_12() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete crypto_sign_mac_mpcA_x_U72;
}

void crypto_sign_ed25519_12::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_i_reg_139 = i_60_reg_317.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_i_reg_139 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_117 = i_59_reg_274.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_117 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_210_p2.read()))) {
        rep_i_reg_128 = rep_reg_309.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_150_p2.read(), ap_const_lv1_1))) {
        rep_i_reg_128 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_59_reg_274 = i_59_fu_156_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_60_reg_317 = i_60_fu_216_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_210_p2.read()))) {
        r_v_addr_19_reg_322 =  (sc_lv<5>) (tmp_759_i_fu_222_p1.read());
        r_v_addr_20_reg_328 =  (sc_lv<5>) (tmp_760_i_fu_227_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        rep_reg_309 = rep_fu_181_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_150_p2.read(), ap_const_lv1_0))) {
        tmp_reg_279 = tmp_fu_162_p1.read();
    }
}

void crypto_sign_ed25519_12::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void crypto_sign_ed25519_12::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void crypto_sign_ed25519_12::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void crypto_sign_ed25519_12::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void crypto_sign_ed25519_12::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void crypto_sign_ed25519_12::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void crypto_sign_ed25519_12::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void crypto_sign_ed25519_12::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_i_fu_175_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void crypto_sign_ed25519_12::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void crypto_sign_ed25519_12::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_i_fu_175_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void crypto_sign_ed25519_12::thread_exitcond1_i_fu_175_p2() {
    exitcond1_i_fu_175_p2 = (!rep_i_reg_128.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(rep_i_reg_128.read() == ap_const_lv3_4);
}

void crypto_sign_ed25519_12::thread_exitcond_fu_150_p2() {
    exitcond_fu_150_p2 = (!i_reg_117.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_117.read() == ap_const_lv6_20);
}

void crypto_sign_ed25519_12::thread_exitcond_i_fu_210_p2() {
    exitcond_i_fu_210_p2 = (!i_i_reg_139.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_139.read() == ap_const_lv5_1F);
}

void crypto_sign_ed25519_12::thread_grp_fu_262_p0() {
    grp_fu_262_p0 =  (sc_lv<6>) (ap_const_lv31_13);
}

void crypto_sign_ed25519_12::thread_grp_fu_262_p1() {
    grp_fu_262_p1 =  (sc_lv<25>) (grp_fu_262_p10.read());
}

void crypto_sign_ed25519_12::thread_grp_fu_262_p10() {
    grp_fu_262_p10 = esl_zext<31,25>(tmp_777_fu_191_p4.read());
}

void crypto_sign_ed25519_12::thread_i_59_fu_156_p2() {
    i_59_fu_156_p2 = (!i_reg_117.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_117.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void crypto_sign_ed25519_12::thread_i_60_fu_216_p2() {
    i_60_fu_216_p2 = (!i_i_reg_139.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i_reg_139.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void crypto_sign_ed25519_12::thread_r_v_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        r_v_address0 = r_v_addr_19_reg_322.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        r_v_address0 =  (sc_lv<5>) (tmp_760_i_fu_227_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        r_v_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        r_v_address0 =  (sc_lv<5>) (ap_const_lv64_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        r_v_address0 =  (sc_lv<5>) (tmp_reg_279.read());
    } else {
        r_v_address0 = "XXXXX";
    }
}

void crypto_sign_ed25519_12::thread_r_v_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        r_v_address1 = r_v_addr_20_reg_328.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        r_v_address1 =  (sc_lv<5>) (tmp_759_i_fu_222_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        r_v_address1 =  (sc_lv<5>) (ap_const_lv64_1F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        r_v_address1 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        r_v_address1 = "XXXXX";
    }
}

void crypto_sign_ed25519_12::thread_r_v_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        r_v_ce0 = ap_const_logic_1;
    } else {
        r_v_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_ed25519_12::thread_r_v_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        r_v_ce1 = ap_const_logic_1;
    } else {
        r_v_ce1 = ap_const_logic_0;
    }
}

void crypto_sign_ed25519_12::thread_r_v_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        r_v_d0 = tmp_762_i_cast_fu_257_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        r_v_d0 = grp_fu_262_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        r_v_d0 = tmp_s_fu_168_p2.read();
    } else {
        r_v_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void crypto_sign_ed25519_12::thread_r_v_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        r_v_d1 = tmp_761_i_fu_250_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        r_v_d1 = tmp_i_cast_fu_205_p1.read();
    } else {
        r_v_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void crypto_sign_ed25519_12::thread_r_v_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        r_v_we0 = ap_const_logic_1;
    } else {
        r_v_we0 = ap_const_logic_0;
    }
}

void crypto_sign_ed25519_12::thread_r_v_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        r_v_we1 = ap_const_logic_1;
    } else {
        r_v_we1 = ap_const_logic_0;
    }
}

void crypto_sign_ed25519_12::thread_rep_fu_181_p2() {
    rep_fu_181_p2 = (!rep_i_reg_128.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(rep_i_reg_128.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void crypto_sign_ed25519_12::thread_t_9_fu_246_p1() {
    t_9_fu_246_p1 = esl_zext<32,24>(t_s_fu_236_p4.read());
}

void crypto_sign_ed25519_12::thread_t_s_fu_236_p4() {
    t_s_fu_236_p4 = r_v_q1.read().range(31, 8);
}

void crypto_sign_ed25519_12::thread_tmp_759_i_fu_222_p1() {
    tmp_759_i_fu_222_p1 = esl_zext<64,5>(i_i_reg_139.read());
}

void crypto_sign_ed25519_12::thread_tmp_760_i_fu_227_p1() {
    tmp_760_i_fu_227_p1 = esl_zext<64,5>(i_60_fu_216_p2.read());
}

void crypto_sign_ed25519_12::thread_tmp_761_i_fu_250_p2() {
    tmp_761_i_fu_250_p2 = (!t_9_fu_246_p1.read().is_01() || !r_v_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(t_9_fu_246_p1.read()) + sc_biguint<32>(r_v_q0.read()));
}

void crypto_sign_ed25519_12::thread_tmp_762_i_cast_fu_257_p1() {
    tmp_762_i_cast_fu_257_p1 = esl_zext<32,8>(tmp_798_fu_232_p1.read());
}

void crypto_sign_ed25519_12::thread_tmp_777_fu_191_p4() {
    tmp_777_fu_191_p4 = r_v_q0.read().range(31, 7);
}

void crypto_sign_ed25519_12::thread_tmp_797_fu_187_p1() {
    tmp_797_fu_187_p1 = r_v_q0.read().range(7-1, 0);
}

void crypto_sign_ed25519_12::thread_tmp_798_fu_232_p1() {
    tmp_798_fu_232_p1 = r_v_q1.read().range(8-1, 0);
}

void crypto_sign_ed25519_12::thread_tmp_fu_162_p1() {
    tmp_fu_162_p1 = esl_zext<64,6>(i_reg_117.read());
}

void crypto_sign_ed25519_12::thread_tmp_i_cast_fu_205_p1() {
    tmp_i_cast_fu_205_p1 = esl_zext<32,7>(tmp_797_fu_187_p1.read());
}

void crypto_sign_ed25519_12::thread_tmp_s_fu_168_p2() {
    tmp_s_fu_168_p2 = (!x_v_q0.read().is_01() || !y_v_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(x_v_q0.read()) + sc_biguint<32>(y_v_q0.read()));
}

void crypto_sign_ed25519_12::thread_x_v_address0() {
    x_v_address0 =  (sc_lv<5>) (tmp_fu_162_p1.read());
}

void crypto_sign_ed25519_12::thread_x_v_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_v_ce0 = ap_const_logic_1;
    } else {
        x_v_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_ed25519_12::thread_y_v_address0() {
    y_v_address0 =  (sc_lv<5>) (tmp_fu_162_p1.read());
}

void crypto_sign_ed25519_12::thread_y_v_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        y_v_ce0 = ap_const_logic_1;
    } else {
        y_v_ce0 = ap_const_logic_0;
    }
}

void crypto_sign_ed25519_12::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_150_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_i_fu_175_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_210_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

