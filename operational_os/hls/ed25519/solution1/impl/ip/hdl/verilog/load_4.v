// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        in_offset,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [5:0] in_r_address1;
output   in_r_ce1;
input  [7:0] in_r_q1;
input  [6:0] in_offset;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] in_r_address0;
reg in_r_ce0;
reg[5:0] in_r_address1;
reg in_r_ce1;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] tmp_1374_fu_66_p1;
reg   [5:0] tmp_1374_reg_116;
reg   [7:0] in_load_reg_127;
wire    ap_CS_fsm_state2;
reg   [7:0] in_load_1_reg_132;
wire   [63:0] in_offset_cast3_fu_61_p1;
wire   [63:0] sum_cast_fu_76_p1;
wire   [63:0] sum2_cast_fu_86_p1;
wire   [63:0] sum4_cast_fu_96_p1;
wire   [5:0] sum_fu_70_p2;
wire   [5:0] sum2_fu_81_p2;
wire   [5:0] sum4_fu_91_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_fu_101_p5;
reg   [31:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_preg <= tmp_fu_101_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_load_1_reg_132 <= in_r_q1;
        in_load_reg_127 <= in_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_1374_reg_116 <= tmp_1374_fu_66_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return = tmp_fu_101_p5;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address0 = sum2_cast_fu_86_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_r_address0 = in_offset_cast3_fu_61_p1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_address1 = sum4_cast_fu_96_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        in_r_address1 = sum_cast_fu_76_p1;
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign in_offset_cast3_fu_61_p1 = in_offset;

assign sum2_cast_fu_86_p1 = sum2_fu_81_p2;

assign sum2_fu_81_p2 = (6'd2 + tmp_1374_reg_116);

assign sum4_cast_fu_96_p1 = sum4_fu_91_p2;

assign sum4_fu_91_p2 = (6'd3 + tmp_1374_reg_116);

assign sum_cast_fu_76_p1 = sum_fu_70_p2;

assign sum_fu_70_p2 = (6'd1 + tmp_1374_fu_66_p1);

assign tmp_1374_fu_66_p1 = in_offset[5:0];

assign tmp_fu_101_p5 = {{{{in_r_q1}, {in_r_q0}}, {in_load_1_reg_132}}, {in_load_reg_127}};

endmodule //load_4
