-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity transform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SHA256_m_h_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    SHA256_m_h_ce0 : OUT STD_LOGIC;
    SHA256_m_h_we0 : OUT STD_LOGIC;
    SHA256_m_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    SHA256_m_h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    message_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    message_ce0 : OUT STD_LOGIC;
    message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    message_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    message_ce1 : OUT STD_LOGIC;
    message_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    block_nb : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of transform is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv7_79 : STD_LOGIC_VECTOR (6 downto 0) := "1111001";
    constant ap_const_lv7_71 : STD_LOGIC_VECTOR (6 downto 0) := "1110001";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SHA256_sha256_k_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal SHA256_sha256_k_ce0 : STD_LOGIC;
    signal SHA256_sha256_k_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal wv_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_2_fu_457_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_1110 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_5_fu_469_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_reg_1118 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_block_0_sum_fu_483_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_block_0_sum_reg_1123 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal message_load_reg_1139 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal message_load_1_reg_1144 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond9_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_load_reg_1172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal w_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_load_1_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_6_fu_753_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_7_fu_765_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_7_reg_1204 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_51_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_reg_1209 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond8_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_8_fu_782_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_8_reg_1222 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal wv_load_1_reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_load_3_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_load_4_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_75_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_load_5_reg_1271 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_1016_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_reg_1278 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_fu_1026_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_reg_1283 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_9_fu_1037_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_9_reg_1291 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal exitcond_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal SHA256_m_h_addr_1_reg_1301 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_ce0 : STD_LOGIC;
    signal w_we0 : STD_LOGIC;
    signal w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_ce1 : STD_LOGIC;
    signal w_we1 : STD_LOGIC;
    signal w_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal wv_ce0 : STD_LOGIC;
    signal wv_we0 : STD_LOGIC;
    signal wv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wv_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal wv_ce1 : STD_LOGIC;
    signal wv_we1 : STD_LOGIC;
    signal wv_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_375 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_387 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_399 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_reg_411 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_3_reg_422 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal j_4_reg_434 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond7_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_sum1_cast_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum3_cast_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_sum5_cast_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_block_0_sum_cast_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_71_fu_479_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_475_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_sum1_fu_493_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_sum3_fu_504_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_sum5_fu_519_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_551_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_562_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_fu_573_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_45_fu_584_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_74_fu_604_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_23_fu_595_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_84_fu_624_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_26_fu_615_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_fu_635_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_85_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_627_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_607_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_670_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_36_fu_660_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_87_fu_692_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_39_fu_682_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_42_fu_704_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_88_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_696_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_674_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_fu_798_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_52_fu_788_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_90_fu_820_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_fu_810_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_91_fu_842_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_58_fu_832_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_60_fu_846_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_824_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_802_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_888_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_fu_927_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_67_fu_917_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_93_fu_949_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_69_fu_939_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_94_fu_971_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_72_fu_961_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_73_fu_975_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_953_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_983_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_931_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_1005_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_fu_1010_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);

    component transform_SHA256_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transform_w IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component transform_wv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    SHA256_sha256_k_U : component transform_SHA256_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SHA256_sha256_k_address0,
        ce0 => SHA256_sha256_k_ce0,
        q0 => SHA256_sha256_k_q0);

    w_U : component transform_w
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_address0,
        ce0 => w_ce0,
        we0 => w_we0,
        d0 => w_d0,
        q0 => w_q0,
        address1 => w_address1,
        ce1 => w_ce1,
        we1 => w_we1,
        d1 => w_d1,
        q1 => w_q1);

    wv_U : component transform_wv
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wv_address0,
        ce0 => wv_ce0,
        we0 => wv_we0,
        d0 => wv_d0,
        q0 => wv_q0,
        address1 => wv_address1,
        ce1 => wv_ce1,
        we1 => wv_we1,
        d1 => wv_d1,
        q1 => wv_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_fu_1031_p2 = ap_const_lv1_1))) then 
                i_reg_375 <= i_2_reg_1110;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_375 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_1_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_463_p2 = ap_const_lv1_1))) then 
                j_1_reg_399 <= ap_const_lv7_10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_1_reg_399 <= j_6_fu_753_p2;
            end if; 
        end if;
    end process;

    j_2_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond9_fu_545_p2 = ap_const_lv1_1))) then 
                j_2_reg_411 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_2_reg_411 <= j_7_reg_1204;
            end if; 
        end if;
    end process;

    j_3_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_759_p2 = ap_const_lv1_1))) then 
                j_3_reg_422 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_3_reg_422 <= j_8_reg_1222;
            end if; 
        end if;
    end process;

    j_4_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond7_fu_776_p2))) then 
                j_4_reg_434 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_4_reg_434 <= j_9_reg_1291;
            end if; 
        end if;
    end process;

    j_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond2_fu_452_p2))) then 
                j_reg_387 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_387 <= j_5_reg_1118;
            end if; 
        end if;
    end process;

    reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                reg_445 <= wv_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_445 <= wv_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond_fu_1031_p2))) then
                SHA256_m_h_addr_1_reg_1301 <= tmp_82_fu_1043_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_1110 <= i_2_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_5_reg_1118 <= j_5_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_7_reg_1204 <= j_7_fu_765_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_8_reg_1222 <= j_8_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                j_9_reg_1291 <= j_9_fu_1037_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                message_load_1_reg_1144 <= message_q1;
                message_load_reg_1139 <= message_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_463_p2 = ap_const_lv1_0))) then
                    sub_block_0_sum_reg_1123(6 downto 2) <= sub_block_0_sum_fu_483_p4(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                t1_reg_1254 <= t1_fu_911_p2;
                wv_load_3_reg_1249 <= wv_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond8_fu_759_p2))) then
                    tmp_51_reg_1209(3 downto 0) <= tmp_51_fu_771_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_62_reg_1234 <= tmp_62_fu_860_p2;
                wv_load_1_reg_1227 <= wv_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_75_reg_1266 <= tmp_75_fu_989_p2;
                wv_load_4_reg_1260 <= wv_q1;
                wv_load_5_reg_1271 <= wv_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_80_reg_1278 <= tmp_80_fu_1016_p2;
                tmp_81_reg_1283 <= tmp_81_fu_1026_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                w_load_1_reg_1181 <= w_q1;
                w_load_reg_1172 <= w_q0;
            end if;
        end if;
    end process;
    sub_block_0_sum_reg_1123(1 downto 0) <= "00";
    tmp_51_reg_1209(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond1_fu_463_p2, ap_CS_fsm_state6, exitcond9_fu_545_p2, ap_CS_fsm_state9, exitcond8_fu_759_p2, ap_CS_fsm_state11, ap_CS_fsm_state19, exitcond_fu_1031_p2, exitcond2_fu_452_p2, exitcond7_fu_776_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond2_fu_452_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_463_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond9_fu_545_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_759_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond7_fu_776_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_fu_1031_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SHA256_m_h_address0_assign_proc : process(ap_CS_fsm_state9, tmp_51_fu_771_p1, ap_CS_fsm_state19, SHA256_m_h_addr_1_reg_1301, ap_CS_fsm_state20, tmp_82_fu_1043_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            SHA256_m_h_address0 <= SHA256_m_h_addr_1_reg_1301;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            SHA256_m_h_address0 <= tmp_82_fu_1043_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            SHA256_m_h_address0 <= tmp_51_fu_771_p1(3 - 1 downto 0);
        else 
            SHA256_m_h_address0 <= "XXX";
        end if; 
    end process;


    SHA256_m_h_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            SHA256_m_h_ce0 <= ap_const_logic_1;
        else 
            SHA256_m_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SHA256_m_h_d0 <= std_logic_vector(unsigned(wv_q1) + unsigned(SHA256_m_h_q0));

    SHA256_m_h_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            SHA256_m_h_we0 <= ap_const_logic_1;
        else 
            SHA256_m_h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    SHA256_sha256_k_address0 <= tmp_66_fu_866_p1(6 - 1 downto 0);

    SHA256_sha256_k_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            SHA256_sha256_k_ce0 <= ap_const_logic_1;
        else 
            SHA256_sha256_k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_452_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond2_fu_452_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_452_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond2_fu_452_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_463_p2 <= "1" when (j_reg_387 = ap_const_lv5_10) else "0";
    exitcond2_fu_452_p2 <= "1" when (i_reg_375 = block_nb) else "0";
    exitcond7_fu_776_p2 <= "1" when (j_3_reg_422 = ap_const_lv7_40) else "0";
    exitcond8_fu_759_p2 <= "1" when (j_2_reg_411 = ap_const_lv4_8) else "0";
    exitcond9_fu_545_p2 <= "1" when (j_1_reg_399 = ap_const_lv7_40) else "0";
    exitcond_fu_1031_p2 <= "1" when (j_4_reg_434 = ap_const_lv4_8) else "0";
    i_2_fu_457_p2 <= std_logic_vector(unsigned(i_reg_375) + unsigned(ap_const_lv2_1));
    j_5_fu_469_p2 <= std_logic_vector(unsigned(j_reg_387) + unsigned(ap_const_lv5_1));
    j_6_fu_753_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(j_1_reg_399));
    j_7_fu_765_p2 <= std_logic_vector(unsigned(j_2_reg_411) + unsigned(ap_const_lv4_1));
    j_8_fu_782_p2 <= std_logic_vector(unsigned(j_3_reg_422) + unsigned(ap_const_lv7_1));
    j_9_fu_1037_p2 <= std_logic_vector(unsigned(j_4_reg_434) + unsigned(ap_const_lv4_1));

    message_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, p_sum1_cast_fu_499_p1, p_sum5_cast_fu_524_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            message_address0 <= p_sum5_cast_fu_524_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            message_address0 <= p_sum1_cast_fu_499_p1(7 - 1 downto 0);
        else 
            message_address0 <= "XXXXXXX";
        end if; 
    end process;


    message_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, p_sum3_cast_fu_510_p1, sub_block_0_sum_cast_fu_515_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            message_address1 <= sub_block_0_sum_cast_fu_515_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            message_address1 <= p_sum3_cast_fu_510_p1(7 - 1 downto 0);
        else 
            message_address1 <= "XXXXXXX";
        end if; 
    end process;


    message_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            message_ce0 <= ap_const_logic_1;
        else 
            message_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    message_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            message_ce1 <= ap_const_logic_1;
        else 
            message_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_sum1_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum1_fu_493_p2),64));
    p_sum1_fu_493_p2 <= (sub_block_0_sum_fu_483_p4 or ap_const_lv7_3);
    p_sum3_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum3_fu_504_p2),64));
    p_sum3_fu_504_p2 <= (sub_block_0_sum_fu_483_p4 or ap_const_lv7_2);
    p_sum5_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum5_fu_519_p2),64));
    p_sum5_fu_519_p2 <= (sub_block_0_sum_reg_1123 or ap_const_lv7_1);
    sub_block_0_sum_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_block_0_sum_reg_1123),64));
    sub_block_0_sum_fu_483_p4 <= ((tmp_71_fu_479_p1 & tmp_fu_475_p1) & ap_const_lv2_0);
    t1_fu_911_p2 <= std_logic_vector(unsigned(tmp9_fu_905_p2) + unsigned(tmp8_fu_894_p2));
    tmp10_fu_900_p2 <= std_logic_vector(unsigned(tmp_62_reg_1234) + unsigned(tmp_65_fu_888_p2));
    tmp11_fu_983_p2 <= (tmp_73_fu_975_p3 xor tmp_70_fu_953_p3);
    tmp12_fu_1021_p2 <= std_logic_vector(unsigned(tmp_75_reg_1266) + unsigned(tmp_79_fu_1010_p2));
    tmp1_fu_648_p2 <= (tmp_85_fu_644_p1 xor tmp_28_fu_627_p3);
    tmp2_fu_718_p2 <= (tmp_88_fu_714_p1 xor tmp_41_fu_696_p3);
    tmp3_fu_730_p2 <= std_logic_vector(unsigned(w_load_1_reg_1181) + unsigned(w_q0));
    tmp4_fu_735_p2 <= std_logic_vector(unsigned(tmp_31_fu_654_p2) + unsigned(tmp_44_fu_724_p2));
    tmp5_fu_854_p2 <= (tmp_60_fu_846_p3 xor tmp_57_fu_824_p3);
    tmp8_fu_894_p2 <= std_logic_vector(unsigned(SHA256_sha256_k_q0) + unsigned(reg_445));
    tmp9_fu_905_p2 <= std_logic_vector(unsigned(tmp10_fu_900_p2) + unsigned(w_q0));
    tmp_20_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_387),64));
    tmp_21_fu_551_p2 <= std_logic_vector(signed(ap_const_lv7_7E) + signed(j_1_reg_399));
    tmp_22_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_551_p2),64));
    tmp_23_fu_595_p4 <= w_load_reg_1172(31 downto 17);
    tmp_25_fu_607_p3 <= (tmp_74_fu_604_p1 & tmp_23_fu_595_p4);
    tmp_26_fu_615_p4 <= w_load_reg_1172(31 downto 19);
    tmp_28_fu_627_p3 <= (tmp_84_fu_624_p1 & tmp_26_fu_615_p4);
    tmp_29_fu_635_p4 <= w_load_reg_1172(31 downto 10);
    tmp_31_fu_654_p2 <= (tmp1_fu_648_p2 xor tmp_25_fu_607_p3);
    tmp_32_fu_562_p2 <= std_logic_vector(signed(ap_const_lv7_79) + signed(j_1_reg_399));
    tmp_33_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_562_p2),64));
    tmp_34_fu_573_p2 <= std_logic_vector(signed(ap_const_lv7_71) + signed(j_1_reg_399));
    tmp_35_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_573_p2),64));
    tmp_36_fu_660_p4 <= w_q1(31 downto 7);
    tmp_38_fu_674_p3 <= (tmp_86_fu_670_p1 & tmp_36_fu_660_p4);
    tmp_39_fu_682_p4 <= w_q1(31 downto 18);
    tmp_41_fu_696_p3 <= (tmp_87_fu_692_p1 & tmp_39_fu_682_p4);
    tmp_42_fu_704_p4 <= w_q1(31 downto 3);
    tmp_44_fu_724_p2 <= (tmp2_fu_718_p2 xor tmp_38_fu_674_p3);
    tmp_45_fu_584_p2 <= std_logic_vector(signed(ap_const_lv7_70) + signed(j_1_reg_399));
    tmp_46_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_584_p2),64));
    tmp_50_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_399),64));
    tmp_51_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_411),64));
    tmp_52_fu_788_p4 <= wv_q1(31 downto 6);
    tmp_54_fu_802_p3 <= (tmp_89_fu_798_p1 & tmp_52_fu_788_p4);
    tmp_55_fu_810_p4 <= wv_q1(31 downto 11);
    tmp_57_fu_824_p3 <= (tmp_90_fu_820_p1 & tmp_55_fu_810_p4);
    tmp_58_fu_832_p4 <= wv_q1(31 downto 25);
    tmp_60_fu_846_p3 <= (tmp_91_fu_842_p1 & tmp_58_fu_832_p4);
    tmp_62_fu_860_p2 <= (tmp5_fu_854_p2 xor tmp_54_fu_802_p3);
    tmp_63_fu_872_p2 <= (wv_q1 and wv_load_1_reg_1227);
    tmp_64_fu_877_p2 <= (wv_load_1_reg_1227 xor ap_const_lv32_FFFFFFFF);
    tmp_65_fu_888_p2 <= (tmp_s_fu_882_p2 xor tmp_63_fu_872_p2);
    tmp_66_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_422),64));
    tmp_67_fu_917_p4 <= wv_q1(31 downto 2);
    tmp_68_fu_931_p3 <= (tmp_92_fu_927_p1 & tmp_67_fu_917_p4);
    tmp_69_fu_939_p4 <= wv_q1(31 downto 13);
    tmp_70_fu_953_p3 <= (tmp_93_fu_949_p1 & tmp_69_fu_939_p4);
    tmp_71_fu_479_p1 <= i_reg_375(1 - 1 downto 0);
    tmp_72_fu_961_p4 <= wv_q1(31 downto 22);
    tmp_73_fu_975_p3 <= (tmp_94_fu_971_p1 & tmp_72_fu_961_p4);
    tmp_74_fu_604_p1 <= w_load_reg_1172(17 - 1 downto 0);
    tmp_75_fu_989_p2 <= (tmp11_fu_983_p2 xor tmp_68_fu_931_p3);
    tmp_76_fu_995_p2 <= (wv_q1 and wv_load_5_reg_1271);
    tmp_77_fu_1000_p2 <= (wv_q1 xor wv_load_5_reg_1271);
    tmp_78_fu_1005_p2 <= (wv_load_4_reg_1260 and tmp_77_fu_1000_p2);
    tmp_79_fu_1010_p2 <= (tmp_78_fu_1005_p2 xor tmp_76_fu_995_p2);
    tmp_80_fu_1016_p2 <= std_logic_vector(unsigned(wv_q0) + unsigned(t1_reg_1254));
    tmp_81_fu_1026_p2 <= std_logic_vector(unsigned(tmp12_fu_1021_p2) + unsigned(t1_reg_1254));
    tmp_82_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_434),64));
    tmp_84_fu_624_p1 <= w_load_reg_1172(19 - 1 downto 0);
    tmp_85_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_635_p4),32));
    tmp_86_fu_670_p1 <= w_q1(7 - 1 downto 0);
    tmp_87_fu_692_p1 <= w_q1(18 - 1 downto 0);
    tmp_88_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_704_p4),32));
    tmp_89_fu_798_p1 <= wv_q1(6 - 1 downto 0);
    tmp_90_fu_820_p1 <= wv_q1(11 - 1 downto 0);
    tmp_91_fu_842_p1 <= wv_q1(25 - 1 downto 0);
    tmp_92_fu_927_p1 <= wv_q1(2 - 1 downto 0);
    tmp_93_fu_949_p1 <= wv_q1(13 - 1 downto 0);
    tmp_94_fu_971_p1 <= wv_q1(22 - 1 downto 0);
    tmp_fu_475_p1 <= j_reg_387(4 - 1 downto 0);
    tmp_s_fu_882_p2 <= (wv_q0 and tmp_64_fu_877_p2);

    w_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5, tmp_20_fu_540_p1, tmp_22_fu_557_p1, tmp_46_fu_590_p1, tmp_66_fu_866_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            w_address0 <= tmp_66_fu_866_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_address0 <= tmp_46_fu_590_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            w_address0 <= tmp_22_fu_557_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w_address0 <= tmp_20_fu_540_p1(6 - 1 downto 0);
        else 
            w_address0 <= "XXXXXX";
        end if; 
    end process;


    w_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_33_fu_568_p1, tmp_35_fu_579_p1, tmp_50_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            w_address1 <= tmp_50_fu_748_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_address1 <= tmp_35_fu_579_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            w_address1 <= tmp_33_fu_568_p1(6 - 1 downto 0);
        else 
            w_address1 <= "XXXXXX";
        end if; 
    end process;


    w_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            w_ce1 <= ap_const_logic_1;
        else 
            w_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    w_d0 <= (((message_q1 & message_q0) & message_load_1_reg_1144) & message_load_reg_1139);
    w_d1 <= std_logic_vector(unsigned(tmp4_fu_735_p2) + unsigned(tmp3_fu_730_p2));

    w_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w_we0 <= ap_const_logic_1;
        else 
            w_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            w_we1 <= ap_const_logic_1;
        else 
            w_we1 <= ap_const_logic_0;
        end if; 
    end process;


    wv_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, tmp_51_reg_1209, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            wv_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            wv_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            wv_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            wv_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            wv_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            wv_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            wv_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            wv_address0 <= tmp_51_reg_1209(3 - 1 downto 0);
        else 
            wv_address0 <= "XXX";
        end if; 
    end process;


    wv_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state18, tmp_82_fu_1043_p1, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            wv_address1 <= tmp_82_fu_1043_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            wv_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            wv_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            wv_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            wv_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            wv_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            wv_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            wv_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        else 
            wv_address1 <= "XXX";
        end if; 
    end process;


    wv_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            wv_ce0 <= ap_const_logic_1;
        else 
            wv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wv_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            wv_ce1 <= ap_const_logic_1;
        else 
            wv_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wv_d0_assign_proc : process(SHA256_m_h_q0, reg_445, ap_CS_fsm_state15, wv_load_5_reg_1271, tmp_80_reg_1278, tmp_81_reg_1283, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            wv_d0 <= tmp_81_reg_1283;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            wv_d0 <= wv_load_5_reg_1271;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            wv_d0 <= tmp_80_reg_1278;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            wv_d0 <= reg_445;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            wv_d0 <= SHA256_m_h_q0;
        else 
            wv_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wv_d1_assign_proc : process(reg_445, ap_CS_fsm_state15, wv_load_1_reg_1227, wv_load_3_reg_1249, wv_load_4_reg_1260, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            wv_d1 <= wv_load_4_reg_1260;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            wv_d1 <= reg_445;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            wv_d1 <= wv_load_1_reg_1227;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            wv_d1 <= wv_load_3_reg_1249;
        else 
            wv_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wv_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            wv_we0 <= ap_const_logic_1;
        else 
            wv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wv_we1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            wv_we1 <= ap_const_logic_1;
        else 
            wv_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
