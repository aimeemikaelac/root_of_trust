#include "{{ header_file_name }}"

void watch_mem_buffer(){
  volatile unsigned char *control_function = (unsigned char*)(SHARED_BUFFER_ADDRESS + 0x60);
  volatile unsigned char *control_start = (unsigned char*)(SHARED_BUFFER_ADDRESS + 0x70);
  volatile unsigned char *control_finished = (unsigned char*)(SHARED_BUFFER_ADDRESS + 0x80);
  {% for return_value in return_values %}
  volatile {{ return_value.type }} *{{ return_value.name}} = ({{ return_value.type }}*)(SHARED_BUFFER_ADDRESS + return_value.start);
  {% endfor %}
  unsigned int function;
  //int i;
  //while true, check for the function
  while(1){
    // Check if a ready signal is set
    //TODO: use this register with a bitmask for more data?
    if(*control_start == 0){
      continue;
    }
    function = *control_function;
    switch(function){
    {% for statement in statements %}
      case {{ statement.function_id }} :
        {% if statement.return_value %}
        *{{ statement.return_value.name }} = {{ statement.function_name }}(
        {% else %}
        {{ statement.function_name }}(
        {% endif %}
        {{ statement.arguments }}
        );
        *control_start = 0;
        *control_finished = 0xFF;
      break;
    {% endfor %}
      default :
        continue;
    }
  }
}

void clear_shared_buffer(){
  int i;
  unsigned char *shared_buffer = (unsigned char*)SHARED_BUFFER_ADDRESS;
  for(i=0; i<SHARED_BUFFER_SIZE; i++){
    shared_buffer[i] = 0;
  }
}

int main(){
  clear_shared_buffer();
  watch_mem_buffer();
  return 0;
}
