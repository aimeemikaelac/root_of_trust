-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reduce_add_sub is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_v_ce0 : OUT STD_LOGIC;
    r_v_we0 : OUT STD_LOGIC;
    r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of reduce_add_sub is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_ce0 : STD_LOGIC;
    signal m_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_20_fu_130_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_20_reg_250 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_255 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_cast_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_cast_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_756_fu_169_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_21_fu_207_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_21_reg_283 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_v_addr_1_reg_288 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pb_reg_90 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_102 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_113 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_s_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_fu_32 : STD_LOGIC_VECTOR (1 downto 0);
    signal phitmp_cast_cast_fu_188_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal pb_cast1_fu_149_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pb_1_fu_153_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pb_3_cast_fu_159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_738_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_739_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_740_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component reduce_add_sub_m IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component reduce_add_sub_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    m_U : component reduce_add_sub_m
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_address0,
        ce0 => m_ce0,
        q0 => m_q0);

    t_U : component reduce_add_sub_t
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_124_p2 = ap_const_lv1_1))) then 
                i_1_reg_113 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_1_reg_113 <= i_21_reg_283;
            end if; 
        end if;
    end process;

    i_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_102 <= i_20_reg_250;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_102 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    pb_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                pb_reg_90 <= x_1_fu_163_p2(31 downto 31);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                pb_reg_90 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_20_reg_250 <= i_20_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_21_reg_283 <= i_21_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_124_p2 = ap_const_lv1_1))) then
                mask_cast_reg_270 <= mask_cast_fu_145_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mask_fu_32 <= phitmp_cast_cast_fu_188_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_201_p2))) then
                r_v_addr_1_reg_288 <= tmp_s_fu_213_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_124_p2 = ap_const_lv1_0))) then
                    tmp_reg_255(5 downto 0) <= tmp_fu_136_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_255(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_124_p2, ap_CS_fsm_state4, exitcond_fu_201_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_124_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_201_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond_fu_201_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_201_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_201_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_201_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_124_p2 <= "1" when (i_reg_102 = ap_const_lv6_20) else "0";
    exitcond_fu_201_p2 <= "1" when (i_1_reg_113 = ap_const_lv6_20) else "0";
    i_20_fu_130_p2 <= std_logic_vector(unsigned(i_reg_102) + unsigned(ap_const_lv6_1));
    i_21_fu_207_p2 <= std_logic_vector(unsigned(i_1_reg_113) + unsigned(ap_const_lv6_1));
    m_address0 <= tmp_fu_136_p1(5 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        mask_cast_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mask_fu_32),32));

    pb_1_fu_153_p2 <= std_logic_vector(unsigned(m_q0) + unsigned(pb_cast1_fu_149_p1));
    pb_3_cast_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pb_1_fu_153_p2),32));
    pb_cast1_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pb_reg_90),8));
    phitmp_cast_cast_fu_188_p3 <= 
        ap_const_lv2_3 when (phitmp_fu_182_p2(0) = '1') else 
        ap_const_lv2_0;
    phitmp_fu_182_p2 <= (tmp_756_fu_169_p3 xor ap_const_lv1_1);

    r_v_address0_assign_proc : process(ap_CS_fsm_state2, tmp_fu_136_p1, ap_CS_fsm_state4, r_v_addr_1_reg_288, ap_CS_fsm_state5, tmp_s_fu_213_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_v_address0 <= r_v_addr_1_reg_288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_v_address0 <= tmp_s_fu_213_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_v_address0 <= tmp_fu_136_p1(5 - 1 downto 0);
        else 
            r_v_address0 <= "XXXXX";
        end if; 
    end process;


    r_v_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_v_ce0 <= ap_const_logic_1;
        else 
            r_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_v_d0 <= (r_v_q0 xor tmp_740_fu_229_p2);

    r_v_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_v_we0 <= ap_const_logic_1;
        else 
            r_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_address0_assign_proc : process(tmp_reg_255, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_s_fu_213_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= tmp_s_fu_213_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= tmp_reg_255(5 - 1 downto 0);
        else 
            t_address0 <= "XXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    t_d0 <= x_1_fu_163_p2(8 - 1 downto 0);

    t_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_738_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q0),32));
    tmp_739_fu_223_p2 <= (r_v_q0 xor tmp_738_fu_219_p1);
    tmp_740_fu_229_p2 <= (tmp_739_fu_223_p2 and mask_cast_reg_270);
    tmp_756_fu_169_p3 <= x_1_fu_163_p2(31 downto 31);
    tmp_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_102),64));
    tmp_s_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_113),64));
    x_1_fu_163_p2 <= std_logic_vector(unsigned(r_v_q0) - unsigned(pb_3_cast_fu_159_p1));
end behav;
