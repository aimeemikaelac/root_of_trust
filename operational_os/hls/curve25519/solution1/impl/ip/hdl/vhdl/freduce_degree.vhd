-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity freduce_degree is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of freduce_degree is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_291_fu_231_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_291_reg_440 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal output_addr_57_reg_450 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_292_fu_255_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_292_reg_455 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_293_fu_279_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_293_reg_471 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_addr_61_reg_481 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_294_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_294_reg_486 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_295_fu_327_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_295_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal output_addr_65_reg_512 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_351_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_517 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_296_fu_375_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_296_reg_533 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal output_addr_69_reg_543 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_297_fu_399_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_297_reg_554 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_298_fu_423_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_298_reg_564 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_fu_213_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_379_fu_219_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_225_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_380_fu_237_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_381_fu_243_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp4_fu_249_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_382_fu_261_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_383_fu_267_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp6_fu_273_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_384_fu_285_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_385_fu_291_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp8_fu_297_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_386_fu_309_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_387_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp10_fu_321_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_388_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_389_fu_339_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp12_fu_345_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_390_fu_357_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_391_fu_363_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp14_fu_369_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_392_fu_381_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_393_fu_387_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp16_fu_393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_394_fu_405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_395_fu_411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp18_fu_417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_291_reg_440 <= tmp_291_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_292_reg_455 <= tmp_292_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_293_reg_471 <= tmp_293_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_294_reg_486 <= tmp_294_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_295_reg_502 <= tmp_295_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_296_reg_533 <= tmp_296_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_297_reg_554 <= tmp_297_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_298_reg_564 <= tmp_298_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_s_reg_517 <= tmp_s_fu_351_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_207_p2 <= std_logic_vector(unsigned(output_r_q1) + unsigned(output_r_q0));
    output_addr_57_reg_450 <= ap_const_lv64_7(5 - 1 downto 0);
    output_addr_61_reg_481 <= ap_const_lv64_5(5 - 1 downto 0);
    output_addr_65_reg_512 <= ap_const_lv64_3(5 - 1 downto 0);
    output_addr_69_reg_543 <= ap_const_lv64_1(5 - 1 downto 0);

    output_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_r_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_r_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXX";
        end if; 
    end process;


    output_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, output_addr_57_reg_450, ap_CS_fsm_state3, ap_CS_fsm_state4, output_addr_61_reg_481, ap_CS_fsm_state5, ap_CS_fsm_state6, output_addr_65_reg_512, ap_CS_fsm_state7, ap_CS_fsm_state8, output_addr_69_reg_543, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_r_address1 <= output_addr_69_reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_address1 <= output_addr_65_reg_512;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address1 <= output_addr_61_reg_481;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address1 <= output_addr_57_reg_450;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_r_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        else 
            output_r_address1 <= "XXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(tmp_291_reg_440, tmp_293_reg_471, tmp_295_reg_502, tmp_296_reg_533, tmp_298_reg_564, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_d0 <= tmp_298_reg_564;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_r_d0 <= tmp_296_reg_533;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_d0 <= tmp_295_reg_502;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_d0 <= tmp_293_reg_471;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d0 <= tmp_291_reg_440;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_d1_assign_proc : process(tmp_292_reg_455, tmp_294_reg_486, tmp_s_reg_517, tmp_297_reg_554, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_r_d1 <= tmp_297_reg_554;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_d1 <= tmp_s_reg_517;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_d1 <= tmp_294_reg_486;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d1 <= tmp_292_reg_455;
        else 
            output_r_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp10_fu_321_p2 <= std_logic_vector(unsigned(tmp_386_fu_309_p2) + unsigned(tmp_387_fu_315_p2));
    tmp12_fu_345_p2 <= std_logic_vector(unsigned(tmp_388_fu_333_p2) + unsigned(tmp_389_fu_339_p2));
    tmp14_fu_369_p2 <= std_logic_vector(unsigned(tmp_390_fu_357_p2) + unsigned(tmp_391_fu_363_p2));
    tmp16_fu_393_p2 <= std_logic_vector(unsigned(tmp_392_fu_381_p2) + unsigned(tmp_393_fu_387_p2));
    tmp18_fu_417_p2 <= std_logic_vector(unsigned(tmp_394_fu_405_p2) + unsigned(tmp_395_fu_411_p2));
    tmp2_fu_225_p2 <= std_logic_vector(unsigned(tmp_fu_213_p2) + unsigned(tmp_379_fu_219_p2));
    tmp4_fu_249_p2 <= std_logic_vector(unsigned(tmp_380_fu_237_p2) + unsigned(tmp_381_fu_243_p2));
    tmp6_fu_273_p2 <= std_logic_vector(unsigned(tmp_382_fu_261_p2) + unsigned(tmp_383_fu_267_p2));
    tmp8_fu_297_p2 <= std_logic_vector(unsigned(tmp_384_fu_285_p2) + unsigned(tmp_385_fu_291_p2));
    tmp_291_fu_231_p2 <= std_logic_vector(unsigned(tmp2_fu_225_p2) + unsigned(grp_fu_207_p2));
    tmp_292_fu_255_p2 <= std_logic_vector(unsigned(tmp4_fu_249_p2) + unsigned(grp_fu_207_p2));
    tmp_293_fu_279_p2 <= std_logic_vector(unsigned(tmp6_fu_273_p2) + unsigned(grp_fu_207_p2));
    tmp_294_fu_303_p2 <= std_logic_vector(unsigned(tmp8_fu_297_p2) + unsigned(grp_fu_207_p2));
    tmp_295_fu_327_p2 <= std_logic_vector(unsigned(tmp10_fu_321_p2) + unsigned(grp_fu_207_p2));
    tmp_296_fu_375_p2 <= std_logic_vector(unsigned(tmp14_fu_369_p2) + unsigned(grp_fu_207_p2));
    tmp_297_fu_399_p2 <= std_logic_vector(unsigned(tmp16_fu_393_p2) + unsigned(grp_fu_207_p2));
    tmp_298_fu_423_p2 <= std_logic_vector(unsigned(tmp18_fu_417_p2) + unsigned(grp_fu_207_p2));
    tmp_379_fu_219_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_380_fu_237_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_381_fu_243_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_382_fu_261_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_383_fu_267_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_384_fu_285_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_385_fu_291_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_386_fu_309_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_387_fu_315_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_388_fu_333_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_389_fu_339_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_390_fu_357_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_391_fu_363_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_392_fu_381_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_393_fu_387_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_394_fu_405_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_395_fu_411_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    tmp_fu_213_p2 <= std_logic_vector(shift_left(unsigned(output_r_q0),to_integer(unsigned('0' & ap_const_lv64_4(31-1 downto 0)))));
    tmp_s_fu_351_p2 <= std_logic_vector(unsigned(tmp12_fu_345_p2) + unsigned(grp_fu_207_p2));
end behav;
