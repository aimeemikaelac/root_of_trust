// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module sha256_mem_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 5,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    // user signals
    output wire [31:0]                   message_addr,
    output wire                          message_addr_ap_vld,
    output wire [31:0]                   num_blocks,
    output wire                          num_blocks_ap_vld
);
//------------------------Address Info-------------------
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : Data signal of message_addr
//        bit 31~0 - message_addr[31:0] (Read/Write)
// 0x14 : Control signal of message_addr
//        bit 0  - message_addr_ap_vld (Read/Write/SC)
//        others - reserved
// 0x18 : Data signal of num_blocks
//        bit 31~0 - num_blocks[31:0] (Read/Write)
// 0x1c : Control signal of num_blocks
//        bit 0  - num_blocks_ap_vld (Read/Write/SC)
//        others - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_MESSAGE_ADDR_DATA_0 = 5'h10,
    ADDR_MESSAGE_ADDR_CTRL   = 5'h14,
    ADDR_NUM_BLOCKS_DATA_0   = 5'h18,
    ADDR_NUM_BLOCKS_CTRL     = 5'h1c,
    WRIDLE                   = 2'd0,
    WRDATA                   = 2'd1,
    WRRESP                   = 2'd2,
    WRRESET                  = 2'd3,
    RDIDLE                   = 2'd0,
    RDDATA                   = 2'd1,
    RDRESET                  = 2'd2,
    ADDR_BITS         = 5;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg  [31:0]                   int_message_addr = 'b0;
    reg                           int_message_addr_ap_vld = 1'b0;
    reg  [31:0]                   int_num_blocks = 'b0;
    reg                           int_num_blocks_ap_vld = 1'b0;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_MESSAGE_ADDR_DATA_0: begin
                    rdata <= int_message_addr[31:0];
                end
                ADDR_MESSAGE_ADDR_CTRL: begin
                    rdata[0] <= int_message_addr_ap_vld;
                end
                ADDR_NUM_BLOCKS_DATA_0: begin
                    rdata <= int_num_blocks[31:0];
                end
                ADDR_NUM_BLOCKS_CTRL: begin
                    rdata[0] <= int_num_blocks_ap_vld;
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign message_addr        = int_message_addr;
assign message_addr_ap_vld = int_message_addr_ap_vld;
assign num_blocks          = int_num_blocks;
assign num_blocks_ap_vld   = int_num_blocks_ap_vld;
// int_message_addr[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_message_addr[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MESSAGE_ADDR_DATA_0)
            int_message_addr[31:0] <= (WDATA[31:0] & wmask) | (int_message_addr[31:0] & ~wmask);
    end
end

// int_message_addr_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_message_addr_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_MESSAGE_ADDR_CTRL && WSTRB[0] && WDATA[0])
            int_message_addr_ap_vld <= 1'b1;
        else
            int_message_addr_ap_vld <= 1'b0; // self clear
    end
end

// int_num_blocks[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_num_blocks[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_NUM_BLOCKS_DATA_0)
            int_num_blocks[31:0] <= (WDATA[31:0] & wmask) | (int_num_blocks[31:0] & ~wmask);
    end
end

// int_num_blocks_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_num_blocks_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_NUM_BLOCKS_CTRL && WSTRB[0] && WDATA[0])
            int_num_blocks_ap_vld <= 1'b1;
        else
            int_num_blocks_ap_vld <= 1'b0; // self clear
    end
end


//------------------------Memory logic-------------------

endmodule
