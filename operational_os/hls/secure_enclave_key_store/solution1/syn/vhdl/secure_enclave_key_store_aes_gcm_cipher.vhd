-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity secure_enclave_key_store_aes_gcm_cipher is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_V : IN STD_LOGIC_VECTOR (127 downto 0);
    data_in_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_in_V_ce0 : OUT STD_LOGIC;
    data_in_V_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    data_out_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_V_ce0 : OUT STD_LOGIC;
    data_out_V_we0 : OUT STD_LOGIC;
    data_out_V_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    counter_V : IN STD_LOGIC_VECTOR (127 downto 0);
    hash_key_V : IN STD_LOGIC_VECTOR (127 downto 0);
    encrypt : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of secure_enclave_key_store_aes_gcm_cipher is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_42 : BOOLEAN;
    signal encrypt_read_read_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal encrypt_iterations_1_fu_317_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal encrypt_iterations_1_reg_505 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_83 : BOOLEAN;
    signal tmp_6_fu_323_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_511 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal agg_result_V_i_fu_336_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal agg_result_V_i_reg_516 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_98 : BOOLEAN;
    signal grp_secure_enclave_key_store_aes_fu_265_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal encrypted_counter_out_V_reg_523 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_107 : BOOLEAN;
    signal tmp_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_528 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_352_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_120 : BOOLEAN;
    signal r_V_16_fu_358_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_4_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_135 : BOOLEAN;
    signal agg_result_V_0_r_V_i_i1_fu_393_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal exitcond_i_i7_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_r_V_i_i1_fu_401_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_13_fu_419_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_fu_433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_153 : BOOLEAN;
    signal agg_result_V_0_r_V_i_i_fu_452_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal exitcond_i_i_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_r_V_i_i_fu_460_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_11_fu_478_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_secure_enclave_key_store_aes_fu_265_ap_start : STD_LOGIC;
    signal grp_secure_enclave_key_store_aes_fu_265_ap_done : STD_LOGIC;
    signal grp_secure_enclave_key_store_aes_fu_265_ap_idle : STD_LOGIC;
    signal grp_secure_enclave_key_store_aes_fu_265_ap_ready : STD_LOGIC;
    signal grp_secure_enclave_key_store_aes_fu_265_inptext_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Val2_s_reg_138 : STD_LOGIC_VECTOR (127 downto 0);
    signal lhs_V_3_reg_149 : STD_LOGIC_VECTOR (127 downto 0);
    signal encrypt_iterations_reg_163 : STD_LOGIC_VECTOR (12 downto 0);
    signal agg_result_V_i_i3_reg_177 : STD_LOGIC_VECTOR (127 downto 0);
    signal lhs_V_5_reg_190 : STD_LOGIC_VECTOR (127 downto 0);
    signal rhs_V_4_reg_201 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_assign_1_reg_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_V_i_i_reg_221 : STD_LOGIC_VECTOR (127 downto 0);
    signal lhs_V_4_reg_234 : STD_LOGIC_VECTOR (127 downto 0);
    signal rhs_V_3_reg_245 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_assign_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_grp_secure_enclave_key_store_aes_fu_265_ap_start : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_sig_nseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_210 : BOOLEAN;
    signal r_V_15_fu_346_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_i_cast_fu_327_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_14_fu_330_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_assign_1_cast1_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_V_1_fu_387_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_8_fu_409_p4 : STD_LOGIC_VECTOR (126 downto 0);
    signal i_assign_cast2_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_V_fu_446_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_6_fu_468_p4 : STD_LOGIC_VECTOR (126 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    component secure_enclave_key_store_aes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        inptext_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        key_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    grp_secure_enclave_key_store_aes_fu_265 : component secure_enclave_key_store_aes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_secure_enclave_key_store_aes_fu_265_ap_start,
        ap_done => grp_secure_enclave_key_store_aes_fu_265_ap_done,
        ap_idle => grp_secure_enclave_key_store_aes_fu_265_ap_idle,
        ap_ready => grp_secure_enclave_key_store_aes_fu_265_ap_ready,
        ap_ce => ap_const_logic_1,
        inptext_V_read => grp_secure_enclave_key_store_aes_fu_265_inptext_V_read,
        key_V_read => key_V,
        ap_return => grp_secure_enclave_key_store_aes_fu_265_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_secure_enclave_key_store_aes_fu_265_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_secure_enclave_key_store_aes_fu_265_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_1 = ap_sig_nseq_ST_st3_fsm_2))) then 
                    ap_reg_grp_secure_enclave_key_store_aes_fu_265_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_secure_enclave_key_store_aes_fu_265_ap_ready)) then 
                    ap_reg_grp_secure_enclave_key_store_aes_fu_265_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv128_lc_1;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_311_p2 = ap_const_lv1_0)))) then 
                    ap_return_preg <= lhs_V_3_reg_149;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_i_i3_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = exitcond_i_i7_fu_368_p2))) then 
                agg_result_V_i_i3_reg_177 <= agg_result_V_0_r_V_i_i1_fu_393_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (encrypt_read_read_fu_90_p2 = ap_const_lv1_0))) then 
                agg_result_V_i_i3_reg_177 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    agg_result_V_i_i_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond_i_i_fu_427_p2))) then 
                agg_result_V_i_i_reg_221 <= agg_result_V_0_r_V_i_i_fu_452_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((encrypt_read_read_fu_90_p2 = ap_const_lv1_0)))) then 
                agg_result_V_i_i_reg_221 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    encrypt_iterations_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not((ap_const_lv1_0 = exitcond_i_i7_fu_368_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond_i_i_fu_427_p2))))) then 
                encrypt_iterations_reg_163 <= encrypt_iterations_1_reg_505;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                encrypt_iterations_reg_163 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    i_assign_1_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = exitcond_i_i7_fu_368_p2))) then 
                i_assign_1_reg_210 <= i_4_fu_374_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (encrypt_read_read_fu_90_p2 = ap_const_lv1_0))) then 
                i_assign_1_reg_210 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_assign_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond_i_i_fu_427_p2))) then 
                i_assign_reg_254 <= i_fu_433_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((encrypt_read_read_fu_90_p2 = ap_const_lv1_0)))) then 
                i_assign_reg_254 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    lhs_V_3_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond_i_i_fu_427_p2)))) then 
                lhs_V_3_reg_149 <= agg_result_V_i_i_reg_221;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not((ap_const_lv1_0 = exitcond_i_i7_fu_368_p2)))) then 
                lhs_V_3_reg_149 <= agg_result_V_i_i3_reg_177;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                lhs_V_3_reg_149 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    lhs_V_4_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond_i_i_fu_427_p2))) then 
                lhs_V_4_reg_234 <= lhs_V_r_V_i_i_fu_460_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((encrypt_read_read_fu_90_p2 = ap_const_lv1_0)))) then 
                lhs_V_4_reg_234 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    lhs_V_5_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = exitcond_i_i7_fu_368_p2))) then 
                lhs_V_5_reg_190 <= lhs_V_r_V_i_i1_fu_401_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (encrypt_read_read_fu_90_p2 = ap_const_lv1_0))) then 
                lhs_V_5_reg_190 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not((ap_const_lv1_0 = exitcond_i_i7_fu_368_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond_i_i_fu_427_p2))))) then 
                p_Val2_s_reg_138 <= agg_result_V_i_reg_516;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_Val2_s_reg_138 <= counter_V;
            end if; 
        end if;
    end process;

    rhs_V_3_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond_i_i_fu_427_p2))) then 
                rhs_V_3_reg_245 <= r_V_11_fu_478_p1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((encrypt_read_read_fu_90_p2 = ap_const_lv1_0)))) then 
                rhs_V_3_reg_245 <= r_V_16_fu_358_p2;
            end if; 
        end if;
    end process;

    rhs_V_4_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = exitcond_i_i7_fu_368_p2))) then 
                rhs_V_4_reg_201 <= r_V_13_fu_419_p1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (encrypt_read_read_fu_90_p2 = ap_const_lv1_0))) then 
                rhs_V_4_reg_201 <= r_V_fu_352_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    agg_result_V_i_reg_516(5 downto 0) <= agg_result_V_i_fu_336_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                encrypt_iterations_1_reg_505 <= encrypt_iterations_1_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                encrypted_counter_out_V_reg_523 <= grp_secure_enclave_key_store_aes_fu_265_ap_return;
                    tmp_reg_528(12 downto 0) <= tmp_fu_341_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_311_p2 = ap_const_lv1_0))) then
                tmp_6_reg_511 <= tmp_6_fu_323_p1;
            end if;
        end if;
    end process;
    agg_result_V_i_reg_516(127 downto 6) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp_reg_528(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, encrypt_read_read_fu_90_p2, exitcond_fu_311_p2, exitcond_i_i7_fu_368_p2, exitcond_i_i_fu_427_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_311_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                if (not((encrypt_read_read_fu_90_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st24_fsm_23 => 
                if ((ap_const_lv1_0 = exitcond_i_i7_fu_368_p2)) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st25_fsm_24 => 
                if ((ap_const_lv1_0 = exitcond_i_i_fu_427_p2)) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    agg_result_V_0_r_V_i_i1_fu_393_p3 <= 
        z_V_1_fu_387_p2 when (tmp_8_fu_380_p3(0) = '1') else 
        agg_result_V_i_i3_reg_177;
    agg_result_V_0_r_V_i_i_fu_452_p3 <= 
        z_V_fu_446_p2 when (tmp_7_fu_439_p3(0) = '1') else 
        agg_result_V_i_i_reg_221;
    agg_result_V_i_fu_336_p1 <= std_logic_vector(resize(unsigned(r_V_14_fu_330_p2),128));

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_311_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_311_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_311_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_311_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_311_p2, lhs_V_3_reg_149, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_311_p2 = ap_const_lv1_0)))) then 
            ap_return <= lhs_V_3_reg_149;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_107 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_120 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_135 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_153_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_153 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_210_assign_proc : process(ap_NS_fsm)
    begin
                ap_sig_210 <= (ap_const_lv1_1 = ap_NS_fsm(2 downto 2));
    end process;


    ap_sig_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_42 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_83 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_98 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_42)
    begin
        if (ap_sig_42) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_107)
    begin
        if (ap_sig_107) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_120)
    begin
        if (ap_sig_120) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_135)
    begin
        if (ap_sig_135) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_153)
    begin
        if (ap_sig_153) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_83)
    begin
        if (ap_sig_83) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_98)
    begin
        if (ap_sig_98) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_nseq_ST_st3_fsm_2_assign_proc : process(ap_sig_210)
    begin
        if (ap_sig_210) then 
            ap_sig_nseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_nseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    data_in_V_address0 <= tmp_fu_341_p1(8 - 1 downto 0);

    data_in_V_ce0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            data_in_V_ce0 <= ap_const_logic_1;
        else 
            data_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_V_address0 <= tmp_reg_528(8 - 1 downto 0);

    data_out_V_ce0_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            data_out_V_ce0 <= ap_const_logic_1;
        else 
            data_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_V_d0 <= r_V_15_fu_346_p2;

    data_out_V_we0_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22))) then 
            data_out_V_we0 <= ap_const_logic_1;
        else 
            data_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    encrypt_iterations_1_fu_317_p2 <= std_logic_vector(unsigned(encrypt_iterations_reg_163) + unsigned(ap_const_lv13_1));
    encrypt_read_read_fu_90_p2 <= (0=>encrypt, others=>'-');
    exitcond_fu_311_p2 <= "1" when (encrypt_iterations_reg_163 = ap_const_lv13_1000) else "0";
    exitcond_i_i7_fu_368_p2 <= "1" when (i_assign_1_reg_210 = ap_const_lv8_80) else "0";
    exitcond_i_i_fu_427_p2 <= "1" when (i_assign_reg_254 = ap_const_lv8_80) else "0";
    grp_secure_enclave_key_store_aes_fu_265_ap_start <= ap_reg_grp_secure_enclave_key_store_aes_fu_265_ap_start;
    grp_secure_enclave_key_store_aes_fu_265_inptext_V_read <= std_logic_vector(resize(unsigned(r_V_14_fu_330_p2),128));
    i_4_fu_374_p2 <= std_logic_vector(unsigned(i_assign_1_reg_210) + unsigned(ap_const_lv8_1));
    i_assign_1_cast1_fu_364_p1 <= std_logic_vector(resize(unsigned(i_assign_1_reg_210),32));
    i_assign_cast2_fu_423_p1 <= std_logic_vector(resize(unsigned(i_assign_reg_254),32));
    i_fu_433_p2 <= std_logic_vector(unsigned(i_assign_reg_254) + unsigned(ap_const_lv8_1));
    lhs_V_r_V_i_i1_fu_401_p3 <= 
        z_V_1_fu_387_p2 when (tmp_8_fu_380_p3(0) = '1') else 
        lhs_V_5_reg_190;
    lhs_V_r_V_i_i_fu_460_p3 <= 
        z_V_fu_446_p2 when (tmp_7_fu_439_p3(0) = '1') else 
        lhs_V_4_reg_234;
    r_V_11_fu_478_p1 <= std_logic_vector(resize(unsigned(r_V_6_fu_468_p4),128));
    r_V_13_fu_419_p1 <= std_logic_vector(resize(unsigned(r_V_8_fu_409_p4),128));
    r_V_14_fu_330_p2 <= (tmp_i_cast_fu_327_p1 xor ap_const_lv6_21);
    r_V_15_fu_346_p2 <= (data_in_V_q0 xor encrypted_counter_out_V_reg_523);
    r_V_16_fu_358_p2 <= (r_V_15_fu_346_p2 xor lhs_V_3_reg_149);
    r_V_6_fu_468_p4 <= rhs_V_3_reg_245(127 downto 1);
    r_V_8_fu_409_p4 <= rhs_V_4_reg_201(127 downto 1);
    r_V_fu_352_p2 <= (data_in_V_q0 xor lhs_V_3_reg_149);
    tmp_6_fu_323_p1 <= p_Val2_s_reg_138(1 - 1 downto 0);
    tmp_7_fu_439_p3 <= hash_key_V(to_integer(unsigned(i_assign_cast2_fu_423_p1)) downto to_integer(unsigned(i_assign_cast2_fu_423_p1))) when (to_integer(unsigned(i_assign_cast2_fu_423_p1))>= 0 and to_integer(unsigned(i_assign_cast2_fu_423_p1))<=127) else "-";
    tmp_8_fu_380_p3 <= hash_key_V(to_integer(unsigned(i_assign_1_cast1_fu_364_p1)) downto to_integer(unsigned(i_assign_1_cast1_fu_364_p1))) when (to_integer(unsigned(i_assign_1_cast1_fu_364_p1))>= 0 and to_integer(unsigned(i_assign_1_cast1_fu_364_p1))<=127) else "-";
    tmp_fu_341_p1 <= std_logic_vector(resize(unsigned(encrypt_iterations_reg_163),64));
    tmp_i_cast_fu_327_p1 <= std_logic_vector(resize(unsigned(tmp_6_reg_511),6));
    z_V_1_fu_387_p2 <= (lhs_V_5_reg_190 xor rhs_V_4_reg_201);
    z_V_fu_446_p2 <= (lhs_V_4_reg_234 xor rhs_V_3_reg_245);
end behav;
