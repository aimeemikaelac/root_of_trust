// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="crypto_sign,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=245,HLS_SYN_DSP=68,HLS_SYN_FF=18000,HLS_SYN_LUT=77498}" *)

module crypto_sign (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 74'd1;
parameter    ap_ST_fsm_state2 = 74'd2;
parameter    ap_ST_fsm_state3 = 74'd4;
parameter    ap_ST_fsm_state4 = 74'd8;
parameter    ap_ST_fsm_state5 = 74'd16;
parameter    ap_ST_fsm_state6 = 74'd32;
parameter    ap_ST_fsm_state7 = 74'd64;
parameter    ap_ST_fsm_state8 = 74'd128;
parameter    ap_ST_fsm_state9 = 74'd256;
parameter    ap_ST_fsm_state10 = 74'd512;
parameter    ap_ST_fsm_state11 = 74'd1024;
parameter    ap_ST_fsm_state12 = 74'd2048;
parameter    ap_ST_fsm_state13 = 74'd4096;
parameter    ap_ST_fsm_state14 = 74'd8192;
parameter    ap_ST_fsm_state15 = 74'd16384;
parameter    ap_ST_fsm_state16 = 74'd32768;
parameter    ap_ST_fsm_state17 = 74'd65536;
parameter    ap_ST_fsm_state18 = 74'd131072;
parameter    ap_ST_fsm_state19 = 74'd262144;
parameter    ap_ST_fsm_state20 = 74'd524288;
parameter    ap_ST_fsm_state21 = 74'd1048576;
parameter    ap_ST_fsm_state22 = 74'd2097152;
parameter    ap_ST_fsm_state23 = 74'd4194304;
parameter    ap_ST_fsm_state24 = 74'd8388608;
parameter    ap_ST_fsm_state25 = 74'd16777216;
parameter    ap_ST_fsm_state26 = 74'd33554432;
parameter    ap_ST_fsm_state27 = 74'd67108864;
parameter    ap_ST_fsm_state28 = 74'd134217728;
parameter    ap_ST_fsm_state29 = 74'd268435456;
parameter    ap_ST_fsm_state30 = 74'd536870912;
parameter    ap_ST_fsm_state31 = 74'd1073741824;
parameter    ap_ST_fsm_state32 = 74'd2147483648;
parameter    ap_ST_fsm_state33 = 74'd4294967296;
parameter    ap_ST_fsm_state34 = 74'd8589934592;
parameter    ap_ST_fsm_state35 = 74'd17179869184;
parameter    ap_ST_fsm_state36 = 74'd34359738368;
parameter    ap_ST_fsm_state37 = 74'd68719476736;
parameter    ap_ST_fsm_state38 = 74'd137438953472;
parameter    ap_ST_fsm_state39 = 74'd274877906944;
parameter    ap_ST_fsm_state40 = 74'd549755813888;
parameter    ap_ST_fsm_state41 = 74'd1099511627776;
parameter    ap_ST_fsm_state42 = 74'd2199023255552;
parameter    ap_ST_fsm_state43 = 74'd4398046511104;
parameter    ap_ST_fsm_state44 = 74'd8796093022208;
parameter    ap_ST_fsm_state45 = 74'd17592186044416;
parameter    ap_ST_fsm_state46 = 74'd35184372088832;
parameter    ap_ST_fsm_state47 = 74'd70368744177664;
parameter    ap_ST_fsm_state48 = 74'd140737488355328;
parameter    ap_ST_fsm_state49 = 74'd281474976710656;
parameter    ap_ST_fsm_state50 = 74'd562949953421312;
parameter    ap_ST_fsm_state51 = 74'd1125899906842624;
parameter    ap_ST_fsm_state52 = 74'd2251799813685248;
parameter    ap_ST_fsm_state53 = 74'd4503599627370496;
parameter    ap_ST_fsm_state54 = 74'd9007199254740992;
parameter    ap_ST_fsm_state55 = 74'd18014398509481984;
parameter    ap_ST_fsm_state56 = 74'd36028797018963968;
parameter    ap_ST_fsm_state57 = 74'd72057594037927936;
parameter    ap_ST_fsm_state58 = 74'd144115188075855872;
parameter    ap_ST_fsm_state59 = 74'd288230376151711744;
parameter    ap_ST_fsm_state60 = 74'd576460752303423488;
parameter    ap_ST_fsm_state61 = 74'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 74'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 74'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 74'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 74'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 74'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 74'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 74'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 74'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 74'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 74'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 74'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 74'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 74'd9444732965739290427392;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [73:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] num_blocks;
reg   [5:0] sk_address0;
reg    sk_ce0;
wire   [7:0] sk_q0;
wire   [5:0] signature_out_address0;
reg    signature_out_ce0;
reg    signature_out_we0;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state17;
wire   [0:0] exitcond3_fu_1021_p2;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state24;
wire   [0:0] exitcond2_fu_1049_p2;
wire    ap_CS_fsm_state49;
wire   [0:0] exitcond1_fu_1102_p2;
wire    ap_CS_fsm_state56;
wire   [0:0] exitcond_fu_1130_p2;
wire    mem_AWREADY;
wire    mem_WREADY;
reg    mem_ARVALID;
wire    mem_ARREADY;
reg   [31:0] mem_ARADDR;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [7:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
reg   [63:0] reg_880;
wire    ap_CS_fsm_state16;
wire    grp_sha512_update_32_1_fu_781_ap_done;
wire    ap_CS_fsm_state46;
reg   [63:0] reg_886;
reg   [7:0] reg_892;
reg    ap_block_state24;
reg    ap_block_state56;
wire    ap_CS_fsm_state26;
wire    grp_sha512_update_128_fu_731_ap_done;
wire    ap_CS_fsm_state58;
reg   [31:0] num_blocks_read_reg_1258;
wire   [5:0] indvarinc_fu_909_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] i_73_fu_932_p2;
reg   [5:0] i_73_reg_1275;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_i_i_fu_926_p2;
reg   [63:0] hash_length_reg_1285;
wire    ap_CS_fsm_state7;
wire    grp_sha512_update_32_fu_671_ap_done;
reg   [63:0] hash_curlen_reg_1290;
wire   [5:0] az_addr_reg_1295;
wire    ap_CS_fsm_state10;
wire   [5:0] az_addr_1_reg_1300;
wire   [5:0] i_74_fu_1004_p2;
reg   [5:0] i_74_reg_1308;
wire    ap_CS_fsm_state12;
wire   [63:0] sum3_i_i_cast_fu_1016_p1;
reg   [63:0] sum3_i_i_cast_reg_1313;
wire   [0:0] exitcond_i_i1_fu_998_p2;
wire   [31:0] i_75_fu_1026_p2;
reg   [31:0] i_75_reg_1326;
reg    ap_sig_ioackin_mem_ARREADY;
reg    ap_block_state17_io;
wire   [7:0] j_3_fu_1055_p2;
reg   [7:0] j_3_reg_1340;
wire   [6:0] i_2_fu_1072_p2;
reg   [6:0] i_2_reg_1348;
wire    ap_CS_fsm_state28;
wire   [63:0] tmp_i_fu_1078_p1;
reg   [63:0] tmp_i_reg_1353;
wire   [0:0] exitcond_i_fu_1066_p2;
wire   [0:0] grp_crypto_sign_ed25519_20_fu_844_ap_return;
reg   [0:0] tmp_i1_reg_1363;
wire    ap_CS_fsm_state38;
wire    grp_crypto_sign_ed25519_18_fu_849_ap_done;
wire    grp_crypto_sign_ed25519_20_fu_844_ap_done;
reg    ap_block_state38_on_subcall_done;
wire   [5:0] signature_addr_2_reg_1368;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state48;
wire   [31:0] i_76_fu_1107_p2;
reg   [31:0] i_76_reg_1386;
reg    ap_block_state49_io;
wire   [7:0] j_4_fu_1136_p2;
reg   [7:0] j_4_reg_1400;
wire   [6:0] i_3_fu_1153_p2;
reg   [6:0] i_3_reg_1408;
wire    ap_CS_fsm_state60;
wire   [63:0] tmp_i2_fu_1159_p1;
reg   [63:0] tmp_i2_reg_1413;
wire   [0:0] exitcond_i1_fu_1147_p2;
wire   [5:0] i_77_fu_1175_p2;
reg   [5:0] i_77_reg_1426;
wire    ap_CS_fsm_state63;
wire   [63:0] tmp_i3_fu_1181_p1;
reg   [63:0] tmp_i3_reg_1431;
wire   [0:0] exitcond1_i_fu_1169_p2;
wire   [6:0] i_78_fu_1202_p2;
wire    ap_CS_fsm_state65;
wire   [0:0] exitcond_i2_fu_1191_p2;
wire   [5:0] i_79_fu_1214_p2;
reg   [5:0] i_79_reg_1452;
wire    ap_CS_fsm_state71;
wire   [0:0] exitcond_i3_fu_1208_p2;
wire   [6:0] i_80_fu_1247_p2;
reg   [6:0] i_80_reg_1465;
wire    ap_CS_fsm_state73;
wire   [63:0] tmp_i5_fu_1253_p1;
reg   [63:0] tmp_i5_reg_1470;
wire   [0:0] exitcond_i4_fu_1241_p2;
reg   [5:0] t_11_address0;
reg    t_11_ce0;
reg    t_11_we0;
reg   [31:0] t_11_d0;
wire   [31:0] t_11_q0;
reg   [5:0] t_10_address0;
reg    t_10_ce0;
reg    t_10_we0;
wire   [31:0] t_10_d0;
wire   [31:0] t_10_q0;
reg   [4:0] tx_v_address0;
reg    tx_v_ce0;
reg    tx_v_we0;
wire   [31:0] tx_v_q0;
reg   [4:0] tx_v_address1;
reg    tx_v_ce1;
reg    tx_v_we1;
wire   [31:0] tx_v_q1;
reg   [4:0] ty_v_address0;
reg    ty_v_ce0;
reg    ty_v_we0;
wire   [31:0] ty_v_q0;
reg   [4:0] ty_v_address1;
reg    ty_v_ce1;
reg    ty_v_we1;
wire   [31:0] ty_v_q1;
reg   [4:0] zi_v_address0;
reg    zi_v_ce0;
reg    zi_v_we0;
wire   [31:0] zi_v_q0;
reg    zi_v_ce1;
reg    zi_v_we1;
wire   [31:0] zi_v_q1;
reg   [5:0] t_address0;
reg    t_ce0;
reg    t_we0;
wire   [31:0] t_d0;
wire   [31:0] t_q0;
reg   [4:0] pk_address0;
reg    pk_ce0;
reg    pk_we0;
wire   [7:0] pk_q0;
reg   [5:0] az_address0;
reg    az_ce0;
reg    az_we0;
reg   [7:0] az_d0;
wire   [7:0] az_q0;
reg   [5:0] az_address1;
reg    az_ce1;
reg    az_we1;
reg   [7:0] az_d1;
wire   [7:0] az_q1;
reg   [5:0] nonce_address0;
reg    nonce_ce0;
reg    nonce_we0;
wire   [7:0] nonce_q0;
reg    nonce_ce1;
reg    nonce_we1;
reg   [5:0] hram_address0;
reg    hram_ce0;
reg    hram_we0;
wire   [7:0] hram_q0;
reg    hram_ce1;
reg    hram_we1;
reg   [5:0] signature_address0;
reg    signature_ce0;
reg    signature_we0;
reg   [7:0] signature_d0;
wire   [7:0] signature_q0;
reg   [6:0] temp_buf_address0;
reg    temp_buf_ce0;
reg    temp_buf_we0;
wire   [7:0] temp_buf_q0;
reg   [4:0] sck_v_address0;
reg    sck_v_ce0;
reg    sck_v_we0;
wire   [31:0] sck_v_q0;
reg    sck_v_ce1;
wire   [31:0] sck_v_q1;
reg   [4:0] scs_v_address0;
reg    scs_v_ce0;
reg    scs_v_we0;
reg   [31:0] scs_v_d0;
wire   [31:0] scs_v_q0;
reg    scs_v_ce1;
reg    scs_v_we1;
wire   [31:0] scs_v_q1;
reg   [4:0] scsk_v_address0;
reg    scsk_v_ce0;
reg    scsk_v_we0;
wire   [31:0] scsk_v_q0;
reg   [4:0] ger_x_v_address0;
reg    ger_x_v_ce0;
reg    ger_x_v_we0;
wire   [31:0] ger_x_v_q0;
reg    ger_x_v_ce1;
reg    ger_x_v_we1;
wire   [31:0] ger_x_v_q1;
reg   [4:0] ger_y_v_address0;
reg    ger_y_v_ce0;
reg    ger_y_v_we0;
wire   [31:0] ger_y_v_q0;
reg    ger_y_v_ce1;
reg    ger_y_v_we1;
wire   [31:0] ger_y_v_q1;
reg   [4:0] ger_z_v_address0;
reg    ger_z_v_ce0;
reg    ger_z_v_we0;
wire   [31:0] ger_z_v_q0;
reg    ger_z_v_ce1;
reg    ger_z_v_we1;
wire   [31:0] ger_z_v_q1;
wire   [31:0] ger_t_v_q0;
wire   [31:0] ger_t_v_q1;
reg   [2:0] hash_state_address0;
reg    hash_state_ce0;
reg    hash_state_we0;
reg   [63:0] hash_state_d0;
wire   [63:0] hash_state_q0;
reg    hash_state_ce1;
reg    hash_state_we1;
reg   [6:0] hash_buf_address0;
reg    hash_buf_ce0;
reg    hash_buf_we0;
reg   [7:0] hash_buf_d0;
wire   [7:0] hash_buf_q0;
reg    hash_buf_ce1;
reg    hash_buf_we1;
wire   [7:0] hash_buf_q1;
wire    grp_sha512_init_fu_653_ap_start;
wire    grp_sha512_init_fu_653_ap_done;
wire    grp_sha512_init_fu_653_ap_idle;
wire    grp_sha512_init_fu_653_ap_ready;
wire   [2:0] grp_sha512_init_fu_653_md_state_address0;
wire    grp_sha512_init_fu_653_md_state_ce0;
wire    grp_sha512_init_fu_653_md_state_we0;
wire   [63:0] grp_sha512_init_fu_653_md_state_d0;
wire   [2:0] grp_sha512_init_fu_653_md_state_address1;
wire    grp_sha512_init_fu_653_md_state_ce1;
wire    grp_sha512_init_fu_653_md_state_we1;
wire   [63:0] grp_sha512_init_fu_653_md_state_d1;
wire    grp_sha512_update_32_fu_671_ap_start;
wire    grp_sha512_update_32_fu_671_ap_idle;
wire    grp_sha512_update_32_fu_671_ap_ready;
wire   [2:0] grp_sha512_update_32_fu_671_md_state_address0;
wire    grp_sha512_update_32_fu_671_md_state_ce0;
wire    grp_sha512_update_32_fu_671_md_state_we0;
wire   [63:0] grp_sha512_update_32_fu_671_md_state_d0;
wire   [6:0] grp_sha512_update_32_fu_671_md_buf_address0;
wire    grp_sha512_update_32_fu_671_md_buf_ce0;
wire    grp_sha512_update_32_fu_671_md_buf_we0;
wire   [7:0] grp_sha512_update_32_fu_671_md_buf_d0;
wire   [5:0] grp_sha512_update_32_fu_671_in_r_address0;
wire    grp_sha512_update_32_fu_671_in_r_ce0;
wire   [63:0] grp_sha512_update_32_fu_671_ap_return_0;
wire   [63:0] grp_sha512_update_32_fu_671_ap_return_1;
wire    grp_sha512_final_fu_693_ap_start;
wire    grp_sha512_final_fu_693_ap_done;
wire    grp_sha512_final_fu_693_ap_idle;
wire    grp_sha512_final_fu_693_ap_ready;
reg   [63:0] grp_sha512_final_fu_693_md_length_read;
wire   [2:0] grp_sha512_final_fu_693_md_state_address0;
wire    grp_sha512_final_fu_693_md_state_ce0;
wire    grp_sha512_final_fu_693_md_state_we0;
wire   [63:0] grp_sha512_final_fu_693_md_state_d0;
reg   [63:0] grp_sha512_final_fu_693_md_curlen_read;
wire   [6:0] grp_sha512_final_fu_693_md_buf_address0;
wire    grp_sha512_final_fu_693_md_buf_ce0;
wire    grp_sha512_final_fu_693_md_buf_we0;
wire   [7:0] grp_sha512_final_fu_693_md_buf_d0;
wire   [6:0] grp_sha512_final_fu_693_md_buf_address1;
wire    grp_sha512_final_fu_693_md_buf_ce1;
wire    grp_sha512_final_fu_693_md_buf_we1;
wire   [7:0] grp_sha512_final_fu_693_md_buf_d1;
wire   [5:0] grp_sha512_final_fu_693_out_r_address0;
wire    grp_sha512_final_fu_693_out_r_ce0;
wire    grp_sha512_final_fu_693_out_r_we0;
wire   [7:0] grp_sha512_final_fu_693_out_r_d0;
wire   [5:0] grp_sha512_final_fu_693_out_r_address1;
wire    grp_sha512_final_fu_693_out_r_ce1;
wire    grp_sha512_final_fu_693_out_r_we1;
wire   [7:0] grp_sha512_final_fu_693_out_r_d1;
wire    grp_sha512_update_128_fu_731_ap_start;
wire    grp_sha512_update_128_fu_731_ap_idle;
wire    grp_sha512_update_128_fu_731_ap_ready;
reg   [63:0] grp_sha512_update_128_fu_731_md_length_read;
wire   [2:0] grp_sha512_update_128_fu_731_md_state_address0;
wire    grp_sha512_update_128_fu_731_md_state_ce0;
wire    grp_sha512_update_128_fu_731_md_state_we0;
wire   [63:0] grp_sha512_update_128_fu_731_md_state_d0;
reg   [63:0] grp_sha512_update_128_fu_731_md_curlen_read;
wire   [6:0] grp_sha512_update_128_fu_731_md_buf_address0;
wire    grp_sha512_update_128_fu_731_md_buf_ce0;
wire    grp_sha512_update_128_fu_731_md_buf_we0;
wire   [7:0] grp_sha512_update_128_fu_731_md_buf_d0;
wire   [6:0] grp_sha512_update_128_fu_731_in_r_address0;
wire    grp_sha512_update_128_fu_731_in_r_ce0;
wire   [63:0] grp_sha512_update_128_fu_731_ap_return_0;
wire   [63:0] grp_sha512_update_128_fu_731_ap_return_1;
wire    grp_p_memmove_fu_766_ap_start;
wire    grp_p_memmove_fu_766_ap_done;
wire    grp_p_memmove_fu_766_ap_idle;
wire    grp_p_memmove_fu_766_ap_ready;
wire   [5:0] grp_p_memmove_fu_766_dst_address0;
wire    grp_p_memmove_fu_766_dst_ce0;
wire    grp_p_memmove_fu_766_dst_we0;
wire   [7:0] grp_p_memmove_fu_766_dst_d0;
wire   [4:0] grp_p_memmove_fu_766_src_address0;
wire    grp_p_memmove_fu_766_src_ce0;
wire    grp_sha512_update_32_1_fu_781_ap_start;
wire    grp_sha512_update_32_1_fu_781_ap_idle;
wire    grp_sha512_update_32_1_fu_781_ap_ready;
reg   [63:0] grp_sha512_update_32_1_fu_781_md_length_read;
wire   [2:0] grp_sha512_update_32_1_fu_781_md_state_address0;
wire    grp_sha512_update_32_1_fu_781_md_state_ce0;
wire    grp_sha512_update_32_1_fu_781_md_state_we0;
wire   [63:0] grp_sha512_update_32_1_fu_781_md_state_d0;
reg   [63:0] grp_sha512_update_32_1_fu_781_md_curlen_read;
wire   [6:0] grp_sha512_update_32_1_fu_781_md_buf_address0;
wire    grp_sha512_update_32_1_fu_781_md_buf_ce0;
wire    grp_sha512_update_32_1_fu_781_md_buf_we0;
wire   [7:0] grp_sha512_update_32_1_fu_781_md_buf_d0;
wire   [5:0] grp_sha512_update_32_1_fu_781_in_r_address0;
wire    grp_sha512_update_32_1_fu_781_in_r_ce0;
reg   [6:0] grp_sha512_update_32_1_fu_781_in_offset;
wire   [63:0] grp_sha512_update_32_1_fu_781_ap_return_0;
wire   [63:0] grp_sha512_update_32_1_fu_781_ap_return_1;
wire    grp_crypto_sign_ed25519_13_fu_797_ap_start;
wire    grp_crypto_sign_ed25519_13_fu_797_ap_done;
wire    grp_crypto_sign_ed25519_13_fu_797_ap_idle;
wire    grp_crypto_sign_ed25519_13_fu_797_ap_ready;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_r_x_v_address0;
wire    grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce0;
wire    grp_crypto_sign_ed25519_13_fu_797_r_x_v_we0;
wire   [31:0] grp_crypto_sign_ed25519_13_fu_797_r_x_v_d0;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_r_x_v_address1;
wire    grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce1;
wire    grp_crypto_sign_ed25519_13_fu_797_r_x_v_we1;
wire   [31:0] grp_crypto_sign_ed25519_13_fu_797_r_x_v_d1;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_r_y_v_address0;
wire    grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce0;
wire    grp_crypto_sign_ed25519_13_fu_797_r_y_v_we0;
wire   [31:0] grp_crypto_sign_ed25519_13_fu_797_r_y_v_d0;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_r_y_v_address1;
wire    grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce1;
wire    grp_crypto_sign_ed25519_13_fu_797_r_y_v_we1;
wire   [31:0] grp_crypto_sign_ed25519_13_fu_797_r_y_v_d1;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_r_z_v_address0;
wire    grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce0;
wire    grp_crypto_sign_ed25519_13_fu_797_r_z_v_we0;
wire   [31:0] grp_crypto_sign_ed25519_13_fu_797_r_z_v_d0;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_r_z_v_address1;
wire    grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce1;
wire    grp_crypto_sign_ed25519_13_fu_797_r_z_v_we1;
wire   [31:0] grp_crypto_sign_ed25519_13_fu_797_r_z_v_d1;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_r_t_v_address0;
wire    grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce0;
wire    grp_crypto_sign_ed25519_13_fu_797_r_t_v_we0;
wire   [31:0] grp_crypto_sign_ed25519_13_fu_797_r_t_v_d0;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_r_t_v_address1;
wire    grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce1;
wire    grp_crypto_sign_ed25519_13_fu_797_r_t_v_we1;
wire   [31:0] grp_crypto_sign_ed25519_13_fu_797_r_t_v_d1;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_s_v_address0;
wire    grp_crypto_sign_ed25519_13_fu_797_s_v_ce0;
wire   [4:0] grp_crypto_sign_ed25519_13_fu_797_s_v_address1;
wire    grp_crypto_sign_ed25519_13_fu_797_s_v_ce1;
wire    grp_crypto_sign_ed25519_15_fu_812_ap_start;
wire    grp_crypto_sign_ed25519_15_fu_812_ap_done;
wire    grp_crypto_sign_ed25519_15_fu_812_ap_idle;
wire    grp_crypto_sign_ed25519_15_fu_812_ap_ready;
wire   [4:0] grp_crypto_sign_ed25519_15_fu_812_r_v_address0;
wire    grp_crypto_sign_ed25519_15_fu_812_r_v_ce0;
wire    grp_crypto_sign_ed25519_15_fu_812_r_v_we0;
wire   [31:0] grp_crypto_sign_ed25519_15_fu_812_r_v_d0;
wire   [4:0] grp_crypto_sign_ed25519_15_fu_812_y_v_address0;
wire    grp_crypto_sign_ed25519_15_fu_812_y_v_ce0;
wire    grp_barrett_reduce_fu_822_ap_start;
wire    grp_barrett_reduce_fu_822_ap_done;
wire    grp_barrett_reduce_fu_822_ap_idle;
wire    grp_barrett_reduce_fu_822_ap_ready;
wire   [4:0] grp_barrett_reduce_fu_822_r_v_address0;
wire    grp_barrett_reduce_fu_822_r_v_ce0;
wire    grp_barrett_reduce_fu_822_r_v_we0;
wire   [31:0] grp_barrett_reduce_fu_822_r_v_d0;
reg   [31:0] grp_barrett_reduce_fu_822_r_v_q0;
wire   [5:0] grp_barrett_reduce_fu_822_x_address0;
wire    grp_barrett_reduce_fu_822_x_ce0;
reg   [31:0] grp_barrett_reduce_fu_822_x_q0;
wire    grp_crypto_sign_ed25519_19_fu_832_ap_start;
wire    grp_crypto_sign_ed25519_19_fu_832_ap_done;
wire    grp_crypto_sign_ed25519_19_fu_832_ap_idle;
wire    grp_crypto_sign_ed25519_19_fu_832_ap_ready;
wire   [4:0] grp_crypto_sign_ed25519_19_fu_832_r_v_address0;
wire    grp_crypto_sign_ed25519_19_fu_832_r_v_ce0;
wire    grp_crypto_sign_ed25519_19_fu_832_r_v_we0;
wire   [31:0] grp_crypto_sign_ed25519_19_fu_832_r_v_d0;
wire   [4:0] grp_crypto_sign_ed25519_19_fu_832_r_v_address1;
wire    grp_crypto_sign_ed25519_19_fu_832_r_v_ce1;
wire    grp_crypto_sign_ed25519_19_fu_832_r_v_we1;
wire   [31:0] grp_crypto_sign_ed25519_19_fu_832_r_v_d1;
wire   [4:0] grp_crypto_sign_ed25519_19_fu_832_x_v_address0;
wire    grp_crypto_sign_ed25519_19_fu_832_x_v_ce0;
wire    grp_crypto_sign_ed25519_9_fu_838_ap_start;
wire    grp_crypto_sign_ed25519_9_fu_838_ap_done;
wire    grp_crypto_sign_ed25519_9_fu_838_ap_idle;
wire    grp_crypto_sign_ed25519_9_fu_838_ap_ready;
wire   [5:0] grp_crypto_sign_ed25519_9_fu_838_r_address0;
wire    grp_crypto_sign_ed25519_9_fu_838_r_ce0;
wire    grp_crypto_sign_ed25519_9_fu_838_r_we0;
wire   [7:0] grp_crypto_sign_ed25519_9_fu_838_r_d0;
wire   [4:0] grp_crypto_sign_ed25519_9_fu_838_x_v_address0;
wire    grp_crypto_sign_ed25519_9_fu_838_x_v_ce0;
wire   [4:0] grp_crypto_sign_ed25519_9_fu_838_x_v_address1;
wire    grp_crypto_sign_ed25519_9_fu_838_x_v_ce1;
wire    grp_crypto_sign_ed25519_20_fu_844_ap_start;
wire    grp_crypto_sign_ed25519_20_fu_844_ap_idle;
wire    grp_crypto_sign_ed25519_20_fu_844_ap_ready;
wire   [4:0] grp_crypto_sign_ed25519_20_fu_844_x_v_address0;
wire    grp_crypto_sign_ed25519_20_fu_844_x_v_ce0;
wire   [4:0] grp_crypto_sign_ed25519_20_fu_844_x_v_address1;
wire    grp_crypto_sign_ed25519_20_fu_844_x_v_ce1;
wire    grp_crypto_sign_ed25519_18_fu_849_ap_start;
wire    grp_crypto_sign_ed25519_18_fu_849_ap_idle;
wire    grp_crypto_sign_ed25519_18_fu_849_ap_ready;
wire   [4:0] grp_crypto_sign_ed25519_18_fu_849_r_v_address0;
wire    grp_crypto_sign_ed25519_18_fu_849_r_v_ce0;
wire    grp_crypto_sign_ed25519_18_fu_849_r_v_we0;
wire   [31:0] grp_crypto_sign_ed25519_18_fu_849_r_v_d0;
reg   [31:0] grp_crypto_sign_ed25519_18_fu_849_r_v_q0;
wire   [4:0] grp_crypto_sign_ed25519_18_fu_849_r_v_address1;
wire    grp_crypto_sign_ed25519_18_fu_849_r_v_ce1;
wire    grp_crypto_sign_ed25519_18_fu_849_r_v_we1;
wire   [31:0] grp_crypto_sign_ed25519_18_fu_849_r_v_d1;
reg   [31:0] grp_crypto_sign_ed25519_18_fu_849_r_v_q1;
wire   [4:0] grp_crypto_sign_ed25519_18_fu_849_x_v_address0;
wire    grp_crypto_sign_ed25519_18_fu_849_x_v_ce0;
reg   [31:0] grp_crypto_sign_ed25519_18_fu_849_x_v_q0;
wire   [4:0] grp_crypto_sign_ed25519_18_fu_849_y_v_address0;
wire    grp_crypto_sign_ed25519_18_fu_849_y_v_ce0;
wire    grp_crypto_sign_ed25519_16_fu_856_ap_start;
wire    grp_crypto_sign_ed25519_16_fu_856_ap_done;
wire    grp_crypto_sign_ed25519_16_fu_856_ap_idle;
wire    grp_crypto_sign_ed25519_16_fu_856_ap_ready;
wire   [4:0] grp_crypto_sign_ed25519_16_fu_856_r_v_address0;
wire    grp_crypto_sign_ed25519_16_fu_856_r_v_ce0;
wire    grp_crypto_sign_ed25519_16_fu_856_r_v_we0;
wire   [31:0] grp_crypto_sign_ed25519_16_fu_856_r_v_d0;
wire   [4:0] grp_crypto_sign_ed25519_16_fu_856_r_v_address1;
wire    grp_crypto_sign_ed25519_16_fu_856_r_v_ce1;
wire    grp_crypto_sign_ed25519_16_fu_856_r_v_we1;
wire   [31:0] grp_crypto_sign_ed25519_16_fu_856_r_v_d1;
wire   [4:0] grp_crypto_sign_ed25519_16_fu_856_y_v_address0;
wire    grp_crypto_sign_ed25519_16_fu_856_y_v_ce0;
reg   [5:0] invdar_reg_466;
wire   [0:0] tmp_s_fu_920_p2;
reg   [5:0] i_i_i_reg_477;
wire    ap_CS_fsm_state4;
reg   [5:0] i_i_i1_reg_489;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
reg   [63:0] hash_curlen3_reg_500;
reg   [63:0] hash_length3_reg_510;
reg   [31:0] i_reg_520;
reg   [7:0] j_reg_531;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state23;
reg   [6:0] i_i_reg_543;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
reg   [63:0] hash_curlen_1_reg_554;
reg   [63:0] hash_length_1_reg_564;
reg   [31:0] i_1_reg_574;
reg   [7:0] j_1_reg_585;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state55;
reg   [6:0] i_i1_reg_597;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state61;
reg   [5:0] i_i2_reg_608;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state64;
reg   [6:0] i_1_i_reg_619;
reg   [5:0] i_i3_reg_630;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state72;
reg   [6:0] i_i4_reg_642;
wire    ap_CS_fsm_state74;
reg    ap_reg_grp_sha512_init_fu_653_ap_start;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state30;
reg    ap_reg_grp_sha512_update_32_fu_671_ap_start;
wire    ap_CS_fsm_state6;
reg    ap_reg_grp_sha512_final_fu_693_ap_start;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg    ap_reg_grp_sha512_update_128_fu_731_ap_start;
reg    ap_block_state24_ignore_call0;
reg    ap_block_state56_ignore_call0;
reg    ap_reg_grp_p_memmove_fu_766_ap_start;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
reg    ap_reg_grp_sha512_update_32_1_fu_781_ap_start;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state47;
reg    ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
reg    ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
reg    ap_reg_grp_barrett_reduce_fu_822_ap_start;
wire    ap_CS_fsm_state66;
reg    ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
reg    ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
reg    ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start;
wire    ap_CS_fsm_state37;
reg    ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
reg    ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start;
wire    ap_CS_fsm_state69;
wire   [63:0] tmp_fu_915_p1;
wire   [63:0] sum_i_i_cast_fu_944_p1;
wire   [63:0] tmp_i_i_fu_949_p1;
wire   [63:0] tmp_802_fu_1061_p1;
wire   [63:0] tmp_803_fu_1142_p1;
wire   [63:0] tmp_858_i_fu_1197_p1;
wire   [63:0] tmp_i4_fu_1220_p1;
wire   [63:0] sum_i_cast_fu_1236_p1;
wire  signed [63:0] tmp_80_fu_1038_p1;
wire  signed [63:0] tmp_808_fu_1119_p1;
reg    ap_reg_ioackin_mem_ARREADY;
wire    ap_CS_fsm_state42;
wire   [7:0] tmp_863_i_fu_1095_p2;
wire   [7:0] tmp_809_fu_1225_p1;
wire   [7:0] tmp_800_fu_972_p3;
wire   [7:0] tmp_894_cast_fu_993_p1;
wire   [31:0] tmp_i3_96_fu_1186_p1;
wire   [5:0] sum_i_i_fu_938_p2;
wire   [4:0] tmp_784_fu_962_p4;
wire   [5:0] tmp_804_fu_981_p1;
wire   [6:0] tmp_801_fu_985_p3;
wire   [5:0] sum3_i_i_fu_1010_p2;
wire   [31:0] tmp_806_fu_1032_p2;
wire   [7:0] tmp_i1_91_fu_1088_p3;
wire   [31:0] tmp_807_fu_1113_p2;
wire   [5:0] sum_i_fu_1230_p2;
reg   [73:0] ap_NS_fsm;
reg    ap_block_state30_on_subcall_done;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 74'd1;
#0 ap_reg_grp_sha512_init_fu_653_ap_start = 1'b0;
#0 ap_reg_grp_sha512_update_32_fu_671_ap_start = 1'b0;
#0 ap_reg_grp_sha512_final_fu_693_ap_start = 1'b0;
#0 ap_reg_grp_sha512_update_128_fu_731_ap_start = 1'b0;
#0 ap_reg_grp_p_memmove_fu_766_ap_start = 1'b0;
#0 ap_reg_grp_sha512_update_32_1_fu_781_ap_start = 1'b0;
#0 ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start = 1'b0;
#0 ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start = 1'b0;
#0 ap_reg_grp_barrett_reduce_fu_822_ap_start = 1'b0;
#0 ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start = 1'b0;
#0 ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start = 1'b0;
#0 ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start = 1'b0;
#0 ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start = 1'b0;
#0 ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start = 1'b0;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
end

crypto_sign_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
crypto_sign_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(32'd0),
    .num_blocks(num_blocks),
    .sk_address0(sk_address0),
    .sk_ce0(sk_ce0),
    .sk_q0(sk_q0),
    .signature_out_address0(signature_out_address0),
    .signature_out_ce0(signature_out_ce0),
    .signature_out_we0(signature_out_we0),
    .signature_out_d0(signature_q0)
);

crypto_sign_mem_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
crypto_sign_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd128),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(mem_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(mem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

crypto_sign_t_11 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
t_11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(t_11_address0),
    .ce0(t_11_ce0),
    .we0(t_11_we0),
    .d0(t_11_d0),
    .q0(t_11_q0)
);

crypto_sign_t_11 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
t_10_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(t_10_address0),
    .ce0(t_10_ce0),
    .we0(t_10_we0),
    .d0(t_10_d0),
    .q0(t_10_q0)
);

choose_t_v_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
tx_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tx_v_address0),
    .ce0(tx_v_ce0),
    .we0(tx_v_we0),
    .d0(grp_crypto_sign_ed25519_18_fu_849_r_v_d0),
    .q0(tx_v_q0),
    .address1(tx_v_address1),
    .ce1(tx_v_ce1),
    .we1(tx_v_we1),
    .d1(grp_crypto_sign_ed25519_18_fu_849_r_v_d1),
    .q1(tx_v_q1)
);

choose_t_v_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ty_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ty_v_address0),
    .ce0(ty_v_ce0),
    .we0(ty_v_we0),
    .d0(grp_crypto_sign_ed25519_18_fu_849_r_v_d0),
    .q0(ty_v_q0),
    .address1(ty_v_address1),
    .ce1(ty_v_ce1),
    .we1(ty_v_we1),
    .d1(grp_crypto_sign_ed25519_18_fu_849_r_v_d1),
    .q1(ty_v_q1)
);

choose_t_v_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
zi_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(zi_v_address0),
    .ce0(zi_v_ce0),
    .we0(zi_v_we0),
    .d0(grp_crypto_sign_ed25519_19_fu_832_r_v_d0),
    .q0(zi_v_q0),
    .address1(grp_crypto_sign_ed25519_19_fu_832_r_v_address1),
    .ce1(zi_v_ce1),
    .we1(zi_v_we1),
    .d1(grp_crypto_sign_ed25519_19_fu_832_r_v_d1),
    .q1(zi_v_q1)
);

crypto_sign_t_11 #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0)
);

reduce_add_sub_t #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
pk_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pk_address0),
    .ce0(pk_ce0),
    .we0(pk_we0),
    .d0(sk_q0),
    .q0(pk_q0)
);

crypto_sign_az #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
az_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(az_address0),
    .ce0(az_ce0),
    .we0(az_we0),
    .d0(az_d0),
    .q0(az_q0),
    .address1(az_address1),
    .ce1(az_ce1),
    .we1(az_we1),
    .d1(az_d1),
    .q1(az_q1)
);

crypto_sign_nonce #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
nonce_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(nonce_address0),
    .ce0(nonce_ce0),
    .we0(nonce_we0),
    .d0(grp_sha512_final_fu_693_out_r_d0),
    .q0(nonce_q0),
    .address1(grp_sha512_final_fu_693_out_r_address1),
    .ce1(nonce_ce1),
    .we1(nonce_we1),
    .d1(grp_sha512_final_fu_693_out_r_d1)
);

crypto_sign_nonce #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
hram_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hram_address0),
    .ce0(hram_ce0),
    .we0(hram_we0),
    .d0(grp_sha512_final_fu_693_out_r_d0),
    .q0(hram_q0),
    .address1(grp_sha512_final_fu_693_out_r_address1),
    .ce1(hram_ce1),
    .we1(hram_we1),
    .d1(grp_sha512_final_fu_693_out_r_d1)
);

crypto_sign_signa2iS #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
signature_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(signature_address0),
    .ce0(signature_ce0),
    .we0(signature_we0),
    .d0(signature_d0),
    .q0(signature_q0)
);

crypto_sign_temp_3i2 #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
temp_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_buf_address0),
    .ce0(temp_buf_ce0),
    .we0(temp_buf_we0),
    .d0(reg_892),
    .q0(temp_buf_q0)
);

crypto_sign_sck_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sck_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sck_v_address0),
    .ce0(sck_v_ce0),
    .we0(sck_v_we0),
    .d0(grp_barrett_reduce_fu_822_r_v_d0),
    .q0(sck_v_q0),
    .address1(grp_crypto_sign_ed25519_13_fu_797_s_v_address1),
    .ce1(sck_v_ce1),
    .q1(sck_v_q1)
);

choose_t_v_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
scs_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(scs_v_address0),
    .ce0(scs_v_ce0),
    .we0(scs_v_we0),
    .d0(scs_v_d0),
    .q0(scs_v_q0),
    .address1(grp_crypto_sign_ed25519_16_fu_856_r_v_address1),
    .ce1(scs_v_ce1),
    .we1(scs_v_we1),
    .d1(grp_crypto_sign_ed25519_16_fu_856_r_v_d1),
    .q1(scs_v_q1)
);

choose_t_t_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
scsk_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(scsk_v_address0),
    .ce0(scsk_v_ce0),
    .we0(scsk_v_we0),
    .d0(grp_barrett_reduce_fu_822_r_v_d0),
    .q0(scsk_v_q0)
);

choose_t_v_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ger_x_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ger_x_v_address0),
    .ce0(ger_x_v_ce0),
    .we0(ger_x_v_we0),
    .d0(grp_crypto_sign_ed25519_13_fu_797_r_x_v_d0),
    .q0(ger_x_v_q0),
    .address1(grp_crypto_sign_ed25519_13_fu_797_r_x_v_address1),
    .ce1(ger_x_v_ce1),
    .we1(ger_x_v_we1),
    .d1(grp_crypto_sign_ed25519_13_fu_797_r_x_v_d1),
    .q1(ger_x_v_q1)
);

choose_t_v_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ger_y_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ger_y_v_address0),
    .ce0(ger_y_v_ce0),
    .we0(ger_y_v_we0),
    .d0(grp_crypto_sign_ed25519_13_fu_797_r_y_v_d0),
    .q0(ger_y_v_q0),
    .address1(grp_crypto_sign_ed25519_13_fu_797_r_y_v_address1),
    .ce1(ger_y_v_ce1),
    .we1(ger_y_v_we1),
    .d1(grp_crypto_sign_ed25519_13_fu_797_r_y_v_d1),
    .q1(ger_y_v_q1)
);

choose_t_v_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ger_z_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ger_z_v_address0),
    .ce0(ger_z_v_ce0),
    .we0(ger_z_v_we0),
    .d0(grp_crypto_sign_ed25519_13_fu_797_r_z_v_d0),
    .q0(ger_z_v_q0),
    .address1(grp_crypto_sign_ed25519_13_fu_797_r_z_v_address1),
    .ce1(ger_z_v_ce1),
    .we1(ger_z_v_we1),
    .d1(grp_crypto_sign_ed25519_13_fu_797_r_z_v_d1),
    .q1(ger_z_v_q1)
);

choose_t_v_v #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ger_t_v_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_crypto_sign_ed25519_13_fu_797_r_t_v_address0),
    .ce0(grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce0),
    .we0(grp_crypto_sign_ed25519_13_fu_797_r_t_v_we0),
    .d0(grp_crypto_sign_ed25519_13_fu_797_r_t_v_d0),
    .q0(ger_t_v_q0),
    .address1(grp_crypto_sign_ed25519_13_fu_797_r_t_v_address1),
    .ce1(grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce1),
    .we1(grp_crypto_sign_ed25519_13_fu_797_r_t_v_we1),
    .d1(grp_crypto_sign_ed25519_13_fu_797_r_t_v_d1),
    .q1(ger_t_v_q1)
);

crypto_sign_hash_4jc #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
hash_state_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hash_state_address0),
    .ce0(hash_state_ce0),
    .we0(hash_state_we0),
    .d0(hash_state_d0),
    .q0(hash_state_q0),
    .address1(grp_sha512_init_fu_653_md_state_address1),
    .ce1(hash_state_ce1),
    .we1(hash_state_we1),
    .d1(grp_sha512_init_fu_653_md_state_d1)
);

crypto_sign_hash_5jm #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
hash_buf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hash_buf_address0),
    .ce0(hash_buf_ce0),
    .we0(hash_buf_we0),
    .d0(hash_buf_d0),
    .q0(hash_buf_q0),
    .address1(grp_sha512_final_fu_693_md_buf_address1),
    .ce1(hash_buf_ce1),
    .we1(hash_buf_we1),
    .d1(grp_sha512_final_fu_693_md_buf_d1),
    .q1(hash_buf_q1)
);

sha512_init grp_sha512_init_fu_653(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_init_fu_653_ap_start),
    .ap_done(grp_sha512_init_fu_653_ap_done),
    .ap_idle(grp_sha512_init_fu_653_ap_idle),
    .ap_ready(grp_sha512_init_fu_653_ap_ready),
    .md_state_address0(grp_sha512_init_fu_653_md_state_address0),
    .md_state_ce0(grp_sha512_init_fu_653_md_state_ce0),
    .md_state_we0(grp_sha512_init_fu_653_md_state_we0),
    .md_state_d0(grp_sha512_init_fu_653_md_state_d0),
    .md_state_address1(grp_sha512_init_fu_653_md_state_address1),
    .md_state_ce1(grp_sha512_init_fu_653_md_state_ce1),
    .md_state_we1(grp_sha512_init_fu_653_md_state_we1),
    .md_state_d1(grp_sha512_init_fu_653_md_state_d1)
);

sha512_update_32 grp_sha512_update_32_fu_671(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_update_32_fu_671_ap_start),
    .ap_done(grp_sha512_update_32_fu_671_ap_done),
    .ap_idle(grp_sha512_update_32_fu_671_ap_idle),
    .ap_ready(grp_sha512_update_32_fu_671_ap_ready),
    .md_state_address0(grp_sha512_update_32_fu_671_md_state_address0),
    .md_state_ce0(grp_sha512_update_32_fu_671_md_state_ce0),
    .md_state_we0(grp_sha512_update_32_fu_671_md_state_we0),
    .md_state_d0(grp_sha512_update_32_fu_671_md_state_d0),
    .md_state_q0(hash_state_q0),
    .md_buf_address0(grp_sha512_update_32_fu_671_md_buf_address0),
    .md_buf_ce0(grp_sha512_update_32_fu_671_md_buf_ce0),
    .md_buf_we0(grp_sha512_update_32_fu_671_md_buf_we0),
    .md_buf_d0(grp_sha512_update_32_fu_671_md_buf_d0),
    .md_buf_q0(hash_buf_q0),
    .in_r_address0(grp_sha512_update_32_fu_671_in_r_address0),
    .in_r_ce0(grp_sha512_update_32_fu_671_in_r_ce0),
    .in_r_q0(sk_q0),
    .ap_return_0(grp_sha512_update_32_fu_671_ap_return_0),
    .ap_return_1(grp_sha512_update_32_fu_671_ap_return_1)
);

sha512_final grp_sha512_final_fu_693(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_final_fu_693_ap_start),
    .ap_done(grp_sha512_final_fu_693_ap_done),
    .ap_idle(grp_sha512_final_fu_693_ap_idle),
    .ap_ready(grp_sha512_final_fu_693_ap_ready),
    .md_length_read(grp_sha512_final_fu_693_md_length_read),
    .md_state_address0(grp_sha512_final_fu_693_md_state_address0),
    .md_state_ce0(grp_sha512_final_fu_693_md_state_ce0),
    .md_state_we0(grp_sha512_final_fu_693_md_state_we0),
    .md_state_d0(grp_sha512_final_fu_693_md_state_d0),
    .md_state_q0(hash_state_q0),
    .md_curlen_read(grp_sha512_final_fu_693_md_curlen_read),
    .md_buf_address0(grp_sha512_final_fu_693_md_buf_address0),
    .md_buf_ce0(grp_sha512_final_fu_693_md_buf_ce0),
    .md_buf_we0(grp_sha512_final_fu_693_md_buf_we0),
    .md_buf_d0(grp_sha512_final_fu_693_md_buf_d0),
    .md_buf_q0(hash_buf_q0),
    .md_buf_address1(grp_sha512_final_fu_693_md_buf_address1),
    .md_buf_ce1(grp_sha512_final_fu_693_md_buf_ce1),
    .md_buf_we1(grp_sha512_final_fu_693_md_buf_we1),
    .md_buf_d1(grp_sha512_final_fu_693_md_buf_d1),
    .md_buf_q1(hash_buf_q1),
    .out_r_address0(grp_sha512_final_fu_693_out_r_address0),
    .out_r_ce0(grp_sha512_final_fu_693_out_r_ce0),
    .out_r_we0(grp_sha512_final_fu_693_out_r_we0),
    .out_r_d0(grp_sha512_final_fu_693_out_r_d0),
    .out_r_address1(grp_sha512_final_fu_693_out_r_address1),
    .out_r_ce1(grp_sha512_final_fu_693_out_r_ce1),
    .out_r_we1(grp_sha512_final_fu_693_out_r_we1),
    .out_r_d1(grp_sha512_final_fu_693_out_r_d1)
);

sha512_update_128 grp_sha512_update_128_fu_731(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_update_128_fu_731_ap_start),
    .ap_done(grp_sha512_update_128_fu_731_ap_done),
    .ap_idle(grp_sha512_update_128_fu_731_ap_idle),
    .ap_ready(grp_sha512_update_128_fu_731_ap_ready),
    .md_length_read(grp_sha512_update_128_fu_731_md_length_read),
    .md_state_address0(grp_sha512_update_128_fu_731_md_state_address0),
    .md_state_ce0(grp_sha512_update_128_fu_731_md_state_ce0),
    .md_state_we0(grp_sha512_update_128_fu_731_md_state_we0),
    .md_state_d0(grp_sha512_update_128_fu_731_md_state_d0),
    .md_state_q0(hash_state_q0),
    .md_curlen_read(grp_sha512_update_128_fu_731_md_curlen_read),
    .md_buf_address0(grp_sha512_update_128_fu_731_md_buf_address0),
    .md_buf_ce0(grp_sha512_update_128_fu_731_md_buf_ce0),
    .md_buf_we0(grp_sha512_update_128_fu_731_md_buf_we0),
    .md_buf_d0(grp_sha512_update_128_fu_731_md_buf_d0),
    .md_buf_q0(hash_buf_q0),
    .in_r_address0(grp_sha512_update_128_fu_731_in_r_address0),
    .in_r_ce0(grp_sha512_update_128_fu_731_in_r_ce0),
    .in_r_q0(temp_buf_q0),
    .ap_return_0(grp_sha512_update_128_fu_731_ap_return_0),
    .ap_return_1(grp_sha512_update_128_fu_731_ap_return_1)
);

p_memmove grp_p_memmove_fu_766(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_p_memmove_fu_766_ap_start),
    .ap_done(grp_p_memmove_fu_766_ap_done),
    .ap_idle(grp_p_memmove_fu_766_ap_idle),
    .ap_ready(grp_p_memmove_fu_766_ap_ready),
    .dst_address0(grp_p_memmove_fu_766_dst_address0),
    .dst_ce0(grp_p_memmove_fu_766_dst_ce0),
    .dst_we0(grp_p_memmove_fu_766_dst_we0),
    .dst_d0(grp_p_memmove_fu_766_dst_d0),
    .src_address0(grp_p_memmove_fu_766_src_address0),
    .src_ce0(grp_p_memmove_fu_766_src_ce0),
    .src_q0(pk_q0)
);

sha512_update_32_1 grp_sha512_update_32_1_fu_781(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha512_update_32_1_fu_781_ap_start),
    .ap_done(grp_sha512_update_32_1_fu_781_ap_done),
    .ap_idle(grp_sha512_update_32_1_fu_781_ap_idle),
    .ap_ready(grp_sha512_update_32_1_fu_781_ap_ready),
    .md_length_read(grp_sha512_update_32_1_fu_781_md_length_read),
    .md_state_address0(grp_sha512_update_32_1_fu_781_md_state_address0),
    .md_state_ce0(grp_sha512_update_32_1_fu_781_md_state_ce0),
    .md_state_we0(grp_sha512_update_32_1_fu_781_md_state_we0),
    .md_state_d0(grp_sha512_update_32_1_fu_781_md_state_d0),
    .md_state_q0(hash_state_q0),
    .md_curlen_read(grp_sha512_update_32_1_fu_781_md_curlen_read),
    .md_buf_address0(grp_sha512_update_32_1_fu_781_md_buf_address0),
    .md_buf_ce0(grp_sha512_update_32_1_fu_781_md_buf_ce0),
    .md_buf_we0(grp_sha512_update_32_1_fu_781_md_buf_we0),
    .md_buf_d0(grp_sha512_update_32_1_fu_781_md_buf_d0),
    .md_buf_q0(hash_buf_q0),
    .in_r_address0(grp_sha512_update_32_1_fu_781_in_r_address0),
    .in_r_ce0(grp_sha512_update_32_1_fu_781_in_r_ce0),
    .in_r_q0(signature_q0),
    .in_offset(grp_sha512_update_32_1_fu_781_in_offset),
    .ap_return_0(grp_sha512_update_32_1_fu_781_ap_return_0),
    .ap_return_1(grp_sha512_update_32_1_fu_781_ap_return_1)
);

crypto_sign_ed25519_13 grp_crypto_sign_ed25519_13_fu_797(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crypto_sign_ed25519_13_fu_797_ap_start),
    .ap_done(grp_crypto_sign_ed25519_13_fu_797_ap_done),
    .ap_idle(grp_crypto_sign_ed25519_13_fu_797_ap_idle),
    .ap_ready(grp_crypto_sign_ed25519_13_fu_797_ap_ready),
    .r_x_v_address0(grp_crypto_sign_ed25519_13_fu_797_r_x_v_address0),
    .r_x_v_ce0(grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce0),
    .r_x_v_we0(grp_crypto_sign_ed25519_13_fu_797_r_x_v_we0),
    .r_x_v_d0(grp_crypto_sign_ed25519_13_fu_797_r_x_v_d0),
    .r_x_v_q0(ger_x_v_q0),
    .r_x_v_address1(grp_crypto_sign_ed25519_13_fu_797_r_x_v_address1),
    .r_x_v_ce1(grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce1),
    .r_x_v_we1(grp_crypto_sign_ed25519_13_fu_797_r_x_v_we1),
    .r_x_v_d1(grp_crypto_sign_ed25519_13_fu_797_r_x_v_d1),
    .r_x_v_q1(ger_x_v_q1),
    .r_y_v_address0(grp_crypto_sign_ed25519_13_fu_797_r_y_v_address0),
    .r_y_v_ce0(grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce0),
    .r_y_v_we0(grp_crypto_sign_ed25519_13_fu_797_r_y_v_we0),
    .r_y_v_d0(grp_crypto_sign_ed25519_13_fu_797_r_y_v_d0),
    .r_y_v_q0(ger_y_v_q0),
    .r_y_v_address1(grp_crypto_sign_ed25519_13_fu_797_r_y_v_address1),
    .r_y_v_ce1(grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce1),
    .r_y_v_we1(grp_crypto_sign_ed25519_13_fu_797_r_y_v_we1),
    .r_y_v_d1(grp_crypto_sign_ed25519_13_fu_797_r_y_v_d1),
    .r_y_v_q1(ger_y_v_q1),
    .r_z_v_address0(grp_crypto_sign_ed25519_13_fu_797_r_z_v_address0),
    .r_z_v_ce0(grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce0),
    .r_z_v_we0(grp_crypto_sign_ed25519_13_fu_797_r_z_v_we0),
    .r_z_v_d0(grp_crypto_sign_ed25519_13_fu_797_r_z_v_d0),
    .r_z_v_q0(ger_z_v_q0),
    .r_z_v_address1(grp_crypto_sign_ed25519_13_fu_797_r_z_v_address1),
    .r_z_v_ce1(grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce1),
    .r_z_v_we1(grp_crypto_sign_ed25519_13_fu_797_r_z_v_we1),
    .r_z_v_d1(grp_crypto_sign_ed25519_13_fu_797_r_z_v_d1),
    .r_z_v_q1(ger_z_v_q1),
    .r_t_v_address0(grp_crypto_sign_ed25519_13_fu_797_r_t_v_address0),
    .r_t_v_ce0(grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce0),
    .r_t_v_we0(grp_crypto_sign_ed25519_13_fu_797_r_t_v_we0),
    .r_t_v_d0(grp_crypto_sign_ed25519_13_fu_797_r_t_v_d0),
    .r_t_v_q0(ger_t_v_q0),
    .r_t_v_address1(grp_crypto_sign_ed25519_13_fu_797_r_t_v_address1),
    .r_t_v_ce1(grp_crypto_sign_ed25519_13_fu_797_r_t_v_ce1),
    .r_t_v_we1(grp_crypto_sign_ed25519_13_fu_797_r_t_v_we1),
    .r_t_v_d1(grp_crypto_sign_ed25519_13_fu_797_r_t_v_d1),
    .r_t_v_q1(ger_t_v_q1),
    .s_v_address0(grp_crypto_sign_ed25519_13_fu_797_s_v_address0),
    .s_v_ce0(grp_crypto_sign_ed25519_13_fu_797_s_v_ce0),
    .s_v_q0(sck_v_q0),
    .s_v_address1(grp_crypto_sign_ed25519_13_fu_797_s_v_address1),
    .s_v_ce1(grp_crypto_sign_ed25519_13_fu_797_s_v_ce1),
    .s_v_q1(sck_v_q1)
);

crypto_sign_ed25519_15 grp_crypto_sign_ed25519_15_fu_812(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crypto_sign_ed25519_15_fu_812_ap_start),
    .ap_done(grp_crypto_sign_ed25519_15_fu_812_ap_done),
    .ap_idle(grp_crypto_sign_ed25519_15_fu_812_ap_idle),
    .ap_ready(grp_crypto_sign_ed25519_15_fu_812_ap_ready),
    .r_v_address0(grp_crypto_sign_ed25519_15_fu_812_r_v_address0),
    .r_v_ce0(grp_crypto_sign_ed25519_15_fu_812_r_v_ce0),
    .r_v_we0(grp_crypto_sign_ed25519_15_fu_812_r_v_we0),
    .r_v_d0(grp_crypto_sign_ed25519_15_fu_812_r_v_d0),
    .r_v_q0(scs_v_q0),
    .y_v_address0(grp_crypto_sign_ed25519_15_fu_812_y_v_address0),
    .y_v_ce0(grp_crypto_sign_ed25519_15_fu_812_y_v_ce0),
    .y_v_q0(scsk_v_q0)
);

barrett_reduce grp_barrett_reduce_fu_822(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_barrett_reduce_fu_822_ap_start),
    .ap_done(grp_barrett_reduce_fu_822_ap_done),
    .ap_idle(grp_barrett_reduce_fu_822_ap_idle),
    .ap_ready(grp_barrett_reduce_fu_822_ap_ready),
    .r_v_address0(grp_barrett_reduce_fu_822_r_v_address0),
    .r_v_ce0(grp_barrett_reduce_fu_822_r_v_ce0),
    .r_v_we0(grp_barrett_reduce_fu_822_r_v_we0),
    .r_v_d0(grp_barrett_reduce_fu_822_r_v_d0),
    .r_v_q0(grp_barrett_reduce_fu_822_r_v_q0),
    .x_address0(grp_barrett_reduce_fu_822_x_address0),
    .x_ce0(grp_barrett_reduce_fu_822_x_ce0),
    .x_q0(grp_barrett_reduce_fu_822_x_q0)
);

crypto_sign_ed25519_19 grp_crypto_sign_ed25519_19_fu_832(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crypto_sign_ed25519_19_fu_832_ap_start),
    .ap_done(grp_crypto_sign_ed25519_19_fu_832_ap_done),
    .ap_idle(grp_crypto_sign_ed25519_19_fu_832_ap_idle),
    .ap_ready(grp_crypto_sign_ed25519_19_fu_832_ap_ready),
    .r_v_address0(grp_crypto_sign_ed25519_19_fu_832_r_v_address0),
    .r_v_ce0(grp_crypto_sign_ed25519_19_fu_832_r_v_ce0),
    .r_v_we0(grp_crypto_sign_ed25519_19_fu_832_r_v_we0),
    .r_v_d0(grp_crypto_sign_ed25519_19_fu_832_r_v_d0),
    .r_v_q0(zi_v_q0),
    .r_v_address1(grp_crypto_sign_ed25519_19_fu_832_r_v_address1),
    .r_v_ce1(grp_crypto_sign_ed25519_19_fu_832_r_v_ce1),
    .r_v_we1(grp_crypto_sign_ed25519_19_fu_832_r_v_we1),
    .r_v_d1(grp_crypto_sign_ed25519_19_fu_832_r_v_d1),
    .r_v_q1(zi_v_q1),
    .x_v_address0(grp_crypto_sign_ed25519_19_fu_832_x_v_address0),
    .x_v_ce0(grp_crypto_sign_ed25519_19_fu_832_x_v_ce0),
    .x_v_q0(ger_z_v_q0)
);

crypto_sign_ed25519_9 grp_crypto_sign_ed25519_9_fu_838(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crypto_sign_ed25519_9_fu_838_ap_start),
    .ap_done(grp_crypto_sign_ed25519_9_fu_838_ap_done),
    .ap_idle(grp_crypto_sign_ed25519_9_fu_838_ap_idle),
    .ap_ready(grp_crypto_sign_ed25519_9_fu_838_ap_ready),
    .r_address0(grp_crypto_sign_ed25519_9_fu_838_r_address0),
    .r_ce0(grp_crypto_sign_ed25519_9_fu_838_r_ce0),
    .r_we0(grp_crypto_sign_ed25519_9_fu_838_r_we0),
    .r_d0(grp_crypto_sign_ed25519_9_fu_838_r_d0),
    .x_v_address0(grp_crypto_sign_ed25519_9_fu_838_x_v_address0),
    .x_v_ce0(grp_crypto_sign_ed25519_9_fu_838_x_v_ce0),
    .x_v_q0(ty_v_q0),
    .x_v_address1(grp_crypto_sign_ed25519_9_fu_838_x_v_address1),
    .x_v_ce1(grp_crypto_sign_ed25519_9_fu_838_x_v_ce1),
    .x_v_q1(ty_v_q1)
);

crypto_sign_ed25519_20 grp_crypto_sign_ed25519_20_fu_844(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crypto_sign_ed25519_20_fu_844_ap_start),
    .ap_done(grp_crypto_sign_ed25519_20_fu_844_ap_done),
    .ap_idle(grp_crypto_sign_ed25519_20_fu_844_ap_idle),
    .ap_ready(grp_crypto_sign_ed25519_20_fu_844_ap_ready),
    .x_v_address0(grp_crypto_sign_ed25519_20_fu_844_x_v_address0),
    .x_v_ce0(grp_crypto_sign_ed25519_20_fu_844_x_v_ce0),
    .x_v_q0(tx_v_q0),
    .x_v_address1(grp_crypto_sign_ed25519_20_fu_844_x_v_address1),
    .x_v_ce1(grp_crypto_sign_ed25519_20_fu_844_x_v_ce1),
    .x_v_q1(tx_v_q1),
    .ap_return(grp_crypto_sign_ed25519_20_fu_844_ap_return)
);

crypto_sign_ed25519_18 grp_crypto_sign_ed25519_18_fu_849(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crypto_sign_ed25519_18_fu_849_ap_start),
    .ap_done(grp_crypto_sign_ed25519_18_fu_849_ap_done),
    .ap_idle(grp_crypto_sign_ed25519_18_fu_849_ap_idle),
    .ap_ready(grp_crypto_sign_ed25519_18_fu_849_ap_ready),
    .r_v_address0(grp_crypto_sign_ed25519_18_fu_849_r_v_address0),
    .r_v_ce0(grp_crypto_sign_ed25519_18_fu_849_r_v_ce0),
    .r_v_we0(grp_crypto_sign_ed25519_18_fu_849_r_v_we0),
    .r_v_d0(grp_crypto_sign_ed25519_18_fu_849_r_v_d0),
    .r_v_q0(grp_crypto_sign_ed25519_18_fu_849_r_v_q0),
    .r_v_address1(grp_crypto_sign_ed25519_18_fu_849_r_v_address1),
    .r_v_ce1(grp_crypto_sign_ed25519_18_fu_849_r_v_ce1),
    .r_v_we1(grp_crypto_sign_ed25519_18_fu_849_r_v_we1),
    .r_v_d1(grp_crypto_sign_ed25519_18_fu_849_r_v_d1),
    .r_v_q1(grp_crypto_sign_ed25519_18_fu_849_r_v_q1),
    .x_v_address0(grp_crypto_sign_ed25519_18_fu_849_x_v_address0),
    .x_v_ce0(grp_crypto_sign_ed25519_18_fu_849_x_v_ce0),
    .x_v_q0(grp_crypto_sign_ed25519_18_fu_849_x_v_q0),
    .y_v_address0(grp_crypto_sign_ed25519_18_fu_849_y_v_address0),
    .y_v_ce0(grp_crypto_sign_ed25519_18_fu_849_y_v_ce0),
    .y_v_q0(zi_v_q0)
);

crypto_sign_ed25519_16 grp_crypto_sign_ed25519_16_fu_856(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crypto_sign_ed25519_16_fu_856_ap_start),
    .ap_done(grp_crypto_sign_ed25519_16_fu_856_ap_done),
    .ap_idle(grp_crypto_sign_ed25519_16_fu_856_ap_idle),
    .ap_ready(grp_crypto_sign_ed25519_16_fu_856_ap_ready),
    .r_v_address0(grp_crypto_sign_ed25519_16_fu_856_r_v_address0),
    .r_v_ce0(grp_crypto_sign_ed25519_16_fu_856_r_v_ce0),
    .r_v_we0(grp_crypto_sign_ed25519_16_fu_856_r_v_we0),
    .r_v_d0(grp_crypto_sign_ed25519_16_fu_856_r_v_d0),
    .r_v_q0(scs_v_q0),
    .r_v_address1(grp_crypto_sign_ed25519_16_fu_856_r_v_address1),
    .r_v_ce1(grp_crypto_sign_ed25519_16_fu_856_r_v_ce1),
    .r_v_we1(grp_crypto_sign_ed25519_16_fu_856_r_v_we1),
    .r_v_d1(grp_crypto_sign_ed25519_16_fu_856_r_v_d1),
    .r_v_q1(scs_v_q1),
    .y_v_address0(grp_crypto_sign_ed25519_16_fu_856_y_v_address0),
    .y_v_ce0(grp_crypto_sign_ed25519_16_fu_856_y_v_ce0),
    .y_v_q0(sck_v_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_barrett_reduce_fu_822_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state28) & (exitcond_i_fu_1066_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state60) & (exitcond_i1_fu_1147_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state65) & (exitcond_i2_fu_1191_p2 == 1'd1)))) begin
            ap_reg_grp_barrett_reduce_fu_822_ap_start <= 1'b1;
        end else if ((1'b1 == grp_barrett_reduce_fu_822_ap_ready)) begin
            ap_reg_grp_barrett_reduce_fu_822_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start <= 1'b1;
        end else if ((1'b1 == grp_crypto_sign_ed25519_13_fu_797_ap_ready)) begin
            ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state67)) begin
            ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start <= 1'b1;
        end else if ((1'b1 == grp_crypto_sign_ed25519_15_fu_812_ap_ready)) begin
            ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state69)) begin
            ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start <= 1'b1;
        end else if ((1'b1 == grp_crypto_sign_ed25519_16_fu_856_ap_ready)) begin
            ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state35))) begin
            ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start <= 1'b1;
        end else if ((1'b1 == grp_crypto_sign_ed25519_18_fu_849_ap_ready)) begin
            ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start <= 1'b1;
        end else if ((1'b1 == grp_crypto_sign_ed25519_19_fu_832_ap_ready)) begin
            ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start <= 1'b1;
        end else if ((1'b1 == grp_crypto_sign_ed25519_20_fu_844_ap_ready)) begin
            ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state39)) begin
            ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start <= 1'b1;
        end else if ((1'b1 == grp_crypto_sign_ed25519_9_fu_838_ap_ready)) begin
            ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_p_memmove_fu_766_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_reg_grp_p_memmove_fu_766_ap_start <= 1'b1;
        end else if ((1'b1 == grp_p_memmove_fu_766_ap_ready)) begin
            ap_reg_grp_p_memmove_fu_766_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_final_fu_693_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state17) & (ap_block_state17_io == 1'b0) & (exitcond3_fu_1021_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state49) & (ap_block_state49_io == 1'b0) & (exitcond1_fu_1102_p2 == 1'd1)))) begin
            ap_reg_grp_sha512_final_fu_693_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_final_fu_693_ap_ready)) begin
            ap_reg_grp_sha512_final_fu_693_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_init_fu_653_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_i_i_fu_926_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_i_i1_fu_998_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state28) & (exitcond_i_fu_1066_p2 == 1'd1)))) begin
            ap_reg_grp_sha512_init_fu_653_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_init_fu_653_ap_ready)) begin
            ap_reg_grp_sha512_init_fu_653_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_update_128_fu_731_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & ~((1'd0 == exitcond2_fu_1049_p2) & (1'b0 == mem_RVALID)) & (exitcond2_fu_1049_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state56) & ~((1'd0 == exitcond_fu_1130_p2) & (1'b0 == mem_RVALID)) & (exitcond_fu_1130_p2 == 1'd1)))) begin
            ap_reg_grp_sha512_update_128_fu_731_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_update_128_fu_731_ap_ready)) begin
            ap_reg_grp_sha512_update_128_fu_731_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_update_32_1_fu_781_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state47))) begin
            ap_reg_grp_sha512_update_32_1_fu_781_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_update_32_1_fu_781_ap_ready)) begin
            ap_reg_grp_sha512_update_32_1_fu_781_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_sha512_update_32_fu_671_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_reg_grp_sha512_update_32_fu_671_ap_start <= 1'b1;
        end else if ((1'b1 == grp_sha512_update_32_fu_671_ap_ready)) begin
            ap_reg_grp_sha512_update_32_fu_671_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state17) & (exitcond3_fu_1021_p2 == 1'd0) & (ap_block_state17_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state49) & (1'd0 == exitcond1_fu_1102_p2) & (ap_block_state49_io == 1'b0)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state17) & (exitcond3_fu_1021_p2 == 1'd0) & (1'b1 == mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state49) & (1'd0 == exitcond1_fu_1102_p2) & (1'b1 == mem_ARREADY)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (grp_sha512_update_128_fu_731_ap_done == 1'b1))) begin
        hash_curlen3_reg_500 <= grp_sha512_update_128_fu_731_ap_return_1;
    end else if (((1'b1 == ap_CS_fsm_state16) & (grp_sha512_update_32_1_fu_781_ap_done == 1'b1))) begin
        hash_curlen3_reg_500 <= grp_sha512_update_32_1_fu_781_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_sha512_update_128_fu_731_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        hash_curlen_1_reg_554 <= grp_sha512_update_128_fu_731_ap_return_1;
    end else if (((grp_sha512_update_32_1_fu_781_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        hash_curlen_1_reg_554 <= grp_sha512_update_32_1_fu_781_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (grp_sha512_update_128_fu_731_ap_done == 1'b1))) begin
        hash_length3_reg_510 <= grp_sha512_update_128_fu_731_ap_return_0;
    end else if (((1'b1 == ap_CS_fsm_state16) & (grp_sha512_update_32_1_fu_781_ap_done == 1'b1))) begin
        hash_length3_reg_510 <= grp_sha512_update_32_1_fu_781_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_sha512_update_128_fu_731_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        hash_length_1_reg_564 <= grp_sha512_update_128_fu_731_ap_return_0;
    end else if (((grp_sha512_update_32_1_fu_781_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        hash_length_1_reg_564 <= grp_sha512_update_32_1_fu_781_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (exitcond1_i_fu_1169_p2 == 1'd1))) begin
        i_1_i_reg_619 <= 7'd32;
    end else if (((1'b1 == ap_CS_fsm_state65) & (1'd0 == exitcond_i2_fu_1191_p2))) begin
        i_1_i_reg_619 <= i_78_fu_1202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_sha512_update_128_fu_731_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        i_1_reg_574 <= i_76_reg_1386;
    end else if (((grp_sha512_update_32_1_fu_781_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        i_1_reg_574 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        i_i1_reg_597 <= i_3_reg_1408;
    end else if (((grp_sha512_final_fu_693_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        i_i1_reg_597 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        i_i2_reg_608 <= i_77_reg_1426;
    end else if (((1'b1 == ap_CS_fsm_state62) & (grp_barrett_reduce_fu_822_ap_done == 1'b1))) begin
        i_i2_reg_608 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        i_i3_reg_630 <= i_79_reg_1452;
    end else if (((1'b1 == ap_CS_fsm_state70) & (grp_crypto_sign_ed25519_16_fu_856_ap_done == 1'b1))) begin
        i_i3_reg_630 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (exitcond_i3_fu_1208_p2 == 1'd1))) begin
        i_i4_reg_642 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        i_i4_reg_642 <= i_80_reg_1465;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_i_i1_reg_489 <= i_74_reg_1308;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_i_i1_reg_489 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_920_p2 == 1'd1))) begin
        i_i_i_reg_477 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_i_reg_477 <= i_73_reg_1275;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_i_reg_543 <= i_2_reg_1348;
    end else if (((1'b1 == ap_CS_fsm_state27) & (grp_sha512_final_fu_693_ap_done == 1'b1))) begin
        i_i_reg_543 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (grp_sha512_update_128_fu_731_ap_done == 1'b1))) begin
        i_reg_520 <= i_75_reg_1326;
    end else if (((1'b1 == ap_CS_fsm_state16) & (grp_sha512_update_32_1_fu_781_ap_done == 1'b1))) begin
        i_reg_520 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_s_fu_920_p2))) begin
        invdar_reg_466 <= indvarinc_fu_909_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_466 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        j_1_reg_585 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        j_1_reg_585 <= j_4_reg_1400;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        j_reg_531 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        j_reg_531 <= j_3_reg_1340;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_sha512_update_32_fu_671_ap_done == 1'b1))) begin
        hash_curlen_reg_1290 <= grp_sha512_update_32_fu_671_ap_return_1;
        hash_length_reg_1285 <= grp_sha512_update_32_fu_671_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_2_reg_1348 <= i_2_fu_1072_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        i_3_reg_1408 <= i_3_fu_1153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_73_reg_1275 <= i_73_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_74_reg_1308 <= i_74_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (ap_block_state17_io == 1'b0))) begin
        i_75_reg_1326 <= i_75_fu_1026_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (ap_block_state49_io == 1'b0))) begin
        i_76_reg_1386 <= i_76_fu_1107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        i_77_reg_1426 <= i_77_fu_1175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        i_79_reg_1452 <= i_79_fu_1214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        i_80_reg_1465 <= i_80_fu_1247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & ~((1'd0 == exitcond2_fu_1049_p2) & (1'b0 == mem_RVALID)))) begin
        j_3_reg_1340 <= j_3_fu_1055_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & ~((1'd0 == exitcond_fu_1130_p2) & (1'b0 == mem_RVALID)))) begin
        j_4_reg_1400 <= j_4_fu_1136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        num_blocks_read_reg_1258 <= num_blocks;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state16) & (grp_sha512_update_32_1_fu_781_ap_done == 1'b1)) | ((grp_sha512_update_32_1_fu_781_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46)))) begin
        reg_880 <= grp_sha512_update_32_1_fu_781_ap_return_0;
        reg_886 <= grp_sha512_update_32_1_fu_781_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (1'd0 == exitcond2_fu_1049_p2) & ~((1'd0 == exitcond2_fu_1049_p2) & (1'b0 == mem_RVALID))) | ((1'b1 == ap_CS_fsm_state56) & (1'd0 == exitcond_fu_1130_p2) & ~((1'd0 == exitcond_fu_1130_p2) & (1'b0 == mem_RVALID))))) begin
        reg_892 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == exitcond_i_i1_fu_998_p2))) begin
        sum3_i_i_cast_reg_1313[5 : 0] <= sum3_i_i_cast_fu_1016_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (ap_block_state38_on_subcall_done == 1'b0))) begin
        tmp_i1_reg_1363 <= grp_crypto_sign_ed25519_20_fu_844_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) & (1'd0 == exitcond_i1_fu_1147_p2))) begin
        tmp_i2_reg_1413[6 : 0] <= tmp_i2_fu_1159_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (1'd0 == exitcond1_i_fu_1169_p2))) begin
        tmp_i3_reg_1431[5 : 0] <= tmp_i3_fu_1181_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state73) & (1'd0 == exitcond_i4_fu_1241_p2))) begin
        tmp_i5_reg_1470[6 : 0] <= tmp_i5_fu_1253_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == exitcond_i_fu_1066_p2))) begin
        tmp_i_reg_1353[6 : 0] <= tmp_i_fu_1078_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (exitcond_i4_fu_1241_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) & (exitcond_i4_fu_1241_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        az_address0 = sum3_i_i_cast_fu_1016_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        az_address0 = az_addr_reg_1295;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        az_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        az_address0 = grp_sha512_final_fu_693_out_r_address0;
    end else begin
        az_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        az_address1 = tmp_i3_fu_1181_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        az_address1 = az_addr_1_reg_1300;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        az_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        az_address1 = grp_sha512_final_fu_693_out_r_address1;
    end else begin
        az_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        az_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        az_ce0 = grp_sha512_final_fu_693_out_r_ce0;
    end else begin
        az_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state11))) begin
        az_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        az_ce1 = grp_sha512_final_fu_693_out_r_ce1;
    end else begin
        az_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        az_d0 = tmp_800_fu_972_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        az_d0 = grp_sha512_final_fu_693_out_r_d0;
    end else begin
        az_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        az_d1 = tmp_894_cast_fu_993_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        az_d1 = grp_sha512_final_fu_693_out_r_d1;
    end else begin
        az_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        az_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        az_we0 = grp_sha512_final_fu_693_out_r_we0;
    end else begin
        az_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        az_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        az_we1 = grp_sha512_final_fu_693_out_r_we1;
    end else begin
        az_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ger_x_v_address0 = grp_crypto_sign_ed25519_18_fu_849_x_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_x_v_address0 = grp_crypto_sign_ed25519_13_fu_797_r_x_v_address0;
    end else begin
        ger_x_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ger_x_v_ce0 = grp_crypto_sign_ed25519_18_fu_849_x_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_x_v_ce0 = grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce0;
    end else begin
        ger_x_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_x_v_ce1 = grp_crypto_sign_ed25519_13_fu_797_r_x_v_ce1;
    end else begin
        ger_x_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_x_v_we0 = grp_crypto_sign_ed25519_13_fu_797_r_x_v_we0;
    end else begin
        ger_x_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_x_v_we1 = grp_crypto_sign_ed25519_13_fu_797_r_x_v_we1;
    end else begin
        ger_x_v_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ger_y_v_address0 = grp_crypto_sign_ed25519_18_fu_849_x_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_y_v_address0 = grp_crypto_sign_ed25519_13_fu_797_r_y_v_address0;
    end else begin
        ger_y_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ger_y_v_ce0 = grp_crypto_sign_ed25519_18_fu_849_x_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_y_v_ce0 = grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce0;
    end else begin
        ger_y_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_y_v_ce1 = grp_crypto_sign_ed25519_13_fu_797_r_y_v_ce1;
    end else begin
        ger_y_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_y_v_we0 = grp_crypto_sign_ed25519_13_fu_797_r_y_v_we0;
    end else begin
        ger_y_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_y_v_we1 = grp_crypto_sign_ed25519_13_fu_797_r_y_v_we1;
    end else begin
        ger_y_v_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ger_z_v_address0 = grp_crypto_sign_ed25519_19_fu_832_x_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_z_v_address0 = grp_crypto_sign_ed25519_13_fu_797_r_z_v_address0;
    end else begin
        ger_z_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ger_z_v_ce0 = grp_crypto_sign_ed25519_19_fu_832_x_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_z_v_ce0 = grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce0;
    end else begin
        ger_z_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_z_v_ce1 = grp_crypto_sign_ed25519_13_fu_797_r_z_v_ce1;
    end else begin
        ger_z_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_z_v_we0 = grp_crypto_sign_ed25519_13_fu_797_r_z_v_we0;
    end else begin
        ger_z_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ger_z_v_we1 = grp_crypto_sign_ed25519_13_fu_797_r_z_v_we1;
    end else begin
        ger_z_v_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_barrett_reduce_fu_822_r_v_q0 = scsk_v_q0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_barrett_reduce_fu_822_r_v_q0 = scs_v_q0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_barrett_reduce_fu_822_r_v_q0 = sck_v_q0;
    end else begin
        grp_barrett_reduce_fu_822_r_v_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_barrett_reduce_fu_822_x_q0 = t_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_barrett_reduce_fu_822_x_q0 = t_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_barrett_reduce_fu_822_x_q0 = t_q0;
    end else begin
        grp_barrett_reduce_fu_822_x_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_crypto_sign_ed25519_18_fu_849_r_v_q0 = ty_v_q0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_crypto_sign_ed25519_18_fu_849_r_v_q0 = tx_v_q0;
    end else begin
        grp_crypto_sign_ed25519_18_fu_849_r_v_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_crypto_sign_ed25519_18_fu_849_r_v_q1 = ty_v_q1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_crypto_sign_ed25519_18_fu_849_r_v_q1 = tx_v_q1;
    end else begin
        grp_crypto_sign_ed25519_18_fu_849_r_v_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_crypto_sign_ed25519_18_fu_849_x_v_q0 = ger_y_v_q0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_crypto_sign_ed25519_18_fu_849_x_v_q0 = ger_x_v_q0;
    end else begin
        grp_crypto_sign_ed25519_18_fu_849_x_v_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_sha512_final_fu_693_md_curlen_read = hash_curlen_1_reg_554;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_sha512_final_fu_693_md_curlen_read = hash_curlen3_reg_500;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_sha512_final_fu_693_md_curlen_read = hash_curlen_reg_1290;
    end else begin
        grp_sha512_final_fu_693_md_curlen_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_sha512_final_fu_693_md_length_read = hash_length_1_reg_564;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_sha512_final_fu_693_md_length_read = hash_length3_reg_510;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_sha512_final_fu_693_md_length_read = hash_length_reg_1285;
    end else begin
        grp_sha512_final_fu_693_md_length_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_sha512_update_128_fu_731_md_curlen_read = hash_curlen_1_reg_554;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_sha512_update_128_fu_731_md_curlen_read = hash_curlen3_reg_500;
    end else begin
        grp_sha512_update_128_fu_731_md_curlen_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_sha512_update_128_fu_731_md_length_read = hash_length_1_reg_564;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_sha512_update_128_fu_731_md_length_read = hash_length3_reg_510;
    end else begin
        grp_sha512_update_128_fu_731_md_length_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_sha512_update_32_1_fu_781_in_offset = 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state48))) begin
        grp_sha512_update_32_1_fu_781_in_offset = 7'd32;
    end else begin
        grp_sha512_update_32_1_fu_781_in_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_sha512_update_32_1_fu_781_md_curlen_read = reg_886;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46))) begin
        grp_sha512_update_32_1_fu_781_md_curlen_read = 64'd0;
    end else begin
        grp_sha512_update_32_1_fu_781_md_curlen_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_sha512_update_32_1_fu_781_md_length_read = reg_880;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46))) begin
        grp_sha512_update_32_1_fu_781_md_length_read = 64'd0;
    end else begin
        grp_sha512_update_32_1_fu_781_md_length_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        hash_buf_address0 = grp_sha512_update_32_1_fu_781_md_buf_address0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        hash_buf_address0 = grp_sha512_update_128_fu_731_md_buf_address0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_buf_address0 = grp_sha512_final_fu_693_md_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hash_buf_address0 = grp_sha512_update_32_fu_671_md_buf_address0;
    end else begin
        hash_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        hash_buf_ce0 = grp_sha512_update_32_1_fu_781_md_buf_ce0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        hash_buf_ce0 = grp_sha512_update_128_fu_731_md_buf_ce0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_buf_ce0 = grp_sha512_final_fu_693_md_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hash_buf_ce0 = grp_sha512_update_32_fu_671_md_buf_ce0;
    end else begin
        hash_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_buf_ce1 = grp_sha512_final_fu_693_md_buf_ce1;
    end else begin
        hash_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        hash_buf_d0 = grp_sha512_update_32_1_fu_781_md_buf_d0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        hash_buf_d0 = grp_sha512_update_128_fu_731_md_buf_d0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_buf_d0 = grp_sha512_final_fu_693_md_buf_d0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hash_buf_d0 = grp_sha512_update_32_fu_671_md_buf_d0;
    end else begin
        hash_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        hash_buf_we0 = grp_sha512_update_32_1_fu_781_md_buf_we0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        hash_buf_we0 = grp_sha512_update_128_fu_731_md_buf_we0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_buf_we0 = grp_sha512_final_fu_693_md_buf_we0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hash_buf_we0 = grp_sha512_update_32_fu_671_md_buf_we0;
    end else begin
        hash_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_buf_we1 = grp_sha512_final_fu_693_md_buf_we1;
    end else begin
        hash_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        hash_state_address0 = grp_sha512_update_32_1_fu_781_md_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        hash_state_address0 = grp_sha512_update_128_fu_731_md_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_state_address0 = grp_sha512_final_fu_693_md_state_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hash_state_address0 = grp_sha512_update_32_fu_671_md_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30))) begin
        hash_state_address0 = grp_sha512_init_fu_653_md_state_address0;
    end else begin
        hash_state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        hash_state_ce0 = grp_sha512_update_32_1_fu_781_md_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        hash_state_ce0 = grp_sha512_update_128_fu_731_md_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_state_ce0 = grp_sha512_final_fu_693_md_state_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hash_state_ce0 = grp_sha512_update_32_fu_671_md_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30))) begin
        hash_state_ce0 = grp_sha512_init_fu_653_md_state_ce0;
    end else begin
        hash_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30))) begin
        hash_state_ce1 = grp_sha512_init_fu_653_md_state_ce1;
    end else begin
        hash_state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        hash_state_d0 = grp_sha512_update_32_1_fu_781_md_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        hash_state_d0 = grp_sha512_update_128_fu_731_md_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_state_d0 = grp_sha512_final_fu_693_md_state_d0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hash_state_d0 = grp_sha512_update_32_fu_671_md_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30))) begin
        hash_state_d0 = grp_sha512_init_fu_653_md_state_d0;
    end else begin
        hash_state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        hash_state_we0 = grp_sha512_update_32_1_fu_781_md_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        hash_state_we0 = grp_sha512_update_128_fu_731_md_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state9))) begin
        hash_state_we0 = grp_sha512_final_fu_693_md_state_we0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        hash_state_we0 = grp_sha512_update_32_fu_671_md_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30))) begin
        hash_state_we0 = grp_sha512_init_fu_653_md_state_we0;
    end else begin
        hash_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30))) begin
        hash_state_we1 = grp_sha512_init_fu_653_md_state_we1;
    end else begin
        hash_state_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        hram_address0 = tmp_i2_fu_1159_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        hram_address0 = grp_sha512_final_fu_693_out_r_address0;
    end else begin
        hram_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        hram_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        hram_ce0 = grp_sha512_final_fu_693_out_r_ce0;
    end else begin
        hram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        hram_ce1 = grp_sha512_final_fu_693_out_r_ce1;
    end else begin
        hram_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        hram_we0 = grp_sha512_final_fu_693_out_r_we0;
    end else begin
        hram_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        hram_we1 = grp_sha512_final_fu_693_out_r_we1;
    end else begin
        hram_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        if (((1'b1 == ap_CS_fsm_state49) & (1'd0 == exitcond1_fu_1102_p2))) begin
            mem_ARADDR = tmp_808_fu_1119_p1;
        end else if (((1'b1 == ap_CS_fsm_state17) & (exitcond3_fu_1021_p2 == 1'd0))) begin
            mem_ARADDR = tmp_80_fu_1038_p1;
        end else begin
            mem_ARADDR = 'bx;
        end
    end else begin
        mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (exitcond3_fu_1021_p2 == 1'd0) & (1'b0 == ap_reg_ioackin_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state49) & (1'd0 == exitcond1_fu_1102_p2) & (1'b0 == ap_reg_ioackin_mem_ARREADY)))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (1'd0 == exitcond2_fu_1049_p2) & ~((1'd0 == exitcond2_fu_1049_p2) & (1'b0 == mem_RVALID))) | ((1'b1 == ap_CS_fsm_state56) & (1'd0 == exitcond_fu_1130_p2) & ~((1'd0 == exitcond_fu_1130_p2) & (1'b0 == mem_RVALID))))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (exitcond3_fu_1021_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state49) & (1'd0 == exitcond1_fu_1102_p2)))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (1'd0 == exitcond2_fu_1049_p2)) | ((1'b1 == ap_CS_fsm_state56) & (1'd0 == exitcond_fu_1130_p2)))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        nonce_address0 = tmp_i_fu_1078_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        nonce_address0 = grp_sha512_final_fu_693_out_r_address0;
    end else begin
        nonce_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        nonce_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        nonce_ce0 = grp_sha512_final_fu_693_out_r_ce0;
    end else begin
        nonce_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nonce_ce1 = grp_sha512_final_fu_693_out_r_ce1;
    end else begin
        nonce_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nonce_we0 = grp_sha512_final_fu_693_out_r_we0;
    end else begin
        nonce_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        nonce_we1 = grp_sha512_final_fu_693_out_r_we1;
    end else begin
        nonce_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pk_address0 = tmp_i_i_fu_949_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        pk_address0 = grp_p_memmove_fu_766_src_address0;
    end else begin
        pk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pk_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        pk_ce0 = grp_p_memmove_fu_766_src_ce0;
    end else begin
        pk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pk_we0 = 1'b1;
    end else begin
        pk_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        sck_v_address0 = grp_crypto_sign_ed25519_16_fu_856_y_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        sck_v_address0 = grp_barrett_reduce_fu_822_r_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        sck_v_address0 = grp_crypto_sign_ed25519_13_fu_797_s_v_address0;
    end else begin
        sck_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        sck_v_ce0 = grp_crypto_sign_ed25519_16_fu_856_y_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        sck_v_ce0 = grp_barrett_reduce_fu_822_r_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        sck_v_ce0 = grp_crypto_sign_ed25519_13_fu_797_s_v_ce0;
    end else begin
        sck_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sck_v_ce1 = grp_crypto_sign_ed25519_13_fu_797_s_v_ce1;
    end else begin
        sck_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        sck_v_we0 = grp_barrett_reduce_fu_822_r_v_we0;
    end else begin
        sck_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        scs_v_address0 = tmp_i4_fu_1220_p1;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        scs_v_address0 = grp_crypto_sign_ed25519_16_fu_856_r_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        scs_v_address0 = grp_barrett_reduce_fu_822_r_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        scs_v_address0 = grp_crypto_sign_ed25519_15_fu_812_r_v_address0;
    end else begin
        scs_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        scs_v_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        scs_v_ce0 = grp_crypto_sign_ed25519_16_fu_856_r_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        scs_v_ce0 = grp_barrett_reduce_fu_822_r_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        scs_v_ce0 = grp_crypto_sign_ed25519_15_fu_812_r_v_ce0;
    end else begin
        scs_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        scs_v_ce1 = grp_crypto_sign_ed25519_16_fu_856_r_v_ce1;
    end else begin
        scs_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        scs_v_d0 = grp_crypto_sign_ed25519_16_fu_856_r_v_d0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        scs_v_d0 = grp_barrett_reduce_fu_822_r_v_d0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        scs_v_d0 = grp_crypto_sign_ed25519_15_fu_812_r_v_d0;
    end else begin
        scs_v_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        scs_v_we0 = grp_crypto_sign_ed25519_16_fu_856_r_v_we0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        scs_v_we0 = grp_barrett_reduce_fu_822_r_v_we0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        scs_v_we0 = grp_crypto_sign_ed25519_15_fu_812_r_v_we0;
    end else begin
        scs_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        scs_v_we1 = grp_crypto_sign_ed25519_16_fu_856_r_v_we1;
    end else begin
        scs_v_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        scsk_v_address0 = grp_barrett_reduce_fu_822_r_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        scsk_v_address0 = grp_crypto_sign_ed25519_15_fu_812_y_v_address0;
    end else begin
        scsk_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        scsk_v_ce0 = grp_barrett_reduce_fu_822_r_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        scsk_v_ce0 = grp_crypto_sign_ed25519_15_fu_812_y_v_ce0;
    end else begin
        scsk_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        scsk_v_we0 = grp_barrett_reduce_fu_822_r_v_we0;
    end else begin
        scsk_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        signature_address0 = tmp_i5_fu_1253_p1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        signature_address0 = sum_i_cast_fu_1236_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        signature_address0 = signature_addr_2_reg_1368;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        signature_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        signature_address0 = sum3_i_i_cast_reg_1313;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        signature_address0 = tmp_fu_915_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        signature_address0 = grp_crypto_sign_ed25519_9_fu_838_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        signature_address0 = grp_sha512_update_32_1_fu_781_in_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        signature_address0 = grp_p_memmove_fu_766_dst_address0;
    end else begin
        signature_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state42))) begin
        signature_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        signature_ce0 = grp_crypto_sign_ed25519_9_fu_838_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        signature_ce0 = grp_sha512_update_32_1_fu_781_in_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        signature_ce0 = grp_p_memmove_fu_766_dst_ce0;
    end else begin
        signature_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        signature_d0 = tmp_809_fu_1225_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        signature_d0 = tmp_863_i_fu_1095_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        signature_d0 = az_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        signature_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        signature_d0 = grp_crypto_sign_ed25519_9_fu_838_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        signature_d0 = grp_p_memmove_fu_766_dst_d0;
    end else begin
        signature_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        signature_out_ce0 = 1'b1;
    end else begin
        signature_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        signature_out_we0 = 1'b1;
    end else begin
        signature_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state42))) begin
        signature_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        signature_we0 = grp_crypto_sign_ed25519_9_fu_838_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        signature_we0 = grp_p_memmove_fu_766_dst_we0;
    end else begin
        signature_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sk_address0 = sum_i_i_cast_fu_944_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sk_address0 = grp_sha512_update_32_fu_671_in_r_address0;
    end else begin
        sk_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sk_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sk_ce0 = grp_sha512_update_32_fu_671_in_r_ce0;
    end else begin
        sk_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        t_10_address0 = tmp_i2_reg_1413;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        t_10_address0 = grp_barrett_reduce_fu_822_x_address0;
    end else begin
        t_10_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        t_10_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        t_10_ce0 = grp_barrett_reduce_fu_822_x_ce0;
    end else begin
        t_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        t_10_we0 = 1'b1;
    end else begin
        t_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) & (1'd0 == exitcond_i2_fu_1191_p2))) begin
        t_11_address0 = tmp_858_i_fu_1197_p1;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        t_11_address0 = tmp_i3_reg_1431;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        t_11_address0 = grp_barrett_reduce_fu_822_x_address0;
    end else begin
        t_11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state65) & (1'd0 == exitcond_i2_fu_1191_p2)) | (1'b1 == ap_CS_fsm_state64))) begin
        t_11_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        t_11_ce0 = grp_barrett_reduce_fu_822_x_ce0;
    end else begin
        t_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) & (1'd0 == exitcond_i2_fu_1191_p2))) begin
        t_11_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        t_11_d0 = tmp_i3_96_fu_1186_p1;
    end else begin
        t_11_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state65) & (1'd0 == exitcond_i2_fu_1191_p2)) | (1'b1 == ap_CS_fsm_state64))) begin
        t_11_we0 = 1'b1;
    end else begin
        t_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        t_address0 = tmp_i_reg_1353;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        t_address0 = grp_barrett_reduce_fu_822_x_address0;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        t_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        t_ce0 = grp_barrett_reduce_fu_822_x_ce0;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        temp_buf_address0 = tmp_803_fu_1142_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        temp_buf_address0 = tmp_802_fu_1061_p1;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        temp_buf_address0 = grp_sha512_update_128_fu_731_in_r_address0;
    end else begin
        temp_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state57))) begin
        temp_buf_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state58))) begin
        temp_buf_ce0 = grp_sha512_update_128_fu_731_in_r_ce0;
    end else begin
        temp_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state57))) begin
        temp_buf_we0 = 1'b1;
    end else begin
        temp_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tx_v_address0 = grp_crypto_sign_ed25519_18_fu_849_r_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        tx_v_address0 = grp_crypto_sign_ed25519_20_fu_844_x_v_address0;
    end else begin
        tx_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tx_v_address1 = grp_crypto_sign_ed25519_18_fu_849_r_v_address1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        tx_v_address1 = grp_crypto_sign_ed25519_20_fu_844_x_v_address1;
    end else begin
        tx_v_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tx_v_ce0 = grp_crypto_sign_ed25519_18_fu_849_r_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        tx_v_ce0 = grp_crypto_sign_ed25519_20_fu_844_x_v_ce0;
    end else begin
        tx_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tx_v_ce1 = grp_crypto_sign_ed25519_18_fu_849_r_v_ce1;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        tx_v_ce1 = grp_crypto_sign_ed25519_20_fu_844_x_v_ce1;
    end else begin
        tx_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tx_v_we0 = grp_crypto_sign_ed25519_18_fu_849_r_v_we0;
    end else begin
        tx_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tx_v_we1 = grp_crypto_sign_ed25519_18_fu_849_r_v_we1;
    end else begin
        tx_v_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ty_v_address0 = grp_crypto_sign_ed25519_18_fu_849_r_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        ty_v_address0 = grp_crypto_sign_ed25519_9_fu_838_x_v_address0;
    end else begin
        ty_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ty_v_address1 = grp_crypto_sign_ed25519_18_fu_849_r_v_address1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        ty_v_address1 = grp_crypto_sign_ed25519_9_fu_838_x_v_address1;
    end else begin
        ty_v_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ty_v_ce0 = grp_crypto_sign_ed25519_18_fu_849_r_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        ty_v_ce0 = grp_crypto_sign_ed25519_9_fu_838_x_v_ce0;
    end else begin
        ty_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ty_v_ce1 = grp_crypto_sign_ed25519_18_fu_849_r_v_ce1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        ty_v_ce1 = grp_crypto_sign_ed25519_9_fu_838_x_v_ce1;
    end else begin
        ty_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ty_v_we0 = grp_crypto_sign_ed25519_18_fu_849_r_v_we0;
    end else begin
        ty_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ty_v_we1 = grp_crypto_sign_ed25519_18_fu_849_r_v_we1;
    end else begin
        ty_v_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36))) begin
        zi_v_address0 = grp_crypto_sign_ed25519_18_fu_849_y_v_address0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        zi_v_address0 = grp_crypto_sign_ed25519_19_fu_832_r_v_address0;
    end else begin
        zi_v_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36))) begin
        zi_v_ce0 = grp_crypto_sign_ed25519_18_fu_849_y_v_ce0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        zi_v_ce0 = grp_crypto_sign_ed25519_19_fu_832_r_v_ce0;
    end else begin
        zi_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        zi_v_ce1 = grp_crypto_sign_ed25519_19_fu_832_r_v_ce1;
    end else begin
        zi_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        zi_v_we0 = grp_crypto_sign_ed25519_19_fu_832_r_v_we0;
    end else begin
        zi_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        zi_v_we1 = grp_crypto_sign_ed25519_19_fu_832_r_v_we1;
    end else begin
        zi_v_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_920_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond_i_i_fu_926_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_sha512_init_fu_653_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_sha512_update_32_fu_671_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_sha512_final_fu_693_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_i_i1_fu_998_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_sha512_init_fu_653_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_sha512_update_32_1_fu_781_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (ap_block_state17_io == 1'b0) & (exitcond3_fu_1021_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if (((1'b1 == ap_CS_fsm_state17) & (exitcond3_fu_1021_p2 == 1'd0) & (ap_block_state17_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & ~((1'd0 == exitcond2_fu_1049_p2) & (1'b0 == mem_RVALID)) & (exitcond2_fu_1049_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == exitcond2_fu_1049_p2) & ~((1'd0 == exitcond2_fu_1049_p2) & (1'b0 == mem_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (grp_sha512_update_128_fu_731_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (grp_sha512_final_fu_693_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (exitcond_i_fu_1066_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (ap_block_state30_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (grp_crypto_sign_ed25519_13_fu_797_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (grp_crypto_sign_ed25519_19_fu_832_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (grp_crypto_sign_ed25519_18_fu_849_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (ap_block_state38_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (grp_crypto_sign_ed25519_9_fu_838_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (grp_p_memmove_fu_766_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((grp_sha512_update_32_1_fu_781_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((grp_sha512_update_32_1_fu_781_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (ap_block_state49_io == 1'b0) & (exitcond1_fu_1102_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else if (((1'b1 == ap_CS_fsm_state49) & (1'd0 == exitcond1_fu_1102_p2) & (ap_block_state49_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & ~((1'd0 == exitcond_fu_1130_p2) & (1'b0 == mem_RVALID)) & (exitcond_fu_1130_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else if (((1'b1 == ap_CS_fsm_state56) & (1'd0 == exitcond_fu_1130_p2) & ~((1'd0 == exitcond_fu_1130_p2) & (1'b0 == mem_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state58 : begin
            if (((grp_sha512_update_128_fu_731_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((grp_sha512_final_fu_693_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & (exitcond_i1_fu_1147_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (grp_barrett_reduce_fu_822_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (exitcond1_i_fu_1169_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (1'd0 == exitcond_i2_fu_1191_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((grp_barrett_reduce_fu_822_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (grp_crypto_sign_ed25519_15_fu_812_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            if (((1'b1 == ap_CS_fsm_state70) & (grp_crypto_sign_ed25519_16_fu_856_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (exitcond_i3_fu_1208_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (exitcond_i4_fu_1241_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state17_io = ((exitcond3_fu_1021_p2 == 1'd0) & (1'b0 == ap_sig_ioackin_mem_ARREADY));
end

always @ (*) begin
    ap_block_state24 = ((1'd0 == exitcond2_fu_1049_p2) & (1'b0 == mem_RVALID));
end

always @ (*) begin
    ap_block_state24_ignore_call0 = ((1'd0 == exitcond2_fu_1049_p2) & (1'b0 == mem_RVALID));
end

always @ (*) begin
    ap_block_state30_on_subcall_done = ((1'b0 == grp_barrett_reduce_fu_822_ap_done) | (1'b0 == grp_sha512_init_fu_653_ap_done));
end

always @ (*) begin
    ap_block_state38_on_subcall_done = ((1'b0 == grp_crypto_sign_ed25519_18_fu_849_ap_done) | (1'b0 == grp_crypto_sign_ed25519_20_fu_844_ap_done));
end

always @ (*) begin
    ap_block_state49_io = ((1'd0 == exitcond1_fu_1102_p2) & (1'b0 == ap_sig_ioackin_mem_ARREADY));
end

always @ (*) begin
    ap_block_state56 = ((1'd0 == exitcond_fu_1130_p2) & (1'b0 == mem_RVALID));
end

always @ (*) begin
    ap_block_state56_ignore_call0 = ((1'd0 == exitcond_fu_1130_p2) & (1'b0 == mem_RVALID));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign az_addr_1_reg_1300 = 64'd31;

assign az_addr_reg_1295 = 64'd0;

assign exitcond1_fu_1102_p2 = ((i_1_reg_574 == num_blocks_read_reg_1258) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_1169_p2 = ((i_i2_reg_608 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond2_fu_1049_p2 = ((j_reg_531 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond3_fu_1021_p2 = ((i_reg_520 == num_blocks_read_reg_1258) ? 1'b1 : 1'b0);

assign exitcond_fu_1130_p2 = ((j_1_reg_585 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond_i1_fu_1147_p2 = ((i_i1_reg_597 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_1191_p2 = ((i_1_i_reg_619 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_i3_fu_1208_p2 = ((i_i3_reg_630 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_i4_fu_1241_p2 = ((i_i4_reg_642 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_i_fu_1066_p2 = ((i_i_reg_543 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_i_i1_fu_998_p2 = ((i_i_i1_reg_489 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_926_p2 = ((i_i_i_reg_477 == 6'd32) ? 1'b1 : 1'b0);

assign grp_barrett_reduce_fu_822_ap_start = ap_reg_grp_barrett_reduce_fu_822_ap_start;

assign grp_crypto_sign_ed25519_13_fu_797_ap_start = ap_reg_grp_crypto_sign_ed25519_13_fu_797_ap_start;

assign grp_crypto_sign_ed25519_15_fu_812_ap_start = ap_reg_grp_crypto_sign_ed25519_15_fu_812_ap_start;

assign grp_crypto_sign_ed25519_16_fu_856_ap_start = ap_reg_grp_crypto_sign_ed25519_16_fu_856_ap_start;

assign grp_crypto_sign_ed25519_18_fu_849_ap_start = ap_reg_grp_crypto_sign_ed25519_18_fu_849_ap_start;

assign grp_crypto_sign_ed25519_19_fu_832_ap_start = ap_reg_grp_crypto_sign_ed25519_19_fu_832_ap_start;

assign grp_crypto_sign_ed25519_20_fu_844_ap_start = ap_reg_grp_crypto_sign_ed25519_20_fu_844_ap_start;

assign grp_crypto_sign_ed25519_9_fu_838_ap_start = ap_reg_grp_crypto_sign_ed25519_9_fu_838_ap_start;

assign grp_p_memmove_fu_766_ap_start = ap_reg_grp_p_memmove_fu_766_ap_start;

assign grp_sha512_final_fu_693_ap_start = ap_reg_grp_sha512_final_fu_693_ap_start;

assign grp_sha512_init_fu_653_ap_start = ap_reg_grp_sha512_init_fu_653_ap_start;

assign grp_sha512_update_128_fu_731_ap_start = ap_reg_grp_sha512_update_128_fu_731_ap_start;

assign grp_sha512_update_32_1_fu_781_ap_start = ap_reg_grp_sha512_update_32_1_fu_781_ap_start;

assign grp_sha512_update_32_fu_671_ap_start = ap_reg_grp_sha512_update_32_fu_671_ap_start;

assign i_2_fu_1072_p2 = (i_i_reg_543 + 7'd1);

assign i_3_fu_1153_p2 = (i_i1_reg_597 + 7'd1);

assign i_73_fu_932_p2 = (i_i_i_reg_477 + 6'd1);

assign i_74_fu_1004_p2 = (i_i_i1_reg_489 + 6'd1);

assign i_75_fu_1026_p2 = (i_reg_520 + 32'd1);

assign i_76_fu_1107_p2 = (i_1_reg_574 + 32'd1);

assign i_77_fu_1175_p2 = (i_i2_reg_608 + 6'd1);

assign i_78_fu_1202_p2 = (i_1_i_reg_619 + 7'd1);

assign i_79_fu_1214_p2 = (i_i3_reg_630 + 6'd1);

assign i_80_fu_1247_p2 = (i_i4_reg_642 + 7'd1);

assign indvarinc_fu_909_p2 = (invdar_reg_466 + 6'd1);

assign j_3_fu_1055_p2 = (j_reg_531 + 8'd1);

assign j_4_fu_1136_p2 = (j_1_reg_585 + 8'd1);

assign signature_addr_2_reg_1368 = 64'd31;

assign signature_out_address0 = tmp_i5_reg_1470;

assign sum3_i_i_cast_fu_1016_p1 = sum3_i_i_fu_1010_p2;

assign sum3_i_i_fu_1010_p2 = (i_i_i1_reg_489 ^ 6'd32);

assign sum_i_cast_fu_1236_p1 = sum_i_fu_1230_p2;

assign sum_i_fu_1230_p2 = (i_i3_reg_630 ^ 6'd32);

assign sum_i_i_cast_fu_944_p1 = sum_i_i_fu_938_p2;

assign sum_i_i_fu_938_p2 = (i_i_i_reg_477 ^ 6'd32);

assign t_10_d0 = hram_q0;

assign t_d0 = nonce_q0;

assign tmp_784_fu_962_p4 = {{az_q0[7:3]}};

assign tmp_800_fu_972_p3 = {{tmp_784_fu_962_p4}, {3'd0}};

assign tmp_801_fu_985_p3 = {{1'd1}, {tmp_804_fu_981_p1}};

assign tmp_802_fu_1061_p1 = j_reg_531;

assign tmp_803_fu_1142_p1 = j_1_reg_585;

assign tmp_804_fu_981_p1 = az_q1[5:0];

assign tmp_806_fu_1032_p2 = i_reg_520 << 32'd7;

assign tmp_807_fu_1113_p2 = i_1_reg_574 << 32'd7;

assign tmp_808_fu_1119_p1 = $signed(tmp_807_fu_1113_p2);

assign tmp_809_fu_1225_p1 = scs_v_q0[7:0];

assign tmp_80_fu_1038_p1 = $signed(tmp_806_fu_1032_p2);

assign tmp_858_i_fu_1197_p1 = i_1_i_reg_619;

assign tmp_863_i_fu_1095_p2 = (signature_q0 ^ tmp_i1_91_fu_1088_p3);

assign tmp_894_cast_fu_993_p1 = tmp_801_fu_985_p3;

assign tmp_fu_915_p1 = invdar_reg_466;

assign tmp_i1_91_fu_1088_p3 = {{tmp_i1_reg_1363}, {7'd0}};

assign tmp_i2_fu_1159_p1 = i_i1_reg_597;

assign tmp_i3_96_fu_1186_p1 = az_q1;

assign tmp_i3_fu_1181_p1 = i_i2_reg_608;

assign tmp_i4_fu_1220_p1 = i_i3_reg_630;

assign tmp_i5_fu_1253_p1 = i_i4_reg_642;

assign tmp_i_fu_1078_p1 = i_i_reg_543;

assign tmp_i_i_fu_949_p1 = i_i_i_reg_477;

assign tmp_s_fu_920_p2 = ((invdar_reg_466 == 6'd63) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    sum3_i_i_cast_reg_1313[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_i_reg_1353[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_i2_reg_1413[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_i3_reg_1431[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_i5_reg_1470[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //crypto_sign
