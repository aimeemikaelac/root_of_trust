-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cmov is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_yplusx_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yplusx_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yplusx_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yplusx_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yplusx_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yplusx_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yplusx_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yplusx_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yplusx_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yplusx_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_yminusx_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
    t_xy2d_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_756 : IN STD_LOGIC_VECTOR (4 downto 0);
    u_yplusx_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    tmp_7561 : IN STD_LOGIC_VECTOR (4 downto 0);
    u_yminusx_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    tmp_7562 : IN STD_LOGIC_VECTOR (4 downto 0);
    u_xy2d_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    b : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cmov is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal base_yplusx_ce0 : STD_LOGIC;
    signal base_yplusx_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_yplusx_ce1 : STD_LOGIC;
    signal base_yplusx_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_yminusx_ce0 : STD_LOGIC;
    signal base_yminusx_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_yminusx_ce1 : STD_LOGIC;
    signal base_yminusx_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_xy2d_ce0 : STD_LOGIC;
    signal base_xy2d_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal base_xy2d_ce1 : STD_LOGIC;
    signal base_xy2d_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_read_reg_670 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_756_read_reg_675 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_yplusx_9_read_1_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_8_read_1_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_7_read_1_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_6_read_1_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_5_read_1_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_4_read_1_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_3_read_1_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_2_read_1_reg_715 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_1_read_1_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_0_read_1_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_495_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_730 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7561_read_reg_735 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fe_cmov_fu_336_ap_done : STD_LOGIC;
    signal t_yminusx_9_read_1_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_8_read_1_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_7_read_1_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_6_read_1_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_5_read_1_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_4_read_1_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_3_read_1_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_2_read_1_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_1_read_1_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_0_read_1_reg_785 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_1_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_2_reg_800 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_3_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_4_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_5_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_6_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_7_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_8_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yplusx_9_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1727_fu_500_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1727_reg_840 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7562_read_reg_845 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_xy2d_9_read_1_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_xy2d_8_read_1_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_xy2d_7_read_1_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_xy2d_6_read_1_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_xy2d_5_read_1_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_xy2d_4_read_1_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_xy2d_3_read_1_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_xy2d_2_read_1_reg_885 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_xy2d_1_read_1_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_xy2d_0_read_1_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_reg_900 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_1_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_2_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_3_reg_915 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_4_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_5_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_6_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_7_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_8_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_yminusx_9_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1728_fu_505_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1728_reg_950 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fe_cmov_fu_336_ap_start : STD_LOGIC;
    signal grp_fe_cmov_fu_336_ap_idle : STD_LOGIC;
    signal grp_fe_cmov_fu_336_ap_ready : STD_LOGIC;
    signal grp_fe_cmov_fu_336_f_0_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_f_1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_f_2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_f_3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_f_4_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_f_5_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_f_6_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_f_7_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_f_8_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_f_9_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_g_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fe_cmov_fu_336_g_ce0 : STD_LOGIC;
    signal grp_fe_cmov_fu_336_g_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_g_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fe_cmov_fu_336_g_ce1 : STD_LOGIC;
    signal grp_fe_cmov_fu_336_g_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_tmp_7562 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fe_cmov_fu_336_u_xy2d_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_cmov_fu_336_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_fe_cmov_fu_336_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_15_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_16_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_17_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_18_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_19_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_20_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_21_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_22_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_23_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_24_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_25_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_26_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_27_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_28_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_29_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component fe_cmov IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        g_ce0 : OUT STD_LOGIC;
        g_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        g_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        g_ce1 : OUT STD_LOGIC;
        g_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_7562 : IN STD_LOGIC_VECTOR (4 downto 0);
        u_xy2d_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        b : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cmov_base_yplusx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cmov_base_yminusx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cmov_base_xy2d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    base_yplusx_U : component cmov_base_yplusx
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_fe_cmov_fu_336_g_address0,
        ce0 => base_yplusx_ce0,
        q0 => base_yplusx_q0,
        address1 => grp_fe_cmov_fu_336_g_address1,
        ce1 => base_yplusx_ce1,
        q1 => base_yplusx_q1);

    base_yminusx_U : component cmov_base_yminusx
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_fe_cmov_fu_336_g_address0,
        ce0 => base_yminusx_ce0,
        q0 => base_yminusx_q0,
        address1 => grp_fe_cmov_fu_336_g_address1,
        ce1 => base_yminusx_ce1,
        q1 => base_yminusx_q1);

    base_xy2d_U : component cmov_base_xy2d
    generic map (
        DataWidth => 32,
        AddressRange => 2560,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_fe_cmov_fu_336_g_address0,
        ce0 => base_xy2d_ce0,
        q0 => base_xy2d_q0,
        address1 => grp_fe_cmov_fu_336_g_address1,
        ce1 => base_xy2d_ce1,
        q1 => base_xy2d_q1);

    grp_fe_cmov_fu_336 : component fe_cmov
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fe_cmov_fu_336_ap_start,
        ap_done => grp_fe_cmov_fu_336_ap_done,
        ap_idle => grp_fe_cmov_fu_336_ap_idle,
        ap_ready => grp_fe_cmov_fu_336_ap_ready,
        f_0_read => grp_fe_cmov_fu_336_f_0_read,
        f_1_read => grp_fe_cmov_fu_336_f_1_read,
        f_2_read => grp_fe_cmov_fu_336_f_2_read,
        f_3_read => grp_fe_cmov_fu_336_f_3_read,
        f_4_read => grp_fe_cmov_fu_336_f_4_read,
        f_5_read => grp_fe_cmov_fu_336_f_5_read,
        f_6_read => grp_fe_cmov_fu_336_f_6_read,
        f_7_read => grp_fe_cmov_fu_336_f_7_read,
        f_8_read => grp_fe_cmov_fu_336_f_8_read,
        f_9_read => grp_fe_cmov_fu_336_f_9_read,
        g_address0 => grp_fe_cmov_fu_336_g_address0,
        g_ce0 => grp_fe_cmov_fu_336_g_ce0,
        g_q0 => grp_fe_cmov_fu_336_g_q0,
        g_address1 => grp_fe_cmov_fu_336_g_address1,
        g_ce1 => grp_fe_cmov_fu_336_g_ce1,
        g_q1 => grp_fe_cmov_fu_336_g_q1,
        tmp_7562 => grp_fe_cmov_fu_336_tmp_7562,
        u_xy2d_offset => grp_fe_cmov_fu_336_u_xy2d_offset,
        b => b_read_reg_670,
        ap_return_0 => grp_fe_cmov_fu_336_ap_return_0,
        ap_return_1 => grp_fe_cmov_fu_336_ap_return_1,
        ap_return_2 => grp_fe_cmov_fu_336_ap_return_2,
        ap_return_3 => grp_fe_cmov_fu_336_ap_return_3,
        ap_return_4 => grp_fe_cmov_fu_336_ap_return_4,
        ap_return_5 => grp_fe_cmov_fu_336_ap_return_5,
        ap_return_6 => grp_fe_cmov_fu_336_ap_return_6,
        ap_return_7 => grp_fe_cmov_fu_336_ap_return_7,
        ap_return_8 => grp_fe_cmov_fu_336_ap_return_8,
        ap_return_9 => grp_fe_cmov_fu_336_ap_return_9);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_fe_cmov_fu_336_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fe_cmov_fu_336_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fe_cmov_fu_336_ap_done = ap_const_logic_1)) or ((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_grp_fe_cmov_fu_336_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fe_cmov_fu_336_ap_ready)) then 
                    ap_reg_grp_fe_cmov_fu_336_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_0_preg <= t_yplusx_reg_790;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_10_preg <= t_yminusx_reg_900;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_11_preg <= t_yminusx_1_reg_905;
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_12_preg <= t_yminusx_2_reg_910;
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_13_preg <= t_yminusx_3_reg_915;
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_14_preg <= t_yminusx_4_reg_920;
                end if; 
            end if;
        end if;
    end process;


    ap_return_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_15_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_15_preg <= t_yminusx_5_reg_925;
                end if; 
            end if;
        end if;
    end process;


    ap_return_16_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_16_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_16_preg <= t_yminusx_6_reg_930;
                end if; 
            end if;
        end if;
    end process;


    ap_return_17_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_17_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_17_preg <= t_yminusx_7_reg_935;
                end if; 
            end if;
        end if;
    end process;


    ap_return_18_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_18_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_18_preg <= t_yminusx_8_reg_940;
                end if; 
            end if;
        end if;
    end process;


    ap_return_19_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_19_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_19_preg <= t_yminusx_9_reg_945;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_1_preg <= t_yplusx_1_reg_795;
                end if; 
            end if;
        end if;
    end process;


    ap_return_20_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_20_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_20_preg <= grp_fe_cmov_fu_336_ap_return_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_21_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_21_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_21_preg <= grp_fe_cmov_fu_336_ap_return_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_22_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_22_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_22_preg <= grp_fe_cmov_fu_336_ap_return_2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_23_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_23_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_23_preg <= grp_fe_cmov_fu_336_ap_return_3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_24_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_24_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_24_preg <= grp_fe_cmov_fu_336_ap_return_4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_25_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_25_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_25_preg <= grp_fe_cmov_fu_336_ap_return_5;
                end if; 
            end if;
        end if;
    end process;


    ap_return_26_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_26_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_26_preg <= grp_fe_cmov_fu_336_ap_return_6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_27_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_27_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_27_preg <= grp_fe_cmov_fu_336_ap_return_7;
                end if; 
            end if;
        end if;
    end process;


    ap_return_28_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_28_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_28_preg <= grp_fe_cmov_fu_336_ap_return_8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_29_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_29_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_29_preg <= grp_fe_cmov_fu_336_ap_return_9;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_2_preg <= t_yplusx_2_reg_800;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_3_preg <= t_yplusx_3_reg_805;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_4_preg <= t_yplusx_4_reg_810;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_5_preg <= t_yplusx_5_reg_815;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_6_preg <= t_yplusx_6_reg_820;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_7_preg <= t_yplusx_7_reg_825;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_8_preg <= t_yplusx_8_reg_830;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv32_0;
            else
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_return_9_preg <= t_yplusx_9_reg_835;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                ap_return_0 <= t_yplusx_reg_790;
                ap_return_1 <= t_yplusx_1_reg_795;
                ap_return_10 <= t_yminusx_reg_900;
                ap_return_11 <= t_yminusx_1_reg_905;
                ap_return_12 <= t_yminusx_2_reg_910;
                ap_return_13 <= t_yminusx_3_reg_915;
                ap_return_14 <= t_yminusx_4_reg_920;
                ap_return_15 <= t_yminusx_5_reg_925;
                ap_return_16 <= t_yminusx_6_reg_930;
                ap_return_17 <= t_yminusx_7_reg_935;
                ap_return_18 <= t_yminusx_8_reg_940;
                ap_return_19 <= t_yminusx_9_reg_945;
                ap_return_2 <= t_yplusx_2_reg_800;
                ap_return_20 <= grp_fe_cmov_fu_336_ap_return_0;
                ap_return_21 <= grp_fe_cmov_fu_336_ap_return_1;
                ap_return_22 <= grp_fe_cmov_fu_336_ap_return_2;
                ap_return_23 <= grp_fe_cmov_fu_336_ap_return_3;
                ap_return_24 <= grp_fe_cmov_fu_336_ap_return_4;
                ap_return_25 <= grp_fe_cmov_fu_336_ap_return_5;
                ap_return_26 <= grp_fe_cmov_fu_336_ap_return_6;
                ap_return_27 <= grp_fe_cmov_fu_336_ap_return_7;
                ap_return_28 <= grp_fe_cmov_fu_336_ap_return_8;
                ap_return_29 <= grp_fe_cmov_fu_336_ap_return_9;
                ap_return_3 <= t_yplusx_3_reg_805;
                ap_return_4 <= t_yplusx_4_reg_810;
                ap_return_5 <= t_yplusx_5_reg_815;
                ap_return_6 <= t_yplusx_6_reg_820;
                ap_return_7 <= t_yplusx_7_reg_825;
                ap_return_8 <= t_yplusx_8_reg_830;
                ap_return_9 <= t_yplusx_9_reg_835;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                b_read_reg_670 <= b;
                t_yplusx_0_read_1_reg_725 <= t_yplusx_0_read;
                t_yplusx_1_read_1_reg_720 <= t_yplusx_1_read;
                t_yplusx_2_read_1_reg_715 <= t_yplusx_2_read;
                t_yplusx_3_read_1_reg_710 <= t_yplusx_3_read;
                t_yplusx_4_read_1_reg_705 <= t_yplusx_4_read;
                t_yplusx_5_read_1_reg_700 <= t_yplusx_5_read;
                t_yplusx_6_read_1_reg_695 <= t_yplusx_6_read;
                t_yplusx_7_read_1_reg_690 <= t_yplusx_7_read;
                t_yplusx_8_read_1_reg_685 <= t_yplusx_8_read;
                t_yplusx_9_read_1_reg_680 <= t_yplusx_9_read;
                tmp_756_read_reg_675 <= tmp_756;
                tmp_reg_730 <= tmp_fu_495_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                t_xy2d_0_read_1_reg_895 <= t_xy2d_0_read;
                t_xy2d_1_read_1_reg_890 <= t_xy2d_1_read;
                t_xy2d_2_read_1_reg_885 <= t_xy2d_2_read;
                t_xy2d_3_read_1_reg_880 <= t_xy2d_3_read;
                t_xy2d_4_read_1_reg_875 <= t_xy2d_4_read;
                t_xy2d_5_read_1_reg_870 <= t_xy2d_5_read;
                t_xy2d_6_read_1_reg_865 <= t_xy2d_6_read;
                t_xy2d_7_read_1_reg_860 <= t_xy2d_7_read;
                t_xy2d_8_read_1_reg_855 <= t_xy2d_8_read;
                t_xy2d_9_read_1_reg_850 <= t_xy2d_9_read;
                t_yminusx_1_reg_905 <= grp_fe_cmov_fu_336_ap_return_1;
                t_yminusx_2_reg_910 <= grp_fe_cmov_fu_336_ap_return_2;
                t_yminusx_3_reg_915 <= grp_fe_cmov_fu_336_ap_return_3;
                t_yminusx_4_reg_920 <= grp_fe_cmov_fu_336_ap_return_4;
                t_yminusx_5_reg_925 <= grp_fe_cmov_fu_336_ap_return_5;
                t_yminusx_6_reg_930 <= grp_fe_cmov_fu_336_ap_return_6;
                t_yminusx_7_reg_935 <= grp_fe_cmov_fu_336_ap_return_7;
                t_yminusx_8_reg_940 <= grp_fe_cmov_fu_336_ap_return_8;
                t_yminusx_9_reg_945 <= grp_fe_cmov_fu_336_ap_return_9;
                t_yminusx_reg_900 <= grp_fe_cmov_fu_336_ap_return_0;
                tmp_1728_reg_950 <= tmp_1728_fu_505_p1;
                tmp_7562_read_reg_845 <= tmp_7562;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fe_cmov_fu_336_ap_done = ap_const_logic_1))) then
                t_yminusx_0_read_1_reg_785 <= t_yminusx_0_read;
                t_yminusx_1_read_1_reg_780 <= t_yminusx_1_read;
                t_yminusx_2_read_1_reg_775 <= t_yminusx_2_read;
                t_yminusx_3_read_1_reg_770 <= t_yminusx_3_read;
                t_yminusx_4_read_1_reg_765 <= t_yminusx_4_read;
                t_yminusx_5_read_1_reg_760 <= t_yminusx_5_read;
                t_yminusx_6_read_1_reg_755 <= t_yminusx_6_read;
                t_yminusx_7_read_1_reg_750 <= t_yminusx_7_read;
                t_yminusx_8_read_1_reg_745 <= t_yminusx_8_read;
                t_yminusx_9_read_1_reg_740 <= t_yminusx_9_read;
                t_yplusx_1_reg_795 <= grp_fe_cmov_fu_336_ap_return_1;
                t_yplusx_2_reg_800 <= grp_fe_cmov_fu_336_ap_return_2;
                t_yplusx_3_reg_805 <= grp_fe_cmov_fu_336_ap_return_3;
                t_yplusx_4_reg_810 <= grp_fe_cmov_fu_336_ap_return_4;
                t_yplusx_5_reg_815 <= grp_fe_cmov_fu_336_ap_return_5;
                t_yplusx_6_reg_820 <= grp_fe_cmov_fu_336_ap_return_6;
                t_yplusx_7_reg_825 <= grp_fe_cmov_fu_336_ap_return_7;
                t_yplusx_8_reg_830 <= grp_fe_cmov_fu_336_ap_return_8;
                t_yplusx_9_reg_835 <= grp_fe_cmov_fu_336_ap_return_9;
                t_yplusx_reg_790 <= grp_fe_cmov_fu_336_ap_return_0;
                tmp_1727_reg_840 <= tmp_1727_fu_500_p1;
                tmp_7561_read_reg_735 <= tmp_7561;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_fe_cmov_fu_336_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fe_cmov_fu_336_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_fe_cmov_fu_336_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_fe_cmov_fu_336_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    base_xy2d_ce0_assign_proc : process(grp_fe_cmov_fu_336_g_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            base_xy2d_ce0 <= grp_fe_cmov_fu_336_g_ce0;
        else 
            base_xy2d_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    base_xy2d_ce1_assign_proc : process(grp_fe_cmov_fu_336_g_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            base_xy2d_ce1 <= grp_fe_cmov_fu_336_g_ce1;
        else 
            base_xy2d_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    base_yminusx_ce0_assign_proc : process(ap_CS_fsm_state3, grp_fe_cmov_fu_336_g_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            base_yminusx_ce0 <= grp_fe_cmov_fu_336_g_ce0;
        else 
            base_yminusx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    base_yminusx_ce1_assign_proc : process(ap_CS_fsm_state3, grp_fe_cmov_fu_336_g_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            base_yminusx_ce1 <= grp_fe_cmov_fu_336_g_ce1;
        else 
            base_yminusx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    base_yplusx_ce0_assign_proc : process(ap_CS_fsm_state2, grp_fe_cmov_fu_336_g_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            base_yplusx_ce0 <= grp_fe_cmov_fu_336_g_ce0;
        else 
            base_yplusx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    base_yplusx_ce1_assign_proc : process(ap_CS_fsm_state2, grp_fe_cmov_fu_336_g_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            base_yplusx_ce1 <= grp_fe_cmov_fu_336_g_ce1;
        else 
            base_yplusx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fe_cmov_fu_336_ap_start <= ap_reg_grp_fe_cmov_fu_336_ap_start;

    grp_fe_cmov_fu_336_f_0_read_assign_proc : process(t_yplusx_0_read_1_reg_725, ap_CS_fsm_state2, t_yminusx_0_read_1_reg_785, ap_CS_fsm_state3, t_xy2d_0_read_1_reg_895, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_0_read <= t_xy2d_0_read_1_reg_895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_0_read <= t_yminusx_0_read_1_reg_785;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_0_read <= t_yplusx_0_read_1_reg_725;
        else 
            grp_fe_cmov_fu_336_f_0_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_f_1_read_assign_proc : process(t_yplusx_1_read_1_reg_720, ap_CS_fsm_state2, t_yminusx_1_read_1_reg_780, ap_CS_fsm_state3, t_xy2d_1_read_1_reg_890, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_1_read <= t_xy2d_1_read_1_reg_890;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_1_read <= t_yminusx_1_read_1_reg_780;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_1_read <= t_yplusx_1_read_1_reg_720;
        else 
            grp_fe_cmov_fu_336_f_1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_f_2_read_assign_proc : process(t_yplusx_2_read_1_reg_715, ap_CS_fsm_state2, t_yminusx_2_read_1_reg_775, ap_CS_fsm_state3, t_xy2d_2_read_1_reg_885, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_2_read <= t_xy2d_2_read_1_reg_885;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_2_read <= t_yminusx_2_read_1_reg_775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_2_read <= t_yplusx_2_read_1_reg_715;
        else 
            grp_fe_cmov_fu_336_f_2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_f_3_read_assign_proc : process(t_yplusx_3_read_1_reg_710, ap_CS_fsm_state2, t_yminusx_3_read_1_reg_770, ap_CS_fsm_state3, t_xy2d_3_read_1_reg_880, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_3_read <= t_xy2d_3_read_1_reg_880;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_3_read <= t_yminusx_3_read_1_reg_770;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_3_read <= t_yplusx_3_read_1_reg_710;
        else 
            grp_fe_cmov_fu_336_f_3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_f_4_read_assign_proc : process(t_yplusx_4_read_1_reg_705, ap_CS_fsm_state2, t_yminusx_4_read_1_reg_765, ap_CS_fsm_state3, t_xy2d_4_read_1_reg_875, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_4_read <= t_xy2d_4_read_1_reg_875;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_4_read <= t_yminusx_4_read_1_reg_765;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_4_read <= t_yplusx_4_read_1_reg_705;
        else 
            grp_fe_cmov_fu_336_f_4_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_f_5_read_assign_proc : process(t_yplusx_5_read_1_reg_700, ap_CS_fsm_state2, t_yminusx_5_read_1_reg_760, ap_CS_fsm_state3, t_xy2d_5_read_1_reg_870, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_5_read <= t_xy2d_5_read_1_reg_870;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_5_read <= t_yminusx_5_read_1_reg_760;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_5_read <= t_yplusx_5_read_1_reg_700;
        else 
            grp_fe_cmov_fu_336_f_5_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_f_6_read_assign_proc : process(t_yplusx_6_read_1_reg_695, ap_CS_fsm_state2, t_yminusx_6_read_1_reg_755, ap_CS_fsm_state3, t_xy2d_6_read_1_reg_865, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_6_read <= t_xy2d_6_read_1_reg_865;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_6_read <= t_yminusx_6_read_1_reg_755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_6_read <= t_yplusx_6_read_1_reg_695;
        else 
            grp_fe_cmov_fu_336_f_6_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_f_7_read_assign_proc : process(t_yplusx_7_read_1_reg_690, ap_CS_fsm_state2, t_yminusx_7_read_1_reg_750, ap_CS_fsm_state3, t_xy2d_7_read_1_reg_860, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_7_read <= t_xy2d_7_read_1_reg_860;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_7_read <= t_yminusx_7_read_1_reg_750;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_7_read <= t_yplusx_7_read_1_reg_690;
        else 
            grp_fe_cmov_fu_336_f_7_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_f_8_read_assign_proc : process(t_yplusx_8_read_1_reg_685, ap_CS_fsm_state2, t_yminusx_8_read_1_reg_745, ap_CS_fsm_state3, t_xy2d_8_read_1_reg_855, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_8_read <= t_xy2d_8_read_1_reg_855;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_8_read <= t_yminusx_8_read_1_reg_745;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_8_read <= t_yplusx_8_read_1_reg_685;
        else 
            grp_fe_cmov_fu_336_f_8_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_f_9_read_assign_proc : process(t_yplusx_9_read_1_reg_680, ap_CS_fsm_state2, t_yminusx_9_read_1_reg_740, ap_CS_fsm_state3, t_xy2d_9_read_1_reg_850, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_f_9_read <= t_xy2d_9_read_1_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_f_9_read <= t_yminusx_9_read_1_reg_740;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_f_9_read <= t_yplusx_9_read_1_reg_680;
        else 
            grp_fe_cmov_fu_336_f_9_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_g_q0_assign_proc : process(base_yplusx_q0, base_yminusx_q0, base_xy2d_q0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_g_q0 <= base_xy2d_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_g_q0 <= base_yminusx_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_g_q0 <= base_yplusx_q0;
        else 
            grp_fe_cmov_fu_336_g_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_g_q1_assign_proc : process(base_yplusx_q1, base_yminusx_q1, base_xy2d_q1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_g_q1 <= base_xy2d_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_g_q1 <= base_yminusx_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_g_q1 <= base_yplusx_q1;
        else 
            grp_fe_cmov_fu_336_g_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_tmp_7562_assign_proc : process(tmp_756_read_reg_675, tmp_7561_read_reg_735, ap_CS_fsm_state2, tmp_7562_read_reg_845, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_tmp_7562 <= tmp_7562_read_reg_845;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_tmp_7562 <= tmp_7561_read_reg_735;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_tmp_7562 <= tmp_756_read_reg_675;
        else 
            grp_fe_cmov_fu_336_tmp_7562 <= "XXXXX";
        end if; 
    end process;


    grp_fe_cmov_fu_336_u_xy2d_offset_assign_proc : process(tmp_reg_730, ap_CS_fsm_state2, tmp_1727_reg_840, ap_CS_fsm_state3, tmp_1728_reg_950, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fe_cmov_fu_336_u_xy2d_offset <= tmp_1728_reg_950;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fe_cmov_fu_336_u_xy2d_offset <= tmp_1727_reg_840;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fe_cmov_fu_336_u_xy2d_offset <= tmp_reg_730;
        else 
            grp_fe_cmov_fu_336_u_xy2d_offset <= "XXX";
        end if; 
    end process;

    tmp_1727_fu_500_p1 <= u_yminusx_offset(3 - 1 downto 0);
    tmp_1728_fu_505_p1 <= u_xy2d_offset(3 - 1 downto 0);
    tmp_fu_495_p1 <= u_yplusx_offset(3 - 1 downto 0);
end behav;
