// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "secure_enclave_aes_cipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic secure_enclave_aes_cipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic secure_enclave_aes_cipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st1_fsm_0 = "1";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st2_fsm_1 = "10";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st3_fsm_2 = "100";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st4_fsm_3 = "1000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st5_fsm_4 = "10000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st6_fsm_5 = "100000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st13_fsm_12 = "1000000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st14_fsm_13 = "10000000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st15_fsm_14 = "100000000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st16_fsm_15 = "1000000000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st17_fsm_16 = "10000000000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st18_fsm_17 = "100000000000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st19_fsm_18 = "1000000000000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st20_fsm_19 = "10000000000000000000";
const sc_lv<21> secure_enclave_aes_cipher::ap_ST_st21_fsm_20 = "100000000000000000000";
const sc_lv<32> secure_enclave_aes_cipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> secure_enclave_aes_cipher::ap_const_lv1_1 = "1";
const sc_lv<128> secure_enclave_aes_cipher::ap_const_lv128_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const int secure_enclave_aes_cipher::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> secure_enclave_aes_cipher::ap_const_lv32_13 = "10011";
const sc_lv<32> secure_enclave_aes_cipher::ap_const_lv32_14 = "10100";

secure_enclave_aes_cipher::secure_enclave_aes_cipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    secure_enclave_aes_cipher_AXILiteS_s_axi_U = new secure_enclave_aes_cipher_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("secure_enclave_aes_cipher_AXILiteS_s_axi_U");
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->ACLK(ap_clk);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->data_in_V(data_in_V);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->data_out_V(r_V_reg_79);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->data_out_V_ap_vld(data_out_V_ap_vld);
    secure_enclave_aes_cipher_AXILiteS_s_axi_U->counter_V(counter_V);
    grp_secure_enclave_aes_cipher_aestest_fu_59 = new secure_enclave_aes_cipher_aestest("grp_secure_enclave_aes_cipher_aestest_fu_59");
    grp_secure_enclave_aes_cipher_aestest_fu_59->ap_clk(ap_clk);
    grp_secure_enclave_aes_cipher_aestest_fu_59->ap_rst(ap_rst_n_inv);
    grp_secure_enclave_aes_cipher_aestest_fu_59->ap_start(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start);
    grp_secure_enclave_aes_cipher_aestest_fu_59->ap_done(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_done);
    grp_secure_enclave_aes_cipher_aestest_fu_59->ap_idle(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_idle);
    grp_secure_enclave_aes_cipher_aestest_fu_59->ap_ready(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_ready);
    grp_secure_enclave_aes_cipher_aestest_fu_59->inptext_V_read(counter_V);
    grp_secure_enclave_aes_cipher_aestest_fu_59->key_V_read(key_V_in_sig);
    grp_secure_enclave_aes_cipher_aestest_fu_59->ap_return(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st21_fsm_20 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st21_fsm_20 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_102);
    sensitive << ( ap_start );
    sensitive << ( key_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_sig_112);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_1705);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_38 );

    SC_METHOD(thread_ap_sig_cseq_ST_st20_fsm_19);
    sensitive << ( ap_sig_112 );

    SC_METHOD(thread_ap_sig_cseq_ST_st21_fsm_20);
    sensitive << ( ap_sig_1705 );

    SC_METHOD(thread_data_out_V_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st21_fsm_20 );

    SC_METHOD(thread_grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_102 );

    SC_METHOD(thread_key_V_ap_vld_in_sig);
    sensitive << ( key_V_ap_vld );
    sensitive << ( key_V_ap_vld_preg );

    SC_METHOD(thread_key_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( key_V_ap_vld );

    SC_METHOD(thread_key_V_in_sig);
    sensitive << ( key_V );
    sensitive << ( key_V_preg );
    sensitive << ( key_V_ap_vld );

    SC_METHOD(thread_r_V_fu_69_p2);
    sensitive << ( data_in_V_read_reg_74 );
    sensitive << ( grp_secure_enclave_aes_cipher_aestest_fu_59_ap_return );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_102 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000001";
    key_V_preg = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    key_V_ap_vld_preg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "secure_enclave_aes_cipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, key_V, "(port)key_V");
    sc_trace(mVcdFile, key_V_ap_vld, "(port)key_V_ap_vld");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_38, "ap_sig_38");
    sc_trace(mVcdFile, key_V_in_sig, "key_V_in_sig");
    sc_trace(mVcdFile, key_V_preg, "key_V_preg");
    sc_trace(mVcdFile, key_V_ap_vld_in_sig, "key_V_ap_vld_in_sig");
    sc_trace(mVcdFile, key_V_ap_vld_preg, "key_V_ap_vld_preg");
    sc_trace(mVcdFile, data_in_V, "data_in_V");
    sc_trace(mVcdFile, data_out_V_ap_vld, "data_out_V_ap_vld");
    sc_trace(mVcdFile, counter_V, "counter_V");
    sc_trace(mVcdFile, key_V_blk_n, "key_V_blk_n");
    sc_trace(mVcdFile, data_in_V_read_reg_74, "data_in_V_read_reg_74");
    sc_trace(mVcdFile, ap_sig_102, "ap_sig_102");
    sc_trace(mVcdFile, r_V_fu_69_p2, "r_V_fu_69_p2");
    sc_trace(mVcdFile, r_V_reg_79, "r_V_reg_79");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st20_fsm_19, "ap_sig_cseq_ST_st20_fsm_19");
    sc_trace(mVcdFile, ap_sig_112, "ap_sig_112");
    sc_trace(mVcdFile, grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start, "grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start");
    sc_trace(mVcdFile, grp_secure_enclave_aes_cipher_aestest_fu_59_ap_done, "grp_secure_enclave_aes_cipher_aestest_fu_59_ap_done");
    sc_trace(mVcdFile, grp_secure_enclave_aes_cipher_aestest_fu_59_ap_idle, "grp_secure_enclave_aes_cipher_aestest_fu_59_ap_idle");
    sc_trace(mVcdFile, grp_secure_enclave_aes_cipher_aestest_fu_59_ap_ready, "grp_secure_enclave_aes_cipher_aestest_fu_59_ap_ready");
    sc_trace(mVcdFile, grp_secure_enclave_aes_cipher_aestest_fu_59_ap_return, "grp_secure_enclave_aes_cipher_aestest_fu_59_ap_return");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st21_fsm_20, "ap_sig_cseq_ST_st21_fsm_20");
    sc_trace(mVcdFile, ap_sig_1705, "ap_sig_1705");
#endif

    }
    mHdltvinHandle.open("secure_enclave_aes_cipher.hdltvin.dat");
    mHdltvoutHandle.open("secure_enclave_aes_cipher.hdltvout.dat");
}

secure_enclave_aes_cipher::~secure_enclave_aes_cipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete secure_enclave_aes_cipher_AXILiteS_s_axi_U;
    delete grp_secure_enclave_aes_cipher_aestest_fu_59;
}

void secure_enclave_aes_cipher::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void secure_enclave_aes_cipher::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        key_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_20.read())) {
            key_V_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, key_V_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())))) {
            key_V_ap_vld_preg = key_V_ap_vld.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        key_V_preg = ap_const_lv128_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, key_V_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())))) {
            key_V_preg = key_V.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !ap_sig_102.read())) {
        data_in_V_read_reg_74 = data_in_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st20_fsm_19.read())) {
        r_V_reg_79 = r_V_fu_69_p2.read();
    }
}

void secure_enclave_aes_cipher::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_20.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void secure_enclave_aes_cipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void secure_enclave_aes_cipher::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_20.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void secure_enclave_aes_cipher::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void secure_enclave_aes_cipher::thread_ap_sig_102() {
    ap_sig_102 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(key_V_ap_vld_in_sig.read(), ap_const_logic_0));
}

void secure_enclave_aes_cipher::thread_ap_sig_112() {
    ap_sig_112 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(19, 19));
}

void secure_enclave_aes_cipher::thread_ap_sig_1705() {
    ap_sig_1705 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(20, 20));
}

void secure_enclave_aes_cipher::thread_ap_sig_38() {
    ap_sig_38 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void secure_enclave_aes_cipher::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_38.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void secure_enclave_aes_cipher::thread_ap_sig_cseq_ST_st20_fsm_19() {
    if (ap_sig_112.read()) {
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_0;
    }
}

void secure_enclave_aes_cipher::thread_ap_sig_cseq_ST_st21_fsm_20() {
    if (ap_sig_1705.read()) {
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    }
}

void secure_enclave_aes_cipher::thread_data_out_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st21_fsm_20.read())) {
        data_out_V_ap_vld = ap_const_logic_1;
    } else {
        data_out_V_ap_vld = ap_const_logic_0;
    }
}

void secure_enclave_aes_cipher::thread_grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         !ap_sig_102.read())) {
        grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start = ap_const_logic_1;
    } else {
        grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start = ap_const_logic_0;
    }
}

void secure_enclave_aes_cipher::thread_key_V_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, key_V_ap_vld.read())) {
        key_V_ap_vld_in_sig = key_V_ap_vld.read();
    } else {
        key_V_ap_vld_in_sig = key_V_ap_vld_preg.read();
    }
}

void secure_enclave_aes_cipher::thread_key_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        key_V_blk_n = key_V_ap_vld.read();
    } else {
        key_V_blk_n = ap_const_logic_1;
    }
}

void secure_enclave_aes_cipher::thread_key_V_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, key_V_ap_vld.read())) {
        key_V_in_sig = key_V.read();
    } else {
        key_V_in_sig = key_V_preg.read();
    }
}

void secure_enclave_aes_cipher::thread_r_V_fu_69_p2() {
    r_V_fu_69_p2 = (grp_secure_enclave_aes_cipher_aestest_fu_59_ap_return.read() ^ data_in_V_read_reg_74.read());
}

void secure_enclave_aes_cipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_102.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

void secure_enclave_aes_cipher::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_V\" :  \"" << key_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_V_ap_vld\" :  \"" << key_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

