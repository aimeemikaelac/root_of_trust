// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sha256_mem_HH_
#define _sha256_mem_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "update.h"
#include "final.h"
#include "sha256_mem_data_bdEe.h"
#include "sha256_mem_ciphereOg.h"
#include "sha256_mem_cipherfYi.h"
#include "sha256_mem_AXILiteS_s_axi.h"
#include "sha256_mem_mem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_MEM_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_MEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_MEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_MEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct sha256_mem : public sc_module {
    // Port declarations 77
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_mem_AWVALID;
    sc_in< sc_logic > m_axi_mem_AWREADY;
    sc_out< sc_uint<C_M_AXI_MEM_ADDR_WIDTH> > m_axi_mem_AWADDR;
    sc_out< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_AWID;
    sc_out< sc_lv<8> > m_axi_mem_AWLEN;
    sc_out< sc_lv<3> > m_axi_mem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_mem_AWBURST;
    sc_out< sc_lv<2> > m_axi_mem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_mem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_mem_AWPROT;
    sc_out< sc_lv<4> > m_axi_mem_AWQOS;
    sc_out< sc_lv<4> > m_axi_mem_AWREGION;
    sc_out< sc_uint<C_M_AXI_MEM_AWUSER_WIDTH> > m_axi_mem_AWUSER;
    sc_out< sc_logic > m_axi_mem_WVALID;
    sc_in< sc_logic > m_axi_mem_WREADY;
    sc_out< sc_uint<C_M_AXI_MEM_DATA_WIDTH> > m_axi_mem_WDATA;
    sc_out< sc_uint<C_M_AXI_MEM_DATA_WIDTH/8> > m_axi_mem_WSTRB;
    sc_out< sc_logic > m_axi_mem_WLAST;
    sc_out< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_WID;
    sc_out< sc_uint<C_M_AXI_MEM_WUSER_WIDTH> > m_axi_mem_WUSER;
    sc_out< sc_logic > m_axi_mem_ARVALID;
    sc_in< sc_logic > m_axi_mem_ARREADY;
    sc_out< sc_uint<C_M_AXI_MEM_ADDR_WIDTH> > m_axi_mem_ARADDR;
    sc_out< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_ARID;
    sc_out< sc_lv<8> > m_axi_mem_ARLEN;
    sc_out< sc_lv<3> > m_axi_mem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_mem_ARBURST;
    sc_out< sc_lv<2> > m_axi_mem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_mem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_mem_ARPROT;
    sc_out< sc_lv<4> > m_axi_mem_ARQOS;
    sc_out< sc_lv<4> > m_axi_mem_ARREGION;
    sc_out< sc_uint<C_M_AXI_MEM_ARUSER_WIDTH> > m_axi_mem_ARUSER;
    sc_in< sc_logic > m_axi_mem_RVALID;
    sc_out< sc_logic > m_axi_mem_RREADY;
    sc_in< sc_uint<C_M_AXI_MEM_DATA_WIDTH> > m_axi_mem_RDATA;
    sc_in< sc_logic > m_axi_mem_RLAST;
    sc_in< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_RID;
    sc_in< sc_uint<C_M_AXI_MEM_RUSER_WIDTH> > m_axi_mem_RUSER;
    sc_in< sc_lv<2> > m_axi_mem_RRESP;
    sc_in< sc_logic > m_axi_mem_BVALID;
    sc_out< sc_logic > m_axi_mem_BREADY;
    sc_in< sc_lv<2> > m_axi_mem_BRESP;
    sc_in< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_BID;
    sc_in< sc_uint<C_M_AXI_MEM_BUSER_WIDTH> > m_axi_mem_BUSER;
    sc_out< sc_lv<5> > digest_out_address0;
    sc_out< sc_logic > digest_out_ce0;
    sc_out< sc_logic > digest_out_we0;
    sc_out< sc_lv<8> > digest_out_d0;
    sc_out< sc_lv<5> > digest_out_address1;
    sc_out< sc_logic > digest_out_ce1;
    sc_out< sc_logic > digest_out_we1;
    sc_out< sc_lv<8> > digest_out_d1;
    sc_out< sc_logic > digest_valid;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<8> > ap_var_for_const8;


    // Module declarations
    sha256_mem(sc_module_name name);
    SC_HAS_PROCESS(sha256_mem);

    ~sha256_mem();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sha256_mem_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* sha256_mem_AXILiteS_s_axi_U;
    sha256_mem_mem_m_axi<8,32,5,16,16,16,16,C_M_AXI_MEM_ID_WIDTH,C_M_AXI_MEM_ADDR_WIDTH,C_M_AXI_MEM_DATA_WIDTH,C_M_AXI_MEM_AWUSER_WIDTH,C_M_AXI_MEM_ARUSER_WIDTH,C_M_AXI_MEM_WUSER_WIDTH,C_M_AXI_MEM_RUSER_WIDTH,C_M_AXI_MEM_BUSER_WIDTH,C_M_AXI_MEM_TARGET_ADDR,C_M_AXI_MEM_USER_VALUE,C_M_AXI_MEM_PROT_VALUE,C_M_AXI_MEM_CACHE_VALUE>* sha256_mem_mem_m_axi_U;
    sha256_mem_data_bdEe* data_buffer_U;
    sha256_mem_ciphereOg* cipher_m_block_U;
    sha256_mem_cipherfYi* cipher_m_h_U;
    update* grp_update_fu_311;
    final* grp_final_fu_324;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<17> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > message_addr;
    sc_signal< sc_lv<32> > message_addr_preg;
    sc_signal< sc_logic > message_addr_ap_vld;
    sc_signal< sc_lv<32> > message_addr_in_sig;
    sc_signal< sc_logic > message_addr_ap_vld_preg;
    sc_signal< sc_logic > message_addr_ap_vld_in_sig;
    sc_signal< sc_lv<32> > num_blocks;
    sc_signal< sc_lv<32> > num_blocks_preg;
    sc_signal< sc_logic > num_blocks_ap_vld;
    sc_signal< sc_lv<32> > num_blocks_in_sig;
    sc_signal< sc_logic > num_blocks_ap_vld_preg;
    sc_signal< sc_logic > num_blocks_ap_vld_in_sig;
    sc_signal< sc_logic > mem_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > mem_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > message_addr_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > num_blocks_blk_n;
    sc_signal< sc_logic > mem_AWREADY;
    sc_signal< sc_logic > mem_WREADY;
    sc_signal< sc_logic > mem_ARVALID;
    sc_signal< sc_logic > mem_ARREADY;
    sc_signal< sc_logic > mem_RVALID;
    sc_signal< sc_logic > mem_RREADY;
    sc_signal< sc_lv<8> > mem_RDATA;
    sc_signal< sc_logic > mem_RLAST;
    sc_signal< sc_lv<1> > mem_RID;
    sc_signal< sc_lv<1> > mem_RUSER;
    sc_signal< sc_lv<2> > mem_RRESP;
    sc_signal< sc_logic > mem_BVALID;
    sc_signal< sc_lv<2> > mem_BRESP;
    sc_signal< sc_lv<1> > mem_BID;
    sc_signal< sc_lv<1> > mem_BUSER;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<32> > block_counter_1_fu_343_p2;
    sc_signal< sc_lv<32> > block_counter_1_reg_420;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > data_index_2_fu_349_p2;
    sc_signal< sc_lv<32> > data_index_2_reg_425;
    sc_signal< sc_lv<1> > exitcond2_fu_338_p2;
    sc_signal< sc_lv<7> > buffer_index_1_fu_361_p2;
    sc_signal< sc_lv<7> > buffer_index_1_reg_433;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > mem_addr_reg_438;
    sc_signal< sc_lv<1> > exitcond_fu_355_p2;
    sc_signal< sc_lv<32> > tmp_3_fu_382_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_444;
    sc_signal< sc_lv<32> > indvars_iv_next_fu_388_p2;
    sc_signal< sc_lv<32> > indvars_iv_next_reg_449;
    sc_signal< sc_lv<8> > mem_addr_read_reg_454;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > grp_update_fu_311_ap_done;
    sc_signal< sc_lv<6> > data_buffer_address0;
    sc_signal< sc_logic > data_buffer_ce0;
    sc_signal< sc_logic > data_buffer_we0;
    sc_signal< sc_lv<8> > data_buffer_q0;
    sc_signal< sc_logic > data_buffer_ce1;
    sc_signal< sc_lv<8> > data_buffer_q1;
    sc_signal< sc_lv<7> > cipher_m_block_address0;
    sc_signal< sc_logic > cipher_m_block_ce0;
    sc_signal< sc_logic > cipher_m_block_we0;
    sc_signal< sc_lv<8> > cipher_m_block_d0;
    sc_signal< sc_lv<8> > cipher_m_block_q0;
    sc_signal< sc_lv<7> > cipher_m_block_address1;
    sc_signal< sc_logic > cipher_m_block_ce1;
    sc_signal< sc_lv<8> > cipher_m_block_q1;
    sc_signal< sc_lv<3> > cipher_m_h_address0;
    sc_signal< sc_logic > cipher_m_h_ce0;
    sc_signal< sc_logic > cipher_m_h_we0;
    sc_signal< sc_lv<32> > cipher_m_h_d0;
    sc_signal< sc_lv<32> > cipher_m_h_q0;
    sc_signal< sc_lv<3> > cipher_m_h_address1;
    sc_signal< sc_logic > cipher_m_h_ce1;
    sc_signal< sc_logic > cipher_m_h_we1;
    sc_signal< sc_lv<32> > cipher_m_h_d1;
    sc_signal< sc_logic > grp_update_fu_311_ap_start;
    sc_signal< sc_logic > grp_update_fu_311_ap_idle;
    sc_signal< sc_logic > grp_update_fu_311_ap_ready;
    sc_signal< sc_lv<7> > grp_update_fu_311_SHA256_m_block_address0;
    sc_signal< sc_logic > grp_update_fu_311_SHA256_m_block_ce0;
    sc_signal< sc_logic > grp_update_fu_311_SHA256_m_block_we0;
    sc_signal< sc_lv<8> > grp_update_fu_311_SHA256_m_block_d0;
    sc_signal< sc_lv<7> > grp_update_fu_311_SHA256_m_block_address1;
    sc_signal< sc_logic > grp_update_fu_311_SHA256_m_block_ce1;
    sc_signal< sc_lv<3> > grp_update_fu_311_SHA256_m_h_address0;
    sc_signal< sc_logic > grp_update_fu_311_SHA256_m_h_ce0;
    sc_signal< sc_logic > grp_update_fu_311_SHA256_m_h_we0;
    sc_signal< sc_lv<32> > grp_update_fu_311_SHA256_m_h_d0;
    sc_signal< sc_lv<6> > grp_update_fu_311_message_address0;
    sc_signal< sc_logic > grp_update_fu_311_message_ce0;
    sc_signal< sc_lv<6> > grp_update_fu_311_message_address1;
    sc_signal< sc_logic > grp_update_fu_311_message_ce1;
    sc_signal< sc_lv<32> > grp_update_fu_311_ap_return_0;
    sc_signal< sc_lv<32> > grp_update_fu_311_ap_return_1;
    sc_signal< sc_logic > grp_final_fu_324_ap_start;
    sc_signal< sc_logic > grp_final_fu_324_ap_done;
    sc_signal< sc_logic > grp_final_fu_324_ap_idle;
    sc_signal< sc_logic > grp_final_fu_324_ap_ready;
    sc_signal< sc_lv<7> > grp_final_fu_324_SHA256_m_block_address0;
    sc_signal< sc_logic > grp_final_fu_324_SHA256_m_block_ce0;
    sc_signal< sc_logic > grp_final_fu_324_SHA256_m_block_we0;
    sc_signal< sc_lv<8> > grp_final_fu_324_SHA256_m_block_d0;
    sc_signal< sc_lv<7> > grp_final_fu_324_SHA256_m_block_address1;
    sc_signal< sc_logic > grp_final_fu_324_SHA256_m_block_ce1;
    sc_signal< sc_lv<3> > grp_final_fu_324_SHA256_m_h_address0;
    sc_signal< sc_logic > grp_final_fu_324_SHA256_m_h_ce0;
    sc_signal< sc_logic > grp_final_fu_324_SHA256_m_h_we0;
    sc_signal< sc_lv<32> > grp_final_fu_324_SHA256_m_h_d0;
    sc_signal< sc_lv<5> > grp_final_fu_324_digest_address0;
    sc_signal< sc_logic > grp_final_fu_324_digest_ce0;
    sc_signal< sc_logic > grp_final_fu_324_digest_we0;
    sc_signal< sc_lv<8> > grp_final_fu_324_digest_d0;
    sc_signal< sc_lv<5> > grp_final_fu_324_digest_address1;
    sc_signal< sc_logic > grp_final_fu_324_digest_ce1;
    sc_signal< sc_logic > grp_final_fu_324_digest_we1;
    sc_signal< sc_lv<8> > grp_final_fu_324_digest_d1;
    sc_signal< sc_lv<32> > cipher_m_len_reg_230;
    sc_signal< sc_lv<32> > cipher_m_tot_len_reg_242;
    sc_signal< sc_lv<32> > indvars_iv_reg_254;
    sc_signal< sc_lv<32> > block_counter_reg_266;
    sc_signal< sc_lv<32> > data_index_reg_277;
    sc_signal< sc_lv<32> > data_index_1_reg_289;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<7> > buffer_index_reg_299;
    sc_signal< sc_logic > ap_reg_grp_update_fu_311_ap_start;
    sc_signal< sc_logic > ap_reg_grp_final_fu_324_ap_start;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_2_fu_394_p1;
    sc_signal< sc_lv<64> > tmp_1_fu_372_p1;
    sc_signal< sc_logic > ap_reg_ioackin_mem_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_mem_ARREADY;
    sc_signal< sc_lv<32> > tmp_fu_367_p2;
    sc_signal< sc_lv<17> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<17> ap_ST_fsm_state1;
    static const sc_lv<17> ap_ST_fsm_state2;
    static const sc_lv<17> ap_ST_fsm_state3;
    static const sc_lv<17> ap_ST_fsm_state4;
    static const sc_lv<17> ap_ST_fsm_state5;
    static const sc_lv<17> ap_ST_fsm_state6;
    static const sc_lv<17> ap_ST_fsm_state7;
    static const sc_lv<17> ap_ST_fsm_state8;
    static const sc_lv<17> ap_ST_fsm_state9;
    static const sc_lv<17> ap_ST_fsm_state10;
    static const sc_lv<17> ap_ST_fsm_state11;
    static const sc_lv<17> ap_ST_fsm_state12;
    static const sc_lv<17> ap_ST_fsm_state13;
    static const sc_lv<17> ap_ST_fsm_state14;
    static const sc_lv<17> ap_ST_fsm_state15;
    static const sc_lv<17> ap_ST_fsm_state16;
    static const sc_lv<17> ap_ST_fsm_state17;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_3;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_MEM_TARGET_ADDR;
    static const int C_M_AXI_MEM_USER_VALUE;
    static const int C_M_AXI_MEM_PROT_VALUE;
    static const int C_M_AXI_MEM_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_6A09E667;
    static const sc_lv<32> ap_const_lv32_BB67AE85;
    static const sc_lv<32> ap_const_lv32_3C6EF372;
    static const sc_lv<32> ap_const_lv32_A54FF53A;
    static const sc_lv<32> ap_const_lv32_510E527F;
    static const sc_lv<32> ap_const_lv32_9B05688C;
    static const sc_lv<32> ap_const_lv32_1F83D9AB;
    static const sc_lv<32> ap_const_lv32_5BE0CD19;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_mem_ARREADY();
    void thread_block_counter_1_fu_343_p2();
    void thread_buffer_index_1_fu_361_p2();
    void thread_cipher_m_block_address0();
    void thread_cipher_m_block_address1();
    void thread_cipher_m_block_ce0();
    void thread_cipher_m_block_ce1();
    void thread_cipher_m_block_d0();
    void thread_cipher_m_block_we0();
    void thread_cipher_m_h_address0();
    void thread_cipher_m_h_address1();
    void thread_cipher_m_h_ce0();
    void thread_cipher_m_h_ce1();
    void thread_cipher_m_h_d0();
    void thread_cipher_m_h_d1();
    void thread_cipher_m_h_we0();
    void thread_cipher_m_h_we1();
    void thread_data_buffer_address0();
    void thread_data_buffer_ce0();
    void thread_data_buffer_ce1();
    void thread_data_buffer_we0();
    void thread_data_index_2_fu_349_p2();
    void thread_digest_out_address0();
    void thread_digest_out_address1();
    void thread_digest_out_ce0();
    void thread_digest_out_ce1();
    void thread_digest_out_d0();
    void thread_digest_out_d1();
    void thread_digest_out_we0();
    void thread_digest_out_we1();
    void thread_digest_valid();
    void thread_exitcond2_fu_338_p2();
    void thread_exitcond_fu_355_p2();
    void thread_grp_final_fu_324_ap_start();
    void thread_grp_update_fu_311_ap_start();
    void thread_indvars_iv_next_fu_388_p2();
    void thread_mem_ARVALID();
    void thread_mem_RREADY();
    void thread_mem_blk_n_AR();
    void thread_mem_blk_n_R();
    void thread_message_addr_ap_vld_in_sig();
    void thread_message_addr_blk_n();
    void thread_message_addr_in_sig();
    void thread_num_blocks_ap_vld_in_sig();
    void thread_num_blocks_blk_n();
    void thread_num_blocks_in_sig();
    void thread_tmp_1_fu_372_p1();
    void thread_tmp_2_fu_394_p1();
    void thread_tmp_3_fu_382_p2();
    void thread_tmp_fu_367_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
