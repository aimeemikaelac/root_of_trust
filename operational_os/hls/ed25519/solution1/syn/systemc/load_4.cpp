// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "load_4.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic load_4::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic load_4::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> load_4::ap_ST_fsm_state1 = "1";
const sc_lv<5> load_4::ap_ST_fsm_state2 = "10";
const sc_lv<5> load_4::ap_ST_fsm_state3 = "100";
const sc_lv<5> load_4::ap_ST_fsm_state4 = "1000";
const sc_lv<5> load_4::ap_ST_fsm_state5 = "10000";
const sc_lv<32> load_4::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> load_4::ap_const_lv32_1 = "1";
const sc_lv<32> load_4::ap_const_lv32_2 = "10";
const sc_lv<32> load_4::ap_const_lv32_3 = "11";
const sc_lv<6> load_4::ap_const_lv6_1 = "1";
const sc_lv<6> load_4::ap_const_lv6_2 = "10";
const sc_lv<6> load_4::ap_const_lv6_3 = "11";
const sc_lv<32> load_4::ap_const_lv32_4 = "100";
const bool load_4::ap_const_boolean_1 = true;

load_4::load_4(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_fu_105_p5 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_in_offset_cast3_fu_66_p1);
    sensitive << ( in_offset );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( in_offset_cast3_fu_66_p1 );
    sensitive << ( sum_cast_fu_80_p1 );
    sensitive << ( sum2_cast_fu_90_p1 );
    sensitive << ( sum4_cast_fu_100_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sum2_cast_fu_90_p1);
    sensitive << ( sum2_fu_85_p2 );

    SC_METHOD(thread_sum2_fu_85_p2);
    sensitive << ( tmp_1374_reg_119 );

    SC_METHOD(thread_sum4_cast_fu_100_p1);
    sensitive << ( sum4_fu_95_p2 );

    SC_METHOD(thread_sum4_fu_95_p2);
    sensitive << ( tmp_1374_reg_119 );

    SC_METHOD(thread_sum_cast_fu_80_p1);
    sensitive << ( sum_fu_75_p2 );

    SC_METHOD(thread_sum_fu_75_p2);
    sensitive << ( tmp_1374_reg_119 );

    SC_METHOD(thread_tmp_1374_fu_71_p1);
    sensitive << ( in_offset );

    SC_METHOD(thread_tmp_fu_105_p5);
    sensitive << ( in_r_q0 );
    sensitive << ( in_load_reg_126 );
    sensitive << ( in_load_1_reg_136 );
    sensitive << ( in_load_2_reg_146 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "00001";
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "load_4_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r_address0, "(port)in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "(port)in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "(port)in_r_q0");
    sc_trace(mVcdFile, in_offset, "(port)in_offset");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_1374_fu_71_p1, "tmp_1374_fu_71_p1");
    sc_trace(mVcdFile, tmp_1374_reg_119, "tmp_1374_reg_119");
    sc_trace(mVcdFile, in_load_reg_126, "in_load_reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, in_load_1_reg_136, "in_load_1_reg_136");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, in_load_2_reg_146, "in_load_2_reg_146");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, in_offset_cast3_fu_66_p1, "in_offset_cast3_fu_66_p1");
    sc_trace(mVcdFile, sum_cast_fu_80_p1, "sum_cast_fu_80_p1");
    sc_trace(mVcdFile, sum2_cast_fu_90_p1, "sum2_cast_fu_90_p1");
    sc_trace(mVcdFile, sum4_cast_fu_100_p1, "sum4_cast_fu_100_p1");
    sc_trace(mVcdFile, sum_fu_75_p2, "sum_fu_75_p2");
    sc_trace(mVcdFile, sum2_fu_85_p2, "sum2_fu_85_p2");
    sc_trace(mVcdFile, sum4_fu_95_p2, "sum4_fu_95_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_fu_105_p5, "tmp_fu_105_p5");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

load_4::~load_4() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void load_4::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_return_preg = tmp_fu_105_p5.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_load_1_reg_136 = in_r_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_load_2_reg_146 = in_r_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_load_reg_126 = in_r_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_1374_reg_119 = tmp_1374_fu_71_p1.read();
    }
}

void load_4::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void load_4::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void load_4::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void load_4::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void load_4::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void load_4::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void load_4::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void load_4::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void load_4::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_return = tmp_fu_105_p5.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void load_4::thread_in_offset_cast3_fu_66_p1() {
    in_offset_cast3_fu_66_p1 = esl_zext<64,7>(in_offset.read());
}

void load_4::thread_in_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_r_address0 =  (sc_lv<6>) (sum4_cast_fu_100_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_r_address0 =  (sc_lv<6>) (sum2_cast_fu_90_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_r_address0 =  (sc_lv<6>) (sum_cast_fu_80_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        in_r_address0 =  (sc_lv<6>) (in_offset_cast3_fu_66_p1.read());
    } else {
        in_r_address0 = "XXXXXX";
    }
}

void load_4::thread_in_r_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void load_4::thread_sum2_cast_fu_90_p1() {
    sum2_cast_fu_90_p1 = esl_zext<64,6>(sum2_fu_85_p2.read());
}

void load_4::thread_sum2_fu_85_p2() {
    sum2_fu_85_p2 = (!ap_const_lv6_2.is_01() || !tmp_1374_reg_119.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_2) + sc_biguint<6>(tmp_1374_reg_119.read()));
}

void load_4::thread_sum4_cast_fu_100_p1() {
    sum4_cast_fu_100_p1 = esl_zext<64,6>(sum4_fu_95_p2.read());
}

void load_4::thread_sum4_fu_95_p2() {
    sum4_fu_95_p2 = (!ap_const_lv6_3.is_01() || !tmp_1374_reg_119.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_3) + sc_biguint<6>(tmp_1374_reg_119.read()));
}

void load_4::thread_sum_cast_fu_80_p1() {
    sum_cast_fu_80_p1 = esl_zext<64,6>(sum_fu_75_p2.read());
}

void load_4::thread_sum_fu_75_p2() {
    sum_fu_75_p2 = (!ap_const_lv6_1.is_01() || !tmp_1374_reg_119.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_biguint<6>(tmp_1374_reg_119.read()));
}

void load_4::thread_tmp_1374_fu_71_p1() {
    tmp_1374_fu_71_p1 = in_offset.read().range(6-1, 0);
}

void load_4::thread_tmp_fu_105_p5() {
    tmp_fu_105_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(in_r_q0.read(), in_load_2_reg_146.read()), in_load_1_reg_136.read()), in_load_reg_126.read());
}

void load_4::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

