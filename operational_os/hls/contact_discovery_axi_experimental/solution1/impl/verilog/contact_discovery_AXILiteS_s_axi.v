// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module contact_discovery_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 7,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    output wire [31:0]                   operation,
    output wire                          operation_ap_vld,
    output wire [511:0]                  contact_in_V,
    output wire [63:0]                   offset,
    output wire [31:0]                   db_size_in,
    input  wire [31:0]                   error_out,
    input  wire [31:0]                   contacts_size_out
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of operation
//        bit 31~0 - operation[31:0] (Read/Write)
// 0x14 : Control signal of operation
//        bit 0  - operation_ap_vld (Read/Write/SC)
//        others - reserved
// 0x18 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[31:0] (Read/Write)
// 0x1c : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[63:32] (Read/Write)
// 0x20 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[95:64] (Read/Write)
// 0x24 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[127:96] (Read/Write)
// 0x28 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[159:128] (Read/Write)
// 0x2c : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[191:160] (Read/Write)
// 0x30 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[223:192] (Read/Write)
// 0x34 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[255:224] (Read/Write)
// 0x38 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[287:256] (Read/Write)
// 0x3c : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[319:288] (Read/Write)
// 0x40 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[351:320] (Read/Write)
// 0x44 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[383:352] (Read/Write)
// 0x48 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[415:384] (Read/Write)
// 0x4c : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[447:416] (Read/Write)
// 0x50 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[479:448] (Read/Write)
// 0x54 : Data signal of contact_in_V
//        bit 31~0 - contact_in_V[511:480] (Read/Write)
// 0x58 : reserved
// 0x5c : Data signal of offset
//        bit 31~0 - offset[31:0] (Read/Write)
// 0x60 : Data signal of offset
//        bit 31~0 - offset[63:32] (Read/Write)
// 0x64 : reserved
// 0x68 : Data signal of db_size_in
//        bit 31~0 - db_size_in[31:0] (Read/Write)
// 0x6c : reserved
// 0x70 : Data signal of error_out
//        bit 31~0 - error_out[31:0] (Read)
// 0x74 : reserved
// 0x78 : Data signal of contacts_size_out
//        bit 31~0 - contacts_size_out[31:0] (Read)
// 0x7c : reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                  = 7'h00,
    ADDR_GIE                      = 7'h04,
    ADDR_IER                      = 7'h08,
    ADDR_ISR                      = 7'h0c,
    ADDR_OPERATION_DATA_0         = 7'h10,
    ADDR_OPERATION_CTRL           = 7'h14,
    ADDR_CONTACT_IN_V_DATA_0      = 7'h18,
    ADDR_CONTACT_IN_V_DATA_1      = 7'h1c,
    ADDR_CONTACT_IN_V_DATA_2      = 7'h20,
    ADDR_CONTACT_IN_V_DATA_3      = 7'h24,
    ADDR_CONTACT_IN_V_DATA_4      = 7'h28,
    ADDR_CONTACT_IN_V_DATA_5      = 7'h2c,
    ADDR_CONTACT_IN_V_DATA_6      = 7'h30,
    ADDR_CONTACT_IN_V_DATA_7      = 7'h34,
    ADDR_CONTACT_IN_V_DATA_8      = 7'h38,
    ADDR_CONTACT_IN_V_DATA_9      = 7'h3c,
    ADDR_CONTACT_IN_V_DATA_10     = 7'h40,
    ADDR_CONTACT_IN_V_DATA_11     = 7'h44,
    ADDR_CONTACT_IN_V_DATA_12     = 7'h48,
    ADDR_CONTACT_IN_V_DATA_13     = 7'h4c,
    ADDR_CONTACT_IN_V_DATA_14     = 7'h50,
    ADDR_CONTACT_IN_V_DATA_15     = 7'h54,
    ADDR_CONTACT_IN_V_CTRL        = 7'h58,
    ADDR_OFFSET_DATA_0            = 7'h5c,
    ADDR_OFFSET_DATA_1            = 7'h60,
    ADDR_OFFSET_CTRL              = 7'h64,
    ADDR_DB_SIZE_IN_DATA_0        = 7'h68,
    ADDR_DB_SIZE_IN_CTRL          = 7'h6c,
    ADDR_ERROR_OUT_DATA_0         = 7'h70,
    ADDR_ERROR_OUT_CTRL           = 7'h74,
    ADDR_CONTACTS_SIZE_OUT_DATA_0 = 7'h78,
    ADDR_CONTACTS_SIZE_OUT_CTRL   = 7'h7c,
    WRIDLE                        = 2'd0,
    WRDATA                        = 2'd1,
    WRRESP                        = 2'd2,
    WRRESET                       = 2'd3,
    RDIDLE                        = 2'd0,
    RDDATA                        = 2'd1,
    RDRESET                       = 2'd2,
    ADDR_BITS         = 7;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [31:0]                   int_operation = 'b0;
    reg                           int_operation_ap_vld = 1'b0;
    reg  [511:0]                  int_contact_in_V = 'b0;
    reg  [63:0]                   int_offset = 'b0;
    reg  [31:0]                   int_db_size_in = 'b0;
    reg  [31:0]                   int_error_out = 'b0;
    reg  [31:0]                   int_contacts_size_out = 'b0;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_OPERATION_DATA_0: begin
                    rdata <= int_operation[31:0];
                end
                ADDR_OPERATION_CTRL: begin
                    rdata[0] <= int_operation_ap_vld;
                end
                ADDR_CONTACT_IN_V_DATA_0: begin
                    rdata <= int_contact_in_V[31:0];
                end
                ADDR_CONTACT_IN_V_DATA_1: begin
                    rdata <= int_contact_in_V[63:32];
                end
                ADDR_CONTACT_IN_V_DATA_2: begin
                    rdata <= int_contact_in_V[95:64];
                end
                ADDR_CONTACT_IN_V_DATA_3: begin
                    rdata <= int_contact_in_V[127:96];
                end
                ADDR_CONTACT_IN_V_DATA_4: begin
                    rdata <= int_contact_in_V[159:128];
                end
                ADDR_CONTACT_IN_V_DATA_5: begin
                    rdata <= int_contact_in_V[191:160];
                end
                ADDR_CONTACT_IN_V_DATA_6: begin
                    rdata <= int_contact_in_V[223:192];
                end
                ADDR_CONTACT_IN_V_DATA_7: begin
                    rdata <= int_contact_in_V[255:224];
                end
                ADDR_CONTACT_IN_V_DATA_8: begin
                    rdata <= int_contact_in_V[287:256];
                end
                ADDR_CONTACT_IN_V_DATA_9: begin
                    rdata <= int_contact_in_V[319:288];
                end
                ADDR_CONTACT_IN_V_DATA_10: begin
                    rdata <= int_contact_in_V[351:320];
                end
                ADDR_CONTACT_IN_V_DATA_11: begin
                    rdata <= int_contact_in_V[383:352];
                end
                ADDR_CONTACT_IN_V_DATA_12: begin
                    rdata <= int_contact_in_V[415:384];
                end
                ADDR_CONTACT_IN_V_DATA_13: begin
                    rdata <= int_contact_in_V[447:416];
                end
                ADDR_CONTACT_IN_V_DATA_14: begin
                    rdata <= int_contact_in_V[479:448];
                end
                ADDR_CONTACT_IN_V_DATA_15: begin
                    rdata <= int_contact_in_V[511:480];
                end
                ADDR_OFFSET_DATA_0: begin
                    rdata <= int_offset[31:0];
                end
                ADDR_OFFSET_DATA_1: begin
                    rdata <= int_offset[63:32];
                end
                ADDR_DB_SIZE_IN_DATA_0: begin
                    rdata <= int_db_size_in[31:0];
                end
                ADDR_ERROR_OUT_DATA_0: begin
                    rdata <= int_error_out[31:0];
                end
                ADDR_CONTACTS_SIZE_OUT_DATA_0: begin
                    rdata <= int_contacts_size_out[31:0];
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign interrupt        = int_gie & (|int_isr);
assign ap_start         = int_ap_start;
assign int_ap_idle      = ap_idle;
assign int_ap_ready     = ap_ready;
assign operation        = int_operation;
assign operation_ap_vld = int_operation_ap_vld;
assign contact_in_V     = int_contact_in_V;
assign offset           = int_offset;
assign db_size_in       = int_db_size_in;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_operation[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_operation[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_OPERATION_DATA_0)
            int_operation[31:0] <= (WDATA[31:0] & wmask) | (int_operation[31:0] & ~wmask);
    end
end

// int_operation_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_operation_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_OPERATION_CTRL && WSTRB[0] && WDATA[0])
            int_operation_ap_vld <= 1'b1;
        else
            int_operation_ap_vld <= 1'b0; // self clear
    end
end

// int_contact_in_V[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_0)
            int_contact_in_V[31:0] <= (WDATA[31:0] & wmask) | (int_contact_in_V[31:0] & ~wmask);
    end
end

// int_contact_in_V[63:32]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[63:32] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_1)
            int_contact_in_V[63:32] <= (WDATA[31:0] & wmask) | (int_contact_in_V[63:32] & ~wmask);
    end
end

// int_contact_in_V[95:64]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[95:64] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_2)
            int_contact_in_V[95:64] <= (WDATA[31:0] & wmask) | (int_contact_in_V[95:64] & ~wmask);
    end
end

// int_contact_in_V[127:96]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[127:96] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_3)
            int_contact_in_V[127:96] <= (WDATA[31:0] & wmask) | (int_contact_in_V[127:96] & ~wmask);
    end
end

// int_contact_in_V[159:128]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[159:128] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_4)
            int_contact_in_V[159:128] <= (WDATA[31:0] & wmask) | (int_contact_in_V[159:128] & ~wmask);
    end
end

// int_contact_in_V[191:160]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[191:160] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_5)
            int_contact_in_V[191:160] <= (WDATA[31:0] & wmask) | (int_contact_in_V[191:160] & ~wmask);
    end
end

// int_contact_in_V[223:192]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[223:192] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_6)
            int_contact_in_V[223:192] <= (WDATA[31:0] & wmask) | (int_contact_in_V[223:192] & ~wmask);
    end
end

// int_contact_in_V[255:224]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[255:224] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_7)
            int_contact_in_V[255:224] <= (WDATA[31:0] & wmask) | (int_contact_in_V[255:224] & ~wmask);
    end
end

// int_contact_in_V[287:256]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[287:256] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_8)
            int_contact_in_V[287:256] <= (WDATA[31:0] & wmask) | (int_contact_in_V[287:256] & ~wmask);
    end
end

// int_contact_in_V[319:288]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[319:288] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_9)
            int_contact_in_V[319:288] <= (WDATA[31:0] & wmask) | (int_contact_in_V[319:288] & ~wmask);
    end
end

// int_contact_in_V[351:320]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[351:320] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_10)
            int_contact_in_V[351:320] <= (WDATA[31:0] & wmask) | (int_contact_in_V[351:320] & ~wmask);
    end
end

// int_contact_in_V[383:352]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[383:352] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_11)
            int_contact_in_V[383:352] <= (WDATA[31:0] & wmask) | (int_contact_in_V[383:352] & ~wmask);
    end
end

// int_contact_in_V[415:384]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[415:384] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_12)
            int_contact_in_V[415:384] <= (WDATA[31:0] & wmask) | (int_contact_in_V[415:384] & ~wmask);
    end
end

// int_contact_in_V[447:416]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[447:416] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_13)
            int_contact_in_V[447:416] <= (WDATA[31:0] & wmask) | (int_contact_in_V[447:416] & ~wmask);
    end
end

// int_contact_in_V[479:448]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[479:448] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_14)
            int_contact_in_V[479:448] <= (WDATA[31:0] & wmask) | (int_contact_in_V[479:448] & ~wmask);
    end
end

// int_contact_in_V[511:480]
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_V[511:480] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CONTACT_IN_V_DATA_15)
            int_contact_in_V[511:480] <= (WDATA[31:0] & wmask) | (int_contact_in_V[511:480] & ~wmask);
    end
end

// int_offset[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_offset[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_OFFSET_DATA_0)
            int_offset[31:0] <= (WDATA[31:0] & wmask) | (int_offset[31:0] & ~wmask);
    end
end

// int_offset[63:32]
always @(posedge ACLK) begin
    if (ARESET)
        int_offset[63:32] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_OFFSET_DATA_1)
            int_offset[63:32] <= (WDATA[31:0] & wmask) | (int_offset[63:32] & ~wmask);
    end
end

// int_db_size_in[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_db_size_in[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_DB_SIZE_IN_DATA_0)
            int_db_size_in[31:0] <= (WDATA[31:0] & wmask) | (int_db_size_in[31:0] & ~wmask);
    end
end

// int_error_out
always @(posedge ACLK) begin
    if (ARESET)
        int_error_out <= 0;
    else if (ACLK_EN) begin
            int_error_out <= error_out;
    end
end

// int_contacts_size_out
always @(posedge ACLK) begin
    if (ARESET)
        int_contacts_size_out <= 0;
    else if (ACLK_EN) begin
            int_contacts_size_out <= contacts_size_out;
    end
end


//------------------------Memory logic-------------------

endmodule
