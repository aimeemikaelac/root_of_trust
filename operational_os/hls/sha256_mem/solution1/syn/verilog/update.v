// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        SHA256_m_tot_len_read,
        SHA256_m_len_read,
        SHA256_m_block_address0,
        SHA256_m_block_ce0,
        SHA256_m_block_we0,
        SHA256_m_block_d0,
        SHA256_m_block_q0,
        SHA256_m_block_address1,
        SHA256_m_block_ce1,
        SHA256_m_block_q1,
        SHA256_m_h_address0,
        SHA256_m_h_ce0,
        SHA256_m_h_we0,
        SHA256_m_h_d0,
        SHA256_m_h_q0,
        message_address0,
        message_ce0,
        message_q0,
        message_address1,
        message_ce1,
        message_q1,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] SHA256_m_tot_len_read;
input  [31:0] SHA256_m_len_read;
output  [6:0] SHA256_m_block_address0;
output   SHA256_m_block_ce0;
output   SHA256_m_block_we0;
output  [7:0] SHA256_m_block_d0;
input  [7:0] SHA256_m_block_q0;
output  [6:0] SHA256_m_block_address1;
output   SHA256_m_block_ce1;
input  [7:0] SHA256_m_block_q1;
output  [2:0] SHA256_m_h_address0;
output   SHA256_m_h_ce0;
output   SHA256_m_h_we0;
output  [31:0] SHA256_m_h_d0;
input  [31:0] SHA256_m_h_q0;
output  [5:0] message_address0;
output   message_ce0;
input  [7:0] message_q0;
output  [5:0] message_address1;
output   message_ce1;
input  [7:0] message_q1;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] SHA256_m_block_address0;
reg SHA256_m_block_ce0;
reg SHA256_m_block_we0;
reg SHA256_m_block_ce1;
reg[2:0] SHA256_m_h_address0;
reg SHA256_m_h_ce0;
reg SHA256_m_h_we0;
reg[31:0] SHA256_m_h_d0;
reg[5:0] message_address0;
reg message_ce0;
reg message_ce1;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] rem_len_fu_192_p3;
reg   [6:0] rem_len_reg_372;
wire   [8:0] tmp_3_fu_200_p1;
reg   [8:0] tmp_3_reg_380;
wire   [6:0] i_fu_209_p2;
reg   [6:0] i_reg_388;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_fu_204_p2;
wire   [8:0] sum_i_fu_224_p2;
reg   [8:0] sum_i_reg_398;
wire   [5:0] tmp_8_fu_234_p1;
wire   [0:0] tmp_9_fu_229_p2;
wire   [6:0] new_len_fu_241_p2;
reg   [6:0] new_len_reg_411;
wire    ap_CS_fsm_state5;
wire   [5:0] rem_len_1_fu_246_p1;
reg   [5:0] rem_len_1_reg_416;
reg   [0:0] tmp_11_reg_422;
wire   [7:0] new_len_cast3_fu_259_p1;
reg   [7:0] new_len_cast3_reg_428;
wire    ap_CS_fsm_state6;
wire    grp_transform_1_fu_152_ap_done;
wire   [7:0] tmp_3_cast_fu_269_p1;
reg   [7:0] tmp_3_cast_reg_433;
wire   [5:0] i_1_fu_278_p2;
reg   [5:0] i_1_reg_441;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_i2_fu_273_p2;
wire   [31:0] tmp_6_fu_334_p2;
wire    grp_transform_1_fu_152_ap_start;
wire    grp_transform_1_fu_152_ap_idle;
wire    grp_transform_1_fu_152_ap_ready;
wire   [2:0] grp_transform_1_fu_152_SHA256_m_h_address0;
wire    grp_transform_1_fu_152_SHA256_m_h_ce0;
wire    grp_transform_1_fu_152_SHA256_m_h_we0;
wire   [31:0] grp_transform_1_fu_152_SHA256_m_h_d0;
wire   [5:0] grp_transform_1_fu_152_message_address0;
wire    grp_transform_1_fu_152_message_ce0;
wire   [5:0] grp_transform_1_fu_152_message_address1;
wire    grp_transform_1_fu_152_message_ce1;
wire    grp_transform_fu_164_ap_start;
wire    grp_transform_fu_164_ap_done;
wire    grp_transform_fu_164_ap_idle;
wire    grp_transform_fu_164_ap_ready;
wire   [2:0] grp_transform_fu_164_SHA256_m_h_address0;
wire    grp_transform_fu_164_SHA256_m_h_ce0;
wire    grp_transform_fu_164_SHA256_m_h_we0;
wire   [31:0] grp_transform_fu_164_SHA256_m_h_d0;
wire   [6:0] grp_transform_fu_164_message_address0;
wire    grp_transform_fu_164_message_ce0;
wire   [6:0] grp_transform_fu_164_message_address1;
wire    grp_transform_fu_164_message_ce1;
reg   [6:0] i_i_reg_111;
wire    ap_CS_fsm_state3;
reg   [5:0] i_i1_reg_122;
wire    ap_CS_fsm_state8;
reg   [31:0] SHA256_m_tot_len_reg_134;
reg   [5:0] SHA256_m_len_write_a_reg_143;
reg    ap_reg_grp_transform_1_fu_152_ap_start;
reg    ap_reg_grp_transform_fu_164_ap_start;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_i_fu_215_p1;
wire   [63:0] sum_i_cast_fu_237_p1;
wire   [63:0] sum3_i_cast_fu_302_p1;
wire   [63:0] tmp_i3_fu_339_p1;
wire   [31:0] tmp_len_fu_176_p2;
wire   [0:0] tmp_fu_186_p2;
wire   [6:0] tmp_1_fu_182_p1;
wire   [8:0] tmp_i_cast_fu_220_p1;
wire   [6:0] tmp_2_fu_262_p3;
wire   [6:0] tmp_i3_cast_fu_284_p1;
wire   [6:0] tmp1_fu_288_p2;
wire   [7:0] tmp1_cast_fu_293_p1;
wire   [7:0] sum3_i_fu_297_p2;
wire   [7:0] tmp_4_fu_307_p2;
wire   [1:0] tmp_7_fu_312_p4;
wire   [7:0] tmp_5_fu_322_p3;
wire   [31:0] tmp_5_cast_fu_330_p1;
wire    ap_CS_fsm_state9;
wire   [31:0] SHA256_m_len_write_a_1_fu_344_p1;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_reg_grp_transform_1_fu_152_ap_start = 1'b0;
#0 ap_reg_grp_transform_fu_164_ap_start = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

transform_1 grp_transform_1_fu_152(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_transform_1_fu_152_ap_start),
    .ap_done(grp_transform_1_fu_152_ap_done),
    .ap_idle(grp_transform_1_fu_152_ap_idle),
    .ap_ready(grp_transform_1_fu_152_ap_ready),
    .SHA256_m_h_address0(grp_transform_1_fu_152_SHA256_m_h_address0),
    .SHA256_m_h_ce0(grp_transform_1_fu_152_SHA256_m_h_ce0),
    .SHA256_m_h_we0(grp_transform_1_fu_152_SHA256_m_h_we0),
    .SHA256_m_h_d0(grp_transform_1_fu_152_SHA256_m_h_d0),
    .SHA256_m_h_q0(SHA256_m_h_q0),
    .message_address0(grp_transform_1_fu_152_message_address0),
    .message_ce0(grp_transform_1_fu_152_message_ce0),
    .message_q0(message_q0),
    .message_address1(grp_transform_1_fu_152_message_address1),
    .message_ce1(grp_transform_1_fu_152_message_ce1),
    .message_q1(message_q1),
    .tmp_1(rem_len_reg_372),
    .block_nb(tmp_11_reg_422)
);

transform grp_transform_fu_164(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_transform_fu_164_ap_start),
    .ap_done(grp_transform_fu_164_ap_done),
    .ap_idle(grp_transform_fu_164_ap_idle),
    .ap_ready(grp_transform_fu_164_ap_ready),
    .SHA256_m_h_address0(grp_transform_fu_164_SHA256_m_h_address0),
    .SHA256_m_h_ce0(grp_transform_fu_164_SHA256_m_h_ce0),
    .SHA256_m_h_we0(grp_transform_fu_164_SHA256_m_h_we0),
    .SHA256_m_h_d0(grp_transform_fu_164_SHA256_m_h_d0),
    .SHA256_m_h_q0(SHA256_m_h_q0),
    .message_address0(grp_transform_fu_164_message_address0),
    .message_ce0(grp_transform_fu_164_message_ce0),
    .message_q0(SHA256_m_block_q0),
    .message_address1(grp_transform_fu_164_message_address1),
    .message_ce1(grp_transform_fu_164_message_ce1),
    .message_q1(SHA256_m_block_q1),
    .block_nb(2'd1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_transform_1_fu_152_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_reg_grp_transform_1_fu_152_ap_start <= 1'b1;
        end else if ((1'b1 == grp_transform_1_fu_152_ap_ready)) begin
            ap_reg_grp_transform_1_fu_152_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_transform_fu_164_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_204_p2 == 1'd1) & (1'd0 == tmp_9_fu_229_p2))) begin
            ap_reg_grp_transform_fu_164_ap_start <= 1'b1;
        end else if ((1'b1 == grp_transform_fu_164_ap_ready)) begin
            ap_reg_grp_transform_fu_164_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_return_0_preg <= SHA256_m_tot_len_reg_134;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
                        ap_return_1_preg[5 : 0] <= SHA256_m_len_write_a_1_fu_344_p1[5 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_i2_fu_273_p2))) begin
        SHA256_m_len_write_a_reg_143 <= rem_len_1_reg_416;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_204_p2 == 1'd1) & (1'd1 == tmp_9_fu_229_p2))) begin
        SHA256_m_len_write_a_reg_143 <= tmp_8_fu_234_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_i2_fu_273_p2))) begin
        SHA256_m_tot_len_reg_134 <= tmp_6_fu_334_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_204_p2 == 1'd1) & (1'd1 == tmp_9_fu_229_p2))) begin
        SHA256_m_tot_len_reg_134 <= SHA256_m_tot_len_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_i1_reg_122 <= i_1_reg_441;
    end else if (((1'b1 == ap_CS_fsm_state6) & (grp_transform_1_fu_152_ap_done == 1'b1))) begin
        i_i1_reg_122 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_reg_111 <= i_reg_388;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_i_reg_111 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_441 <= i_1_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_388 <= i_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_transform_1_fu_152_ap_done == 1'b1))) begin
        new_len_cast3_reg_428[6 : 0] <= new_len_cast3_fu_259_p1[6 : 0];
        tmp_3_cast_reg_433[6] <= tmp_3_cast_fu_269_p1[6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        new_len_reg_411 <= new_len_fu_241_p2;
        rem_len_1_reg_416 <= rem_len_1_fu_246_p1;
        tmp_11_reg_422 <= new_len_fu_241_p2[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        rem_len_reg_372 <= rem_len_fu_192_p3;
        tmp_3_reg_380 <= tmp_3_fu_200_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_204_p2 == 1'd0))) begin
        sum_i_reg_398 <= sum_i_fu_224_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        SHA256_m_block_address0 = tmp_i3_fu_339_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        SHA256_m_block_address0 = sum_i_cast_fu_237_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SHA256_m_block_address0 = grp_transform_fu_164_message_address0;
    end else begin
        SHA256_m_block_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        SHA256_m_block_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        SHA256_m_block_ce0 = grp_transform_fu_164_message_ce0;
    end else begin
        SHA256_m_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SHA256_m_block_ce1 = grp_transform_fu_164_message_ce1;
    end else begin
        SHA256_m_block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        SHA256_m_block_we0 = 1'b1;
    end else begin
        SHA256_m_block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SHA256_m_h_address0 = grp_transform_fu_164_SHA256_m_h_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SHA256_m_h_address0 = grp_transform_1_fu_152_SHA256_m_h_address0;
    end else begin
        SHA256_m_h_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SHA256_m_h_ce0 = grp_transform_fu_164_SHA256_m_h_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SHA256_m_h_ce0 = grp_transform_1_fu_152_SHA256_m_h_ce0;
    end else begin
        SHA256_m_h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SHA256_m_h_d0 = grp_transform_fu_164_SHA256_m_h_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SHA256_m_h_d0 = grp_transform_1_fu_152_SHA256_m_h_d0;
    end else begin
        SHA256_m_h_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SHA256_m_h_we0 = grp_transform_fu_164_SHA256_m_h_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SHA256_m_h_we0 = grp_transform_1_fu_152_SHA256_m_h_we0;
    end else begin
        SHA256_m_h_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_0 = SHA256_m_tot_len_reg_134;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_return_1 = SHA256_m_len_write_a_1_fu_344_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        message_address0 = sum3_i_cast_fu_302_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        message_address0 = tmp_i_fu_215_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        message_address0 = grp_transform_1_fu_152_message_address0;
    end else begin
        message_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        message_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        message_ce0 = grp_transform_1_fu_152_message_ce0;
    end else begin
        message_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        message_ce1 = grp_transform_1_fu_152_message_ce1;
    end else begin
        message_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_204_p2 == 1'd1) & (1'd1 == tmp_9_fu_229_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_204_p2 == 1'd1) & (1'd0 == tmp_9_fu_229_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_transform_fu_164_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_transform_1_fu_152_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_i2_fu_273_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SHA256_m_block_address1 = grp_transform_fu_164_message_address1;

assign SHA256_m_block_d0 = message_q0;

assign SHA256_m_len_write_a_1_fu_344_p1 = SHA256_m_len_write_a_reg_143;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond_i2_fu_273_p2 = ((i_i1_reg_122 == rem_len_1_reg_416) ? 1'b1 : 1'b0);

assign exitcond_i_fu_204_p2 = ((i_i_reg_111 == rem_len_reg_372) ? 1'b1 : 1'b0);

assign grp_transform_1_fu_152_ap_start = ap_reg_grp_transform_1_fu_152_ap_start;

assign grp_transform_fu_164_ap_start = ap_reg_grp_transform_fu_164_ap_start;

assign i_1_fu_278_p2 = (i_i1_reg_122 + 6'd1);

assign i_fu_209_p2 = (i_i_reg_111 + 7'd1);

assign message_address1 = grp_transform_1_fu_152_message_address1;

assign new_len_cast3_fu_259_p1 = new_len_reg_411;

assign new_len_fu_241_p2 = ($signed(7'd64) - $signed(rem_len_reg_372));

assign rem_len_1_fu_246_p1 = new_len_fu_241_p2[5:0];

assign rem_len_fu_192_p3 = ((tmp_fu_186_p2[0:0] === 1'b1) ? 7'd64 : tmp_1_fu_182_p1);

assign sum3_i_cast_fu_302_p1 = sum3_i_fu_297_p2;

assign sum3_i_fu_297_p2 = (tmp1_cast_fu_293_p1 + tmp_3_cast_reg_433);

assign sum_i_cast_fu_237_p1 = sum_i_reg_398;

assign sum_i_fu_224_p2 = (tmp_3_reg_380 + tmp_i_cast_fu_220_p1);

assign tmp1_cast_fu_293_p1 = tmp1_fu_288_p2;

assign tmp1_fu_288_p2 = (rem_len_reg_372 + tmp_i3_cast_fu_284_p1);

assign tmp_1_fu_182_p1 = tmp_len_fu_176_p2[6:0];

assign tmp_2_fu_262_p3 = {{tmp_11_reg_422}, {6'd0}};

assign tmp_3_cast_fu_269_p1 = tmp_2_fu_262_p3;

assign tmp_3_fu_200_p1 = SHA256_m_len_read[8:0];

assign tmp_4_fu_307_p2 = (new_len_cast3_reg_428 + 8'd64);

assign tmp_5_cast_fu_330_p1 = tmp_5_fu_322_p3;

assign tmp_5_fu_322_p3 = {{tmp_7_fu_312_p4}, {6'd0}};

assign tmp_6_fu_334_p2 = (tmp_5_cast_fu_330_p1 + SHA256_m_tot_len_read);

assign tmp_7_fu_312_p4 = {{tmp_4_fu_307_p2[7:6]}};

assign tmp_8_fu_234_p1 = SHA256_m_len_read[5:0];

assign tmp_9_fu_229_p2 = ((SHA256_m_len_read > 32'd4294967231) ? 1'b1 : 1'b0);

assign tmp_fu_186_p2 = ((tmp_len_fu_176_p2 > 32'd64) ? 1'b1 : 1'b0);

assign tmp_i3_cast_fu_284_p1 = i_i1_reg_122;

assign tmp_i3_fu_339_p1 = i_i1_reg_122;

assign tmp_i_cast_fu_220_p1 = i_i_reg_111;

assign tmp_i_fu_215_p1 = i_i_reg_111;

assign tmp_len_fu_176_p2 = (32'd64 - SHA256_m_len_read);

always @ (posedge ap_clk) begin
    new_len_cast3_reg_428[7] <= 1'b0;
    tmp_3_cast_reg_433[5:0] <= 6'b000000;
    tmp_3_cast_reg_433[7] <= 1'b0;
    ap_return_1_preg[31:6] <= 26'b00000000000000000000000000;
end

endmodule //update
