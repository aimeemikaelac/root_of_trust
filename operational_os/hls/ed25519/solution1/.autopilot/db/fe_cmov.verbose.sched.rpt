

================================================================
== Vivado HLS Report for 'fe_cmov'
================================================================
* Date:           Thu Sep 28 12:40:39 2017

* Version:        2017.2 (Build 1909853 on Thu Jun 15 18:55:24 MDT 2017)
* Project:        ed25519
* Solution:       solution1
* Product family: zynquplus
* Target device:  xczu9eg-ffvb1156-2-i


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      1.95|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    9|    9|    9|    9|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 10
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
* FSM state operations: 

 <State 1>: 0.76ns
ST_1: u_xy2d_offset_read (16)  [1/1] 0.00ns
:1  %u_xy2d_offset_read = call i3 @_ssdm_op_Read.ap_auto.i3(i3 %u_xy2d_offset)

ST_1: tmp_7562_read (17)  [1/1] 0.00ns
:2  %tmp_7562_read = call i5 @_ssdm_op_Read.ap_auto.i5(i5 %tmp_7562)

ST_1: tmp (28)  [1/1] 0.00ns
:13  %tmp = call i11 @_ssdm_op_BitConcatenate.i11.i5.i3.i3(i5 %tmp_7562_read, i3 %u_xy2d_offset_read, i3 0)

ST_1: p_shl_cast (29)  [1/1] 0.00ns
:14  %p_shl_cast = zext i11 %tmp to i12

ST_1: tmp_1437 (30)  [1/1] 0.00ns
:15  %tmp_1437 = call i9 @_ssdm_op_BitConcatenate.i9.i5.i3.i1(i5 %tmp_7562_read, i3 %u_xy2d_offset_read, i1 false)

ST_1: p_shl1_cast (31)  [1/1] 0.00ns
:16  %p_shl1_cast = zext i9 %tmp_1437 to i12

ST_1: tmp_1438 (32)  [1/1] 0.76ns
:17  %tmp_1438 = add i12 %p_shl_cast, %p_shl1_cast


 <State 2>: 0.72ns
ST_2: tmp_1440 (38)  [1/1] 0.72ns  loc: ed25519/src/fe.cpp:175
:23  %tmp_1440 = add i12 2, %tmp_1438


 <State 3>: 0.72ns
ST_3: tmp_1441 (41)  [1/1] 0.72ns  loc: ed25519/src/fe.cpp:176
:26  %tmp_1441 = add i12 3, %tmp_1438


 <State 4>: 0.72ns
ST_4: tmp_1442 (44)  [1/1] 0.72ns  loc: ed25519/src/fe.cpp:177
:29  %tmp_1442 = add i12 4, %tmp_1438


 <State 5>: 1.24ns
ST_5: tmp_1438_cast (33)  [1/1] 0.00ns
:18  %tmp_1438_cast = zext i12 %tmp_1438 to i64

ST_5: g_addr (34)  [1/1] 0.00ns
:19  %g_addr = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1438_cast

ST_5: tmp_1439 (35)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:174
:20  %tmp_1439 = or i12 %tmp_1438, 1

ST_5: tmp_1439_cast (36)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:174
:21  %tmp_1439_cast = zext i12 %tmp_1439 to i64

ST_5: g_addr_1 (37)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:174
:22  %g_addr_1 = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1439_cast

ST_5: tmp_1443 (47)  [1/1] 0.72ns  loc: ed25519/src/fe.cpp:178
:32  %tmp_1443 = add i12 5, %tmp_1438

ST_5: g0 (69)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:173
:54  %g0 = load i32* %g_addr, align 4

ST_5: g1 (70)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:174
:55  %g1 = load i32* %g_addr_1, align 4


 <State 6>: 1.24ns
ST_6: tmp_1440_cast (39)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:175
:24  %tmp_1440_cast = zext i12 %tmp_1440 to i64

ST_6: g_addr_2 (40)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:175
:25  %g_addr_2 = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1440_cast

ST_6: tmp_1441_cast (42)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:176
:27  %tmp_1441_cast = zext i12 %tmp_1441 to i64

ST_6: g_addr_3 (43)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:176
:28  %g_addr_3 = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1441_cast

ST_6: tmp_1444 (50)  [1/1] 0.72ns  loc: ed25519/src/fe.cpp:179
:35  %tmp_1444 = add i12 6, %tmp_1438

ST_6: g0 (69)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:173
:54  %g0 = load i32* %g_addr, align 4

ST_6: g1 (70)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:174
:55  %g1 = load i32* %g_addr_1, align 4

ST_6: g2 (71)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:175
:56  %g2 = load i32* %g_addr_2, align 4

ST_6: g3 (72)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:176
:57  %g3 = load i32* %g_addr_3, align 4


 <State 7>: 1.24ns
ST_7: tmp_1442_cast (45)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:177
:30  %tmp_1442_cast = zext i12 %tmp_1442 to i64

ST_7: g_addr_4 (46)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:177
:31  %g_addr_4 = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1442_cast

ST_7: tmp_1443_cast (48)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:178
:33  %tmp_1443_cast = zext i12 %tmp_1443 to i64

ST_7: g_addr_5 (49)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:178
:34  %g_addr_5 = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1443_cast

ST_7: tmp_1445 (53)  [1/1] 0.72ns  loc: ed25519/src/fe.cpp:180
:38  %tmp_1445 = add i12 7, %tmp_1438

ST_7: g2 (71)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:175
:56  %g2 = load i32* %g_addr_2, align 4

ST_7: g3 (72)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:176
:57  %g3 = load i32* %g_addr_3, align 4

ST_7: g4 (73)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:177
:58  %g4 = load i32* %g_addr_4, align 4

ST_7: g5 (74)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:178
:59  %g5 = load i32* %g_addr_5, align 4


 <State 8>: 1.24ns
ST_8: tmp_1444_cast (51)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:179
:36  %tmp_1444_cast = zext i12 %tmp_1444 to i64

ST_8: g_addr_6 (52)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:179
:37  %g_addr_6 = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1444_cast

ST_8: tmp_1445_cast (54)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:180
:39  %tmp_1445_cast = zext i12 %tmp_1445 to i64

ST_8: g_addr_7 (55)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:180
:40  %g_addr_7 = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1445_cast

ST_8: tmp_1446 (56)  [1/1] 0.72ns  loc: ed25519/src/fe.cpp:181
:41  %tmp_1446 = add i12 8, %tmp_1438

ST_8: g4 (73)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:177
:58  %g4 = load i32* %g_addr_4, align 4

ST_8: g5 (74)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:178
:59  %g5 = load i32* %g_addr_5, align 4

ST_8: g6 (75)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:179
:60  %g6 = load i32* %g_addr_6, align 4

ST_8: g7 (76)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:180
:61  %g7 = load i32* %g_addr_7, align 4


 <State 9>: 1.95ns
ST_9: tmp_1446_cast (57)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:181
:42  %tmp_1446_cast = zext i12 %tmp_1446 to i64

ST_9: g_addr_8 (58)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:181
:43  %g_addr_8 = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1446_cast

ST_9: tmp_1447 (59)  [1/1] 0.72ns  loc: ed25519/src/fe.cpp:182
:44  %tmp_1447 = add i12 9, %tmp_1438

ST_9: tmp_1447_cast (60)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:182
:45  %tmp_1447_cast = zext i12 %tmp_1447 to i64

ST_9: g_addr_9 (61)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:182
:46  %g_addr_9 = getelementptr [2560 x i32]* %g, i64 0, i64 %tmp_1447_cast

ST_9: g6 (75)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:179
:60  %g6 = load i32* %g_addr_6, align 4

ST_9: g7 (76)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:180
:61  %g7 = load i32* %g_addr_7, align 4

ST_9: g8 (77)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:181
:62  %g8 = load i32* %g_addr_8, align 4

ST_9: g9 (78)  [2/2] 1.24ns  loc: ed25519/src/fe.cpp:182
:63  %g9 = load i32* %g_addr_9, align 4


 <State 10>: 1.29ns
ST_10: b_read (15)  [1/1] 0.00ns
:0  %b_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %b)

ST_10: f_9_read67 (18)  [1/1] 0.00ns
:3  %f_9_read67 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_9_read)

ST_10: f_8_read66 (19)  [1/1] 0.00ns
:4  %f_8_read66 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_8_read)

ST_10: f_7_read65 (20)  [1/1] 0.00ns
:5  %f_7_read65 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_7_read)

ST_10: f_6_read64 (21)  [1/1] 0.00ns
:6  %f_6_read64 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_6_read)

ST_10: f_5_read63 (22)  [1/1] 0.00ns
:7  %f_5_read63 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_5_read)

ST_10: f_4_read62 (23)  [1/1] 0.00ns
:8  %f_4_read62 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_4_read)

ST_10: f_3_read61 (24)  [1/1] 0.00ns
:9  %f_3_read61 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_3_read)

ST_10: f_2_read_9 (25)  [1/1] 0.00ns
:10  %f_2_read_9 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_2_read)

ST_10: f_1_read_9 (26)  [1/1] 0.00ns
:11  %f_1_read_9 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_1_read)

ST_10: f_0_read58 (27)  [1/1] 0.00ns
:12  %f_0_read58 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %f_0_read)

ST_10: StgValue_76 (62)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:156
:47  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str75, [1 x i8]* @p_str176, [1 x i8]* @p_str176, [1 x i8]* @p_str176) nounwind

ST_10: StgValue_77 (63)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:157
:48  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str277, [1 x i8]* @p_str176, [1 x i8]* @p_str176, [1 x i8]* @p_str176) nounwind

ST_10: StgValue_78 (64)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:158
:49  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str378, [1 x i8]* @p_str176, [1 x i8]* @p_str176, [1 x i8]* @p_str176) nounwind

ST_10: StgValue_79 (65)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:159
:50  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str479, [1 x i8]* @p_str176, [1 x i8]* @p_str176, [1 x i8]* @p_str176) nounwind

ST_10: StgValue_80 (66)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:160
:51  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str580, [1 x i8]* @p_str176, [1 x i8]* @p_str176, [1 x i8]* @p_str176) nounwind

ST_10: StgValue_81 (67)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:161
:52  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [5 x i8]* @p_str681, [1 x i8]* @p_str176, [1 x i8]* @p_str176, [1 x i8]* @p_str176) nounwind

ST_10: StgValue_82 (68)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:162
:53  call void (...)* @_ssdm_op_SpecResourceLimit(i32 1, [4 x i8]* @p_str782, [1 x i8]* @p_str176, [1 x i8]* @p_str176, [1 x i8]* @p_str176) nounwind

ST_10: g8 (77)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:181
:62  %g8 = load i32* %g_addr_8, align 4

ST_10: g9 (78)  [1/2] 1.24ns  loc: ed25519/src/fe.cpp:182
:63  %g9 = load i32* %g_addr_9, align 4

ST_10: x0 (79)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:183 (grouped into LUT with out node f_0_write_assign)
:64  %x0 = xor i32 %g0, %f_0_read58

ST_10: x1 (80)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:184 (grouped into LUT with out node f_1_write_assign)
:65  %x1 = xor i32 %g1, %f_1_read_9

ST_10: x2 (81)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:185 (grouped into LUT with out node f_2_write_assign)
:66  %x2 = xor i32 %g2, %f_2_read_9

ST_10: x3 (82)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:186 (grouped into LUT with out node f_3_write_assign)
:67  %x3 = xor i32 %g3, %f_3_read61

ST_10: x4 (83)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:187 (grouped into LUT with out node f_4_write_assign)
:68  %x4 = xor i32 %g4, %f_4_read62

ST_10: x5 (84)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:188 (grouped into LUT with out node f_5_write_assign)
:69  %x5 = xor i32 %g5, %f_5_read63

ST_10: x6 (85)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:189 (grouped into LUT with out node f_6_write_assign)
:70  %x6 = xor i32 %g6, %f_6_read64

ST_10: x7 (86)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:190 (grouped into LUT with out node f_7_write_assign)
:71  %x7 = xor i32 %g7, %f_7_read65

ST_10: x8 (87)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:191 (grouped into LUT with out node f_8_write_assign)
:72  %x8 = xor i32 %g8, %f_8_read66

ST_10: x9 (88)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:192 (grouped into LUT with out node f_9_write_assign)
:73  %x9 = xor i32 %g9, %f_9_read67

ST_10: b_assign_cast (89)  [1/1] 0.08ns  loc: ed25519/src/fe.cpp:194
:74  %b_assign_cast = select i1 %b_read, i32 -1, i32 0

ST_10: x0_1 (90)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:195 (grouped into LUT with out node f_0_write_assign)
:75  %x0_1 = and i32 %x0, %b_assign_cast

ST_10: x1_1 (91)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:196 (grouped into LUT with out node f_1_write_assign)
:76  %x1_1 = and i32 %x1, %b_assign_cast

ST_10: x2_1 (92)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:197 (grouped into LUT with out node f_2_write_assign)
:77  %x2_1 = and i32 %x2, %b_assign_cast

ST_10: x3_1 (93)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:198 (grouped into LUT with out node f_3_write_assign)
:78  %x3_1 = and i32 %x3, %b_assign_cast

ST_10: x4_1 (94)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:199 (grouped into LUT with out node f_4_write_assign)
:79  %x4_1 = and i32 %x4, %b_assign_cast

ST_10: x5_1 (95)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:200 (grouped into LUT with out node f_5_write_assign)
:80  %x5_1 = and i32 %x5, %b_assign_cast

ST_10: x6_1 (96)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:201 (grouped into LUT with out node f_6_write_assign)
:81  %x6_1 = and i32 %x6, %b_assign_cast

ST_10: x7_1 (97)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:202 (grouped into LUT with out node f_7_write_assign)
:82  %x7_1 = and i32 %x7, %b_assign_cast

ST_10: x8_1 (98)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:203 (grouped into LUT with out node f_8_write_assign)
:83  %x8_1 = and i32 %x8, %b_assign_cast

ST_10: x9_1 (99)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:204 (grouped into LUT with out node f_9_write_assign)
:84  %x9_1 = and i32 %x9, %b_assign_cast

ST_10: f_0_write_assign (100)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:206 (out node of the LUT)
:85  %f_0_write_assign = xor i32 %x0_1, %f_0_read58

ST_10: f_1_write_assign (101)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:207 (out node of the LUT)
:86  %f_1_write_assign = xor i32 %x1_1, %f_1_read_9

ST_10: f_2_write_assign (102)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:208 (out node of the LUT)
:87  %f_2_write_assign = xor i32 %x2_1, %f_2_read_9

ST_10: f_3_write_assign (103)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:209 (out node of the LUT)
:88  %f_3_write_assign = xor i32 %x3_1, %f_3_read61

ST_10: f_4_write_assign (104)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:210 (out node of the LUT)
:89  %f_4_write_assign = xor i32 %x4_1, %f_4_read62

ST_10: f_5_write_assign (105)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:211 (out node of the LUT)
:90  %f_5_write_assign = xor i32 %x5_1, %f_5_read63

ST_10: f_6_write_assign (106)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:212 (out node of the LUT)
:91  %f_6_write_assign = xor i32 %x6_1, %f_6_read64

ST_10: f_7_write_assign (107)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:213 (out node of the LUT)
:92  %f_7_write_assign = xor i32 %x7_1, %f_7_read65

ST_10: f_8_write_assign (108)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:214 (out node of the LUT)
:93  %f_8_write_assign = xor i32 %x8_1, %f_8_read66

ST_10: f_9_write_assign (109)  [1/1] 0.05ns  loc: ed25519/src/fe.cpp:215 (out node of the LUT)
:94  %f_9_write_assign = xor i32 %x9_1, %f_9_read67

ST_10: mrv (110)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:95  %mrv = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } undef, i32 %f_0_write_assign, 0

ST_10: mrv_1 (111)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:96  %mrv_1 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv, i32 %f_1_write_assign, 1

ST_10: mrv_2 (112)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:97  %mrv_2 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_1, i32 %f_2_write_assign, 2

ST_10: mrv_3 (113)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:98  %mrv_3 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_2, i32 %f_3_write_assign, 3

ST_10: mrv_4 (114)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:99  %mrv_4 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_3, i32 %f_4_write_assign, 4

ST_10: mrv_5 (115)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:100  %mrv_5 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_4, i32 %f_5_write_assign, 5

ST_10: mrv_6 (116)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:101  %mrv_6 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_5, i32 %f_6_write_assign, 6

ST_10: mrv_7 (117)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:102  %mrv_7 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_6, i32 %f_7_write_assign, 7

ST_10: mrv_8 (118)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:103  %mrv_8 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_7, i32 %f_8_write_assign, 8

ST_10: mrv_9 (119)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:104  %mrv_9 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_8, i32 %f_9_write_assign, 9

ST_10: StgValue_126 (120)  [1/1] 0.00ns  loc: ed25519/src/fe.cpp:216
:105  ret { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_9



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 0.765ns
The critical path consists of the following:
	wire read on port 'u_xy2d_offset' [16]  (0 ns)
	'add' operation ('tmp_1438') [32]  (0.765 ns)

 <State 2>: 0.717ns
The critical path consists of the following:
	'add' operation ('tmp_1440', ed25519/src/fe.cpp:175) [38]  (0.717 ns)

 <State 3>: 0.717ns
The critical path consists of the following:
	'add' operation ('tmp_1441', ed25519/src/fe.cpp:176) [41]  (0.717 ns)

 <State 4>: 0.717ns
The critical path consists of the following:
	'add' operation ('tmp_1442', ed25519/src/fe.cpp:177) [44]  (0.717 ns)

 <State 5>: 1.24ns
The critical path consists of the following:
	'getelementptr' operation ('g_addr') [34]  (0 ns)
	'load' operation ('g0', ed25519/src/fe.cpp:173) on array 'g' [69]  (1.24 ns)

 <State 6>: 1.24ns
The critical path consists of the following:
	'getelementptr' operation ('g_addr_2', ed25519/src/fe.cpp:175) [40]  (0 ns)
	'load' operation ('g2', ed25519/src/fe.cpp:175) on array 'g' [71]  (1.24 ns)

 <State 7>: 1.24ns
The critical path consists of the following:
	'getelementptr' operation ('g_addr_4', ed25519/src/fe.cpp:177) [46]  (0 ns)
	'load' operation ('g4', ed25519/src/fe.cpp:177) on array 'g' [73]  (1.24 ns)

 <State 8>: 1.24ns
The critical path consists of the following:
	'getelementptr' operation ('g_addr_6', ed25519/src/fe.cpp:179) [52]  (0 ns)
	'load' operation ('g6', ed25519/src/fe.cpp:179) on array 'g' [75]  (1.24 ns)

 <State 9>: 1.95ns
The critical path consists of the following:
	'add' operation ('tmp_1447', ed25519/src/fe.cpp:182) [59]  (0.717 ns)
	'getelementptr' operation ('g_addr_9', ed25519/src/fe.cpp:182) [61]  (0 ns)
	'load' operation ('g9', ed25519/src/fe.cpp:182) on array 'g' [78]  (1.24 ns)

 <State 10>: 1.29ns
The critical path consists of the following:
	'load' operation ('g8', ed25519/src/fe.cpp:181) on array 'g' [77]  (1.24 ns)
	'xor' operation ('x8', ed25519/src/fe.cpp:191) [87]  (0 ns)
	'and' operation ('x8', ed25519/src/fe.cpp:203) [98]  (0 ns)
	'xor' operation ('f[8]', ed25519/src/fe.cpp:214) [108]  (0.051 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
