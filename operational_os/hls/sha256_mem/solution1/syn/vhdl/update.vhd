-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SHA256_m_tot_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
    SHA256_m_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
    SHA256_m_block_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    SHA256_m_block_ce0 : OUT STD_LOGIC;
    SHA256_m_block_we0 : OUT STD_LOGIC;
    SHA256_m_block_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    SHA256_m_block_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    SHA256_m_block_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    SHA256_m_block_ce1 : OUT STD_LOGIC;
    SHA256_m_block_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    SHA256_m_h_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    SHA256_m_h_ce0 : OUT STD_LOGIC;
    SHA256_m_h_we0 : OUT STD_LOGIC;
    SHA256_m_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    SHA256_m_h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    message_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    message_ce0 : OUT STD_LOGIC;
    message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    message_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    message_ce1 : OUT STD_LOGIC;
    message_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of update is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_FFFFFFBF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rem_len_fu_192_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal rem_len_reg_372 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_200_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_reg_380 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_209_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_388 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_i_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_i_fu_224_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_i_reg_398 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_234_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_len_fu_241_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal new_len_reg_411 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal rem_len_1_fu_246_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal rem_len_1_reg_416 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal new_len_cast3_fu_259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal new_len_cast3_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_transform_1_fu_152_ap_done : STD_LOGIC;
    signal tmp_3_cast_fu_269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_reg_433 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_441 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_i2_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transform_1_fu_152_ap_start : STD_LOGIC;
    signal grp_transform_1_fu_152_ap_idle : STD_LOGIC;
    signal grp_transform_1_fu_152_ap_ready : STD_LOGIC;
    signal grp_transform_1_fu_152_SHA256_m_h_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transform_1_fu_152_SHA256_m_h_ce0 : STD_LOGIC;
    signal grp_transform_1_fu_152_SHA256_m_h_we0 : STD_LOGIC;
    signal grp_transform_1_fu_152_SHA256_m_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transform_1_fu_152_message_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_transform_1_fu_152_message_ce0 : STD_LOGIC;
    signal grp_transform_1_fu_152_message_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_transform_1_fu_152_message_ce1 : STD_LOGIC;
    signal grp_transform_fu_164_ap_start : STD_LOGIC;
    signal grp_transform_fu_164_ap_done : STD_LOGIC;
    signal grp_transform_fu_164_ap_idle : STD_LOGIC;
    signal grp_transform_fu_164_ap_ready : STD_LOGIC;
    signal grp_transform_fu_164_SHA256_m_h_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_transform_fu_164_SHA256_m_h_ce0 : STD_LOGIC;
    signal grp_transform_fu_164_SHA256_m_h_we0 : STD_LOGIC;
    signal grp_transform_fu_164_SHA256_m_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_transform_fu_164_message_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_transform_fu_164_message_ce0 : STD_LOGIC;
    signal grp_transform_fu_164_message_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_transform_fu_164_message_ce1 : STD_LOGIC;
    signal i_i_reg_111 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_i1_reg_122 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal SHA256_m_tot_len_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal SHA256_m_len_write_a_reg_143 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_grp_transform_1_fu_152_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_transform_fu_164_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_i_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_i_cast_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_len_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_182_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i_cast_fu_220_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_262_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i3_cast_fu_284_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_288_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_cast_fu_293_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum3_i_fu_297_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_312_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_322_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal SHA256_m_len_write_a_1_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component transform_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SHA256_m_h_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        SHA256_m_h_ce0 : OUT STD_LOGIC;
        SHA256_m_h_we0 : OUT STD_LOGIC;
        SHA256_m_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        message_ce1 : OUT STD_LOGIC;
        message_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        tmp_1 : IN STD_LOGIC_VECTOR (6 downto 0);
        block_nb : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SHA256_m_h_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        SHA256_m_h_ce0 : OUT STD_LOGIC;
        SHA256_m_h_we0 : OUT STD_LOGIC;
        SHA256_m_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        message_ce1 : OUT STD_LOGIC;
        message_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        block_nb : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    grp_transform_1_fu_152 : component transform_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_transform_1_fu_152_ap_start,
        ap_done => grp_transform_1_fu_152_ap_done,
        ap_idle => grp_transform_1_fu_152_ap_idle,
        ap_ready => grp_transform_1_fu_152_ap_ready,
        SHA256_m_h_address0 => grp_transform_1_fu_152_SHA256_m_h_address0,
        SHA256_m_h_ce0 => grp_transform_1_fu_152_SHA256_m_h_ce0,
        SHA256_m_h_we0 => grp_transform_1_fu_152_SHA256_m_h_we0,
        SHA256_m_h_d0 => grp_transform_1_fu_152_SHA256_m_h_d0,
        SHA256_m_h_q0 => SHA256_m_h_q0,
        message_address0 => grp_transform_1_fu_152_message_address0,
        message_ce0 => grp_transform_1_fu_152_message_ce0,
        message_q0 => message_q0,
        message_address1 => grp_transform_1_fu_152_message_address1,
        message_ce1 => grp_transform_1_fu_152_message_ce1,
        message_q1 => message_q1,
        tmp_1 => rem_len_reg_372,
        block_nb => tmp_11_reg_422);

    grp_transform_fu_164 : component transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_transform_fu_164_ap_start,
        ap_done => grp_transform_fu_164_ap_done,
        ap_idle => grp_transform_fu_164_ap_idle,
        ap_ready => grp_transform_fu_164_ap_ready,
        SHA256_m_h_address0 => grp_transform_fu_164_SHA256_m_h_address0,
        SHA256_m_h_ce0 => grp_transform_fu_164_SHA256_m_h_ce0,
        SHA256_m_h_we0 => grp_transform_fu_164_SHA256_m_h_we0,
        SHA256_m_h_d0 => grp_transform_fu_164_SHA256_m_h_d0,
        SHA256_m_h_q0 => SHA256_m_h_q0,
        message_address0 => grp_transform_fu_164_message_address0,
        message_ce0 => grp_transform_fu_164_message_ce0,
        message_q0 => SHA256_m_block_q0,
        message_address1 => grp_transform_fu_164_message_address1,
        message_ce1 => grp_transform_fu_164_message_ce1,
        message_q1 => SHA256_m_block_q1,
        block_nb => ap_const_lv2_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_transform_1_fu_152_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_transform_1_fu_152_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_reg_grp_transform_1_fu_152_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_transform_1_fu_152_ap_ready)) then 
                    ap_reg_grp_transform_1_fu_152_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_transform_fu_164_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_transform_fu_164_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_fu_204_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_9_fu_229_p2))) then 
                    ap_reg_grp_transform_fu_164_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_transform_fu_164_ap_ready)) then 
                    ap_reg_grp_transform_fu_164_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_return_0_preg <= SHA256_m_tot_len_reg_134;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg(0) <= '0';
                ap_return_1_preg(1) <= '0';
                ap_return_1_preg(2) <= '0';
                ap_return_1_preg(3) <= '0';
                ap_return_1_preg(4) <= '0';
                ap_return_1_preg(5) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                                        ap_return_1_preg(5 downto 0) <= SHA256_m_len_write_a_1_fu_344_p1(5 downto 0);
                end if; 
            end if;
        end if;
    end process;


    SHA256_m_len_write_a_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_i2_fu_273_p2))) then 
                SHA256_m_len_write_a_reg_143 <= rem_len_1_reg_416;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_fu_204_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_9_fu_229_p2))) then 
                SHA256_m_len_write_a_reg_143 <= tmp_8_fu_234_p1;
            end if; 
        end if;
    end process;

    SHA256_m_tot_len_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_i2_fu_273_p2))) then 
                SHA256_m_tot_len_reg_134 <= tmp_6_fu_334_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_fu_204_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_9_fu_229_p2))) then 
                SHA256_m_tot_len_reg_134 <= SHA256_m_tot_len_read;
            end if; 
        end if;
    end process;

    i_i1_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i1_reg_122 <= i_1_reg_441;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_transform_1_fu_152_ap_done = ap_const_logic_1))) then 
                i_i1_reg_122 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_111 <= i_reg_388;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_i_reg_111 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_1_reg_441 <= i_1_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_388 <= i_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_transform_1_fu_152_ap_done = ap_const_logic_1))) then
                    new_len_cast3_reg_428(6 downto 0) <= new_len_cast3_fu_259_p1(6 downto 0);
                    tmp_3_cast_reg_433(6) <= tmp_3_cast_fu_269_p1(6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                new_len_reg_411 <= new_len_fu_241_p2;
                rem_len_1_reg_416 <= rem_len_1_fu_246_p1;
                tmp_11_reg_422 <= new_len_fu_241_p2(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                rem_len_reg_372 <= rem_len_fu_192_p3;
                tmp_3_reg_380 <= tmp_3_fu_200_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_fu_204_p2 = ap_const_lv1_0))) then
                sum_i_reg_398 <= sum_i_fu_224_p2;
            end if;
        end if;
    end process;
    new_len_cast3_reg_428(7) <= '0';
    tmp_3_cast_reg_433(5 downto 0) <= "000000";
    tmp_3_cast_reg_433(7) <= '0';
    ap_return_1_preg(31 downto 6) <= "00000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_i_fu_204_p2, tmp_9_fu_229_p2, ap_CS_fsm_state6, grp_transform_1_fu_152_ap_done, ap_CS_fsm_state7, exitcond_i2_fu_273_p2, grp_transform_fu_164_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_fu_204_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_9_fu_229_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_fu_204_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_9_fu_229_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_transform_fu_164_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_transform_1_fu_152_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_i2_fu_273_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    SHA256_m_block_address0_assign_proc : process(grp_transform_fu_164_message_address0, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4, sum_i_cast_fu_237_p1, tmp_i3_fu_339_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SHA256_m_block_address0 <= tmp_i3_fu_339_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SHA256_m_block_address0 <= sum_i_cast_fu_237_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SHA256_m_block_address0 <= grp_transform_fu_164_message_address0;
        else 
            SHA256_m_block_address0 <= "XXXXXXX";
        end if; 
    end process;

    SHA256_m_block_address1 <= grp_transform_fu_164_message_address1;

    SHA256_m_block_ce0_assign_proc : process(grp_transform_fu_164_message_ce0, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            SHA256_m_block_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SHA256_m_block_ce0 <= grp_transform_fu_164_message_ce0;
        else 
            SHA256_m_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SHA256_m_block_ce1_assign_proc : process(grp_transform_fu_164_message_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SHA256_m_block_ce1 <= grp_transform_fu_164_message_ce1;
        else 
            SHA256_m_block_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    SHA256_m_block_d0 <= message_q0;

    SHA256_m_block_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            SHA256_m_block_we0 <= ap_const_logic_1;
        else 
            SHA256_m_block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SHA256_m_h_address0_assign_proc : process(ap_CS_fsm_state6, grp_transform_1_fu_152_SHA256_m_h_address0, grp_transform_fu_164_SHA256_m_h_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SHA256_m_h_address0 <= grp_transform_fu_164_SHA256_m_h_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SHA256_m_h_address0 <= grp_transform_1_fu_152_SHA256_m_h_address0;
        else 
            SHA256_m_h_address0 <= "XXX";
        end if; 
    end process;


    SHA256_m_h_ce0_assign_proc : process(ap_CS_fsm_state6, grp_transform_1_fu_152_SHA256_m_h_ce0, grp_transform_fu_164_SHA256_m_h_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SHA256_m_h_ce0 <= grp_transform_fu_164_SHA256_m_h_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SHA256_m_h_ce0 <= grp_transform_1_fu_152_SHA256_m_h_ce0;
        else 
            SHA256_m_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SHA256_m_h_d0_assign_proc : process(ap_CS_fsm_state6, grp_transform_1_fu_152_SHA256_m_h_d0, grp_transform_fu_164_SHA256_m_h_d0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SHA256_m_h_d0 <= grp_transform_fu_164_SHA256_m_h_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SHA256_m_h_d0 <= grp_transform_1_fu_152_SHA256_m_h_d0;
        else 
            SHA256_m_h_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SHA256_m_h_we0_assign_proc : process(ap_CS_fsm_state6, grp_transform_1_fu_152_SHA256_m_h_we0, grp_transform_fu_164_SHA256_m_h_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SHA256_m_h_we0 <= grp_transform_fu_164_SHA256_m_h_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SHA256_m_h_we0 <= grp_transform_1_fu_152_SHA256_m_h_we0;
        else 
            SHA256_m_h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    SHA256_m_len_write_a_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SHA256_m_len_write_a_reg_143),32));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(SHA256_m_tot_len_reg_134, ap_CS_fsm_state9, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_return_0 <= SHA256_m_tot_len_reg_134;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state9, SHA256_m_len_write_a_1_fu_344_p1, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_return_1 <= SHA256_m_len_write_a_1_fu_344_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    exitcond_i2_fu_273_p2 <= "1" when (i_i1_reg_122 = rem_len_1_reg_416) else "0";
    exitcond_i_fu_204_p2 <= "1" when (i_i_reg_111 = rem_len_reg_372) else "0";
    grp_transform_1_fu_152_ap_start <= ap_reg_grp_transform_1_fu_152_ap_start;
    grp_transform_fu_164_ap_start <= ap_reg_grp_transform_fu_164_ap_start;
    i_1_fu_278_p2 <= std_logic_vector(unsigned(i_i1_reg_122) + unsigned(ap_const_lv6_1));
    i_fu_209_p2 <= std_logic_vector(unsigned(i_i_reg_111) + unsigned(ap_const_lv7_1));

    message_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_transform_1_fu_152_message_address0, tmp_i_fu_215_p1, sum3_i_cast_fu_302_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            message_address0 <= sum3_i_cast_fu_302_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_address0 <= tmp_i_fu_215_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            message_address0 <= grp_transform_1_fu_152_message_address0;
        else 
            message_address0 <= "XXXXXX";
        end if; 
    end process;

    message_address1 <= grp_transform_1_fu_152_message_address1;

    message_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_transform_1_fu_152_message_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            message_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            message_ce0 <= grp_transform_1_fu_152_message_ce0;
        else 
            message_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    message_ce1_assign_proc : process(ap_CS_fsm_state6, grp_transform_1_fu_152_message_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            message_ce1 <= grp_transform_1_fu_152_message_ce1;
        else 
            message_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    new_len_cast3_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(new_len_reg_411),8));
    new_len_fu_241_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(rem_len_reg_372));
    rem_len_1_fu_246_p1 <= new_len_fu_241_p2(6 - 1 downto 0);
    rem_len_fu_192_p3 <= 
        ap_const_lv7_40 when (tmp_fu_186_p2(0) = '1') else 
        tmp_1_fu_182_p1;
    sum3_i_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_i_fu_297_p2),64));
    sum3_i_fu_297_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_293_p1) + unsigned(tmp_3_cast_reg_433));
    sum_i_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_reg_398),64));
    sum_i_fu_224_p2 <= std_logic_vector(unsigned(tmp_3_reg_380) + unsigned(tmp_i_cast_fu_220_p1));
    tmp1_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_288_p2),8));
    tmp1_fu_288_p2 <= std_logic_vector(unsigned(rem_len_reg_372) + unsigned(tmp_i3_cast_fu_284_p1));
    tmp_1_fu_182_p1 <= tmp_len_fu_176_p2(7 - 1 downto 0);
    tmp_2_fu_262_p3 <= (tmp_11_reg_422 & ap_const_lv6_0);
    tmp_3_cast_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_262_p3),8));
    tmp_3_fu_200_p1 <= SHA256_m_len_read(9 - 1 downto 0);
    tmp_4_fu_307_p2 <= std_logic_vector(unsigned(new_len_cast3_reg_428) + unsigned(ap_const_lv8_40));
    tmp_5_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_322_p3),32));
    tmp_5_fu_322_p3 <= (tmp_7_fu_312_p4 & ap_const_lv6_0);
    tmp_6_fu_334_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_330_p1) + unsigned(SHA256_m_tot_len_read));
    tmp_7_fu_312_p4 <= tmp_4_fu_307_p2(7 downto 6);
    tmp_8_fu_234_p1 <= SHA256_m_len_read(6 - 1 downto 0);
    tmp_9_fu_229_p2 <= "1" when (unsigned(SHA256_m_len_read) > unsigned(ap_const_lv32_FFFFFFBF)) else "0";
    tmp_fu_186_p2 <= "1" when (unsigned(tmp_len_fu_176_p2) > unsigned(ap_const_lv32_40)) else "0";
    tmp_i3_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_122),7));
    tmp_i3_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_122),64));
    tmp_i_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_111),9));
    tmp_i_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_111),64));
    tmp_len_fu_176_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) - unsigned(SHA256_m_len_read));
end behav;
