// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _secure_enclave_key_store_ghash_iteration_HH_
#define _secure_enclave_key_store_ghash_iteration_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct secure_enclave_key_store_ghash_iteration : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<128> > h_V;
    sc_in< sc_lv<128> > d_V;
    sc_in< sc_lv<128> > x_prev_V;
    sc_out< sc_lv<128> > ap_return;


    // Module declarations
    secure_enclave_key_store_ghash_iteration(sc_module_name name);
    SC_HAS_PROCESS(secure_enclave_key_store_ghash_iteration);

    ~secure_enclave_key_store_ghash_iteration();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_19;
    sc_signal< sc_lv<128> > h_V_read_reg_153;
    sc_signal< sc_lv<128> > r_V_3_fu_88_p2;
    sc_signal< sc_lv<8> > i_fu_104_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_42;
    sc_signal< sc_lv<128> > agg_result_V_0_r_V_i_fu_123_p3;
    sc_signal< sc_lv<1> > exitcond_i_fu_98_p2;
    sc_signal< sc_lv<128> > lhs_V_r_V_i_fu_131_p3;
    sc_signal< sc_lv<128> > r_V_2_fu_149_p1;
    sc_signal< sc_lv<128> > agg_result_V_i_reg_46;
    sc_signal< sc_lv<128> > lhs_V_reg_57;
    sc_signal< sc_lv<128> > rhs_V_reg_68;
    sc_signal< sc_lv<8> > i_assign_reg_77;
    sc_signal< sc_lv<32> > i_assign_cast1_fu_94_p1;
    sc_signal< sc_lv<1> > tmp_fu_110_p3;
    sc_signal< sc_lv<128> > z_V_fu_117_p2;
    sc_signal< sc_lv<127> > r_V_1_fu_139_p4;
    sc_signal< sc_lv<128> > ap_return_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_7F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_agg_result_V_0_r_V_i_fu_123_p3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_19();
    void thread_ap_sig_42();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_exitcond_i_fu_98_p2();
    void thread_i_assign_cast1_fu_94_p1();
    void thread_i_fu_104_p2();
    void thread_lhs_V_r_V_i_fu_131_p3();
    void thread_r_V_1_fu_139_p4();
    void thread_r_V_2_fu_149_p1();
    void thread_r_V_3_fu_88_p2();
    void thread_tmp_fu_110_p3();
    void thread_z_V_fu_117_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
