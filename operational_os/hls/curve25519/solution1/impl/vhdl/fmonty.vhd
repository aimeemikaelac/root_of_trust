-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fmonty is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x2_ce0 : OUT STD_LOGIC;
    x2_we0 : OUT STD_LOGIC;
    x2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    x2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x2_ce1 : OUT STD_LOGIC;
    x2_we1 : OUT STD_LOGIC;
    x2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    x2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    z2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    z2_ce0 : OUT STD_LOGIC;
    z2_we0 : OUT STD_LOGIC;
    z2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    z2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    z2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    z2_ce1 : OUT STD_LOGIC;
    z2_we1 : OUT STD_LOGIC;
    z2_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    z2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    x3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x3_ce0 : OUT STD_LOGIC;
    x3_we0 : OUT STD_LOGIC;
    x3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    z3_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    z3_ce0 : OUT STD_LOGIC;
    z3_we0 : OUT STD_LOGIC;
    z3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    x_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_we1 : OUT STD_LOGIC;
    x_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    x_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    z_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    z_ce0 : OUT STD_LOGIC;
    z_we0 : OUT STD_LOGIC;
    z_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    z_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    z_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    z_ce1 : OUT STD_LOGIC;
    z_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    xprime_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xprime_ce0 : OUT STD_LOGIC;
    xprime_we0 : OUT STD_LOGIC;
    xprime_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    xprime_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    xprime_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xprime_ce1 : OUT STD_LOGIC;
    xprime_we1 : OUT STD_LOGIC;
    xprime_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    xprime_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    zprime_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    zprime_ce0 : OUT STD_LOGIC;
    zprime_we0 : OUT STD_LOGIC;
    zprime_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    zprime_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    zprime_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    zprime_ce1 : OUT STD_LOGIC;
    zprime_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    qmqp_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    qmqp_ce0 : OUT STD_LOGIC;
    qmqp_q0 : IN STD_LOGIC_VECTOR (25 downto 0) );
end;


architecture behav of fmonty is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv64_1DB41 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000011101101101000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal reg_220 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal reg_231 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_i_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_reg_491 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i1_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i3_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zz_addr_reg_509 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i3_26_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_26_reg_520 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zz_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zz_load_1_reg_530 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal origx_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal origx_ce0 : STD_LOGIC;
    signal origx_we0 : STD_LOGIC;
    signal origx_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal origxprime_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal origxprime_ce0 : STD_LOGIC;
    signal origxprime_we0 : STD_LOGIC;
    signal origxprime_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zzz_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zzz_ce0 : STD_LOGIC;
    signal zzz_we0 : STD_LOGIC;
    signal zzz_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zzz_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zzz_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zzz_ce1 : STD_LOGIC;
    signal zzz_we1 : STD_LOGIC;
    signal zzz_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zzz_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xx_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xx_ce0 : STD_LOGIC;
    signal xx_we0 : STD_LOGIC;
    signal xx_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal xx_ce1 : STD_LOGIC;
    signal xx_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zz_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zz_ce0 : STD_LOGIC;
    signal zz_we0 : STD_LOGIC;
    signal zz_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal xxprime_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xxprime_ce0 : STD_LOGIC;
    signal xxprime_we0 : STD_LOGIC;
    signal xxprime_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal xxprime_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal xxprime_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal xxprime_ce1 : STD_LOGIC;
    signal xxprime_we1 : STD_LOGIC;
    signal xxprime_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xxprime_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zzprime_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zzprime_ce0 : STD_LOGIC;
    signal zzprime_we0 : STD_LOGIC;
    signal zzprime_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zzprime_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zzprime_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zzprime_ce1 : STD_LOGIC;
    signal zzprime_we1 : STD_LOGIC;
    signal zzprime_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zzprime_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zzzprime_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zzzprime_ce0 : STD_LOGIC;
    signal zzzprime_we0 : STD_LOGIC;
    signal zzzprime_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal xxxprime_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xxxprime_ce0 : STD_LOGIC;
    signal xxxprime_we0 : STD_LOGIC;
    signal xxxprime_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsquare_fu_331_ap_start : STD_LOGIC;
    signal grp_fsquare_fu_331_ap_done : STD_LOGIC;
    signal grp_fsquare_fu_331_ap_idle : STD_LOGIC;
    signal grp_fsquare_fu_331_ap_ready : STD_LOGIC;
    signal grp_fsquare_fu_331_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fsquare_fu_331_output_r_ce0 : STD_LOGIC;
    signal grp_fsquare_fu_331_output_r_we0 : STD_LOGIC;
    signal grp_fsquare_fu_331_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsquare_fu_331_in_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fsquare_fu_331_in_r_ce0 : STD_LOGIC;
    signal grp_fsquare_fu_331_in_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsquare_fu_338_ap_start : STD_LOGIC;
    signal grp_fsquare_fu_338_ap_done : STD_LOGIC;
    signal grp_fsquare_fu_338_ap_idle : STD_LOGIC;
    signal grp_fsquare_fu_338_ap_ready : STD_LOGIC;
    signal grp_fsquare_fu_338_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fsquare_fu_338_output_r_ce0 : STD_LOGIC;
    signal grp_fsquare_fu_338_output_r_we0 : STD_LOGIC;
    signal grp_fsquare_fu_338_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsquare_fu_338_in_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fsquare_fu_338_in_r_ce0 : STD_LOGIC;
    signal grp_fproduct_fu_345_ap_start : STD_LOGIC;
    signal grp_fproduct_fu_345_ap_done : STD_LOGIC;
    signal grp_fproduct_fu_345_ap_idle : STD_LOGIC;
    signal grp_fproduct_fu_345_ap_ready : STD_LOGIC;
    signal grp_fproduct_fu_345_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fproduct_fu_345_output_r_ce0 : STD_LOGIC;
    signal grp_fproduct_fu_345_output_r_we0 : STD_LOGIC;
    signal grp_fproduct_fu_345_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fproduct_fu_345_in2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fproduct_fu_345_in2_ce0 : STD_LOGIC;
    signal grp_fproduct_fu_345_in2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fproduct_fu_345_in_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fproduct_fu_345_in_r_ce0 : STD_LOGIC;
    signal grp_fproduct_fu_345_in_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fproduct_1_fu_358_ap_start : STD_LOGIC;
    signal grp_fproduct_1_fu_358_ap_done : STD_LOGIC;
    signal grp_fproduct_1_fu_358_ap_idle : STD_LOGIC;
    signal grp_fproduct_1_fu_358_ap_ready : STD_LOGIC;
    signal grp_fproduct_1_fu_358_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fproduct_1_fu_358_output_r_ce0 : STD_LOGIC;
    signal grp_fproduct_1_fu_358_output_r_we0 : STD_LOGIC;
    signal grp_fproduct_1_fu_358_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fproduct_1_fu_358_in2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fproduct_1_fu_358_in2_ce0 : STD_LOGIC;
    signal grp_fproduct_1_fu_358_in_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fproduct_1_fu_358_in_r_ce0 : STD_LOGIC;
    signal grp_freduce_degree_fu_366_ap_start : STD_LOGIC;
    signal grp_freduce_degree_fu_366_ap_done : STD_LOGIC;
    signal grp_freduce_degree_fu_366_ap_idle : STD_LOGIC;
    signal grp_freduce_degree_fu_366_ap_ready : STD_LOGIC;
    signal grp_freduce_degree_fu_366_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_freduce_degree_fu_366_output_r_ce0 : STD_LOGIC;
    signal grp_freduce_degree_fu_366_output_r_we0 : STD_LOGIC;
    signal grp_freduce_degree_fu_366_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_freduce_degree_fu_366_output_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_freduce_degree_fu_366_output_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_freduce_degree_fu_366_output_r_ce1 : STD_LOGIC;
    signal grp_freduce_degree_fu_366_output_r_we1 : STD_LOGIC;
    signal grp_freduce_degree_fu_366_output_r_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_freduce_degree_fu_366_output_r_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_freduce_coefficients_fu_373_ap_start : STD_LOGIC;
    signal grp_freduce_coefficients_fu_373_ap_done : STD_LOGIC;
    signal grp_freduce_coefficients_fu_373_ap_idle : STD_LOGIC;
    signal grp_freduce_coefficients_fu_373_ap_ready : STD_LOGIC;
    signal grp_freduce_coefficients_fu_373_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_freduce_coefficients_fu_373_output_r_ce0 : STD_LOGIC;
    signal grp_freduce_coefficients_fu_373_output_r_we0 : STD_LOGIC;
    signal grp_freduce_coefficients_fu_373_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_freduce_coefficients_fu_373_output_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_freduce_coefficients_fu_373_output_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_freduce_coefficients_fu_373_output_r_ce1 : STD_LOGIC;
    signal grp_freduce_coefficients_fu_373_output_r_we1 : STD_LOGIC;
    signal grp_freduce_coefficients_fu_373_output_r_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_freduce_coefficients_fu_373_output_r_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsum_fu_380_ap_start : STD_LOGIC;
    signal grp_fsum_fu_380_ap_done : STD_LOGIC;
    signal grp_fsum_fu_380_ap_idle : STD_LOGIC;
    signal grp_fsum_fu_380_ap_ready : STD_LOGIC;
    signal grp_fsum_fu_380_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fsum_fu_380_output_r_ce0 : STD_LOGIC;
    signal grp_fsum_fu_380_output_r_we0 : STD_LOGIC;
    signal grp_fsum_fu_380_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsum_fu_380_output_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsum_fu_380_output_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fsum_fu_380_output_r_ce1 : STD_LOGIC;
    signal grp_fsum_fu_380_output_r_we1 : STD_LOGIC;
    signal grp_fsum_fu_380_output_r_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsum_fu_380_output_r_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsum_fu_380_in_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fsum_fu_380_in_r_ce0 : STD_LOGIC;
    signal grp_fsum_fu_380_in_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fsum_fu_380_in_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fsum_fu_380_in_r_ce1 : STD_LOGIC;
    signal grp_fsum_fu_380_in_r_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fdifference_1_fu_390_ap_start : STD_LOGIC;
    signal grp_fdifference_1_fu_390_ap_done : STD_LOGIC;
    signal grp_fdifference_1_fu_390_ap_idle : STD_LOGIC;
    signal grp_fdifference_1_fu_390_ap_ready : STD_LOGIC;
    signal grp_fdifference_1_fu_390_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fdifference_1_fu_390_output_r_ce0 : STD_LOGIC;
    signal grp_fdifference_1_fu_390_output_r_we0 : STD_LOGIC;
    signal grp_fdifference_1_fu_390_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fdifference_1_fu_390_output_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fdifference_1_fu_390_in_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fdifference_1_fu_390_in_r_ce0 : STD_LOGIC;
    signal grp_fdifference_1_fu_390_in_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_p_memcpy_fu_398_ap_start : STD_LOGIC;
    signal grp_p_memcpy_fu_398_ap_done : STD_LOGIC;
    signal grp_p_memcpy_fu_398_ap_idle : STD_LOGIC;
    signal grp_p_memcpy_fu_398_ap_ready : STD_LOGIC;
    signal grp_p_memcpy_fu_398_dst_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_p_memcpy_fu_398_dst_ce0 : STD_LOGIC;
    signal grp_p_memcpy_fu_398_dst_we0 : STD_LOGIC;
    signal grp_p_memcpy_fu_398_dst_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_p_memcpy_fu_398_src_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_p_memcpy_fu_398_src_ce0 : STD_LOGIC;
    signal grp_p_memcpy_fu_398_src_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_i9_reg_209 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal i_i3_reg_243 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal exitcond_i2_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_fsquare_fu_331_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_reg_grp_fsquare_fu_338_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_fproduct_fu_345_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_reg_grp_fproduct_1_fu_358_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_reg_grp_freduce_degree_fu_366_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_reg_grp_freduce_coefficients_fu_373_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_reg_grp_fsum_fu_380_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_reg_grp_fdifference_1_fu_390_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_p_memcpy_fu_398_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_23_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_930_i_fu_441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_322_i_fu_316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i4_cast_fu_454_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal ap_block_state31_on_subcall_done : BOOLEAN;

    component fsquare IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fproduct IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        in2_ce0 : OUT STD_LOGIC;
        in2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fproduct_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        in2_ce0 : OUT STD_LOGIC;
        in2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component freduce_degree IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component freduce_coefficients IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fsum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fdifference_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component p_memcpy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        src_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fmonty_origx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fsquare_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fmonty_xx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fmonty_zz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    origx_U : component fmonty_origx
    generic map (
        DataWidth => 64,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => origx_address0,
        ce0 => origx_ce0,
        we0 => origx_we0,
        d0 => grp_p_memcpy_fu_398_dst_d0,
        q0 => origx_q0);

    origxprime_U : component fmonty_origx
    generic map (
        DataWidth => 64,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => origxprime_address0,
        ce0 => origxprime_ce0,
        we0 => origxprime_we0,
        d0 => grp_p_memcpy_fu_398_dst_d0,
        q0 => origxprime_q0);

    zzz_U : component fsquare_t
    generic map (
        DataWidth => 64,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zzz_address0,
        ce0 => zzz_ce0,
        we0 => zzz_we0,
        d0 => zzz_d0,
        q0 => zzz_q0,
        address1 => zzz_address1,
        ce1 => zzz_ce1,
        we1 => zzz_we1,
        d1 => zzz_d1,
        q1 => zzz_q1);

    xx_U : component fmonty_xx
    generic map (
        DataWidth => 64,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xx_address0,
        ce0 => xx_ce0,
        we0 => xx_we0,
        d0 => grp_fsquare_fu_331_output_r_d0,
        q0 => xx_q0,
        address1 => grp_fsum_fu_380_in_r_address1,
        ce1 => xx_ce1,
        q1 => xx_q1);

    zz_U : component fmonty_zz
    generic map (
        DataWidth => 64,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zz_address0,
        ce0 => zz_ce0,
        we0 => zz_we0,
        d0 => zz_d0,
        q0 => zz_q0);

    xxprime_U : component fsquare_t
    generic map (
        DataWidth => 64,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xxprime_address0,
        ce0 => xxprime_ce0,
        we0 => xxprime_we0,
        d0 => xxprime_d0,
        q0 => xxprime_q0,
        address1 => xxprime_address1,
        ce1 => xxprime_ce1,
        we1 => xxprime_we1,
        d1 => xxprime_d1,
        q1 => xxprime_q1);

    zzprime_U : component fsquare_t
    generic map (
        DataWidth => 64,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zzprime_address0,
        ce0 => zzprime_ce0,
        we0 => zzprime_we0,
        d0 => zzprime_d0,
        q0 => zzprime_q0,
        address1 => zzprime_address1,
        ce1 => zzprime_ce1,
        we1 => zzprime_we1,
        d1 => zzprime_d1,
        q1 => zzprime_q1);

    zzzprime_U : component fmonty_zz
    generic map (
        DataWidth => 64,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zzzprime_address0,
        ce0 => zzzprime_ce0,
        we0 => zzzprime_we0,
        d0 => grp_fsquare_fu_331_output_r_d0,
        q0 => zzzprime_q0);

    xxxprime_U : component fmonty_zz
    generic map (
        DataWidth => 64,
        AddressRange => 19,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xxxprime_address0,
        ce0 => xxxprime_ce0,
        we0 => xxxprime_we0,
        d0 => grp_fsquare_fu_331_output_r_d0,
        q0 => xxxprime_q0);

    grp_fsquare_fu_331 : component fsquare
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fsquare_fu_331_ap_start,
        ap_done => grp_fsquare_fu_331_ap_done,
        ap_idle => grp_fsquare_fu_331_ap_idle,
        ap_ready => grp_fsquare_fu_331_ap_ready,
        output_r_address0 => grp_fsquare_fu_331_output_r_address0,
        output_r_ce0 => grp_fsquare_fu_331_output_r_ce0,
        output_r_we0 => grp_fsquare_fu_331_output_r_we0,
        output_r_d0 => grp_fsquare_fu_331_output_r_d0,
        in_r_address0 => grp_fsquare_fu_331_in_r_address0,
        in_r_ce0 => grp_fsquare_fu_331_in_r_ce0,
        in_r_q0 => grp_fsquare_fu_331_in_r_q0);

    grp_fsquare_fu_338 : component fsquare
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fsquare_fu_338_ap_start,
        ap_done => grp_fsquare_fu_338_ap_done,
        ap_idle => grp_fsquare_fu_338_ap_idle,
        ap_ready => grp_fsquare_fu_338_ap_ready,
        output_r_address0 => grp_fsquare_fu_338_output_r_address0,
        output_r_ce0 => grp_fsquare_fu_338_output_r_ce0,
        output_r_we0 => grp_fsquare_fu_338_output_r_we0,
        output_r_d0 => grp_fsquare_fu_338_output_r_d0,
        in_r_address0 => grp_fsquare_fu_338_in_r_address0,
        in_r_ce0 => grp_fsquare_fu_338_in_r_ce0,
        in_r_q0 => z_q0);

    grp_fproduct_fu_345 : component fproduct
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fproduct_fu_345_ap_start,
        ap_done => grp_fproduct_fu_345_ap_done,
        ap_idle => grp_fproduct_fu_345_ap_idle,
        ap_ready => grp_fproduct_fu_345_ap_ready,
        output_r_address0 => grp_fproduct_fu_345_output_r_address0,
        output_r_ce0 => grp_fproduct_fu_345_output_r_ce0,
        output_r_we0 => grp_fproduct_fu_345_output_r_we0,
        output_r_d0 => grp_fproduct_fu_345_output_r_d0,
        in2_address0 => grp_fproduct_fu_345_in2_address0,
        in2_ce0 => grp_fproduct_fu_345_in2_ce0,
        in2_q0 => grp_fproduct_fu_345_in2_q0,
        in_r_address0 => grp_fproduct_fu_345_in_r_address0,
        in_r_ce0 => grp_fproduct_fu_345_in_r_ce0,
        in_r_q0 => grp_fproduct_fu_345_in_r_q0);

    grp_fproduct_1_fu_358 : component fproduct_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fproduct_1_fu_358_ap_start,
        ap_done => grp_fproduct_1_fu_358_ap_done,
        ap_idle => grp_fproduct_1_fu_358_ap_idle,
        ap_ready => grp_fproduct_1_fu_358_ap_ready,
        output_r_address0 => grp_fproduct_1_fu_358_output_r_address0,
        output_r_ce0 => grp_fproduct_1_fu_358_output_r_ce0,
        output_r_we0 => grp_fproduct_1_fu_358_output_r_we0,
        output_r_d0 => grp_fproduct_1_fu_358_output_r_d0,
        in2_address0 => grp_fproduct_1_fu_358_in2_address0,
        in2_ce0 => grp_fproduct_1_fu_358_in2_ce0,
        in2_q0 => zzzprime_q0,
        in_r_address0 => grp_fproduct_1_fu_358_in_r_address0,
        in_r_ce0 => grp_fproduct_1_fu_358_in_r_ce0,
        in_r_q0 => qmqp_q0);

    grp_freduce_degree_fu_366 : component freduce_degree
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_freduce_degree_fu_366_ap_start,
        ap_done => grp_freduce_degree_fu_366_ap_done,
        ap_idle => grp_freduce_degree_fu_366_ap_idle,
        ap_ready => grp_freduce_degree_fu_366_ap_ready,
        output_r_address0 => grp_freduce_degree_fu_366_output_r_address0,
        output_r_ce0 => grp_freduce_degree_fu_366_output_r_ce0,
        output_r_we0 => grp_freduce_degree_fu_366_output_r_we0,
        output_r_d0 => grp_freduce_degree_fu_366_output_r_d0,
        output_r_q0 => grp_freduce_degree_fu_366_output_r_q0,
        output_r_address1 => grp_freduce_degree_fu_366_output_r_address1,
        output_r_ce1 => grp_freduce_degree_fu_366_output_r_ce1,
        output_r_we1 => grp_freduce_degree_fu_366_output_r_we1,
        output_r_d1 => grp_freduce_degree_fu_366_output_r_d1,
        output_r_q1 => grp_freduce_degree_fu_366_output_r_q1);

    grp_freduce_coefficients_fu_373 : component freduce_coefficients
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_freduce_coefficients_fu_373_ap_start,
        ap_done => grp_freduce_coefficients_fu_373_ap_done,
        ap_idle => grp_freduce_coefficients_fu_373_ap_idle,
        ap_ready => grp_freduce_coefficients_fu_373_ap_ready,
        output_r_address0 => grp_freduce_coefficients_fu_373_output_r_address0,
        output_r_ce0 => grp_freduce_coefficients_fu_373_output_r_ce0,
        output_r_we0 => grp_freduce_coefficients_fu_373_output_r_we0,
        output_r_d0 => grp_freduce_coefficients_fu_373_output_r_d0,
        output_r_q0 => grp_freduce_coefficients_fu_373_output_r_q0,
        output_r_address1 => grp_freduce_coefficients_fu_373_output_r_address1,
        output_r_ce1 => grp_freduce_coefficients_fu_373_output_r_ce1,
        output_r_we1 => grp_freduce_coefficients_fu_373_output_r_we1,
        output_r_d1 => grp_freduce_coefficients_fu_373_output_r_d1,
        output_r_q1 => grp_freduce_coefficients_fu_373_output_r_q1);

    grp_fsum_fu_380 : component fsum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fsum_fu_380_ap_start,
        ap_done => grp_fsum_fu_380_ap_done,
        ap_idle => grp_fsum_fu_380_ap_idle,
        ap_ready => grp_fsum_fu_380_ap_ready,
        output_r_address0 => grp_fsum_fu_380_output_r_address0,
        output_r_ce0 => grp_fsum_fu_380_output_r_ce0,
        output_r_we0 => grp_fsum_fu_380_output_r_we0,
        output_r_d0 => grp_fsum_fu_380_output_r_d0,
        output_r_q0 => grp_fsum_fu_380_output_r_q0,
        output_r_address1 => grp_fsum_fu_380_output_r_address1,
        output_r_ce1 => grp_fsum_fu_380_output_r_ce1,
        output_r_we1 => grp_fsum_fu_380_output_r_we1,
        output_r_d1 => grp_fsum_fu_380_output_r_d1,
        output_r_q1 => grp_fsum_fu_380_output_r_q1,
        in_r_address0 => grp_fsum_fu_380_in_r_address0,
        in_r_ce0 => grp_fsum_fu_380_in_r_ce0,
        in_r_q0 => grp_fsum_fu_380_in_r_q0,
        in_r_address1 => grp_fsum_fu_380_in_r_address1,
        in_r_ce1 => grp_fsum_fu_380_in_r_ce1,
        in_r_q1 => grp_fsum_fu_380_in_r_q1);

    grp_fdifference_1_fu_390 : component fdifference_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fdifference_1_fu_390_ap_start,
        ap_done => grp_fdifference_1_fu_390_ap_done,
        ap_idle => grp_fdifference_1_fu_390_ap_idle,
        ap_ready => grp_fdifference_1_fu_390_ap_ready,
        output_r_address0 => grp_fdifference_1_fu_390_output_r_address0,
        output_r_ce0 => grp_fdifference_1_fu_390_output_r_ce0,
        output_r_we0 => grp_fdifference_1_fu_390_output_r_we0,
        output_r_d0 => grp_fdifference_1_fu_390_output_r_d0,
        output_r_q0 => grp_fdifference_1_fu_390_output_r_q0,
        in_r_address0 => grp_fdifference_1_fu_390_in_r_address0,
        in_r_ce0 => grp_fdifference_1_fu_390_in_r_ce0,
        in_r_q0 => grp_fdifference_1_fu_390_in_r_q0);

    grp_p_memcpy_fu_398 : component p_memcpy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_memcpy_fu_398_ap_start,
        ap_done => grp_p_memcpy_fu_398_ap_done,
        ap_idle => grp_p_memcpy_fu_398_ap_idle,
        ap_ready => grp_p_memcpy_fu_398_ap_ready,
        dst_address0 => grp_p_memcpy_fu_398_dst_address0,
        dst_ce0 => grp_p_memcpy_fu_398_dst_ce0,
        dst_we0 => grp_p_memcpy_fu_398_dst_we0,
        dst_d0 => grp_p_memcpy_fu_398_dst_d0,
        src_address0 => grp_p_memcpy_fu_398_src_address0,
        src_ce0 => grp_p_memcpy_fu_398_src_ce0,
        src_q0 => grp_p_memcpy_fu_398_src_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_fdifference_1_fu_390_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fdifference_1_fu_390_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_reg_grp_fdifference_1_fu_390_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fdifference_1_fu_390_ap_ready)) then 
                    ap_reg_grp_fdifference_1_fu_390_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fproduct_1_fu_358_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fproduct_1_fu_358_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_reg_grp_fproduct_1_fu_358_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fproduct_1_fu_358_ap_ready)) then 
                    ap_reg_grp_fproduct_1_fu_358_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fproduct_fu_345_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fproduct_fu_345_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                    ap_reg_grp_fproduct_fu_345_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fproduct_fu_345_ap_ready)) then 
                    ap_reg_grp_fproduct_fu_345_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_freduce_coefficients_fu_373_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_freduce_coefficients_fu_373_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_i5_fu_464_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                    ap_reg_grp_freduce_coefficients_fu_373_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_freduce_coefficients_fu_373_ap_ready)) then 
                    ap_reg_grp_freduce_coefficients_fu_373_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_freduce_degree_fu_366_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_freduce_degree_fu_366_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_reg_grp_freduce_degree_fu_366_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_freduce_degree_fu_366_ap_ready)) then 
                    ap_reg_grp_freduce_degree_fu_366_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fsquare_fu_331_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fsquare_fu_331_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i1_fu_418_p2 = ap_const_lv1_1)))) then 
                    ap_reg_grp_fsquare_fu_331_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fsquare_fu_331_ap_ready)) then 
                    ap_reg_grp_fsquare_fu_331_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fsquare_fu_338_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fsquare_fu_338_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i1_fu_418_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_fsquare_fu_338_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fsquare_fu_338_ap_ready)) then 
                    ap_reg_grp_fsquare_fu_338_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fsum_fu_380_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fsum_fu_380_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    ap_reg_grp_fsum_fu_380_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fsum_fu_380_ap_ready)) then 
                    ap_reg_grp_fsum_fu_380_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_p_memcpy_fu_398_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_p_memcpy_fu_398_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    ap_reg_grp_p_memcpy_fu_398_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_p_memcpy_fu_398_ap_ready)) then 
                    ap_reg_grp_p_memcpy_fu_398_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i3_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_lv1_1 = exitcond_i2_fu_448_p2))) then 
                i_i3_reg_243 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_i3_reg_243 <= reg_220;
            end if; 
        end if;
    end process;

    i_i9_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i_fu_407_p2 = ap_const_lv1_1))) then 
                i_i9_reg_209 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_i9_reg_209 <= reg_220;
            end if; 
        end if;
    end process;

    reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                reg_198 <= reg_231;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_freduce_coefficients_fu_373_ap_done = ap_const_logic_1))) then 
                reg_198 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                reg_198 <= grp_fu_254_p2(4 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                reg_220 <= reg_231;
            elsif (((grp_freduce_coefficients_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                reg_220 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                reg_220 <= grp_fu_254_p2(4 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_i3_fu_429_p2 = ap_const_lv1_1))) then 
                reg_231 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                reg_231 <= reg_198;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                reg_231 <= grp_fu_254_p2(4 - 1 downto 0);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond_i1_fu_418_p2))) then
                    tmp_i2_reg_491(3 downto 0) <= tmp_i2_fu_424_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = tmp_i5_fu_464_p2))) then
                    tmp_i3_26_reg_520(3 downto 0) <= tmp_i3_26_fu_470_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i_fu_407_p2 = ap_const_lv1_0))) then
                    tmp_i_reg_478(3 downto 0) <= tmp_i_fu_413_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_lv1_0 = tmp_i3_fu_429_p2))) then
                    zz_addr_reg_509(3 downto 0) <= tmp_i_23_fu_435_p1(5 - 1 downto 0)(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                zz_load_1_reg_530 <= zz_q0;
            end if;
        end if;
    end process;
    tmp_i_reg_478(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_i2_reg_491(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zz_addr_reg_509(4) <= '0';
    tmp_i3_26_reg_520(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state40, ap_CS_fsm_state29, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state38, exitcond_i_fu_407_p2, exitcond_i1_fu_418_p2, tmp_i3_fu_429_p2, tmp_i5_fu_464_p2, grp_fsquare_fu_331_ap_done, grp_fproduct_fu_345_ap_done, grp_fproduct_1_fu_358_ap_done, grp_freduce_degree_fu_366_ap_done, grp_freduce_coefficients_fu_373_ap_done, grp_fsum_fu_380_ap_done, grp_p_memcpy_fu_398_ap_done, ap_CS_fsm_state26, ap_CS_fsm_state37, exitcond_i2_fu_448_p2, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state31, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state49, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state51, ap_CS_fsm_state14, ap_CS_fsm_state45, ap_CS_fsm_state53, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state47, ap_CS_fsm_state2, ap_block_state4_on_subcall_done, ap_block_state6_on_subcall_done, ap_block_state8_on_subcall_done, ap_block_state10_on_subcall_done, ap_block_state12_on_subcall_done, ap_block_state14_on_subcall_done, ap_block_state18_on_subcall_done, ap_block_state31_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_p_memcpy_fu_398_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_block_state4_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_block_state6_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_block_state8_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_block_state10_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_block_state12_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_block_state14_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_fsum_fu_380_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_block_state18_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_fsquare_fu_331_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_fproduct_1_fu_358_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_freduce_degree_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_freduce_coefficients_fu_373_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i_fu_407_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_i1_fu_418_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_block_state31_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_fproduct_fu_345_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_freduce_degree_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((grp_freduce_coefficients_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_i3_fu_429_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_lv1_1 = exitcond_i2_fu_448_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_i5_fu_464_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state45 => 
                if (((grp_freduce_coefficients_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_fsum_fu_380_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_fproduct_fu_345_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (grp_freduce_degree_fu_366_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_freduce_coefficients_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_on_subcall_done_assign_proc : process(grp_fproduct_fu_345_ap_done, grp_freduce_degree_fu_366_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((ap_const_logic_0 = grp_fproduct_fu_345_ap_done) or (ap_const_logic_0 = grp_freduce_degree_fu_366_ap_done));
    end process;


    ap_block_state12_on_subcall_done_assign_proc : process(grp_freduce_degree_fu_366_ap_done, grp_freduce_coefficients_fu_373_ap_done)
    begin
                ap_block_state12_on_subcall_done <= ((ap_const_logic_0 = grp_freduce_coefficients_fu_373_ap_done) or (ap_const_logic_0 = grp_freduce_degree_fu_366_ap_done));
    end process;


    ap_block_state14_on_subcall_done_assign_proc : process(grp_freduce_coefficients_fu_373_ap_done, grp_p_memcpy_fu_398_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((ap_const_logic_0 = grp_freduce_coefficients_fu_373_ap_done) or (ap_const_logic_0 = grp_p_memcpy_fu_398_ap_done));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_fsquare_fu_331_ap_done, grp_fdifference_1_fu_390_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((ap_const_logic_0 = grp_fdifference_1_fu_390_ap_done) or (ap_const_logic_0 = grp_fsquare_fu_331_ap_done));
    end process;


    ap_block_state31_on_subcall_done_assign_proc : process(grp_fsquare_fu_331_ap_done, grp_fsquare_fu_338_ap_done)
    begin
                ap_block_state31_on_subcall_done <= ((ap_const_logic_0 = grp_fsquare_fu_331_ap_done) or (ap_const_logic_0 = grp_fsquare_fu_338_ap_done));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_fsum_fu_380_ap_done, grp_p_memcpy_fu_398_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((ap_const_logic_0 = grp_p_memcpy_fu_398_ap_done) or (ap_const_logic_0 = grp_fsum_fu_380_ap_done));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(grp_fsum_fu_380_ap_done, grp_fdifference_1_fu_390_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((ap_const_logic_0 = grp_fsum_fu_380_ap_done) or (ap_const_logic_0 = grp_fdifference_1_fu_390_ap_done));
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(grp_fproduct_fu_345_ap_done, grp_fdifference_1_fu_390_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((ap_const_logic_0 = grp_fdifference_1_fu_390_ap_done) or (ap_const_logic_0 = grp_fproduct_fu_345_ap_done));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_freduce_coefficients_fu_373_ap_done, ap_CS_fsm_state53)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_freduce_coefficients_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_freduce_coefficients_fu_373_ap_done, ap_CS_fsm_state53)
    begin
        if (((grp_freduce_coefficients_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i1_fu_418_p2 <= "1" when (i_i9_reg_209 = ap_const_lv4_A) else "0";
    exitcond_i2_fu_448_p2 <= "1" when (reg_231 = ap_const_lv4_9) else "0";
    exitcond_i_fu_407_p2 <= "1" when (reg_198 = ap_const_lv4_A) else "0";
    grp_fdifference_1_fu_390_ap_start <= ap_reg_grp_fdifference_1_fu_390_ap_start;

    grp_fdifference_1_fu_390_in_r_q0_assign_proc : process(origx_q0, origxprime_q0, ap_CS_fsm_state18, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fdifference_1_fu_390_in_r_q0 <= origxprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fdifference_1_fu_390_in_r_q0 <= origx_q0;
        else 
            grp_fdifference_1_fu_390_in_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fdifference_1_fu_390_output_r_q0_assign_proc : process(z_q0, zprime_q0, zzprime_q0, ap_CS_fsm_state18, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fdifference_1_fu_390_output_r_q0 <= zzprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fdifference_1_fu_390_output_r_q0 <= zprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fdifference_1_fu_390_output_r_q0 <= z_q0;
        else 
            grp_fdifference_1_fu_390_output_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fproduct_1_fu_358_ap_start <= ap_reg_grp_fproduct_1_fu_358_ap_start;
    grp_fproduct_fu_345_ap_start <= ap_reg_grp_fproduct_fu_345_ap_start;

    grp_fproduct_fu_345_in2_q0_assign_proc : process(x_q0, xprime_q0, zz_q0, xx_q0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fproduct_fu_345_in2_q0 <= zz_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fproduct_fu_345_in2_q0 <= xx_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fproduct_fu_345_in2_q0 <= x_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fproduct_fu_345_in2_q0 <= xprime_q0;
        else 
            grp_fproduct_fu_345_in2_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fproduct_fu_345_in_r_q0_assign_proc : process(z_q0, zprime_q0, zz_q0, zzz_q0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state33, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fproduct_fu_345_in_r_q0 <= zzz_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fproduct_fu_345_in_r_q0 <= zz_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fproduct_fu_345_in_r_q0 <= zprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fproduct_fu_345_in_r_q0 <= z_q0;
        else 
            grp_fproduct_fu_345_in_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_freduce_coefficients_fu_373_ap_start <= ap_reg_grp_freduce_coefficients_fu_373_ap_start;

    grp_freduce_coefficients_fu_373_output_r_q0_assign_proc : process(x2_q0, z2_q0, zzz_q0, xxprime_q0, zzprime_q0, ap_CS_fsm_state26, ap_CS_fsm_state37, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state45, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_freduce_coefficients_fu_373_output_r_q0 <= z2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_freduce_coefficients_fu_373_output_r_q0 <= zzz_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_freduce_coefficients_fu_373_output_r_q0 <= x2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_freduce_coefficients_fu_373_output_r_q0 <= zzprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_freduce_coefficients_fu_373_output_r_q0 <= xxprime_q0;
        else 
            grp_freduce_coefficients_fu_373_output_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_freduce_coefficients_fu_373_output_r_q1_assign_proc : process(x2_q1, z2_q1, zzz_q1, xxprime_q1, zzprime_q1, ap_CS_fsm_state26, ap_CS_fsm_state37, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state45, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            grp_freduce_coefficients_fu_373_output_r_q1 <= z2_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_freduce_coefficients_fu_373_output_r_q1 <= zzz_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_freduce_coefficients_fu_373_output_r_q1 <= x2_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_freduce_coefficients_fu_373_output_r_q1 <= zzprime_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_freduce_coefficients_fu_373_output_r_q1 <= xxprime_q1;
        else 
            grp_freduce_coefficients_fu_373_output_r_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_freduce_degree_fu_366_ap_start <= ap_reg_grp_freduce_degree_fu_366_ap_start;

    grp_freduce_degree_fu_366_output_r_q0_assign_proc : process(x2_q0, z2_q0, xxprime_q0, zzprime_q0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_freduce_degree_fu_366_output_r_q0 <= z2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_freduce_degree_fu_366_output_r_q0 <= x2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_freduce_degree_fu_366_output_r_q0 <= zzprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_freduce_degree_fu_366_output_r_q0 <= xxprime_q0;
        else 
            grp_freduce_degree_fu_366_output_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_freduce_degree_fu_366_output_r_q1_assign_proc : process(x2_q1, z2_q1, xxprime_q1, zzprime_q1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state35, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_freduce_degree_fu_366_output_r_q1 <= z2_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_freduce_degree_fu_366_output_r_q1 <= x2_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_freduce_degree_fu_366_output_r_q1 <= zzprime_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_freduce_degree_fu_366_output_r_q1 <= xxprime_q1;
        else 
            grp_freduce_degree_fu_366_output_r_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fsquare_fu_331_ap_start <= ap_reg_grp_fsquare_fu_331_ap_start;

    grp_fsquare_fu_331_in_r_q0_assign_proc : process(x_q0, xxprime_q0, zzprime_q0, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fsquare_fu_331_in_r_q0 <= x_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fsquare_fu_331_in_r_q0 <= zzprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fsquare_fu_331_in_r_q0 <= xxprime_q0;
        else 
            grp_fsquare_fu_331_in_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fsquare_fu_338_ap_start <= ap_reg_grp_fsquare_fu_338_ap_start;
    grp_fsum_fu_380_ap_start <= ap_reg_grp_fsum_fu_380_ap_start;

    grp_fsum_fu_380_in_r_q0_assign_proc : process(z_q0, zprime_q0, xx_q0, zzprime_q0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fsum_fu_380_in_r_q0 <= xx_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fsum_fu_380_in_r_q0 <= zzprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fsum_fu_380_in_r_q0 <= zprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fsum_fu_380_in_r_q0 <= z_q0;
        else 
            grp_fsum_fu_380_in_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fsum_fu_380_in_r_q1_assign_proc : process(z_q1, zprime_q1, xx_q1, zzprime_q1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fsum_fu_380_in_r_q1 <= xx_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fsum_fu_380_in_r_q1 <= zzprime_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fsum_fu_380_in_r_q1 <= zprime_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fsum_fu_380_in_r_q1 <= z_q1;
        else 
            grp_fsum_fu_380_in_r_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fsum_fu_380_output_r_q0_assign_proc : process(x_q0, xprime_q0, zzz_q0, xxprime_q0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fsum_fu_380_output_r_q0 <= zzz_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fsum_fu_380_output_r_q0 <= xxprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fsum_fu_380_output_r_q0 <= xprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fsum_fu_380_output_r_q0 <= x_q0;
        else 
            grp_fsum_fu_380_output_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fsum_fu_380_output_r_q1_assign_proc : process(x_q1, xprime_q1, zzz_q1, xxprime_q1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fsum_fu_380_output_r_q1 <= zzz_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fsum_fu_380_output_r_q1 <= xxprime_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fsum_fu_380_output_r_q1 <= xprime_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fsum_fu_380_output_r_q1 <= x_q1;
        else 
            grp_fsum_fu_380_output_r_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_254_p0_assign_proc : process(reg_198, ap_CS_fsm_state40, reg_220, ap_CS_fsm_state29, ap_CS_fsm_state42, reg_231, ap_CS_fsm_state27, ap_CS_fsm_state38, i_i9_reg_209, ap_CS_fsm_state41, i_i3_reg_243, tmp_i4_cast_fu_454_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_254_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_243),5));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_254_p0 <= tmp_i4_cast_fu_454_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_254_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_231),5));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_254_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_220),5));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_254_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i9_reg_209),5));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_254_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_198),5));
        else 
            grp_fu_254_p0 <= "XXXXX";
        end if; 
    end process;


    grp_fu_254_p1_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state29, ap_CS_fsm_state42, ap_CS_fsm_state27, ap_CS_fsm_state38, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_254_p1 <= ap_const_lv5_A;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_1),5));
        else 
            grp_fu_254_p1 <= "XXXXX";
        end if; 
    end process;

    grp_fu_254_p2 <= std_logic_vector(unsigned(grp_fu_254_p0) + unsigned(grp_fu_254_p1));
    grp_p_memcpy_fu_398_ap_start <= ap_reg_grp_p_memcpy_fu_398_ap_start;

    grp_p_memcpy_fu_398_src_q0_assign_proc : process(x_q0, xprime_q0, xxprime_q0, ap_CS_fsm_state14, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_p_memcpy_fu_398_src_q0 <= xxprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_p_memcpy_fu_398_src_q0 <= xprime_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_p_memcpy_fu_398_src_q0 <= x_q0;
        else 
            grp_p_memcpy_fu_398_src_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    origx_address0_assign_proc : process(grp_fdifference_1_fu_390_in_r_address0, grp_p_memcpy_fu_398_dst_address0, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            origx_address0 <= grp_p_memcpy_fu_398_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            origx_address0 <= grp_fdifference_1_fu_390_in_r_address0;
        else 
            origx_address0 <= "XXXX";
        end if; 
    end process;


    origx_ce0_assign_proc : process(grp_fdifference_1_fu_390_in_r_ce0, grp_p_memcpy_fu_398_dst_ce0, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            origx_ce0 <= grp_p_memcpy_fu_398_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            origx_ce0 <= grp_fdifference_1_fu_390_in_r_ce0;
        else 
            origx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    origx_we0_assign_proc : process(grp_p_memcpy_fu_398_dst_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            origx_we0 <= grp_p_memcpy_fu_398_dst_we0;
        else 
            origx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    origxprime_address0_assign_proc : process(grp_fdifference_1_fu_390_in_r_address0, grp_p_memcpy_fu_398_dst_address0, ap_CS_fsm_state18, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            origxprime_address0 <= grp_p_memcpy_fu_398_dst_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            origxprime_address0 <= grp_fdifference_1_fu_390_in_r_address0;
        else 
            origxprime_address0 <= "XXXX";
        end if; 
    end process;


    origxprime_ce0_assign_proc : process(grp_fdifference_1_fu_390_in_r_ce0, grp_p_memcpy_fu_398_dst_ce0, ap_CS_fsm_state18, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            origxprime_ce0 <= grp_p_memcpy_fu_398_dst_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            origxprime_ce0 <= grp_fdifference_1_fu_390_in_r_ce0;
        else 
            origxprime_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    origxprime_we0_assign_proc : process(grp_p_memcpy_fu_398_dst_we0, ap_CS_fsm_state14, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            origxprime_we0 <= grp_p_memcpy_fu_398_dst_we0;
        else 
            origxprime_we0 <= ap_const_logic_0;
        end if; 
    end process;

    qmqp_address0 <= grp_fproduct_1_fu_358_in_r_address0;
    qmqp_ce0 <= grp_fproduct_1_fu_358_in_r_ce0;
    sum_i_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_254_p2),64));
    tmp_322_i_fu_316_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(zz_load_1_reg_530) * signed('0' &ap_const_lv64_1DB41))), 64));
    tmp_930_i_fu_441_p2 <= std_logic_vector(unsigned(xx_q0) - unsigned(zz_q0));
    tmp_i2_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i9_reg_209),64));
    tmp_i3_26_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i3_reg_243),64));
    tmp_i3_fu_429_p2 <= "1" when (reg_220 = ap_const_lv4_A) else "0";
    tmp_i4_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_231),5));
    tmp_i5_fu_464_p2 <= "1" when (i_i3_reg_243 = ap_const_lv4_A) else "0";
    tmp_i_23_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_220),64));
    tmp_i_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_198),64));

    x2_address0_assign_proc : process(grp_fproduct_fu_345_output_r_address0, grp_freduce_degree_fu_366_output_r_address0, grp_freduce_coefficients_fu_373_output_r_address0, ap_CS_fsm_state37, ap_CS_fsm_state33, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            x2_address0 <= grp_freduce_coefficients_fu_373_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x2_address0 <= grp_freduce_degree_fu_366_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            x2_address0 <= grp_fproduct_fu_345_output_r_address0;
        else 
            x2_address0 <= "XXXXX";
        end if; 
    end process;


    x2_address1_assign_proc : process(grp_freduce_degree_fu_366_output_r_address1, grp_freduce_coefficients_fu_373_output_r_address1, ap_CS_fsm_state37, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            x2_address1 <= grp_freduce_coefficients_fu_373_output_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x2_address1 <= grp_freduce_degree_fu_366_output_r_address1;
        else 
            x2_address1 <= "XXXXX";
        end if; 
    end process;


    x2_ce0_assign_proc : process(grp_fproduct_fu_345_output_r_ce0, grp_freduce_degree_fu_366_output_r_ce0, grp_freduce_coefficients_fu_373_output_r_ce0, ap_CS_fsm_state37, ap_CS_fsm_state33, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            x2_ce0 <= grp_freduce_coefficients_fu_373_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x2_ce0 <= grp_freduce_degree_fu_366_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            x2_ce0 <= grp_fproduct_fu_345_output_r_ce0;
        else 
            x2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_ce1_assign_proc : process(grp_freduce_degree_fu_366_output_r_ce1, grp_freduce_coefficients_fu_373_output_r_ce1, ap_CS_fsm_state37, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            x2_ce1 <= grp_freduce_coefficients_fu_373_output_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x2_ce1 <= grp_freduce_degree_fu_366_output_r_ce1;
        else 
            x2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x2_d0_assign_proc : process(grp_fproduct_fu_345_output_r_d0, grp_freduce_degree_fu_366_output_r_d0, grp_freduce_coefficients_fu_373_output_r_d0, ap_CS_fsm_state37, ap_CS_fsm_state33, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            x2_d0 <= grp_freduce_coefficients_fu_373_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x2_d0 <= grp_freduce_degree_fu_366_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            x2_d0 <= grp_fproduct_fu_345_output_r_d0;
        else 
            x2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_d1_assign_proc : process(grp_freduce_degree_fu_366_output_r_d1, grp_freduce_coefficients_fu_373_output_r_d1, ap_CS_fsm_state37, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            x2_d1 <= grp_freduce_coefficients_fu_373_output_r_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x2_d1 <= grp_freduce_degree_fu_366_output_r_d1;
        else 
            x2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    x2_we0_assign_proc : process(grp_fproduct_fu_345_output_r_we0, grp_freduce_degree_fu_366_output_r_we0, grp_freduce_coefficients_fu_373_output_r_we0, ap_CS_fsm_state37, ap_CS_fsm_state33, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            x2_we0 <= grp_freduce_coefficients_fu_373_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x2_we0 <= grp_freduce_degree_fu_366_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            x2_we0 <= grp_fproduct_fu_345_output_r_we0;
        else 
            x2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_we1_assign_proc : process(grp_freduce_degree_fu_366_output_r_we1, grp_freduce_coefficients_fu_373_output_r_we1, ap_CS_fsm_state37, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            x2_we1 <= grp_freduce_coefficients_fu_373_output_r_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            x2_we1 <= grp_freduce_degree_fu_366_output_r_we1;
        else 
            x2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x3_address0 <= tmp_i_reg_478(5 - 1 downto 0);

    x3_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            x3_ce0 <= ap_const_logic_1;
        else 
            x3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x3_d0 <= xxxprime_q0;

    x3_we0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            x3_we0 <= ap_const_logic_1;
        else 
            x3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_address0_assign_proc : process(grp_fsquare_fu_331_in_r_address0, grp_fproduct_fu_345_in2_address0, grp_fsum_fu_380_output_r_address0, grp_p_memcpy_fu_398_src_address0, ap_CS_fsm_state31, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_address0 <= grp_p_memcpy_fu_398_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_address0 <= grp_fsum_fu_380_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_address0 <= grp_fproduct_fu_345_in2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            x_address0 <= grp_fsquare_fu_331_in_r_address0;
        else 
            x_address0 <= "XXXXX";
        end if; 
    end process;

    x_address1 <= grp_fsum_fu_380_output_r_address1;

    x_ce0_assign_proc : process(grp_fsquare_fu_331_in_r_ce0, grp_fproduct_fu_345_in2_ce0, grp_fsum_fu_380_output_r_ce0, grp_p_memcpy_fu_398_src_ce0, ap_CS_fsm_state31, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_ce0 <= grp_p_memcpy_fu_398_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_ce0 <= grp_fsum_fu_380_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_ce0 <= grp_fproduct_fu_345_in2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            x_ce0 <= grp_fsquare_fu_331_in_r_ce0;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(grp_fsum_fu_380_output_r_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_ce1 <= grp_fsum_fu_380_output_r_ce1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    x_d0 <= grp_fsum_fu_380_output_r_d0;
    x_d1 <= grp_fsum_fu_380_output_r_d1;

    x_we0_assign_proc : process(grp_fsum_fu_380_output_r_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_we0 <= grp_fsum_fu_380_output_r_we0;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_we1_assign_proc : process(grp_fsum_fu_380_output_r_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_we1 <= grp_fsum_fu_380_output_r_we1;
        else 
            x_we1 <= ap_const_logic_0;
        end if; 
    end process;


    xprime_address0_assign_proc : process(grp_fproduct_fu_345_in2_address0, grp_fsum_fu_380_output_r_address0, grp_p_memcpy_fu_398_src_address0, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            xprime_address0 <= grp_p_memcpy_fu_398_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xprime_address0 <= grp_fsum_fu_380_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xprime_address0 <= grp_fproduct_fu_345_in2_address0;
        else 
            xprime_address0 <= "XXXXX";
        end if; 
    end process;

    xprime_address1 <= grp_fsum_fu_380_output_r_address1;

    xprime_ce0_assign_proc : process(grp_fproduct_fu_345_in2_ce0, grp_fsum_fu_380_output_r_ce0, grp_p_memcpy_fu_398_src_ce0, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            xprime_ce0 <= grp_p_memcpy_fu_398_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xprime_ce0 <= grp_fsum_fu_380_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xprime_ce0 <= grp_fproduct_fu_345_in2_ce0;
        else 
            xprime_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xprime_ce1_assign_proc : process(grp_fsum_fu_380_output_r_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xprime_ce1 <= grp_fsum_fu_380_output_r_ce1;
        else 
            xprime_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xprime_d0 <= grp_fsum_fu_380_output_r_d0;
    xprime_d1 <= grp_fsum_fu_380_output_r_d1;

    xprime_we0_assign_proc : process(grp_fsum_fu_380_output_r_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xprime_we0 <= grp_fsum_fu_380_output_r_we0;
        else 
            xprime_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xprime_we1_assign_proc : process(grp_fsum_fu_380_output_r_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            xprime_we1 <= grp_fsum_fu_380_output_r_we1;
        else 
            xprime_we1 <= ap_const_logic_0;
        end if; 
    end process;


    xx_address0_assign_proc : process(ap_CS_fsm_state38, grp_fsquare_fu_331_output_r_address0, grp_fproduct_fu_345_in2_address0, grp_fsum_fu_380_in_r_address0, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state47, tmp_i_23_fu_435_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            xx_address0 <= tmp_i_23_fu_435_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            xx_address0 <= grp_fsum_fu_380_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            xx_address0 <= grp_fproduct_fu_345_in2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            xx_address0 <= grp_fsquare_fu_331_output_r_address0;
        else 
            xx_address0 <= "XXXXX";
        end if; 
    end process;


    xx_ce0_assign_proc : process(ap_CS_fsm_state38, grp_fsquare_fu_331_output_r_ce0, grp_fproduct_fu_345_in2_ce0, grp_fsum_fu_380_in_r_ce0, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            xx_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            xx_ce0 <= grp_fsum_fu_380_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            xx_ce0 <= grp_fproduct_fu_345_in2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            xx_ce0 <= grp_fsquare_fu_331_output_r_ce0;
        else 
            xx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xx_ce1_assign_proc : process(grp_fsum_fu_380_in_r_ce1, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            xx_ce1 <= grp_fsum_fu_380_in_r_ce1;
        else 
            xx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xx_we0_assign_proc : process(grp_fsquare_fu_331_output_r_we0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            xx_we0 <= grp_fsquare_fu_331_output_r_we0;
        else 
            xx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xxprime_address0_assign_proc : process(grp_fsquare_fu_331_in_r_address0, grp_fproduct_fu_345_output_r_address0, grp_freduce_degree_fu_366_output_r_address0, grp_freduce_coefficients_fu_373_output_r_address0, grp_fsum_fu_380_output_r_address0, grp_p_memcpy_fu_398_src_address0, ap_CS_fsm_state18, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xxprime_address0 <= grp_p_memcpy_fu_398_src_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xxprime_address0 <= grp_fsum_fu_380_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xxprime_address0 <= grp_freduce_coefficients_fu_373_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xxprime_address0 <= grp_freduce_degree_fu_366_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xxprime_address0 <= grp_fproduct_fu_345_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            xxprime_address0 <= grp_fsquare_fu_331_in_r_address0;
        else 
            xxprime_address0 <= "XXXXX";
        end if; 
    end process;


    xxprime_address1_assign_proc : process(grp_freduce_degree_fu_366_output_r_address1, grp_freduce_coefficients_fu_373_output_r_address1, grp_fsum_fu_380_output_r_address1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xxprime_address1 <= grp_fsum_fu_380_output_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xxprime_address1 <= grp_freduce_coefficients_fu_373_output_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xxprime_address1 <= grp_freduce_degree_fu_366_output_r_address1;
        else 
            xxprime_address1 <= "XXXXX";
        end if; 
    end process;


    xxprime_ce0_assign_proc : process(grp_fsquare_fu_331_in_r_ce0, grp_fproduct_fu_345_output_r_ce0, grp_freduce_degree_fu_366_output_r_ce0, grp_freduce_coefficients_fu_373_output_r_ce0, grp_fsum_fu_380_output_r_ce0, grp_p_memcpy_fu_398_src_ce0, ap_CS_fsm_state18, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            xxprime_ce0 <= grp_p_memcpy_fu_398_src_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xxprime_ce0 <= grp_fsum_fu_380_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xxprime_ce0 <= grp_freduce_coefficients_fu_373_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xxprime_ce0 <= grp_freduce_degree_fu_366_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xxprime_ce0 <= grp_fproduct_fu_345_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            xxprime_ce0 <= grp_fsquare_fu_331_in_r_ce0;
        else 
            xxprime_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xxprime_ce1_assign_proc : process(grp_freduce_degree_fu_366_output_r_ce1, grp_freduce_coefficients_fu_373_output_r_ce1, grp_fsum_fu_380_output_r_ce1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xxprime_ce1 <= grp_fsum_fu_380_output_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xxprime_ce1 <= grp_freduce_coefficients_fu_373_output_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xxprime_ce1 <= grp_freduce_degree_fu_366_output_r_ce1;
        else 
            xxprime_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xxprime_d0_assign_proc : process(grp_fproduct_fu_345_output_r_d0, grp_freduce_degree_fu_366_output_r_d0, grp_freduce_coefficients_fu_373_output_r_d0, grp_fsum_fu_380_output_r_d0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xxprime_d0 <= grp_fsum_fu_380_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xxprime_d0 <= grp_freduce_coefficients_fu_373_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xxprime_d0 <= grp_freduce_degree_fu_366_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xxprime_d0 <= grp_fproduct_fu_345_output_r_d0;
        else 
            xxprime_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xxprime_d1_assign_proc : process(grp_freduce_degree_fu_366_output_r_d1, grp_freduce_coefficients_fu_373_output_r_d1, grp_fsum_fu_380_output_r_d1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xxprime_d1 <= grp_fsum_fu_380_output_r_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xxprime_d1 <= grp_freduce_coefficients_fu_373_output_r_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xxprime_d1 <= grp_freduce_degree_fu_366_output_r_d1;
        else 
            xxprime_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xxprime_we0_assign_proc : process(grp_fproduct_fu_345_output_r_we0, grp_freduce_degree_fu_366_output_r_we0, grp_freduce_coefficients_fu_373_output_r_we0, grp_fsum_fu_380_output_r_we0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xxprime_we0 <= grp_fsum_fu_380_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xxprime_we0 <= grp_freduce_coefficients_fu_373_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xxprime_we0 <= grp_freduce_degree_fu_366_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            xxprime_we0 <= grp_fproduct_fu_345_output_r_we0;
        else 
            xxprime_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xxprime_we1_assign_proc : process(grp_freduce_degree_fu_366_output_r_we1, grp_freduce_coefficients_fu_373_output_r_we1, grp_fsum_fu_380_output_r_we1, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            xxprime_we1 <= grp_fsum_fu_380_output_r_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            xxprime_we1 <= grp_freduce_coefficients_fu_373_output_r_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            xxprime_we1 <= grp_freduce_degree_fu_366_output_r_we1;
        else 
            xxprime_we1 <= ap_const_logic_0;
        end if; 
    end process;


    xxxprime_address0_assign_proc : process(ap_CS_fsm_state27, tmp_i_fu_413_p1, grp_fsquare_fu_331_output_r_address0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            xxxprime_address0 <= tmp_i_fu_413_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            xxxprime_address0 <= grp_fsquare_fu_331_output_r_address0;
        else 
            xxxprime_address0 <= "XXXXX";
        end if; 
    end process;


    xxxprime_ce0_assign_proc : process(ap_CS_fsm_state27, grp_fsquare_fu_331_output_r_ce0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            xxxprime_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            xxxprime_ce0 <= grp_fsquare_fu_331_output_r_ce0;
        else 
            xxxprime_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xxxprime_we0_assign_proc : process(grp_fsquare_fu_331_output_r_we0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            xxxprime_we0 <= grp_fsquare_fu_331_output_r_we0;
        else 
            xxxprime_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z2_address0_assign_proc : process(grp_fproduct_fu_345_output_r_address0, grp_freduce_degree_fu_366_output_r_address0, grp_freduce_coefficients_fu_373_output_r_address0, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z2_address0 <= grp_freduce_coefficients_fu_373_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z2_address0 <= grp_freduce_degree_fu_366_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            z2_address0 <= grp_fproduct_fu_345_output_r_address0;
        else 
            z2_address0 <= "XXXXX";
        end if; 
    end process;


    z2_address1_assign_proc : process(grp_freduce_degree_fu_366_output_r_address1, grp_freduce_coefficients_fu_373_output_r_address1, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z2_address1 <= grp_freduce_coefficients_fu_373_output_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z2_address1 <= grp_freduce_degree_fu_366_output_r_address1;
        else 
            z2_address1 <= "XXXXX";
        end if; 
    end process;


    z2_ce0_assign_proc : process(grp_fproduct_fu_345_output_r_ce0, grp_freduce_degree_fu_366_output_r_ce0, grp_freduce_coefficients_fu_373_output_r_ce0, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z2_ce0 <= grp_freduce_coefficients_fu_373_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z2_ce0 <= grp_freduce_degree_fu_366_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            z2_ce0 <= grp_fproduct_fu_345_output_r_ce0;
        else 
            z2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z2_ce1_assign_proc : process(grp_freduce_degree_fu_366_output_r_ce1, grp_freduce_coefficients_fu_373_output_r_ce1, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z2_ce1 <= grp_freduce_coefficients_fu_373_output_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z2_ce1 <= grp_freduce_degree_fu_366_output_r_ce1;
        else 
            z2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    z2_d0_assign_proc : process(grp_fproduct_fu_345_output_r_d0, grp_freduce_degree_fu_366_output_r_d0, grp_freduce_coefficients_fu_373_output_r_d0, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z2_d0 <= grp_freduce_coefficients_fu_373_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z2_d0 <= grp_freduce_degree_fu_366_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            z2_d0 <= grp_fproduct_fu_345_output_r_d0;
        else 
            z2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z2_d1_assign_proc : process(grp_freduce_degree_fu_366_output_r_d1, grp_freduce_coefficients_fu_373_output_r_d1, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z2_d1 <= grp_freduce_coefficients_fu_373_output_r_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z2_d1 <= grp_freduce_degree_fu_366_output_r_d1;
        else 
            z2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z2_we0_assign_proc : process(grp_fproduct_fu_345_output_r_we0, grp_freduce_degree_fu_366_output_r_we0, grp_freduce_coefficients_fu_373_output_r_we0, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z2_we0 <= grp_freduce_coefficients_fu_373_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z2_we0 <= grp_freduce_degree_fu_366_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            z2_we0 <= grp_fproduct_fu_345_output_r_we0;
        else 
            z2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z2_we1_assign_proc : process(grp_freduce_degree_fu_366_output_r_we1, grp_freduce_coefficients_fu_373_output_r_we1, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            z2_we1 <= grp_freduce_coefficients_fu_373_output_r_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            z2_we1 <= grp_freduce_degree_fu_366_output_r_we1;
        else 
            z2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    z3_address0 <= tmp_i2_reg_491(5 - 1 downto 0);

    z3_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            z3_ce0 <= ap_const_logic_1;
        else 
            z3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z3_d0 <= zzprime_q0;

    z3_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            z3_we0 <= ap_const_logic_1;
        else 
            z3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z_address0_assign_proc : process(grp_fsquare_fu_338_in_r_address0, grp_fproduct_fu_345_in_r_address0, grp_fsum_fu_380_in_r_address0, grp_fdifference_1_fu_390_output_r_address0, ap_CS_fsm_state31, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z_address0 <= grp_fdifference_1_fu_390_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            z_address0 <= grp_fsum_fu_380_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            z_address0 <= grp_fproduct_fu_345_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            z_address0 <= grp_fsquare_fu_338_in_r_address0;
        else 
            z_address0 <= "XXXXX";
        end if; 
    end process;

    z_address1 <= grp_fsum_fu_380_in_r_address1;

    z_ce0_assign_proc : process(grp_fsquare_fu_338_in_r_ce0, grp_fproduct_fu_345_in_r_ce0, grp_fsum_fu_380_in_r_ce0, grp_fdifference_1_fu_390_output_r_ce0, ap_CS_fsm_state31, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z_ce0 <= grp_fdifference_1_fu_390_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            z_ce0 <= grp_fsum_fu_380_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            z_ce0 <= grp_fproduct_fu_345_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            z_ce0 <= grp_fsquare_fu_338_in_r_ce0;
        else 
            z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_ce1_assign_proc : process(grp_fsum_fu_380_in_r_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            z_ce1 <= grp_fsum_fu_380_in_r_ce1;
        else 
            z_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    z_d0 <= grp_fdifference_1_fu_390_output_r_d0;

    z_we0_assign_proc : process(grp_fdifference_1_fu_390_output_r_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z_we0 <= grp_fdifference_1_fu_390_output_r_we0;
        else 
            z_we0 <= ap_const_logic_0;
        end if; 
    end process;


    zprime_address0_assign_proc : process(grp_fproduct_fu_345_in_r_address0, grp_fsum_fu_380_in_r_address0, grp_fdifference_1_fu_390_output_r_address0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            zprime_address0 <= grp_fdifference_1_fu_390_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            zprime_address0 <= grp_fsum_fu_380_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            zprime_address0 <= grp_fproduct_fu_345_in_r_address0;
        else 
            zprime_address0 <= "XXXXX";
        end if; 
    end process;

    zprime_address1 <= grp_fsum_fu_380_in_r_address1;

    zprime_ce0_assign_proc : process(grp_fproduct_fu_345_in_r_ce0, grp_fsum_fu_380_in_r_ce0, grp_fdifference_1_fu_390_output_r_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            zprime_ce0 <= grp_fdifference_1_fu_390_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            zprime_ce0 <= grp_fsum_fu_380_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            zprime_ce0 <= grp_fproduct_fu_345_in_r_ce0;
        else 
            zprime_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zprime_ce1_assign_proc : process(grp_fsum_fu_380_in_r_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            zprime_ce1 <= grp_fsum_fu_380_in_r_ce1;
        else 
            zprime_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zprime_d0 <= grp_fdifference_1_fu_390_output_r_d0;

    zprime_we0_assign_proc : process(grp_fdifference_1_fu_390_output_r_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            zprime_we0 <= grp_fdifference_1_fu_390_output_r_we0;
        else 
            zprime_we0 <= ap_const_logic_0;
        end if; 
    end process;


    zz_address0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state38, zz_addr_reg_509, tmp_i3_26_fu_470_p1, grp_fsquare_fu_338_output_r_address0, grp_fproduct_fu_345_in2_address0, grp_fproduct_fu_345_in_r_address0, ap_CS_fsm_state39, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state49, tmp_i_23_fu_435_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            zz_address0 <= tmp_i3_26_fu_470_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            zz_address0 <= zz_addr_reg_509;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            zz_address0 <= tmp_i_23_fu_435_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            zz_address0 <= grp_fproduct_fu_345_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            zz_address0 <= grp_fproduct_fu_345_in2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            zz_address0 <= grp_fsquare_fu_338_output_r_address0;
        else 
            zz_address0 <= "XXXXX";
        end if; 
    end process;


    zz_ce0_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state38, grp_fsquare_fu_338_output_r_ce0, grp_fproduct_fu_345_in2_ce0, grp_fproduct_fu_345_in_r_ce0, ap_CS_fsm_state39, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            zz_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            zz_ce0 <= grp_fproduct_fu_345_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            zz_ce0 <= grp_fproduct_fu_345_in2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            zz_ce0 <= grp_fsquare_fu_338_output_r_ce0;
        else 
            zz_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zz_d0_assign_proc : process(grp_fsquare_fu_338_output_r_d0, ap_CS_fsm_state39, ap_CS_fsm_state31, tmp_930_i_fu_441_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            zz_d0 <= tmp_930_i_fu_441_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            zz_d0 <= grp_fsquare_fu_338_output_r_d0;
        else 
            zz_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    zz_we0_assign_proc : process(grp_fsquare_fu_338_output_r_we0, ap_CS_fsm_state39, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            zz_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            zz_we0 <= grp_fsquare_fu_338_output_r_we0;
        else 
            zz_we0 <= ap_const_logic_0;
        end if; 
    end process;


    zzprime_address0_assign_proc : process(ap_CS_fsm_state29, tmp_i2_fu_424_p1, grp_fsquare_fu_331_in_r_address0, grp_fproduct_fu_345_output_r_address0, grp_fproduct_1_fu_358_output_r_address0, grp_freduce_degree_fu_366_output_r_address0, grp_freduce_coefficients_fu_373_output_r_address0, grp_fsum_fu_380_in_r_address0, grp_fdifference_1_fu_390_output_r_address0, ap_CS_fsm_state26, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            zzprime_address0 <= tmp_i2_fu_424_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            zzprime_address0 <= grp_fdifference_1_fu_390_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            zzprime_address0 <= grp_fsum_fu_380_in_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            zzprime_address0 <= grp_freduce_coefficients_fu_373_output_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            zzprime_address0 <= grp_freduce_degree_fu_366_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            zzprime_address0 <= grp_fproduct_1_fu_358_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            zzprime_address0 <= grp_fproduct_fu_345_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            zzprime_address0 <= grp_fsquare_fu_331_in_r_address0;
        else 
            zzprime_address0 <= "XXXXX";
        end if; 
    end process;


    zzprime_address1_assign_proc : process(grp_freduce_degree_fu_366_output_r_address1, grp_freduce_coefficients_fu_373_output_r_address1, grp_fsum_fu_380_in_r_address1, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            zzprime_address1 <= grp_fsum_fu_380_in_r_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            zzprime_address1 <= grp_freduce_coefficients_fu_373_output_r_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            zzprime_address1 <= grp_freduce_degree_fu_366_output_r_address1;
        else 
            zzprime_address1 <= "XXXXX";
        end if; 
    end process;


    zzprime_ce0_assign_proc : process(ap_CS_fsm_state29, grp_fsquare_fu_331_in_r_ce0, grp_fproduct_fu_345_output_r_ce0, grp_fproduct_1_fu_358_output_r_ce0, grp_freduce_degree_fu_366_output_r_ce0, grp_freduce_coefficients_fu_373_output_r_ce0, grp_fsum_fu_380_in_r_ce0, grp_fdifference_1_fu_390_output_r_ce0, ap_CS_fsm_state26, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            zzprime_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            zzprime_ce0 <= grp_fdifference_1_fu_390_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            zzprime_ce0 <= grp_fsum_fu_380_in_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            zzprime_ce0 <= grp_freduce_coefficients_fu_373_output_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            zzprime_ce0 <= grp_freduce_degree_fu_366_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            zzprime_ce0 <= grp_fproduct_1_fu_358_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            zzprime_ce0 <= grp_fproduct_fu_345_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            zzprime_ce0 <= grp_fsquare_fu_331_in_r_ce0;
        else 
            zzprime_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zzprime_ce1_assign_proc : process(grp_freduce_degree_fu_366_output_r_ce1, grp_freduce_coefficients_fu_373_output_r_ce1, grp_fsum_fu_380_in_r_ce1, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            zzprime_ce1 <= grp_fsum_fu_380_in_r_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            zzprime_ce1 <= grp_freduce_coefficients_fu_373_output_r_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            zzprime_ce1 <= grp_freduce_degree_fu_366_output_r_ce1;
        else 
            zzprime_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    zzprime_d0_assign_proc : process(grp_fproduct_fu_345_output_r_d0, grp_fproduct_1_fu_358_output_r_d0, grp_freduce_degree_fu_366_output_r_d0, grp_freduce_coefficients_fu_373_output_r_d0, grp_fdifference_1_fu_390_output_r_d0, ap_CS_fsm_state26, ap_CS_fsm_state18, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            zzprime_d0 <= grp_fdifference_1_fu_390_output_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            zzprime_d0 <= grp_freduce_coefficients_fu_373_output_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            zzprime_d0 <= grp_freduce_degree_fu_366_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            zzprime_d0 <= grp_fproduct_1_fu_358_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            zzprime_d0 <= grp_fproduct_fu_345_output_r_d0;
        else 
            zzprime_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    zzprime_d1_assign_proc : process(grp_freduce_degree_fu_366_output_r_d1, grp_freduce_coefficients_fu_373_output_r_d1, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            zzprime_d1 <= grp_freduce_coefficients_fu_373_output_r_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            zzprime_d1 <= grp_freduce_degree_fu_366_output_r_d1;
        else 
            zzprime_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    zzprime_we0_assign_proc : process(grp_fproduct_fu_345_output_r_we0, grp_fproduct_1_fu_358_output_r_we0, grp_freduce_degree_fu_366_output_r_we0, grp_freduce_coefficients_fu_373_output_r_we0, grp_fdifference_1_fu_390_output_r_we0, ap_CS_fsm_state26, ap_CS_fsm_state18, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            zzprime_we0 <= grp_fdifference_1_fu_390_output_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            zzprime_we0 <= grp_freduce_coefficients_fu_373_output_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            zzprime_we0 <= grp_freduce_degree_fu_366_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            zzprime_we0 <= grp_fproduct_1_fu_358_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            zzprime_we0 <= grp_fproduct_fu_345_output_r_we0;
        else 
            zzprime_we0 <= ap_const_logic_0;
        end if; 
    end process;


    zzprime_we1_assign_proc : process(grp_freduce_degree_fu_366_output_r_we1, grp_freduce_coefficients_fu_373_output_r_we1, ap_CS_fsm_state26, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            zzprime_we1 <= grp_freduce_coefficients_fu_373_output_r_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            zzprime_we1 <= grp_freduce_degree_fu_366_output_r_we1;
        else 
            zzprime_we1 <= ap_const_logic_0;
        end if; 
    end process;


    zzz_address0_assign_proc : process(tmp_i3_26_reg_520, grp_fproduct_fu_345_in_r_address0, grp_freduce_coefficients_fu_373_output_r_address0, grp_fsum_fu_380_output_r_address0, ap_CS_fsm_state41, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state45, ap_CS_fsm_state47, sum_i_cast_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            zzz_address0 <= tmp_i3_26_reg_520(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            zzz_address0 <= sum_i_cast_fu_459_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            zzz_address0 <= grp_fsum_fu_380_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            zzz_address0 <= grp_freduce_coefficients_fu_373_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            zzz_address0 <= grp_fproduct_fu_345_in_r_address0;
        else 
            zzz_address0 <= "XXXXX";
        end if; 
    end process;


    zzz_address1_assign_proc : process(grp_freduce_coefficients_fu_373_output_r_address1, grp_fsum_fu_380_output_r_address1, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            zzz_address1 <= grp_fsum_fu_380_output_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            zzz_address1 <= grp_freduce_coefficients_fu_373_output_r_address1;
        else 
            zzz_address1 <= "XXXXX";
        end if; 
    end process;


    zzz_ce0_assign_proc : process(grp_fproduct_fu_345_in_r_ce0, grp_freduce_coefficients_fu_373_output_r_ce0, grp_fsum_fu_380_output_r_ce0, ap_CS_fsm_state41, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            zzz_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            zzz_ce0 <= grp_fsum_fu_380_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            zzz_ce0 <= grp_freduce_coefficients_fu_373_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            zzz_ce0 <= grp_fproduct_fu_345_in_r_ce0;
        else 
            zzz_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zzz_ce1_assign_proc : process(grp_freduce_coefficients_fu_373_output_r_ce1, grp_fsum_fu_380_output_r_ce1, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            zzz_ce1 <= grp_fsum_fu_380_output_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            zzz_ce1 <= grp_freduce_coefficients_fu_373_output_r_ce1;
        else 
            zzz_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    zzz_d0_assign_proc : process(grp_freduce_coefficients_fu_373_output_r_d0, grp_fsum_fu_380_output_r_d0, ap_CS_fsm_state41, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state47, tmp_322_i_fu_316_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            zzz_d0 <= tmp_322_i_fu_316_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            zzz_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            zzz_d0 <= grp_fsum_fu_380_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            zzz_d0 <= grp_freduce_coefficients_fu_373_output_r_d0;
        else 
            zzz_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    zzz_d1_assign_proc : process(grp_freduce_coefficients_fu_373_output_r_d1, grp_fsum_fu_380_output_r_d1, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            zzz_d1 <= grp_fsum_fu_380_output_r_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            zzz_d1 <= grp_freduce_coefficients_fu_373_output_r_d1;
        else 
            zzz_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    zzz_we0_assign_proc : process(grp_freduce_coefficients_fu_373_output_r_we0, grp_fsum_fu_380_output_r_we0, ap_CS_fsm_state41, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state44))) then 
            zzz_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            zzz_we0 <= grp_fsum_fu_380_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            zzz_we0 <= grp_freduce_coefficients_fu_373_output_r_we0;
        else 
            zzz_we0 <= ap_const_logic_0;
        end if; 
    end process;


    zzz_we1_assign_proc : process(grp_freduce_coefficients_fu_373_output_r_we1, grp_fsum_fu_380_output_r_we1, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            zzz_we1 <= grp_fsum_fu_380_output_r_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            zzz_we1 <= grp_freduce_coefficients_fu_373_output_r_we1;
        else 
            zzz_we1 <= ap_const_logic_0;
        end if; 
    end process;


    zzzprime_address0_assign_proc : process(grp_fsquare_fu_331_output_r_address0, grp_fproduct_1_fu_358_in2_address0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            zzzprime_address0 <= grp_fproduct_1_fu_358_in2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            zzzprime_address0 <= grp_fsquare_fu_331_output_r_address0;
        else 
            zzzprime_address0 <= "XXXXX";
        end if; 
    end process;


    zzzprime_ce0_assign_proc : process(grp_fsquare_fu_331_output_r_ce0, grp_fproduct_1_fu_358_in2_ce0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            zzzprime_ce0 <= grp_fproduct_1_fu_358_in2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            zzzprime_ce0 <= grp_fsquare_fu_331_output_r_ce0;
        else 
            zzzprime_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    zzzprime_we0_assign_proc : process(grp_fsquare_fu_331_output_r_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            zzzprime_we0 <= grp_fsquare_fu_331_output_r_we0;
        else 
            zzzprime_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
