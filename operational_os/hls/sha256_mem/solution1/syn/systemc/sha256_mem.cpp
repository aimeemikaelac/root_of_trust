// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_mem.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_mem::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_mem::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> sha256_mem::ap_ST_fsm_state1 = "1";
const sc_lv<17> sha256_mem::ap_ST_fsm_state2 = "10";
const sc_lv<17> sha256_mem::ap_ST_fsm_state3 = "100";
const sc_lv<17> sha256_mem::ap_ST_fsm_state4 = "1000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state5 = "10000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state6 = "100000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state7 = "1000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state8 = "10000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state9 = "100000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state10 = "1000000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state11 = "10000000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state12 = "100000000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<17> sha256_mem::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<32> sha256_mem::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sha256_mem::ap_const_lv32_6 = "110";
const sc_lv<32> sha256_mem::ap_const_lv32_D = "1101";
const sc_lv<32> sha256_mem::ap_const_lv32_3 = "11";
const int sha256_mem::C_S_AXI_DATA_WIDTH = "100000";
const int sha256_mem::C_M_AXI_MEM_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int sha256_mem::C_M_AXI_MEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sha256_mem::C_M_AXI_MEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int sha256_mem::C_M_AXI_MEM_CACHE_VALUE = "11";
const int sha256_mem::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> sha256_mem::ap_const_lv32_4 = "100";
const sc_lv<1> sha256_mem::ap_const_lv1_0 = "0";
const sc_lv<32> sha256_mem::ap_const_lv32_5 = "101";
const sc_lv<1> sha256_mem::ap_const_lv1_1 = "1";
const sc_lv<32> sha256_mem::ap_const_lv32_F = "1111";
const sc_lv<32> sha256_mem::ap_const_lv32_40 = "1000000";
const sc_lv<32> sha256_mem::ap_const_lv32_E = "1110";
const sc_lv<7> sha256_mem::ap_const_lv7_0 = "0000000";
const sc_lv<32> sha256_mem::ap_const_lv32_10 = "10000";
const sc_lv<64> sha256_mem::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> sha256_mem::ap_const_lv64_1 = "1";
const sc_lv<64> sha256_mem::ap_const_lv64_2 = "10";
const sc_lv<32> sha256_mem::ap_const_lv32_1 = "1";
const sc_lv<64> sha256_mem::ap_const_lv64_3 = "11";
const sc_lv<64> sha256_mem::ap_const_lv64_4 = "100";
const sc_lv<32> sha256_mem::ap_const_lv32_2 = "10";
const sc_lv<64> sha256_mem::ap_const_lv64_5 = "101";
const sc_lv<64> sha256_mem::ap_const_lv64_6 = "110";
const sc_lv<64> sha256_mem::ap_const_lv64_7 = "111";
const sc_lv<3> sha256_mem::ap_const_lv3_0 = "000";
const sc_lv<2> sha256_mem::ap_const_lv2_0 = "00";
const sc_lv<4> sha256_mem::ap_const_lv4_0 = "0000";
const sc_lv<32> sha256_mem::ap_const_lv32_6A09E667 = "1101010000010011110011001100111";
const sc_lv<32> sha256_mem::ap_const_lv32_BB67AE85 = "10111011011001111010111010000101";
const sc_lv<32> sha256_mem::ap_const_lv32_3C6EF372 = "111100011011101111001101110010";
const sc_lv<32> sha256_mem::ap_const_lv32_A54FF53A = "10100101010011111111010100111010";
const sc_lv<32> sha256_mem::ap_const_lv32_510E527F = "1010001000011100101001001111111";
const sc_lv<32> sha256_mem::ap_const_lv32_9B05688C = "10011011000001010110100010001100";
const sc_lv<32> sha256_mem::ap_const_lv32_1F83D9AB = "11111100000111101100110101011";
const sc_lv<32> sha256_mem::ap_const_lv32_5BE0CD19 = "1011011111000001100110100011001";
const sc_lv<7> sha256_mem::ap_const_lv7_1 = "1";
const sc_lv<8> sha256_mem::ap_const_lv8_0 = "00000000";
const bool sha256_mem::ap_const_boolean_1 = true;

sha256_mem::sha256_mem(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sha256_mem_AXILiteS_s_axi_U = new sha256_mem_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("sha256_mem_AXILiteS_s_axi_U");
    sha256_mem_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    sha256_mem_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    sha256_mem_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    sha256_mem_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    sha256_mem_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    sha256_mem_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    sha256_mem_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    sha256_mem_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    sha256_mem_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    sha256_mem_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    sha256_mem_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    sha256_mem_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    sha256_mem_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    sha256_mem_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    sha256_mem_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    sha256_mem_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    sha256_mem_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    sha256_mem_AXILiteS_s_axi_U->ACLK(ap_clk);
    sha256_mem_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    sha256_mem_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sha256_mem_AXILiteS_s_axi_U->message_addr(message_addr);
    sha256_mem_AXILiteS_s_axi_U->message_addr_ap_vld(message_addr_ap_vld);
    sha256_mem_AXILiteS_s_axi_U->num_blocks(num_blocks);
    sha256_mem_AXILiteS_s_axi_U->num_blocks_ap_vld(num_blocks_ap_vld);
    sha256_mem_mem_m_axi_U = new sha256_mem_mem_m_axi<8,32,5,16,16,16,16,C_M_AXI_MEM_ID_WIDTH,C_M_AXI_MEM_ADDR_WIDTH,C_M_AXI_MEM_DATA_WIDTH,C_M_AXI_MEM_AWUSER_WIDTH,C_M_AXI_MEM_ARUSER_WIDTH,C_M_AXI_MEM_WUSER_WIDTH,C_M_AXI_MEM_RUSER_WIDTH,C_M_AXI_MEM_BUSER_WIDTH,C_M_AXI_MEM_TARGET_ADDR,C_M_AXI_MEM_USER_VALUE,C_M_AXI_MEM_PROT_VALUE,C_M_AXI_MEM_CACHE_VALUE>("sha256_mem_mem_m_axi_U");
    sha256_mem_mem_m_axi_U->AWVALID(m_axi_mem_AWVALID);
    sha256_mem_mem_m_axi_U->AWREADY(m_axi_mem_AWREADY);
    sha256_mem_mem_m_axi_U->AWADDR(m_axi_mem_AWADDR);
    sha256_mem_mem_m_axi_U->AWID(m_axi_mem_AWID);
    sha256_mem_mem_m_axi_U->AWLEN(m_axi_mem_AWLEN);
    sha256_mem_mem_m_axi_U->AWSIZE(m_axi_mem_AWSIZE);
    sha256_mem_mem_m_axi_U->AWBURST(m_axi_mem_AWBURST);
    sha256_mem_mem_m_axi_U->AWLOCK(m_axi_mem_AWLOCK);
    sha256_mem_mem_m_axi_U->AWCACHE(m_axi_mem_AWCACHE);
    sha256_mem_mem_m_axi_U->AWPROT(m_axi_mem_AWPROT);
    sha256_mem_mem_m_axi_U->AWQOS(m_axi_mem_AWQOS);
    sha256_mem_mem_m_axi_U->AWREGION(m_axi_mem_AWREGION);
    sha256_mem_mem_m_axi_U->AWUSER(m_axi_mem_AWUSER);
    sha256_mem_mem_m_axi_U->WVALID(m_axi_mem_WVALID);
    sha256_mem_mem_m_axi_U->WREADY(m_axi_mem_WREADY);
    sha256_mem_mem_m_axi_U->WDATA(m_axi_mem_WDATA);
    sha256_mem_mem_m_axi_U->WSTRB(m_axi_mem_WSTRB);
    sha256_mem_mem_m_axi_U->WLAST(m_axi_mem_WLAST);
    sha256_mem_mem_m_axi_U->WID(m_axi_mem_WID);
    sha256_mem_mem_m_axi_U->WUSER(m_axi_mem_WUSER);
    sha256_mem_mem_m_axi_U->ARVALID(m_axi_mem_ARVALID);
    sha256_mem_mem_m_axi_U->ARREADY(m_axi_mem_ARREADY);
    sha256_mem_mem_m_axi_U->ARADDR(m_axi_mem_ARADDR);
    sha256_mem_mem_m_axi_U->ARID(m_axi_mem_ARID);
    sha256_mem_mem_m_axi_U->ARLEN(m_axi_mem_ARLEN);
    sha256_mem_mem_m_axi_U->ARSIZE(m_axi_mem_ARSIZE);
    sha256_mem_mem_m_axi_U->ARBURST(m_axi_mem_ARBURST);
    sha256_mem_mem_m_axi_U->ARLOCK(m_axi_mem_ARLOCK);
    sha256_mem_mem_m_axi_U->ARCACHE(m_axi_mem_ARCACHE);
    sha256_mem_mem_m_axi_U->ARPROT(m_axi_mem_ARPROT);
    sha256_mem_mem_m_axi_U->ARQOS(m_axi_mem_ARQOS);
    sha256_mem_mem_m_axi_U->ARREGION(m_axi_mem_ARREGION);
    sha256_mem_mem_m_axi_U->ARUSER(m_axi_mem_ARUSER);
    sha256_mem_mem_m_axi_U->RVALID(m_axi_mem_RVALID);
    sha256_mem_mem_m_axi_U->RREADY(m_axi_mem_RREADY);
    sha256_mem_mem_m_axi_U->RDATA(m_axi_mem_RDATA);
    sha256_mem_mem_m_axi_U->RLAST(m_axi_mem_RLAST);
    sha256_mem_mem_m_axi_U->RID(m_axi_mem_RID);
    sha256_mem_mem_m_axi_U->RUSER(m_axi_mem_RUSER);
    sha256_mem_mem_m_axi_U->RRESP(m_axi_mem_RRESP);
    sha256_mem_mem_m_axi_U->BVALID(m_axi_mem_BVALID);
    sha256_mem_mem_m_axi_U->BREADY(m_axi_mem_BREADY);
    sha256_mem_mem_m_axi_U->BRESP(m_axi_mem_BRESP);
    sha256_mem_mem_m_axi_U->BID(m_axi_mem_BID);
    sha256_mem_mem_m_axi_U->BUSER(m_axi_mem_BUSER);
    sha256_mem_mem_m_axi_U->ACLK(ap_clk);
    sha256_mem_mem_m_axi_U->ARESET(ap_rst_n_inv);
    sha256_mem_mem_m_axi_U->ACLK_EN(ap_var_for_const0);
    sha256_mem_mem_m_axi_U->I_ARVALID(mem_ARVALID);
    sha256_mem_mem_m_axi_U->I_ARREADY(mem_ARREADY);
    sha256_mem_mem_m_axi_U->I_ARADDR(mem_addr_reg_438);
    sha256_mem_mem_m_axi_U->I_ARID(ap_var_for_const1);
    sha256_mem_mem_m_axi_U->I_ARLEN(ap_var_for_const2);
    sha256_mem_mem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    sha256_mem_mem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    sha256_mem_mem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    sha256_mem_mem_m_axi_U->I_ARQOS(ap_var_for_const5);
    sha256_mem_mem_m_axi_U->I_ARPROT(ap_var_for_const3);
    sha256_mem_mem_m_axi_U->I_ARUSER(ap_var_for_const1);
    sha256_mem_mem_m_axi_U->I_ARBURST(ap_var_for_const4);
    sha256_mem_mem_m_axi_U->I_ARREGION(ap_var_for_const5);
    sha256_mem_mem_m_axi_U->I_RVALID(mem_RVALID);
    sha256_mem_mem_m_axi_U->I_RREADY(mem_RREADY);
    sha256_mem_mem_m_axi_U->I_RDATA(mem_RDATA);
    sha256_mem_mem_m_axi_U->I_RID(mem_RID);
    sha256_mem_mem_m_axi_U->I_RUSER(mem_RUSER);
    sha256_mem_mem_m_axi_U->I_RRESP(mem_RRESP);
    sha256_mem_mem_m_axi_U->I_RLAST(mem_RLAST);
    sha256_mem_mem_m_axi_U->I_AWVALID(ap_var_for_const6);
    sha256_mem_mem_m_axi_U->I_AWREADY(mem_AWREADY);
    sha256_mem_mem_m_axi_U->I_AWADDR(ap_var_for_const7);
    sha256_mem_mem_m_axi_U->I_AWID(ap_var_for_const1);
    sha256_mem_mem_m_axi_U->I_AWLEN(ap_var_for_const7);
    sha256_mem_mem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    sha256_mem_mem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    sha256_mem_mem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    sha256_mem_mem_m_axi_U->I_AWQOS(ap_var_for_const5);
    sha256_mem_mem_m_axi_U->I_AWPROT(ap_var_for_const3);
    sha256_mem_mem_m_axi_U->I_AWUSER(ap_var_for_const1);
    sha256_mem_mem_m_axi_U->I_AWBURST(ap_var_for_const4);
    sha256_mem_mem_m_axi_U->I_AWREGION(ap_var_for_const5);
    sha256_mem_mem_m_axi_U->I_WVALID(ap_var_for_const6);
    sha256_mem_mem_m_axi_U->I_WREADY(mem_WREADY);
    sha256_mem_mem_m_axi_U->I_WDATA(ap_var_for_const8);
    sha256_mem_mem_m_axi_U->I_WID(ap_var_for_const1);
    sha256_mem_mem_m_axi_U->I_WUSER(ap_var_for_const1);
    sha256_mem_mem_m_axi_U->I_WLAST(ap_var_for_const6);
    sha256_mem_mem_m_axi_U->I_WSTRB(ap_var_for_const1);
    sha256_mem_mem_m_axi_U->I_BVALID(mem_BVALID);
    sha256_mem_mem_m_axi_U->I_BREADY(ap_var_for_const6);
    sha256_mem_mem_m_axi_U->I_BRESP(mem_BRESP);
    sha256_mem_mem_m_axi_U->I_BID(mem_BID);
    sha256_mem_mem_m_axi_U->I_BUSER(mem_BUSER);
    data_buffer_U = new sha256_mem_data_bdEe("data_buffer_U");
    data_buffer_U->clk(ap_clk);
    data_buffer_U->reset(ap_rst_n_inv);
    data_buffer_U->address0(data_buffer_address0);
    data_buffer_U->ce0(data_buffer_ce0);
    data_buffer_U->we0(data_buffer_we0);
    data_buffer_U->d0(mem_addr_read_reg_454);
    data_buffer_U->q0(data_buffer_q0);
    data_buffer_U->address1(grp_update_fu_311_message_address1);
    data_buffer_U->ce1(data_buffer_ce1);
    data_buffer_U->q1(data_buffer_q1);
    cipher_m_block_U = new sha256_mem_ciphereOg("cipher_m_block_U");
    cipher_m_block_U->clk(ap_clk);
    cipher_m_block_U->reset(ap_rst_n_inv);
    cipher_m_block_U->address0(cipher_m_block_address0);
    cipher_m_block_U->ce0(cipher_m_block_ce0);
    cipher_m_block_U->we0(cipher_m_block_we0);
    cipher_m_block_U->d0(cipher_m_block_d0);
    cipher_m_block_U->q0(cipher_m_block_q0);
    cipher_m_block_U->address1(cipher_m_block_address1);
    cipher_m_block_U->ce1(cipher_m_block_ce1);
    cipher_m_block_U->q1(cipher_m_block_q1);
    cipher_m_h_U = new sha256_mem_cipherfYi("cipher_m_h_U");
    cipher_m_h_U->clk(ap_clk);
    cipher_m_h_U->reset(ap_rst_n_inv);
    cipher_m_h_U->address0(cipher_m_h_address0);
    cipher_m_h_U->ce0(cipher_m_h_ce0);
    cipher_m_h_U->we0(cipher_m_h_we0);
    cipher_m_h_U->d0(cipher_m_h_d0);
    cipher_m_h_U->q0(cipher_m_h_q0);
    cipher_m_h_U->address1(cipher_m_h_address1);
    cipher_m_h_U->ce1(cipher_m_h_ce1);
    cipher_m_h_U->we1(cipher_m_h_we1);
    cipher_m_h_U->d1(cipher_m_h_d1);
    grp_update_fu_311 = new update("grp_update_fu_311");
    grp_update_fu_311->ap_clk(ap_clk);
    grp_update_fu_311->ap_rst(ap_rst_n_inv);
    grp_update_fu_311->ap_start(grp_update_fu_311_ap_start);
    grp_update_fu_311->ap_done(grp_update_fu_311_ap_done);
    grp_update_fu_311->ap_idle(grp_update_fu_311_ap_idle);
    grp_update_fu_311->ap_ready(grp_update_fu_311_ap_ready);
    grp_update_fu_311->SHA256_m_tot_len_read(cipher_m_tot_len_reg_242);
    grp_update_fu_311->SHA256_m_len_read(cipher_m_len_reg_230);
    grp_update_fu_311->SHA256_m_block_address0(grp_update_fu_311_SHA256_m_block_address0);
    grp_update_fu_311->SHA256_m_block_ce0(grp_update_fu_311_SHA256_m_block_ce0);
    grp_update_fu_311->SHA256_m_block_we0(grp_update_fu_311_SHA256_m_block_we0);
    grp_update_fu_311->SHA256_m_block_d0(grp_update_fu_311_SHA256_m_block_d0);
    grp_update_fu_311->SHA256_m_block_q0(cipher_m_block_q0);
    grp_update_fu_311->SHA256_m_block_address1(grp_update_fu_311_SHA256_m_block_address1);
    grp_update_fu_311->SHA256_m_block_ce1(grp_update_fu_311_SHA256_m_block_ce1);
    grp_update_fu_311->SHA256_m_block_q1(cipher_m_block_q1);
    grp_update_fu_311->SHA256_m_h_address0(grp_update_fu_311_SHA256_m_h_address0);
    grp_update_fu_311->SHA256_m_h_ce0(grp_update_fu_311_SHA256_m_h_ce0);
    grp_update_fu_311->SHA256_m_h_we0(grp_update_fu_311_SHA256_m_h_we0);
    grp_update_fu_311->SHA256_m_h_d0(grp_update_fu_311_SHA256_m_h_d0);
    grp_update_fu_311->SHA256_m_h_q0(cipher_m_h_q0);
    grp_update_fu_311->message_address0(grp_update_fu_311_message_address0);
    grp_update_fu_311->message_ce0(grp_update_fu_311_message_ce0);
    grp_update_fu_311->message_q0(data_buffer_q0);
    grp_update_fu_311->message_address1(grp_update_fu_311_message_address1);
    grp_update_fu_311->message_ce1(grp_update_fu_311_message_ce1);
    grp_update_fu_311->message_q1(data_buffer_q1);
    grp_update_fu_311->ap_return_0(grp_update_fu_311_ap_return_0);
    grp_update_fu_311->ap_return_1(grp_update_fu_311_ap_return_1);
    grp_final_fu_324 = new final("grp_final_fu_324");
    grp_final_fu_324->ap_clk(ap_clk);
    grp_final_fu_324->ap_rst(ap_rst_n_inv);
    grp_final_fu_324->ap_start(grp_final_fu_324_ap_start);
    grp_final_fu_324->ap_done(grp_final_fu_324_ap_done);
    grp_final_fu_324->ap_idle(grp_final_fu_324_ap_idle);
    grp_final_fu_324->ap_ready(grp_final_fu_324_ap_ready);
    grp_final_fu_324->SHA256_m_tot_len_read(cipher_m_tot_len_reg_242);
    grp_final_fu_324->SHA256_m_len_read(cipher_m_len_reg_230);
    grp_final_fu_324->SHA256_m_block_address0(grp_final_fu_324_SHA256_m_block_address0);
    grp_final_fu_324->SHA256_m_block_ce0(grp_final_fu_324_SHA256_m_block_ce0);
    grp_final_fu_324->SHA256_m_block_we0(grp_final_fu_324_SHA256_m_block_we0);
    grp_final_fu_324->SHA256_m_block_d0(grp_final_fu_324_SHA256_m_block_d0);
    grp_final_fu_324->SHA256_m_block_q0(cipher_m_block_q0);
    grp_final_fu_324->SHA256_m_block_address1(grp_final_fu_324_SHA256_m_block_address1);
    grp_final_fu_324->SHA256_m_block_ce1(grp_final_fu_324_SHA256_m_block_ce1);
    grp_final_fu_324->SHA256_m_block_q1(cipher_m_block_q1);
    grp_final_fu_324->SHA256_m_h_address0(grp_final_fu_324_SHA256_m_h_address0);
    grp_final_fu_324->SHA256_m_h_ce0(grp_final_fu_324_SHA256_m_h_ce0);
    grp_final_fu_324->SHA256_m_h_we0(grp_final_fu_324_SHA256_m_h_we0);
    grp_final_fu_324->SHA256_m_h_d0(grp_final_fu_324_SHA256_m_h_d0);
    grp_final_fu_324->SHA256_m_h_q0(cipher_m_h_q0);
    grp_final_fu_324->digest_address0(grp_final_fu_324_digest_address0);
    grp_final_fu_324->digest_ce0(grp_final_fu_324_digest_ce0);
    grp_final_fu_324->digest_we0(grp_final_fu_324_digest_we0);
    grp_final_fu_324->digest_d0(grp_final_fu_324_digest_d0);
    grp_final_fu_324->digest_address1(grp_final_fu_324_digest_address1);
    grp_final_fu_324->digest_ce1(grp_final_fu_324_digest_ce1);
    grp_final_fu_324->digest_we1(grp_final_fu_324_digest_we1);
    grp_final_fu_324->digest_d1(grp_final_fu_324_digest_d1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( message_addr_ap_vld_in_sig );
    sensitive << ( num_blocks_ap_vld_in_sig );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_final_fu_324_ap_done );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_final_fu_324_ap_done );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_mem_ARREADY);
    sensitive << ( mem_ARREADY );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_block_counter_1_fu_343_p2);
    sensitive << ( block_counter_reg_266 );

    SC_METHOD(thread_buffer_index_1_fu_361_p2);
    sensitive << ( buffer_index_reg_299 );

    SC_METHOD(thread_cipher_m_block_address0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_block_address0 );
    sensitive << ( grp_final_fu_324_SHA256_m_block_address0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_cipher_m_block_address1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_block_address1 );
    sensitive << ( grp_final_fu_324_SHA256_m_block_address1 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_cipher_m_block_ce0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_block_ce0 );
    sensitive << ( grp_final_fu_324_SHA256_m_block_ce0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_cipher_m_block_ce1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_block_ce1 );
    sensitive << ( grp_final_fu_324_SHA256_m_block_ce1 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_cipher_m_block_d0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_block_d0 );
    sensitive << ( grp_final_fu_324_SHA256_m_block_d0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_cipher_m_block_we0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_block_we0 );
    sensitive << ( grp_final_fu_324_SHA256_m_block_we0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_cipher_m_h_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_h_address0 );
    sensitive << ( grp_final_fu_324_SHA256_m_h_address0 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( message_addr_ap_vld_in_sig );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_h_ce0 );
    sensitive << ( grp_final_fu_324_SHA256_m_h_ce0 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( message_addr_ap_vld_in_sig );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_h_d0 );
    sensitive << ( grp_final_fu_324_SHA256_m_h_d0 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_d1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( message_addr_ap_vld_in_sig );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_SHA256_m_h_we0 );
    sensitive << ( grp_final_fu_324_SHA256_m_h_we0 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cipher_m_h_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( message_addr_ap_vld_in_sig );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_buffer_address0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_message_address0 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_2_fu_394_p1 );

    SC_METHOD(thread_data_buffer_ce0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_message_ce0 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_data_buffer_ce1);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_message_ce1 );

    SC_METHOD(thread_data_buffer_we0);
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_data_index_2_fu_349_p2);
    sensitive << ( data_index_reg_277 );

    SC_METHOD(thread_digest_out_address0);
    sensitive << ( grp_final_fu_324_digest_address0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_digest_out_address1);
    sensitive << ( grp_final_fu_324_digest_address1 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_digest_out_ce0);
    sensitive << ( grp_final_fu_324_digest_ce0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_digest_out_ce1);
    sensitive << ( grp_final_fu_324_digest_ce1 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_digest_out_d0);
    sensitive << ( grp_final_fu_324_digest_d0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_digest_out_d1);
    sensitive << ( grp_final_fu_324_digest_d1 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_digest_out_we0);
    sensitive << ( grp_final_fu_324_digest_we0 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_digest_out_we1);
    sensitive << ( grp_final_fu_324_digest_we1 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_digest_valid);
    sensitive << ( grp_final_fu_324_ap_done );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_exitcond2_fu_338_p2);
    sensitive << ( num_blocks_in_sig );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( block_counter_reg_266 );

    SC_METHOD(thread_exitcond_fu_355_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( indvars_iv_reg_254 );
    sensitive << ( data_index_1_reg_289 );

    SC_METHOD(thread_grp_final_fu_324_ap_start);
    sensitive << ( ap_reg_grp_final_fu_324_ap_start );

    SC_METHOD(thread_grp_update_fu_311_ap_start);
    sensitive << ( ap_reg_grp_update_fu_311_ap_start );

    SC_METHOD(thread_indvars_iv_next_fu_388_p2);
    sensitive << ( indvars_iv_reg_254 );

    SC_METHOD(thread_mem_ARVALID);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_mem_RREADY);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( mem_RVALID );

    SC_METHOD(thread_mem_blk_n_AR);
    sensitive << ( m_axi_mem_ARREADY );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_mem_blk_n_R);
    sensitive << ( m_axi_mem_RVALID );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_message_addr_ap_vld_in_sig);
    sensitive << ( message_addr_ap_vld );
    sensitive << ( message_addr_ap_vld_preg );

    SC_METHOD(thread_message_addr_blk_n);
    sensitive << ( message_addr_ap_vld );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_message_addr_in_sig);
    sensitive << ( message_addr );
    sensitive << ( message_addr_preg );
    sensitive << ( message_addr_ap_vld );

    SC_METHOD(thread_num_blocks_ap_vld_in_sig);
    sensitive << ( num_blocks_ap_vld );
    sensitive << ( num_blocks_ap_vld_preg );

    SC_METHOD(thread_num_blocks_blk_n);
    sensitive << ( num_blocks_ap_vld );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_num_blocks_in_sig);
    sensitive << ( num_blocks );
    sensitive << ( num_blocks_preg );
    sensitive << ( num_blocks_ap_vld );

    SC_METHOD(thread_tmp_1_fu_372_p1);
    sensitive << ( tmp_fu_367_p2 );

    SC_METHOD(thread_tmp_2_fu_394_p1);
    sensitive << ( buffer_index_reg_299 );

    SC_METHOD(thread_tmp_3_fu_382_p2);
    sensitive << ( data_index_1_reg_289 );

    SC_METHOD(thread_tmp_fu_367_p2);
    sensitive << ( message_addr_in_sig );
    sensitive << ( data_index_1_reg_289 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( message_addr_ap_vld_in_sig );
    sensitive << ( num_blocks_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( mem_RVALID );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond2_fu_338_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_355_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( grp_update_fu_311_ap_done );
    sensitive << ( grp_final_fu_324_ap_done );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_sig_ioackin_mem_ARREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "00000000000000001";
    message_addr_preg = "00000000000000000000000000000000";
    message_addr_ap_vld_preg = SC_LOGIC_0;
    num_blocks_preg = "00000000000000000000000000000000";
    num_blocks_ap_vld_preg = SC_LOGIC_0;
    ap_reg_grp_update_fu_311_ap_start = SC_LOGIC_0;
    ap_reg_grp_final_fu_324_ap_start = SC_LOGIC_0;
    ap_reg_ioackin_mem_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_mem_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_mem_AWVALID, "(port)m_axi_mem_AWVALID");
    sc_trace(mVcdFile, m_axi_mem_AWREADY, "(port)m_axi_mem_AWREADY");
    sc_trace(mVcdFile, m_axi_mem_AWADDR, "(port)m_axi_mem_AWADDR");
    sc_trace(mVcdFile, m_axi_mem_AWID, "(port)m_axi_mem_AWID");
    sc_trace(mVcdFile, m_axi_mem_AWLEN, "(port)m_axi_mem_AWLEN");
    sc_trace(mVcdFile, m_axi_mem_AWSIZE, "(port)m_axi_mem_AWSIZE");
    sc_trace(mVcdFile, m_axi_mem_AWBURST, "(port)m_axi_mem_AWBURST");
    sc_trace(mVcdFile, m_axi_mem_AWLOCK, "(port)m_axi_mem_AWLOCK");
    sc_trace(mVcdFile, m_axi_mem_AWCACHE, "(port)m_axi_mem_AWCACHE");
    sc_trace(mVcdFile, m_axi_mem_AWPROT, "(port)m_axi_mem_AWPROT");
    sc_trace(mVcdFile, m_axi_mem_AWQOS, "(port)m_axi_mem_AWQOS");
    sc_trace(mVcdFile, m_axi_mem_AWREGION, "(port)m_axi_mem_AWREGION");
    sc_trace(mVcdFile, m_axi_mem_AWUSER, "(port)m_axi_mem_AWUSER");
    sc_trace(mVcdFile, m_axi_mem_WVALID, "(port)m_axi_mem_WVALID");
    sc_trace(mVcdFile, m_axi_mem_WREADY, "(port)m_axi_mem_WREADY");
    sc_trace(mVcdFile, m_axi_mem_WDATA, "(port)m_axi_mem_WDATA");
    sc_trace(mVcdFile, m_axi_mem_WSTRB, "(port)m_axi_mem_WSTRB");
    sc_trace(mVcdFile, m_axi_mem_WLAST, "(port)m_axi_mem_WLAST");
    sc_trace(mVcdFile, m_axi_mem_WID, "(port)m_axi_mem_WID");
    sc_trace(mVcdFile, m_axi_mem_WUSER, "(port)m_axi_mem_WUSER");
    sc_trace(mVcdFile, m_axi_mem_ARVALID, "(port)m_axi_mem_ARVALID");
    sc_trace(mVcdFile, m_axi_mem_ARREADY, "(port)m_axi_mem_ARREADY");
    sc_trace(mVcdFile, m_axi_mem_ARADDR, "(port)m_axi_mem_ARADDR");
    sc_trace(mVcdFile, m_axi_mem_ARID, "(port)m_axi_mem_ARID");
    sc_trace(mVcdFile, m_axi_mem_ARLEN, "(port)m_axi_mem_ARLEN");
    sc_trace(mVcdFile, m_axi_mem_ARSIZE, "(port)m_axi_mem_ARSIZE");
    sc_trace(mVcdFile, m_axi_mem_ARBURST, "(port)m_axi_mem_ARBURST");
    sc_trace(mVcdFile, m_axi_mem_ARLOCK, "(port)m_axi_mem_ARLOCK");
    sc_trace(mVcdFile, m_axi_mem_ARCACHE, "(port)m_axi_mem_ARCACHE");
    sc_trace(mVcdFile, m_axi_mem_ARPROT, "(port)m_axi_mem_ARPROT");
    sc_trace(mVcdFile, m_axi_mem_ARQOS, "(port)m_axi_mem_ARQOS");
    sc_trace(mVcdFile, m_axi_mem_ARREGION, "(port)m_axi_mem_ARREGION");
    sc_trace(mVcdFile, m_axi_mem_ARUSER, "(port)m_axi_mem_ARUSER");
    sc_trace(mVcdFile, m_axi_mem_RVALID, "(port)m_axi_mem_RVALID");
    sc_trace(mVcdFile, m_axi_mem_RREADY, "(port)m_axi_mem_RREADY");
    sc_trace(mVcdFile, m_axi_mem_RDATA, "(port)m_axi_mem_RDATA");
    sc_trace(mVcdFile, m_axi_mem_RLAST, "(port)m_axi_mem_RLAST");
    sc_trace(mVcdFile, m_axi_mem_RID, "(port)m_axi_mem_RID");
    sc_trace(mVcdFile, m_axi_mem_RUSER, "(port)m_axi_mem_RUSER");
    sc_trace(mVcdFile, m_axi_mem_RRESP, "(port)m_axi_mem_RRESP");
    sc_trace(mVcdFile, m_axi_mem_BVALID, "(port)m_axi_mem_BVALID");
    sc_trace(mVcdFile, m_axi_mem_BREADY, "(port)m_axi_mem_BREADY");
    sc_trace(mVcdFile, m_axi_mem_BRESP, "(port)m_axi_mem_BRESP");
    sc_trace(mVcdFile, m_axi_mem_BID, "(port)m_axi_mem_BID");
    sc_trace(mVcdFile, m_axi_mem_BUSER, "(port)m_axi_mem_BUSER");
    sc_trace(mVcdFile, digest_out_address0, "(port)digest_out_address0");
    sc_trace(mVcdFile, digest_out_ce0, "(port)digest_out_ce0");
    sc_trace(mVcdFile, digest_out_we0, "(port)digest_out_we0");
    sc_trace(mVcdFile, digest_out_d0, "(port)digest_out_d0");
    sc_trace(mVcdFile, digest_out_address1, "(port)digest_out_address1");
    sc_trace(mVcdFile, digest_out_ce1, "(port)digest_out_ce1");
    sc_trace(mVcdFile, digest_out_we1, "(port)digest_out_we1");
    sc_trace(mVcdFile, digest_out_d1, "(port)digest_out_d1");
    sc_trace(mVcdFile, digest_valid, "(port)digest_valid");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, message_addr, "message_addr");
    sc_trace(mVcdFile, message_addr_preg, "message_addr_preg");
    sc_trace(mVcdFile, message_addr_ap_vld, "message_addr_ap_vld");
    sc_trace(mVcdFile, message_addr_in_sig, "message_addr_in_sig");
    sc_trace(mVcdFile, message_addr_ap_vld_preg, "message_addr_ap_vld_preg");
    sc_trace(mVcdFile, message_addr_ap_vld_in_sig, "message_addr_ap_vld_in_sig");
    sc_trace(mVcdFile, num_blocks, "num_blocks");
    sc_trace(mVcdFile, num_blocks_preg, "num_blocks_preg");
    sc_trace(mVcdFile, num_blocks_ap_vld, "num_blocks_ap_vld");
    sc_trace(mVcdFile, num_blocks_in_sig, "num_blocks_in_sig");
    sc_trace(mVcdFile, num_blocks_ap_vld_preg, "num_blocks_ap_vld_preg");
    sc_trace(mVcdFile, num_blocks_ap_vld_in_sig, "num_blocks_ap_vld_in_sig");
    sc_trace(mVcdFile, mem_blk_n_AR, "mem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, mem_blk_n_R, "mem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, message_addr_blk_n, "message_addr_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, num_blocks_blk_n, "num_blocks_blk_n");
    sc_trace(mVcdFile, mem_AWREADY, "mem_AWREADY");
    sc_trace(mVcdFile, mem_WREADY, "mem_WREADY");
    sc_trace(mVcdFile, mem_ARVALID, "mem_ARVALID");
    sc_trace(mVcdFile, mem_ARREADY, "mem_ARREADY");
    sc_trace(mVcdFile, mem_RVALID, "mem_RVALID");
    sc_trace(mVcdFile, mem_RREADY, "mem_RREADY");
    sc_trace(mVcdFile, mem_RDATA, "mem_RDATA");
    sc_trace(mVcdFile, mem_RLAST, "mem_RLAST");
    sc_trace(mVcdFile, mem_RID, "mem_RID");
    sc_trace(mVcdFile, mem_RUSER, "mem_RUSER");
    sc_trace(mVcdFile, mem_RRESP, "mem_RRESP");
    sc_trace(mVcdFile, mem_BVALID, "mem_BVALID");
    sc_trace(mVcdFile, mem_BRESP, "mem_BRESP");
    sc_trace(mVcdFile, mem_BID, "mem_BID");
    sc_trace(mVcdFile, mem_BUSER, "mem_BUSER");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, block_counter_1_fu_343_p2, "block_counter_1_fu_343_p2");
    sc_trace(mVcdFile, block_counter_1_reg_420, "block_counter_1_reg_420");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, data_index_2_fu_349_p2, "data_index_2_fu_349_p2");
    sc_trace(mVcdFile, data_index_2_reg_425, "data_index_2_reg_425");
    sc_trace(mVcdFile, exitcond2_fu_338_p2, "exitcond2_fu_338_p2");
    sc_trace(mVcdFile, buffer_index_1_fu_361_p2, "buffer_index_1_fu_361_p2");
    sc_trace(mVcdFile, buffer_index_1_reg_433, "buffer_index_1_reg_433");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, mem_addr_reg_438, "mem_addr_reg_438");
    sc_trace(mVcdFile, exitcond_fu_355_p2, "exitcond_fu_355_p2");
    sc_trace(mVcdFile, tmp_3_fu_382_p2, "tmp_3_fu_382_p2");
    sc_trace(mVcdFile, tmp_3_reg_444, "tmp_3_reg_444");
    sc_trace(mVcdFile, indvars_iv_next_fu_388_p2, "indvars_iv_next_fu_388_p2");
    sc_trace(mVcdFile, indvars_iv_next_reg_449, "indvars_iv_next_reg_449");
    sc_trace(mVcdFile, mem_addr_read_reg_454, "mem_addr_read_reg_454");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_update_fu_311_ap_done, "grp_update_fu_311_ap_done");
    sc_trace(mVcdFile, data_buffer_address0, "data_buffer_address0");
    sc_trace(mVcdFile, data_buffer_ce0, "data_buffer_ce0");
    sc_trace(mVcdFile, data_buffer_we0, "data_buffer_we0");
    sc_trace(mVcdFile, data_buffer_q0, "data_buffer_q0");
    sc_trace(mVcdFile, data_buffer_ce1, "data_buffer_ce1");
    sc_trace(mVcdFile, data_buffer_q1, "data_buffer_q1");
    sc_trace(mVcdFile, cipher_m_block_address0, "cipher_m_block_address0");
    sc_trace(mVcdFile, cipher_m_block_ce0, "cipher_m_block_ce0");
    sc_trace(mVcdFile, cipher_m_block_we0, "cipher_m_block_we0");
    sc_trace(mVcdFile, cipher_m_block_d0, "cipher_m_block_d0");
    sc_trace(mVcdFile, cipher_m_block_q0, "cipher_m_block_q0");
    sc_trace(mVcdFile, cipher_m_block_address1, "cipher_m_block_address1");
    sc_trace(mVcdFile, cipher_m_block_ce1, "cipher_m_block_ce1");
    sc_trace(mVcdFile, cipher_m_block_q1, "cipher_m_block_q1");
    sc_trace(mVcdFile, cipher_m_h_address0, "cipher_m_h_address0");
    sc_trace(mVcdFile, cipher_m_h_ce0, "cipher_m_h_ce0");
    sc_trace(mVcdFile, cipher_m_h_we0, "cipher_m_h_we0");
    sc_trace(mVcdFile, cipher_m_h_d0, "cipher_m_h_d0");
    sc_trace(mVcdFile, cipher_m_h_q0, "cipher_m_h_q0");
    sc_trace(mVcdFile, cipher_m_h_address1, "cipher_m_h_address1");
    sc_trace(mVcdFile, cipher_m_h_ce1, "cipher_m_h_ce1");
    sc_trace(mVcdFile, cipher_m_h_we1, "cipher_m_h_we1");
    sc_trace(mVcdFile, cipher_m_h_d1, "cipher_m_h_d1");
    sc_trace(mVcdFile, grp_update_fu_311_ap_start, "grp_update_fu_311_ap_start");
    sc_trace(mVcdFile, grp_update_fu_311_ap_idle, "grp_update_fu_311_ap_idle");
    sc_trace(mVcdFile, grp_update_fu_311_ap_ready, "grp_update_fu_311_ap_ready");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_block_address0, "grp_update_fu_311_SHA256_m_block_address0");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_block_ce0, "grp_update_fu_311_SHA256_m_block_ce0");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_block_we0, "grp_update_fu_311_SHA256_m_block_we0");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_block_d0, "grp_update_fu_311_SHA256_m_block_d0");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_block_address1, "grp_update_fu_311_SHA256_m_block_address1");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_block_ce1, "grp_update_fu_311_SHA256_m_block_ce1");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_h_address0, "grp_update_fu_311_SHA256_m_h_address0");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_h_ce0, "grp_update_fu_311_SHA256_m_h_ce0");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_h_we0, "grp_update_fu_311_SHA256_m_h_we0");
    sc_trace(mVcdFile, grp_update_fu_311_SHA256_m_h_d0, "grp_update_fu_311_SHA256_m_h_d0");
    sc_trace(mVcdFile, grp_update_fu_311_message_address0, "grp_update_fu_311_message_address0");
    sc_trace(mVcdFile, grp_update_fu_311_message_ce0, "grp_update_fu_311_message_ce0");
    sc_trace(mVcdFile, grp_update_fu_311_message_address1, "grp_update_fu_311_message_address1");
    sc_trace(mVcdFile, grp_update_fu_311_message_ce1, "grp_update_fu_311_message_ce1");
    sc_trace(mVcdFile, grp_update_fu_311_ap_return_0, "grp_update_fu_311_ap_return_0");
    sc_trace(mVcdFile, grp_update_fu_311_ap_return_1, "grp_update_fu_311_ap_return_1");
    sc_trace(mVcdFile, grp_final_fu_324_ap_start, "grp_final_fu_324_ap_start");
    sc_trace(mVcdFile, grp_final_fu_324_ap_done, "grp_final_fu_324_ap_done");
    sc_trace(mVcdFile, grp_final_fu_324_ap_idle, "grp_final_fu_324_ap_idle");
    sc_trace(mVcdFile, grp_final_fu_324_ap_ready, "grp_final_fu_324_ap_ready");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_block_address0, "grp_final_fu_324_SHA256_m_block_address0");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_block_ce0, "grp_final_fu_324_SHA256_m_block_ce0");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_block_we0, "grp_final_fu_324_SHA256_m_block_we0");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_block_d0, "grp_final_fu_324_SHA256_m_block_d0");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_block_address1, "grp_final_fu_324_SHA256_m_block_address1");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_block_ce1, "grp_final_fu_324_SHA256_m_block_ce1");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_h_address0, "grp_final_fu_324_SHA256_m_h_address0");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_h_ce0, "grp_final_fu_324_SHA256_m_h_ce0");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_h_we0, "grp_final_fu_324_SHA256_m_h_we0");
    sc_trace(mVcdFile, grp_final_fu_324_SHA256_m_h_d0, "grp_final_fu_324_SHA256_m_h_d0");
    sc_trace(mVcdFile, grp_final_fu_324_digest_address0, "grp_final_fu_324_digest_address0");
    sc_trace(mVcdFile, grp_final_fu_324_digest_ce0, "grp_final_fu_324_digest_ce0");
    sc_trace(mVcdFile, grp_final_fu_324_digest_we0, "grp_final_fu_324_digest_we0");
    sc_trace(mVcdFile, grp_final_fu_324_digest_d0, "grp_final_fu_324_digest_d0");
    sc_trace(mVcdFile, grp_final_fu_324_digest_address1, "grp_final_fu_324_digest_address1");
    sc_trace(mVcdFile, grp_final_fu_324_digest_ce1, "grp_final_fu_324_digest_ce1");
    sc_trace(mVcdFile, grp_final_fu_324_digest_we1, "grp_final_fu_324_digest_we1");
    sc_trace(mVcdFile, grp_final_fu_324_digest_d1, "grp_final_fu_324_digest_d1");
    sc_trace(mVcdFile, cipher_m_len_reg_230, "cipher_m_len_reg_230");
    sc_trace(mVcdFile, cipher_m_tot_len_reg_242, "cipher_m_tot_len_reg_242");
    sc_trace(mVcdFile, indvars_iv_reg_254, "indvars_iv_reg_254");
    sc_trace(mVcdFile, block_counter_reg_266, "block_counter_reg_266");
    sc_trace(mVcdFile, data_index_reg_277, "data_index_reg_277");
    sc_trace(mVcdFile, data_index_1_reg_289, "data_index_1_reg_289");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, buffer_index_reg_299, "buffer_index_reg_299");
    sc_trace(mVcdFile, ap_reg_grp_update_fu_311_ap_start, "ap_reg_grp_update_fu_311_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_final_fu_324_ap_start, "ap_reg_grp_final_fu_324_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_fu_394_p1, "tmp_2_fu_394_p1");
    sc_trace(mVcdFile, tmp_1_fu_372_p1, "tmp_1_fu_372_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_mem_ARREADY, "ap_reg_ioackin_mem_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_mem_ARREADY, "ap_sig_ioackin_mem_ARREADY");
    sc_trace(mVcdFile, tmp_fu_367_p2, "tmp_fu_367_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sha256_mem.hdltvin.dat");
    mHdltvoutHandle.open("sha256_mem.hdltvout.dat");
}

sha256_mem::~sha256_mem() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sha256_mem_AXILiteS_s_axi_U;
    delete sha256_mem_mem_m_axi_U;
    delete data_buffer_U;
    delete cipher_m_block_U;
    delete cipher_m_h_U;
    delete grp_update_fu_311;
    delete grp_final_fu_324;
}

void sha256_mem::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sha256_mem::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void sha256_mem::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void sha256_mem::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void sha256_mem::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void sha256_mem::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void sha256_mem::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void sha256_mem::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void sha256_mem::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv8_0;
}

void sha256_mem::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_final_fu_324_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
             esl_seteq<1,1,1>(exitcond2_fu_338_p2.read(), ap_const_lv1_1))) {
            ap_reg_grp_final_fu_324_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_final_fu_324_ap_ready.read())) {
            ap_reg_grp_final_fu_324_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_update_fu_311_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
             esl_seteq<1,1,1>(exitcond_fu_355_p2.read(), ap_const_lv1_1))) {
            ap_reg_grp_update_fu_311_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_update_fu_311_ap_ready.read())) {
            ap_reg_grp_update_fu_311_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_mem_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_mem_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, mem_ARREADY.read())) {
                ap_reg_ioackin_mem_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(grp_update_fu_311_ap_done.read(), ap_const_logic_1))) {
        block_counter_reg_266 = block_counter_1_reg_420.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read())))) {
        block_counter_reg_266 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        buffer_index_reg_299 = buffer_index_1_reg_433.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_338_p2.read(), ap_const_lv1_0))) {
        buffer_index_reg_299 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(grp_update_fu_311_ap_done.read(), ap_const_logic_1))) {
        cipher_m_len_reg_230 = grp_update_fu_311_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read())))) {
        cipher_m_len_reg_230 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(grp_update_fu_311_ap_done.read(), ap_const_logic_1))) {
        cipher_m_tot_len_reg_242 = grp_update_fu_311_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read())))) {
        cipher_m_tot_len_reg_242 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        data_index_1_reg_289 = tmp_3_reg_444.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_338_p2.read(), ap_const_lv1_0))) {
        data_index_1_reg_289 = data_index_reg_277.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(grp_update_fu_311_ap_done.read(), ap_const_logic_1))) {
        data_index_reg_277 = data_index_2_reg_425.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read())))) {
        data_index_reg_277 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(grp_update_fu_311_ap_done.read(), ap_const_logic_1))) {
        indvars_iv_reg_254 = indvars_iv_next_reg_449.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read())))) {
        indvars_iv_reg_254 = ap_const_lv32_40;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        message_addr_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
             esl_seteq<1,1,1>(grp_final_fu_324_ap_done.read(), ap_const_logic_1))) {
            message_addr_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, message_addr_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            message_addr_ap_vld_preg = message_addr_ap_vld.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        message_addr_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, message_addr_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            message_addr_preg = message_addr.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        num_blocks_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
             esl_seteq<1,1,1>(grp_final_fu_324_ap_done.read(), ap_const_logic_1))) {
            num_blocks_ap_vld_preg = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, num_blocks_ap_vld.read()))) {
            num_blocks_ap_vld_preg = num_blocks_ap_vld.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        num_blocks_preg = ap_const_lv32_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
             esl_seteq<1,1,1>(ap_const_logic_1, num_blocks_ap_vld.read()))) {
            num_blocks_preg = num_blocks.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        block_counter_1_reg_420 = block_counter_1_fu_343_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        buffer_index_1_reg_433 = buffer_index_1_fu_361_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond2_fu_338_p2.read(), ap_const_lv1_0))) {
        data_index_2_reg_425 = data_index_2_fu_349_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond_fu_355_p2.read(), ap_const_lv1_1))) {
        indvars_iv_next_reg_449 = indvars_iv_next_fu_388_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
        mem_addr_read_reg_454 = mem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_355_p2.read()))) {
        mem_addr_reg_438 =  (sc_lv<32>) (tmp_1_fu_372_p1.read());
        tmp_3_reg_444 = tmp_3_fu_382_p2.read();
    }
}

void sha256_mem::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_mem::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void sha256_mem::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void sha256_mem::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void sha256_mem::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void sha256_mem::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256_mem::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256_mem::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256_mem::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256_mem::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha256_mem::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha256_mem::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read()));
}

void sha256_mem::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(grp_final_fu_324_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_mem::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_mem::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
         esl_seteq<1,1,1>(grp_final_fu_324_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_mem::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sha256_mem::thread_ap_sig_ioackin_mem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) {
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY.read();
    } else {
        ap_sig_ioackin_mem_ARREADY = ap_const_logic_1;
    }
}

void sha256_mem::thread_block_counter_1_fu_343_p2() {
    block_counter_1_fu_343_p2 = (!block_counter_reg_266.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(block_counter_reg_266.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_mem::thread_buffer_index_1_fu_361_p2() {
    buffer_index_1_fu_361_p2 = (!buffer_index_reg_299.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(buffer_index_reg_299.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256_mem::thread_cipher_m_block_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_block_address0 = grp_final_fu_324_SHA256_m_block_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_block_address0 = grp_update_fu_311_SHA256_m_block_address0.read();
    } else {
        cipher_m_block_address0 =  (sc_lv<7>) ("XXXXXXX");
    }
}

void sha256_mem::thread_cipher_m_block_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_block_address1 = grp_final_fu_324_SHA256_m_block_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_block_address1 = grp_update_fu_311_SHA256_m_block_address1.read();
    } else {
        cipher_m_block_address1 =  (sc_lv<7>) ("XXXXXXX");
    }
}

void sha256_mem::thread_cipher_m_block_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_block_ce0 = grp_final_fu_324_SHA256_m_block_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_block_ce0 = grp_update_fu_311_SHA256_m_block_ce0.read();
    } else {
        cipher_m_block_ce0 = ap_const_logic_0;
    }
}

void sha256_mem::thread_cipher_m_block_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_block_ce1 = grp_final_fu_324_SHA256_m_block_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_block_ce1 = grp_update_fu_311_SHA256_m_block_ce1.read();
    } else {
        cipher_m_block_ce1 = ap_const_logic_0;
    }
}

void sha256_mem::thread_cipher_m_block_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_block_d0 = grp_final_fu_324_SHA256_m_block_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_block_d0 = grp_update_fu_311_SHA256_m_block_d0.read();
    } else {
        cipher_m_block_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void sha256_mem::thread_cipher_m_block_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_block_we0 = grp_final_fu_324_SHA256_m_block_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_block_we0 = grp_update_fu_311_SHA256_m_block_we0.read();
    } else {
        cipher_m_block_we0 = ap_const_logic_0;
    }
}

void sha256_mem::thread_cipher_m_h_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_m_h_address0 =  (sc_lv<3>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_m_h_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cipher_m_h_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cipher_m_h_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_h_address0 = grp_final_fu_324_SHA256_m_h_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_h_address0 = grp_update_fu_311_SHA256_m_h_address0.read();
    } else {
        cipher_m_h_address0 =  (sc_lv<3>) ("XXX");
    }
}

void sha256_mem::thread_cipher_m_h_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_m_h_address1 =  (sc_lv<3>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_m_h_address1 =  (sc_lv<3>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cipher_m_h_address1 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cipher_m_h_address1 =  (sc_lv<3>) (ap_const_lv64_1);
    } else {
        cipher_m_h_address1 =  (sc_lv<3>) ("XXX");
    }
}

void sha256_mem::thread_cipher_m_h_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cipher_m_h_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_h_ce0 = grp_final_fu_324_SHA256_m_h_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_h_ce0 = grp_update_fu_311_SHA256_m_h_ce0.read();
    } else {
        cipher_m_h_ce0 = ap_const_logic_0;
    }
}

void sha256_mem::thread_cipher_m_h_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cipher_m_h_ce1 = ap_const_logic_1;
    } else {
        cipher_m_h_ce1 = ap_const_logic_0;
    }
}

void sha256_mem::thread_cipher_m_h_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_m_h_d0 = ap_const_lv32_1F83D9AB;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_m_h_d0 = ap_const_lv32_510E527F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cipher_m_h_d0 = ap_const_lv32_3C6EF372;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cipher_m_h_d0 = ap_const_lv32_6A09E667;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_h_d0 = grp_final_fu_324_SHA256_m_h_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_h_d0 = grp_update_fu_311_SHA256_m_h_d0.read();
    } else {
        cipher_m_h_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_mem::thread_cipher_m_h_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cipher_m_h_d1 = ap_const_lv32_5BE0CD19;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cipher_m_h_d1 = ap_const_lv32_9B05688C;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        cipher_m_h_d1 = ap_const_lv32_A54FF53A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        cipher_m_h_d1 = ap_const_lv32_BB67AE85;
    } else {
        cipher_m_h_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha256_mem::thread_cipher_m_h_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cipher_m_h_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        cipher_m_h_we0 = grp_final_fu_324_SHA256_m_h_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        cipher_m_h_we0 = grp_update_fu_311_SHA256_m_h_we0.read();
    } else {
        cipher_m_h_we0 = ap_const_logic_0;
    }
}

void sha256_mem::thread_cipher_m_h_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        cipher_m_h_we1 = ap_const_logic_1;
    } else {
        cipher_m_h_we1 = ap_const_logic_0;
    }
}

void sha256_mem::thread_data_buffer_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        data_buffer_address0 =  (sc_lv<6>) (tmp_2_fu_394_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        data_buffer_address0 = grp_update_fu_311_message_address0.read();
    } else {
        data_buffer_address0 = "XXXXXX";
    }
}

void sha256_mem::thread_data_buffer_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        data_buffer_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        data_buffer_ce0 = grp_update_fu_311_message_ce0.read();
    } else {
        data_buffer_ce0 = ap_const_logic_0;
    }
}

void sha256_mem::thread_data_buffer_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        data_buffer_ce1 = grp_update_fu_311_message_ce1.read();
    } else {
        data_buffer_ce1 = ap_const_logic_0;
    }
}

void sha256_mem::thread_data_buffer_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        data_buffer_we0 = ap_const_logic_1;
    } else {
        data_buffer_we0 = ap_const_logic_0;
    }
}

void sha256_mem::thread_data_index_2_fu_349_p2() {
    data_index_2_fu_349_p2 = (!data_index_reg_277.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<32>(): (sc_biguint<32>(data_index_reg_277.read()) + sc_biguint<32>(ap_const_lv32_40));
}

void sha256_mem::thread_digest_out_address0() {
    digest_out_address0 = grp_final_fu_324_digest_address0.read();
}

void sha256_mem::thread_digest_out_address1() {
    digest_out_address1 = grp_final_fu_324_digest_address1.read();
}

void sha256_mem::thread_digest_out_ce0() {
    digest_out_ce0 = grp_final_fu_324_digest_ce0.read();
}

void sha256_mem::thread_digest_out_ce1() {
    digest_out_ce1 = grp_final_fu_324_digest_ce1.read();
}

void sha256_mem::thread_digest_out_d0() {
    digest_out_d0 = grp_final_fu_324_digest_d0.read();
}

void sha256_mem::thread_digest_out_d1() {
    digest_out_d1 = grp_final_fu_324_digest_d1.read();
}

void sha256_mem::thread_digest_out_we0() {
    digest_out_we0 = grp_final_fu_324_digest_we0.read();
}

void sha256_mem::thread_digest_out_we1() {
    digest_out_we1 = grp_final_fu_324_digest_we1.read();
}

void sha256_mem::thread_digest_valid() {
    digest_valid =  (sc_logic) (ap_const_lv1_1[0]);
}

void sha256_mem::thread_exitcond2_fu_338_p2() {
    exitcond2_fu_338_p2 = (!block_counter_reg_266.read().is_01() || !num_blocks_in_sig.read().is_01())? sc_lv<1>(): sc_lv<1>(block_counter_reg_266.read() == num_blocks_in_sig.read());
}

void sha256_mem::thread_exitcond_fu_355_p2() {
    exitcond_fu_355_p2 = (!data_index_1_reg_289.read().is_01() || !indvars_iv_reg_254.read().is_01())? sc_lv<1>(): sc_lv<1>(data_index_1_reg_289.read() == indvars_iv_reg_254.read());
}

void sha256_mem::thread_grp_final_fu_324_ap_start() {
    grp_final_fu_324_ap_start = ap_reg_grp_final_fu_324_ap_start.read();
}

void sha256_mem::thread_grp_update_fu_311_ap_start() {
    grp_update_fu_311_ap_start = ap_reg_grp_update_fu_311_ap_start.read();
}

void sha256_mem::thread_indvars_iv_next_fu_388_p2() {
    indvars_iv_next_fu_388_p2 = (!indvars_iv_reg_254.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<32>(): (sc_biguint<32>(indvars_iv_reg_254.read()) + sc_biguint<32>(ap_const_lv32_40));
}

void sha256_mem::thread_mem_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read()))) {
        mem_ARVALID = ap_const_logic_1;
    } else {
        mem_ARVALID = ap_const_logic_0;
    }
}

void sha256_mem::thread_mem_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
        mem_RREADY = ap_const_logic_1;
    } else {
        mem_RREADY = ap_const_logic_0;
    }
}

void sha256_mem::thread_mem_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        mem_blk_n_AR = m_axi_mem_ARREADY.read();
    } else {
        mem_blk_n_AR = ap_const_logic_1;
    }
}

void sha256_mem::thread_mem_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        mem_blk_n_R = m_axi_mem_RVALID.read();
    } else {
        mem_blk_n_R = ap_const_logic_1;
    }
}

void sha256_mem::thread_message_addr_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, message_addr_ap_vld.read())) {
        message_addr_ap_vld_in_sig = message_addr_ap_vld.read();
    } else {
        message_addr_ap_vld_in_sig = message_addr_ap_vld_preg.read();
    }
}

void sha256_mem::thread_message_addr_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        message_addr_blk_n = message_addr_ap_vld.read();
    } else {
        message_addr_blk_n = ap_const_logic_1;
    }
}

void sha256_mem::thread_message_addr_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, message_addr_ap_vld.read())) {
        message_addr_in_sig = message_addr.read();
    } else {
        message_addr_in_sig = message_addr_preg.read();
    }
}

void sha256_mem::thread_num_blocks_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, num_blocks_ap_vld.read())) {
        num_blocks_ap_vld_in_sig = num_blocks_ap_vld.read();
    } else {
        num_blocks_ap_vld_in_sig = num_blocks_ap_vld_preg.read();
    }
}

void sha256_mem::thread_num_blocks_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        num_blocks_blk_n = num_blocks_ap_vld.read();
    } else {
        num_blocks_blk_n = ap_const_logic_1;
    }
}

void sha256_mem::thread_num_blocks_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, num_blocks_ap_vld.read())) {
        num_blocks_in_sig = num_blocks.read();
    } else {
        num_blocks_in_sig = num_blocks_preg.read();
    }
}

void sha256_mem::thread_tmp_1_fu_372_p1() {
    tmp_1_fu_372_p1 = esl_zext<64,32>(tmp_fu_367_p2.read());
}

void sha256_mem::thread_tmp_2_fu_394_p1() {
    tmp_2_fu_394_p1 = esl_zext<64,7>(buffer_index_reg_299.read());
}

void sha256_mem::thread_tmp_3_fu_382_p2() {
    tmp_3_fu_382_p2 = (!data_index_1_reg_289.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(data_index_1_reg_289.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_mem::thread_tmp_fu_367_p2() {
    tmp_fu_367_p2 = (!data_index_1_reg_289.read().is_01() || !message_addr_in_sig.read().is_01())? sc_lv<32>(): (sc_biguint<32>(data_index_1_reg_289.read()) + sc_biguint<32>(message_addr_in_sig.read()));
}

void sha256_mem::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, num_blocks_ap_vld_in_sig.read()) || esl_seteq<1,1,1>(ap_const_logic_0, message_addr_ap_vld_in_sig.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond2_fu_338_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond_fu_355_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(grp_update_fu_311_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(grp_final_fu_324_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<17>) ("XXXXXXXXXXXXXXXXX");
            break;
    }
}

void sha256_mem::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWVALID\" :  \"" << m_axi_mem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_AWREADY\" :  \"" << m_axi_mem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWADDR\" :  \"" << m_axi_mem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWID\" :  \"" << m_axi_mem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWLEN\" :  \"" << m_axi_mem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWSIZE\" :  \"" << m_axi_mem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWBURST\" :  \"" << m_axi_mem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWLOCK\" :  \"" << m_axi_mem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWCACHE\" :  \"" << m_axi_mem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWPROT\" :  \"" << m_axi_mem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWQOS\" :  \"" << m_axi_mem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWREGION\" :  \"" << m_axi_mem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWUSER\" :  \"" << m_axi_mem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WVALID\" :  \"" << m_axi_mem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_WREADY\" :  \"" << m_axi_mem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WDATA\" :  \"" << m_axi_mem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WSTRB\" :  \"" << m_axi_mem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WLAST\" :  \"" << m_axi_mem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WID\" :  \"" << m_axi_mem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WUSER\" :  \"" << m_axi_mem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARVALID\" :  \"" << m_axi_mem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_ARREADY\" :  \"" << m_axi_mem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARADDR\" :  \"" << m_axi_mem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARID\" :  \"" << m_axi_mem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARLEN\" :  \"" << m_axi_mem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARSIZE\" :  \"" << m_axi_mem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARBURST\" :  \"" << m_axi_mem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARLOCK\" :  \"" << m_axi_mem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARCACHE\" :  \"" << m_axi_mem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARPROT\" :  \"" << m_axi_mem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARQOS\" :  \"" << m_axi_mem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARREGION\" :  \"" << m_axi_mem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARUSER\" :  \"" << m_axi_mem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RVALID\" :  \"" << m_axi_mem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_RREADY\" :  \"" << m_axi_mem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RDATA\" :  \"" << m_axi_mem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RLAST\" :  \"" << m_axi_mem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RID\" :  \"" << m_axi_mem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RUSER\" :  \"" << m_axi_mem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RRESP\" :  \"" << m_axi_mem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BVALID\" :  \"" << m_axi_mem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_BREADY\" :  \"" << m_axi_mem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BRESP\" :  \"" << m_axi_mem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BID\" :  \"" << m_axi_mem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BUSER\" :  \"" << m_axi_mem_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"digest_out_address0\" :  \"" << digest_out_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"digest_out_ce0\" :  \"" << digest_out_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"digest_out_we0\" :  \"" << digest_out_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"digest_out_d0\" :  \"" << digest_out_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"digest_out_address1\" :  \"" << digest_out_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"digest_out_ce1\" :  \"" << digest_out_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"digest_out_we1\" :  \"" << digest_out_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"digest_out_d1\" :  \"" << digest_out_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"digest_valid\" :  \"" << digest_valid.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

