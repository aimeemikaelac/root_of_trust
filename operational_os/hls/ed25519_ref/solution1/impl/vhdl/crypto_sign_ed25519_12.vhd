-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign_ed25519_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_v_ce0 : OUT STD_LOGIC;
    r_v_we0 : OUT STD_LOGIC;
    r_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_v_ce1 : OUT STD_LOGIC;
    r_v_we1 : OUT STD_LOGIC;
    r_v_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    x_v_ce0 : OUT STD_LOGIC;
    x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    y_v_ce0 : OUT STD_LOGIC;
    y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign_ed25519_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv31_13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_59_fu_156_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_59_reg_274 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_279 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rep_fu_181_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal rep_reg_309 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_60_fu_216_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_60_reg_317 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal r_v_addr_19_reg_322 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_i_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_v_addr_20_reg_328 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_117 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rep_i_reg_128 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_reg_139 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_759_i_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_760_i_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_cast_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_761_i_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_762_i_cast_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_777_fu_191_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_797_fu_187_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal t_s_fu_236_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_9_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_798_fu_232_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_262_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal exitcond1_i_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_262_p10 : STD_LOGIC_VECTOR (30 downto 0);

    component crypto_sign_mac_mpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    crypto_sign_mac_mpcA_x_U72 : component crypto_sign_mac_mpcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 25,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_262_p0,
        din1 => grp_fu_262_p1,
        din2 => r_v_q1,
        dout => grp_fu_262_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_i_reg_139 <= i_60_reg_317;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i_reg_139 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_117 <= i_59_reg_274;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_117 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    rep_i_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_i_fu_210_p2))) then 
                rep_i_reg_128 <= rep_reg_309;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_150_p2 = ap_const_lv1_1))) then 
                rep_i_reg_128 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_59_reg_274 <= i_59_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_60_reg_317 <= i_60_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_i_fu_210_p2))) then
                r_v_addr_19_reg_322 <= tmp_759_i_fu_222_p1(5 - 1 downto 0);
                r_v_addr_20_reg_328 <= tmp_760_i_fu_227_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                rep_reg_309 <= rep_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_150_p2 = ap_const_lv1_0))) then
                    tmp_reg_279(5 downto 0) <= tmp_fu_162_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_279(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_150_p2, ap_CS_fsm_state4, ap_CS_fsm_state6, exitcond_i_fu_210_p2, exitcond1_i_fu_175_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_150_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond1_i_fu_175_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_i_fu_210_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond1_i_fu_175_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond1_i_fu_175_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond1_i_fu_175_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond1_i_fu_175_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_175_p2 <= "1" when (rep_i_reg_128 = ap_const_lv3_4) else "0";
    exitcond_fu_150_p2 <= "1" when (i_reg_117 = ap_const_lv6_20) else "0";
    exitcond_i_fu_210_p2 <= "1" when (i_i_reg_139 = ap_const_lv5_1F) else "0";
    grp_fu_262_p0 <= ap_const_lv31_13(6 - 1 downto 0);
    grp_fu_262_p1 <= grp_fu_262_p10(25 - 1 downto 0);
    grp_fu_262_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_777_fu_191_p4),31));
    i_59_fu_156_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv6_1));
    i_60_fu_216_p2 <= std_logic_vector(unsigned(i_i_reg_139) + unsigned(ap_const_lv5_1));

    r_v_address0_assign_proc : process(tmp_reg_279, ap_CS_fsm_state4, ap_CS_fsm_state6, r_v_addr_19_reg_322, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_760_i_fu_227_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_v_address0 <= r_v_addr_19_reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_v_address0 <= tmp_760_i_fu_227_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_v_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_v_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_v_address0 <= tmp_reg_279(5 - 1 downto 0);
        else 
            r_v_address0 <= "XXXXX";
        end if; 
    end process;


    r_v_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, r_v_addr_20_reg_328, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_759_i_fu_222_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_v_address1 <= r_v_addr_20_reg_328;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_v_address1 <= tmp_759_i_fu_222_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_v_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_v_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            r_v_address1 <= "XXXXX";
        end if; 
    end process;


    r_v_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            r_v_ce0 <= ap_const_logic_1;
        else 
            r_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_v_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            r_v_ce1 <= ap_const_logic_1;
        else 
            r_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_v_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_s_fu_168_p2, grp_fu_262_p3, tmp_762_i_cast_fu_257_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_v_d0 <= tmp_762_i_cast_fu_257_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_v_d0 <= grp_fu_262_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_v_d0 <= tmp_s_fu_168_p2;
        else 
            r_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_v_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_i_cast_fu_205_p1, tmp_761_i_fu_250_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_v_d1 <= tmp_761_i_fu_250_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_v_d1 <= tmp_i_cast_fu_205_p1;
        else 
            r_v_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_v_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            r_v_we0 <= ap_const_logic_1;
        else 
            r_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_v_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            r_v_we1 <= ap_const_logic_1;
        else 
            r_v_we1 <= ap_const_logic_0;
        end if; 
    end process;

    rep_fu_181_p2 <= std_logic_vector(unsigned(rep_i_reg_128) + unsigned(ap_const_lv3_1));
    t_9_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_s_fu_236_p4),32));
    t_s_fu_236_p4 <= r_v_q1(31 downto 8);
    tmp_759_i_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_139),64));
    tmp_760_i_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_60_fu_216_p2),64));
    tmp_761_i_fu_250_p2 <= std_logic_vector(unsigned(t_9_fu_246_p1) + unsigned(r_v_q0));
    tmp_762_i_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_798_fu_232_p1),32));
    tmp_777_fu_191_p4 <= r_v_q0(31 downto 7);
    tmp_797_fu_187_p1 <= r_v_q0(7 - 1 downto 0);
    tmp_798_fu_232_p1 <= r_v_q1(8 - 1 downto 0);
    tmp_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_117),64));
    tmp_i_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_797_fu_187_p1),32));
    tmp_s_fu_168_p2 <= std_logic_vector(unsigned(x_v_q0) + unsigned(y_v_q0));
    x_v_address0 <= tmp_fu_162_p1(5 - 1 downto 0);

    x_v_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_v_ce0 <= ap_const_logic_1;
        else 
            x_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_v_address0 <= tmp_fu_162_p1(5 - 1 downto 0);

    y_v_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_v_ce0 <= ap_const_logic_1;
        else 
            y_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
