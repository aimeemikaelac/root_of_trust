// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_sign_ed25519_17 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_v_address0,
        r_v_ce0,
        r_v_we0,
        r_v_d0,
        r_v_q0,
        r_v_address1,
        r_v_ce1,
        r_v_we1,
        r_v_d1,
        r_v_q1,
        y_v_address0,
        y_v_ce0,
        y_v_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] r_v_address0;
output   r_v_ce0;
output   r_v_we0;
output  [31:0] r_v_d0;
input  [31:0] r_v_q0;
output  [4:0] r_v_address1;
output   r_v_ce1;
output   r_v_we1;
output  [31:0] r_v_d1;
input  [31:0] r_v_q1;
output  [4:0] y_v_address0;
output   y_v_ce0;
input  [31:0] y_v_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] r_v_address0;
reg r_v_ce0;
reg r_v_we0;
reg[31:0] r_v_d0;
reg[4:0] r_v_address1;
reg r_v_ce1;
reg r_v_we1;
reg[31:0] r_v_d1;
reg y_v_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_45_fu_242_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] i_46_fu_259_p2;
reg   [5:0] i_46_reg_455;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_253_p2;
reg  signed [31:0] r_v_load_reg_465;
wire    ap_CS_fsm_state4;
wire   [5:0] j_2_fu_276_p2;
reg   [5:0] j_2_reg_473;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond1_fu_270_p2;
wire   [5:0] tmp_776_fu_287_p2;
reg   [5:0] tmp_776_reg_483;
wire   [31:0] tmp_775_fu_293_p2;
reg   [31:0] tmp_775_reg_488;
wire    ap_CS_fsm_state6;
reg   [5:0] t_addr_15_reg_493;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_fu_308_p2;
wire   [63:0] tmp_771_fu_325_p1;
reg   [63:0] tmp_771_reg_511;
wire    ap_CS_fsm_state9;
wire   [31:0] t_q0;
reg  signed [31:0] t_load_4_reg_521;
wire   [5:0] i_47_fu_330_p2;
reg   [5:0] i_47_reg_526;
wire   [4:0] r_v_addr_13_reg_531;
wire    ap_CS_fsm_state11;
wire   [1:0] rep_fu_354_p2;
reg   [1:0] rep_reg_546;
wire    ap_CS_fsm_state12;
wire   [4:0] i_48_fu_389_p2;
reg   [4:0] i_48_reg_554;
wire    ap_CS_fsm_state14;
reg   [4:0] r_v_addr_16_reg_559;
wire   [0:0] exitcond_i_fu_383_p2;
reg   [4:0] r_v_addr_17_reg_565;
reg   [5:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [31:0] t_d0;
reg   [5:0] i_reg_168;
wire   [0:0] exitcond3_fu_236_p2;
reg   [5:0] i_1_reg_179;
reg   [5:0] j_reg_191;
wire    ap_CS_fsm_state7;
reg   [5:0] i_2_reg_202;
wire    ap_CS_fsm_state10;
reg   [1:0] rep_i_reg_214;
reg   [4:0] i_i_reg_225;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire   [63:0] tmp_fu_248_p1;
wire   [63:0] tmp_s_fu_265_p1;
wire   [63:0] tmp_774_fu_282_p1;
wire   [63:0] tmp_777_fu_298_p1;
wire   [63:0] tmp_772_fu_314_p1;
wire   [63:0] tmp_755_i_fu_395_p1;
wire   [63:0] tmp_756_i_fu_400_p1;
wire   [31:0] tmp_778_fu_302_p2;
wire   [31:0] tmp_773_fu_341_p2;
wire   [31:0] tmp_i_cast_fu_378_p1;
wire   [31:0] grp_fu_435_p3;
wire   [31:0] tmp_757_i_fu_423_p2;
wire   [31:0] tmp_758_i_cast_fu_430_p1;
wire  signed [31:0] tmp_775_fu_293_p1;
wire   [5:0] tmp_770_fu_319_p2;
wire   [31:0] tmp2_i_fu_336_p2;
wire   [24:0] tmp_759_fu_364_p4;
wire   [6:0] tmp_779_fu_360_p1;
wire   [23:0] t_s_fu_409_p4;
wire   [31:0] t_8_fu_419_p1;
wire   [7:0] tmp_780_fu_405_p1;
wire   [5:0] grp_fu_435_p0;
wire   [24:0] grp_fu_435_p1;
wire   [0:0] exitcond1_i_fu_348_p2;
reg   [14:0] ap_NS_fsm;
wire   [30:0] grp_fu_435_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

crypto_sign_ed255sc4 #(
    .DataWidth( 32 ),
    .AddressRange( 63 ),
    .AddressWidth( 6 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0)
);

crypto_sign_mac_mpcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 25 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
crypto_sign_mac_mpcA_x_U76(
    .din0(grp_fu_435_p0),
    .din1(grp_fu_435_p1),
    .din2(r_v_q1),
    .dout(grp_fu_435_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond3_fu_236_p2))) begin
        i_1_reg_179 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_270_p2 == 1'd1))) begin
        i_1_reg_179 <= i_46_reg_455;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_253_p2 == 1'd1))) begin
        i_2_reg_202 <= 6'd32;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_202 <= i_47_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_i_reg_225 <= i_48_reg_554;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_i_reg_225 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond3_fu_236_p2))) begin
        i_reg_168 <= i_45_fu_242_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_168 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_191 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_191 <= j_2_reg_473;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_i_fu_383_p2))) begin
        rep_i_reg_214 <= rep_reg_546;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        rep_i_reg_214 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_46_reg_455 <= i_46_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_47_reg_526 <= i_47_fu_330_p2;
        t_load_4_reg_521 <= t_q0;
        tmp_771_reg_511[5 : 0] <= tmp_771_fu_325_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_48_reg_554 <= i_48_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_2_reg_473 <= j_2_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == exitcond_i_fu_383_p2))) begin
        r_v_addr_16_reg_559 <= tmp_755_i_fu_395_p1;
        r_v_addr_17_reg_565 <= tmp_756_i_fu_400_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_v_load_reg_465 <= r_v_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        rep_reg_546 <= rep_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_addr_15_reg_493 <= tmp_777_fu_298_p1;
        tmp_775_reg_488 <= tmp_775_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_270_p2))) begin
        tmp_776_reg_483 <= tmp_776_fu_287_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state12) & (1'd1 == exitcond1_i_fu_348_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == exitcond1_i_fu_348_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        r_v_address0 = r_v_addr_16_reg_559;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        r_v_address0 = tmp_756_i_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        r_v_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        r_v_address0 = r_v_addr_13_reg_531;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_v_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_v_address0 = tmp_771_reg_511;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_v_address0 = tmp_s_fu_265_p1;
    end else begin
        r_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        r_v_address1 = r_v_addr_17_reg_565;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        r_v_address1 = tmp_755_i_fu_395_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        r_v_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        r_v_address1 = 64'd0;
    end else begin
        r_v_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        r_v_ce0 = 1'b1;
    end else begin
        r_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        r_v_ce1 = 1'b1;
    end else begin
        r_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        r_v_d0 = tmp_758_i_cast_fu_430_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        r_v_d0 = grp_fu_435_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_v_d0 = t_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_v_d0 = tmp_773_fu_341_p2;
    end else begin
        r_v_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        r_v_d1 = tmp_757_i_fu_423_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        r_v_d1 = tmp_i_cast_fu_378_p1;
    end else begin
        r_v_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        r_v_we0 = 1'b1;
    end else begin
        r_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        r_v_we1 = 1'b1;
    end else begin
        r_v_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_address0 = tmp_771_fu_325_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_308_p2 == 1'd1))) begin
        t_address0 = 64'd31;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_308_p2))) begin
        t_address0 = tmp_772_fu_314_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_address0 = t_addr_15_reg_493;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        t_address0 = tmp_777_fu_298_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_address0 = tmp_fu_248_p1;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_308_p2)) | ((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_308_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_d0 = tmp_778_fu_302_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_d0 = 32'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond3_fu_236_p2)) | (1'b1 == ap_CS_fsm_state7))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_v_ce0 = 1'b1;
    end else begin
        y_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond3_fu_236_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_253_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_308_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == exitcond1_i_fu_348_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_i_fu_383_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_270_p2 = ((j_reg_191 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_348_p2 = ((rep_i_reg_214 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_253_p2 = ((i_1_reg_179 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond3_fu_236_p2 = ((i_reg_168 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond_fu_308_p2 = ((i_2_reg_202 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond_i_fu_383_p2 = ((i_i_reg_225 == 5'd31) ? 1'b1 : 1'b0);

assign grp_fu_435_p0 = 31'd19;

assign grp_fu_435_p1 = grp_fu_435_p10;

assign grp_fu_435_p10 = tmp_759_fu_364_p4;

assign i_45_fu_242_p2 = (i_reg_168 + 6'd1);

assign i_46_fu_259_p2 = (i_1_reg_179 + 6'd1);

assign i_47_fu_330_p2 = (i_2_reg_202 + 6'd1);

assign i_48_fu_389_p2 = (i_i_reg_225 + 5'd1);

assign j_2_fu_276_p2 = (j_reg_191 + 6'd1);

assign r_v_addr_13_reg_531 = 64'd31;

assign rep_fu_354_p2 = (rep_i_reg_214 + 2'd1);

assign t_8_fu_419_p1 = t_s_fu_409_p4;

assign t_s_fu_409_p4 = {{r_v_q1[31:8]}};

assign tmp2_i_fu_336_p2 = ($signed(t_load_4_reg_521) * $signed('h26));

assign tmp_755_i_fu_395_p1 = i_i_reg_225;

assign tmp_756_i_fu_400_p1 = i_48_fu_389_p2;

assign tmp_757_i_fu_423_p2 = (t_8_fu_419_p1 + r_v_q0);

assign tmp_758_i_cast_fu_430_p1 = tmp_780_fu_405_p1;

assign tmp_759_fu_364_p4 = {{r_v_q0[31:7]}};

assign tmp_770_fu_319_p2 = (i_2_reg_202 ^ 6'd32);

assign tmp_771_fu_325_p1 = tmp_770_fu_319_p2;

assign tmp_772_fu_314_p1 = i_2_reg_202;

assign tmp_773_fu_341_p2 = (t_q0 + tmp2_i_fu_336_p2);

assign tmp_774_fu_282_p1 = j_reg_191;

assign tmp_775_fu_293_p1 = y_v_q0;

assign tmp_775_fu_293_p2 = ($signed(r_v_load_reg_465) * $signed(tmp_775_fu_293_p1));

assign tmp_776_fu_287_p2 = (i_1_reg_179 + j_reg_191);

assign tmp_777_fu_298_p1 = tmp_776_reg_483;

assign tmp_778_fu_302_p2 = (t_q0 + tmp_775_reg_488);

assign tmp_779_fu_360_p1 = r_v_q0[6:0];

assign tmp_780_fu_405_p1 = r_v_q1[7:0];

assign tmp_fu_248_p1 = i_reg_168;

assign tmp_i_cast_fu_378_p1 = tmp_779_fu_360_p1;

assign tmp_s_fu_265_p1 = i_1_reg_179;

assign y_v_address0 = tmp_774_fu_282_p1;

always @ (posedge ap_clk) begin
    tmp_771_reg_511[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //crypto_sign_ed25519_17
