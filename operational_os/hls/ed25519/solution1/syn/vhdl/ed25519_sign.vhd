-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ed25519_sign is
generic (
    C_M_AXI_MICROBLAZE_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MICROBLAZE_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MICROBLAZE_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MICROBLAZE_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MICROBLAZE_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MICROBLAZE_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MICROBLAZE_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MICROBLAZE_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MICROBLAZE_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MICROBLAZE_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MICROBLAZE_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MICROBLAZE_MEM_TARGET_ADDR : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_microblaze_mem_AWVALID : OUT STD_LOGIC;
    m_axi_microblaze_mem_AWREADY : IN STD_LOGIC;
    m_axi_microblaze_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_microblaze_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_ID_WIDTH-1 downto 0);
    m_axi_microblaze_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_microblaze_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_microblaze_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_microblaze_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_microblaze_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_microblaze_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_microblaze_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_microblaze_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_microblaze_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_microblaze_mem_WVALID : OUT STD_LOGIC;
    m_axi_microblaze_mem_WREADY : IN STD_LOGIC;
    m_axi_microblaze_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_DATA_WIDTH-1 downto 0);
    m_axi_microblaze_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_microblaze_mem_WLAST : OUT STD_LOGIC;
    m_axi_microblaze_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_ID_WIDTH-1 downto 0);
    m_axi_microblaze_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_microblaze_mem_ARVALID : OUT STD_LOGIC;
    m_axi_microblaze_mem_ARREADY : IN STD_LOGIC;
    m_axi_microblaze_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_microblaze_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_ID_WIDTH-1 downto 0);
    m_axi_microblaze_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_microblaze_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_microblaze_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_microblaze_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_microblaze_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_microblaze_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_microblaze_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_microblaze_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_microblaze_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_microblaze_mem_RVALID : IN STD_LOGIC;
    m_axi_microblaze_mem_RREADY : OUT STD_LOGIC;
    m_axi_microblaze_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_DATA_WIDTH-1 downto 0);
    m_axi_microblaze_mem_RLAST : IN STD_LOGIC;
    m_axi_microblaze_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_ID_WIDTH-1 downto 0);
    m_axi_microblaze_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_microblaze_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_microblaze_mem_BVALID : IN STD_LOGIC;
    m_axi_microblaze_mem_BREADY : OUT STD_LOGIC;
    m_axi_microblaze_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_microblaze_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_ID_WIDTH-1 downto 0);
    m_axi_microblaze_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MICROBLAZE_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ed25519_sign is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ed25519_sign,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=131,HLS_SYN_DSP=84,HLS_SYN_FF=165830,HLS_SYN_LUT=132272}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (53 downto 0) := "000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (53 downto 0) := "000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (53 downto 0) := "000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (53 downto 0) := "000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (53 downto 0) := "000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (53 downto 0) := "000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (53 downto 0) := "000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (53 downto 0) := "000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (53 downto 0) := "000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (53 downto 0) := "001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (53 downto 0) := "010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (53 downto 0) := "100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_6A09E667F3BCC908 : STD_LOGIC_VECTOR (63 downto 0) := "0110101000001001111001100110011111110011101111001100100100001000";
    constant ap_const_lv64_BB67AE8584CAA73B : STD_LOGIC_VECTOR (63 downto 0) := "1011101101100111101011101000010110000100110010101010011100111011";
    constant ap_const_lv64_3C6EF372FE94F82B : STD_LOGIC_VECTOR (63 downto 0) := "0011110001101110111100110111001011111110100101001111100000101011";
    constant ap_const_lv64_A54FF53A5F1D36F1 : STD_LOGIC_VECTOR (63 downto 0) := "1010010101001111111101010011101001011111000111010011011011110001";
    constant ap_const_lv64_510E527FADE682D1 : STD_LOGIC_VECTOR (63 downto 0) := "0101000100001110010100100111111110101101111001101000001011010001";
    constant ap_const_lv64_9B05688C2B3E6C1F : STD_LOGIC_VECTOR (63 downto 0) := "1001101100000101011010001000110000101011001111100110110000011111";
    constant ap_const_lv64_1F83D9ABFB41BD6B : STD_LOGIC_VECTOR (63 downto 0) := "0001111110000011110110011010101111111011010000011011110101101011";
    constant ap_const_lv64_5BE0CD19137E2179 : STD_LOGIC_VECTOR (63 downto 0) := "0101101111100000110011010001100100010011011111100010000101111001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1000000 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal signature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal signature_ce0 : STD_LOGIC;
    signal signature_we0 : STD_LOGIC;
    signal signature_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal signature_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal blocks_in : STD_LOGIC_VECTOR (63 downto 0);
    signal blocks_in_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal blocks_in_ap_vld : STD_LOGIC;
    signal blocks_in_in_sig : STD_LOGIC_VECTOR (63 downto 0);
    signal blocks_in_ap_vld_preg : STD_LOGIC := '0';
    signal blocks_in_ap_vld_in_sig : STD_LOGIC;
    signal public_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal private_key_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal private_key_ce0 : STD_LOGIC;
    signal private_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal microblaze_mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal microblaze_mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal blocks_in_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal microblaze_mem_AWREADY : STD_LOGIC;
    signal microblaze_mem_WREADY : STD_LOGIC;
    signal microblaze_mem_ARVALID : STD_LOGIC;
    signal microblaze_mem_ARREADY : STD_LOGIC;
    signal microblaze_mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal microblaze_mem_RVALID : STD_LOGIC;
    signal microblaze_mem_RREADY : STD_LOGIC;
    signal microblaze_mem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal microblaze_mem_RLAST : STD_LOGIC;
    signal microblaze_mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal microblaze_mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal microblaze_mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal microblaze_mem_BVALID : STD_LOGIC;
    signal microblaze_mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal microblaze_mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal microblaze_mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_microblaze_mem_ARREADY : STD_LOGIC;
    signal ap_block_state40_io : BOOLEAN;
    signal reg_375 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state47 : BOOLEAN;
    signal reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state7_io : BOOLEAN;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal reg_398 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state14 : BOOLEAN;
    signal reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fe_mul_fu_512_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fe_tobytes_1_fu_1001_ap_done : STD_LOGIC;
    signal ap_block_state25_on_subcall_done : BOOLEAN;
    signal reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal hash_state_addr_reg_1540 : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_state_addr_1_reg_1545 : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_state_addr_2_reg_1550 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal hash_state_addr_3_reg_1555 : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_state_addr_4_reg_1560 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal hash_state_addr_5_reg_1565 : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_state_addr_6_reg_1570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal hash_state_addr_7_reg_1575 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_update_32_2_fu_972_ap_done : STD_LOGIC;
    signal R_X_0_reg_1597 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_ge_scalarmult_base_fu_579_ap_done : STD_LOGIC;
    signal R_X_1_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_X_2_reg_1607 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_X_3_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_X_4_reg_1617 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_X_5_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_X_6_reg_1627 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_X_7_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_X_8_reg_1637 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_X_9_reg_1642 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_0_reg_1647 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_1_reg_1652 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_2_reg_1657 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_3_reg_1662 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_4_reg_1667 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_5_reg_1672 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_6_reg_1677 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_7_reg_1682 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_8_reg_1687 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Y_9_reg_1692 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_0_reg_1697 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_1_reg_1702 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_2_reg_1707 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_3_reg_1712 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_4_reg_1717 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_5_reg_1722 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_6_reg_1727 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_7_reg_1732 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_8_reg_1737 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_Z_9_reg_1742 : STD_LOGIC_VECTOR (31 downto 0);
    signal recip_0_reg_1747 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fe_invert_fu_646_ap_done : STD_LOGIC;
    signal recip_1_reg_1752 : STD_LOGIC_VECTOR (31 downto 0);
    signal recip_2_reg_1757 : STD_LOGIC_VECTOR (31 downto 0);
    signal recip_3_reg_1762 : STD_LOGIC_VECTOR (31 downto 0);
    signal recip_4_reg_1767 : STD_LOGIC_VECTOR (31 downto 0);
    signal recip_5_reg_1772 : STD_LOGIC_VECTOR (31 downto 0);
    signal recip_6_reg_1777 : STD_LOGIC_VECTOR (31 downto 0);
    signal recip_7_reg_1782 : STD_LOGIC_VECTOR (31 downto 0);
    signal recip_8_reg_1787 : STD_LOGIC_VECTOR (31 downto 0);
    signal recip_9_reg_1792 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_reg_1797 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_reg_1802 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_3_reg_1807 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_reg_1812 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_5_reg_1817 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_6_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_7_reg_1827 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_8_reg_1832 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_mul_ret1_i_reg_1837_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_mul_ret1_i_reg_1837_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_mul_ret1_i_reg_1837_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_mul_ret1_i_reg_1837_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_mul_ret1_i_reg_1837_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_mul_ret1_i_reg_1837_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_mul_ret1_i_reg_1837_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_mul_ret1_i_reg_1837_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_561_i_i_i_reg_1849 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_579_i_i_i_reg_1854 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal signature_addr_reg_1859 : STD_LOGIC_VECTOR (5 downto 0);
    signal hash_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_state_ce0 : STD_LOGIC;
    signal hash_state_we0 : STD_LOGIC;
    signal hash_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal hash_state_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal hash_state_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal hash_state_ce1 : STD_LOGIC;
    signal hash_state_we1 : STD_LOGIC;
    signal hash_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal hash_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hash_buf_ce0 : STD_LOGIC;
    signal hash_buf_we0 : STD_LOGIC;
    signal hash_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hash_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hash_buf_ce1 : STD_LOGIC;
    signal hash_buf_we1 : STD_LOGIC;
    signal hash_buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal hram_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal hram_ce0 : STD_LOGIC;
    signal hram_we0 : STD_LOGIC;
    signal hram_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hram_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_ce0 : STD_LOGIC;
    signal r_we0 : STD_LOGIC;
    signal r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_data_ce0 : STD_LOGIC;
    signal temp_data_we0 : STD_LOGIC;
    signal temp_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_update_128_fu_510_ap_start : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_ap_done : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_ap_idle : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_ap_ready : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_md_length_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_128_fu_510_md_length_o_ap_vld : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_update_128_fu_510_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_md_state_we0 : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_128_fu_510_md_curlen_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_128_fu_510_md_curlen_o_ap_vld : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_md_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_128_fu_510_md_buf_ce0 : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_md_buf_we0 : STD_LOGIC;
    signal grp_sha512_update_128_fu_510_md_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_update_128_fu_510_in_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_128_fu_510_in_r_ce0 : STD_LOGIC;
    signal grp_sha512_final_fu_511_ap_start : STD_LOGIC;
    signal grp_sha512_final_fu_511_ap_done : STD_LOGIC;
    signal grp_sha512_final_fu_511_ap_idle : STD_LOGIC;
    signal grp_sha512_final_fu_511_ap_ready : STD_LOGIC;
    signal grp_sha512_final_fu_511_md_length_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_final_fu_511_md_length_o_ap_vld : STD_LOGIC;
    signal grp_sha512_final_fu_511_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_final_fu_511_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_final_fu_511_md_state_we0 : STD_LOGIC;
    signal grp_sha512_final_fu_511_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_final_fu_511_md_curlen_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_final_fu_511_md_curlen_o_ap_vld : STD_LOGIC;
    signal grp_sha512_final_fu_511_md_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_final_fu_511_md_buf_ce0 : STD_LOGIC;
    signal grp_sha512_final_fu_511_md_buf_we0 : STD_LOGIC;
    signal grp_sha512_final_fu_511_md_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_final_fu_511_md_buf_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_final_fu_511_md_buf_ce1 : STD_LOGIC;
    signal grp_sha512_final_fu_511_md_buf_we1 : STD_LOGIC;
    signal grp_sha512_final_fu_511_md_buf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_final_fu_511_out_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha512_final_fu_511_out_r_ce0 : STD_LOGIC;
    signal grp_sha512_final_fu_511_out_r_we0 : STD_LOGIC;
    signal grp_sha512_final_fu_511_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fe_mul_fu_512_ap_start : STD_LOGIC;
    signal grp_fe_mul_fu_512_ap_idle : STD_LOGIC;
    signal grp_fe_mul_fu_512_ap_ready : STD_LOGIC;
    signal grp_fe_mul_fu_512_f_0_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_f_1_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_f_2_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_f_3_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_f_4_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_f_5_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_f_6_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_f_7_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_f_8_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_mul_fu_512_f_9_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_start : STD_LOGIC;
    signal grp_ge_scalarmult_base_fu_579_ap_idle : STD_LOGIC;
    signal grp_ge_scalarmult_base_fu_579_ap_ready : STD_LOGIC;
    signal grp_ge_scalarmult_base_fu_579_a_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_ge_scalarmult_base_fu_579_a_ce0 : STD_LOGIC;
    signal grp_ge_scalarmult_base_fu_579_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_25 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_26 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_27 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_28 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ge_scalarmult_base_fu_579_ap_return_29 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_start : STD_LOGIC;
    signal grp_fe_invert_fu_646_ap_idle : STD_LOGIC;
    signal grp_fe_invert_fu_646_ap_ready : STD_LOGIC;
    signal grp_fe_invert_fu_646_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fe_invert_fu_646_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha512_update_32_fu_791_ap_start : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_ap_done : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_ap_idle : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_ap_ready : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_md_length_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_fu_791_md_length_o_ap_vld : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_update_32_fu_791_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_md_state_we0 : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_fu_791_md_curlen_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_fu_791_md_curlen_o_ap_vld : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_md_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_32_fu_791_md_buf_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_md_buf_we0 : STD_LOGIC;
    signal grp_sha512_update_32_fu_791_md_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_update_32_fu_791_in_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha512_update_32_fu_791_in_r_ce0 : STD_LOGIC;
    signal grp_sc_muladd_fu_962_ap_start : STD_LOGIC;
    signal grp_sc_muladd_fu_962_ap_done : STD_LOGIC;
    signal grp_sc_muladd_fu_962_ap_idle : STD_LOGIC;
    signal grp_sc_muladd_fu_962_ap_ready : STD_LOGIC;
    signal grp_sc_muladd_fu_962_s_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sc_muladd_fu_962_s_ce0 : STD_LOGIC;
    signal grp_sc_muladd_fu_962_s_we0 : STD_LOGIC;
    signal grp_sc_muladd_fu_962_s_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sc_muladd_fu_962_a_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sc_muladd_fu_962_a_ce0 : STD_LOGIC;
    signal grp_sc_muladd_fu_962_b_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sc_muladd_fu_962_b_ce0 : STD_LOGIC;
    signal grp_sc_muladd_fu_962_c_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sc_muladd_fu_962_c_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_ap_start : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_ap_idle : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_ap_ready : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_md_length_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_2_fu_972_md_length_o_ap_vld : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_update_32_2_fu_972_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_md_state_we0 : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_2_fu_972_md_curlen_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_2_fu_972_md_curlen_o_ap_vld : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_md_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_32_2_fu_972_md_buf_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_md_buf_we0 : STD_LOGIC;
    signal grp_sha512_update_32_2_fu_972_md_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_update_32_2_fu_972_in_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha512_update_32_2_fu_972_in_r_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_ap_start : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_ap_done : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_ap_idle : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_ap_ready : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_md_length_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_1_fu_984_md_length_o_ap_vld : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_update_32_1_fu_984_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_md_state_we0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_1_fu_984_md_curlen_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_update_32_1_fu_984_md_curlen_o_ap_vld : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_md_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_update_32_1_fu_984_md_buf_ce0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_md_buf_we0 : STD_LOGIC;
    signal grp_sha512_update_32_1_fu_984_md_buf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_update_32_1_fu_984_in_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha512_update_32_1_fu_984_in_r_ce0 : STD_LOGIC;
    signal grp_sc_reduce_fu_996_ap_start : STD_LOGIC;
    signal grp_sc_reduce_fu_996_ap_done : STD_LOGIC;
    signal grp_sc_reduce_fu_996_ap_idle : STD_LOGIC;
    signal grp_sc_reduce_fu_996_ap_ready : STD_LOGIC;
    signal grp_sc_reduce_fu_996_s_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sc_reduce_fu_996_s_ce0 : STD_LOGIC;
    signal grp_sc_reduce_fu_996_s_we0 : STD_LOGIC;
    signal grp_sc_reduce_fu_996_s_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sc_reduce_fu_996_s_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fe_tobytes_1_fu_1001_ap_start : STD_LOGIC;
    signal grp_fe_tobytes_1_fu_1001_ap_idle : STD_LOGIC;
    signal grp_fe_tobytes_1_fu_1001_ap_ready : STD_LOGIC;
    signal grp_fe_tobytes_1_fu_1001_s_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fe_tobytes_1_fu_1001_s_ce0 : STD_LOGIC;
    signal grp_fe_tobytes_1_fu_1001_s_we0 : STD_LOGIC;
    signal grp_fe_tobytes_1_fu_1001_s_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_reg_grp_sha512_update_128_fu_510_ap_start : STD_LOGIC := '0';
    signal ap_block_state14_ignore_call0 : BOOLEAN;
    signal ap_block_state47_ignore_call0 : BOOLEAN;
    signal hash_length_fu_206 : STD_LOGIC_VECTOR (63 downto 0);
    signal hash_curlen_fu_214 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_grp_sha512_final_fu_511_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_reg_grp_fe_mul_fu_512_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_reg_grp_ge_scalarmult_base_fu_579_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_reg_grp_fe_invert_fu_646_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_sha512_update_32_fu_791_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_reg_grp_sc_muladd_fu_962_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_reg_grp_sha512_update_32_2_fu_972_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_reg_grp_sha512_update_32_1_fu_984_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_reg_grp_sc_reduce_fu_996_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_reg_grp_fe_tobytes_1_fu_1001_ap_start : STD_LOGIC := '0';
    signal tmp_1681_fu_1071_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1683_fu_1515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1240_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1727_fu_1504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_microblaze_mem_ARREADY : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_1490_i_fu_1492_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_410_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_fu_1296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_10_fu_1314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_11_fu_1333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_12_fu_1352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_13_fu_1371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_14_fu_1390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_15_fu_1409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_16_fu_1428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_17_fu_1447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_18_fu_1462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_939_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1679_fu_1499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_949_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1723_fu_943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_563_i_i_i_fu_1304_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_565_i_i_i_fu_1323_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_567_i_i_i_fu_1342_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_569_i_i_i_fu_1361_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_571_i_i_i_fu_1380_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_573_i_i_i_fu_1399_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_575_i_i_i_fu_1418_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_577_i_i_i_fu_1437_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1724_fu_1466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1725_fu_1474_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_0_i_i_i_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1489_i_fu_1484_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1726_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (53 downto 0);

    component sha512_update_128 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_length_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_length_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_length_o_ap_vld : OUT STD_LOGIC;
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o_ap_vld : OUT STD_LOGIC;
        md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce0 : OUT STD_LOGIC;
        md_buf_we0 : OUT STD_LOGIC;
        md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha512_final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_length_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_length_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_length_o_ap_vld : OUT STD_LOGIC;
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o_ap_vld : OUT STD_LOGIC;
        md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce0 : OUT STD_LOGIC;
        md_buf_we0 : OUT STD_LOGIC;
        md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        md_buf_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce1 : OUT STD_LOGIC;
        md_buf_we1 : OUT STD_LOGIC;
        md_buf_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fe_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        f_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        g_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ge_scalarmult_base IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fe_invert IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_8_read : IN STD_LOGIC_VECTOR (31 downto 0);
        z_9_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha512_update_32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_length_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_length_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_length_o_ap_vld : OUT STD_LOGIC;
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o_ap_vld : OUT STD_LOGIC;
        md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce0 : OUT STD_LOGIC;
        md_buf_we0 : OUT STD_LOGIC;
        md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sc_muladd IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        c_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha512_update_32_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_length_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_length_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_length_o_ap_vld : OUT STD_LOGIC;
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o_ap_vld : OUT STD_LOGIC;
        md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce0 : OUT STD_LOGIC;
        md_buf_we0 : OUT STD_LOGIC;
        md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha512_update_32_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_length_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_length_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_length_o_ap_vld : OUT STD_LOGIC;
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_i : IN STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_curlen_o_ap_vld : OUT STD_LOGIC;
        md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        md_buf_ce0 : OUT STD_LOGIC;
        md_buf_we0 : OUT STD_LOGIC;
        md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sc_reduce IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fe_tobytes_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ed25519_sign_hashtde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ed25519_sign_hashudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ed25519_sign_hram IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ed25519_sign_tempvdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ed25519_sign_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        signature_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        signature_ce0 : IN STD_LOGIC;
        signature_we0 : IN STD_LOGIC;
        signature_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        signature_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        blocks_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        blocks_in_ap_vld : OUT STD_LOGIC;
        public_key_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        public_key_ce0 : IN STD_LOGIC;
        public_key_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        private_key_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        private_key_ce0 : IN STD_LOGIC;
        private_key_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ed25519_sign_microblaze_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ed25519_sign_AXILiteS_s_axi_U : component ed25519_sign_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        signature_address0 => signature_address0,
        signature_ce0 => signature_ce0,
        signature_we0 => signature_we0,
        signature_d0 => signature_d0,
        signature_q0 => signature_q0,
        blocks_in => blocks_in,
        blocks_in_ap_vld => blocks_in_ap_vld,
        public_key_address0 => grp_sha512_update_32_fu_791_in_r_address0,
        public_key_ce0 => grp_sha512_update_32_fu_791_in_r_ce0,
        public_key_q0 => public_key_q0,
        private_key_address0 => private_key_address0,
        private_key_ce0 => private_key_ce0,
        private_key_q0 => private_key_q0);

    ed25519_sign_microblaze_mem_m_axi_U : component ed25519_sign_microblaze_mem_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MICROBLAZE_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MICROBLAZE_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MICROBLAZE_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MICROBLAZE_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MICROBLAZE_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MICROBLAZE_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MICROBLAZE_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MICROBLAZE_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MICROBLAZE_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MICROBLAZE_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MICROBLAZE_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MICROBLAZE_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_microblaze_mem_AWVALID,
        AWREADY => m_axi_microblaze_mem_AWREADY,
        AWADDR => m_axi_microblaze_mem_AWADDR,
        AWID => m_axi_microblaze_mem_AWID,
        AWLEN => m_axi_microblaze_mem_AWLEN,
        AWSIZE => m_axi_microblaze_mem_AWSIZE,
        AWBURST => m_axi_microblaze_mem_AWBURST,
        AWLOCK => m_axi_microblaze_mem_AWLOCK,
        AWCACHE => m_axi_microblaze_mem_AWCACHE,
        AWPROT => m_axi_microblaze_mem_AWPROT,
        AWQOS => m_axi_microblaze_mem_AWQOS,
        AWREGION => m_axi_microblaze_mem_AWREGION,
        AWUSER => m_axi_microblaze_mem_AWUSER,
        WVALID => m_axi_microblaze_mem_WVALID,
        WREADY => m_axi_microblaze_mem_WREADY,
        WDATA => m_axi_microblaze_mem_WDATA,
        WSTRB => m_axi_microblaze_mem_WSTRB,
        WLAST => m_axi_microblaze_mem_WLAST,
        WID => m_axi_microblaze_mem_WID,
        WUSER => m_axi_microblaze_mem_WUSER,
        ARVALID => m_axi_microblaze_mem_ARVALID,
        ARREADY => m_axi_microblaze_mem_ARREADY,
        ARADDR => m_axi_microblaze_mem_ARADDR,
        ARID => m_axi_microblaze_mem_ARID,
        ARLEN => m_axi_microblaze_mem_ARLEN,
        ARSIZE => m_axi_microblaze_mem_ARSIZE,
        ARBURST => m_axi_microblaze_mem_ARBURST,
        ARLOCK => m_axi_microblaze_mem_ARLOCK,
        ARCACHE => m_axi_microblaze_mem_ARCACHE,
        ARPROT => m_axi_microblaze_mem_ARPROT,
        ARQOS => m_axi_microblaze_mem_ARQOS,
        ARREGION => m_axi_microblaze_mem_ARREGION,
        ARUSER => m_axi_microblaze_mem_ARUSER,
        RVALID => m_axi_microblaze_mem_RVALID,
        RREADY => m_axi_microblaze_mem_RREADY,
        RDATA => m_axi_microblaze_mem_RDATA,
        RLAST => m_axi_microblaze_mem_RLAST,
        RID => m_axi_microblaze_mem_RID,
        RUSER => m_axi_microblaze_mem_RUSER,
        RRESP => m_axi_microblaze_mem_RRESP,
        BVALID => m_axi_microblaze_mem_BVALID,
        BREADY => m_axi_microblaze_mem_BREADY,
        BRESP => m_axi_microblaze_mem_BRESP,
        BID => m_axi_microblaze_mem_BID,
        BUSER => m_axi_microblaze_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => microblaze_mem_ARVALID,
        I_ARREADY => microblaze_mem_ARREADY,
        I_ARADDR => microblaze_mem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_80,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => microblaze_mem_RVALID,
        I_RREADY => microblaze_mem_RREADY,
        I_RDATA => microblaze_mem_RDATA,
        I_RID => microblaze_mem_RID,
        I_RUSER => microblaze_mem_RUSER,
        I_RRESP => microblaze_mem_RRESP,
        I_RLAST => microblaze_mem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => microblaze_mem_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => microblaze_mem_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => microblaze_mem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => microblaze_mem_BRESP,
        I_BID => microblaze_mem_BID,
        I_BUSER => microblaze_mem_BUSER);

    hash_state_U : component ed25519_sign_hashtde
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hash_state_address0,
        ce0 => hash_state_ce0,
        we0 => hash_state_we0,
        d0 => hash_state_d0,
        q0 => hash_state_q0,
        address1 => hash_state_address1,
        ce1 => hash_state_ce1,
        we1 => hash_state_we1,
        d1 => hash_state_d1);

    hash_buf_U : component ed25519_sign_hashudo
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hash_buf_address0,
        ce0 => hash_buf_ce0,
        we0 => hash_buf_we0,
        d0 => hash_buf_d0,
        q0 => hash_buf_q0,
        address1 => grp_sha512_final_fu_511_md_buf_address1,
        ce1 => hash_buf_ce1,
        we1 => hash_buf_we1,
        d1 => grp_sha512_final_fu_511_md_buf_d1,
        q1 => hash_buf_q1);

    hram_U : component ed25519_sign_hram
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hram_address0,
        ce0 => hram_ce0,
        we0 => hram_we0,
        d0 => hram_d0,
        q0 => hram_q0);

    r_U : component ed25519_sign_hram
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => r_address0,
        ce0 => r_ce0,
        we0 => r_we0,
        d0 => r_d0,
        q0 => r_q0);

    temp_data_U : component ed25519_sign_tempvdy
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_data_address0,
        ce0 => temp_data_ce0,
        we0 => temp_data_we0,
        d0 => reg_1038,
        q0 => temp_data_q0);

    grp_sha512_update_128_fu_510 : component sha512_update_128
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_update_128_fu_510_ap_start,
        ap_done => grp_sha512_update_128_fu_510_ap_done,
        ap_idle => grp_sha512_update_128_fu_510_ap_idle,
        ap_ready => grp_sha512_update_128_fu_510_ap_ready,
        md_length_i => hash_length_fu_206,
        md_length_o => grp_sha512_update_128_fu_510_md_length_o,
        md_length_o_ap_vld => grp_sha512_update_128_fu_510_md_length_o_ap_vld,
        md_state_address0 => grp_sha512_update_128_fu_510_md_state_address0,
        md_state_ce0 => grp_sha512_update_128_fu_510_md_state_ce0,
        md_state_we0 => grp_sha512_update_128_fu_510_md_state_we0,
        md_state_d0 => grp_sha512_update_128_fu_510_md_state_d0,
        md_state_q0 => hash_state_q0,
        md_curlen_i => hash_curlen_fu_214,
        md_curlen_o => grp_sha512_update_128_fu_510_md_curlen_o,
        md_curlen_o_ap_vld => grp_sha512_update_128_fu_510_md_curlen_o_ap_vld,
        md_buf_address0 => grp_sha512_update_128_fu_510_md_buf_address0,
        md_buf_ce0 => grp_sha512_update_128_fu_510_md_buf_ce0,
        md_buf_we0 => grp_sha512_update_128_fu_510_md_buf_we0,
        md_buf_d0 => grp_sha512_update_128_fu_510_md_buf_d0,
        md_buf_q0 => hash_buf_q0,
        in_r_address0 => grp_sha512_update_128_fu_510_in_r_address0,
        in_r_ce0 => grp_sha512_update_128_fu_510_in_r_ce0,
        in_r_q0 => temp_data_q0);

    grp_sha512_final_fu_511 : component sha512_final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_final_fu_511_ap_start,
        ap_done => grp_sha512_final_fu_511_ap_done,
        ap_idle => grp_sha512_final_fu_511_ap_idle,
        ap_ready => grp_sha512_final_fu_511_ap_ready,
        md_length_i => hash_length_fu_206,
        md_length_o => grp_sha512_final_fu_511_md_length_o,
        md_length_o_ap_vld => grp_sha512_final_fu_511_md_length_o_ap_vld,
        md_state_address0 => grp_sha512_final_fu_511_md_state_address0,
        md_state_ce0 => grp_sha512_final_fu_511_md_state_ce0,
        md_state_we0 => grp_sha512_final_fu_511_md_state_we0,
        md_state_d0 => grp_sha512_final_fu_511_md_state_d0,
        md_state_q0 => hash_state_q0,
        md_curlen_i => hash_curlen_fu_214,
        md_curlen_o => grp_sha512_final_fu_511_md_curlen_o,
        md_curlen_o_ap_vld => grp_sha512_final_fu_511_md_curlen_o_ap_vld,
        md_buf_address0 => grp_sha512_final_fu_511_md_buf_address0,
        md_buf_ce0 => grp_sha512_final_fu_511_md_buf_ce0,
        md_buf_we0 => grp_sha512_final_fu_511_md_buf_we0,
        md_buf_d0 => grp_sha512_final_fu_511_md_buf_d0,
        md_buf_q0 => hash_buf_q0,
        md_buf_address1 => grp_sha512_final_fu_511_md_buf_address1,
        md_buf_ce1 => grp_sha512_final_fu_511_md_buf_ce1,
        md_buf_we1 => grp_sha512_final_fu_511_md_buf_we1,
        md_buf_d1 => grp_sha512_final_fu_511_md_buf_d1,
        md_buf_q1 => hash_buf_q1,
        out_r_address0 => grp_sha512_final_fu_511_out_r_address0,
        out_r_ce0 => grp_sha512_final_fu_511_out_r_ce0,
        out_r_we0 => grp_sha512_final_fu_511_out_r_we0,
        out_r_d0 => grp_sha512_final_fu_511_out_r_d0);

    grp_fe_mul_fu_512 : component fe_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fe_mul_fu_512_ap_start,
        ap_done => grp_fe_mul_fu_512_ap_done,
        ap_idle => grp_fe_mul_fu_512_ap_idle,
        ap_ready => grp_fe_mul_fu_512_ap_ready,
        f_0_read => grp_fe_mul_fu_512_f_0_read,
        f_1_read => grp_fe_mul_fu_512_f_1_read,
        f_2_read => grp_fe_mul_fu_512_f_2_read,
        f_3_read => grp_fe_mul_fu_512_f_3_read,
        f_4_read => grp_fe_mul_fu_512_f_4_read,
        f_5_read => grp_fe_mul_fu_512_f_5_read,
        f_6_read => grp_fe_mul_fu_512_f_6_read,
        f_7_read => grp_fe_mul_fu_512_f_7_read,
        f_8_read => grp_fe_mul_fu_512_f_8_read,
        f_9_read => grp_fe_mul_fu_512_f_9_read,
        g_0_read => recip_0_reg_1747,
        g_1_read => recip_1_reg_1752,
        g_2_read => recip_2_reg_1757,
        g_3_read => recip_3_reg_1762,
        g_4_read => recip_4_reg_1767,
        g_5_read => recip_5_reg_1772,
        g_6_read => recip_6_reg_1777,
        g_7_read => recip_7_reg_1782,
        g_8_read => recip_8_reg_1787,
        g_9_read => recip_9_reg_1792,
        ap_return_0 => grp_fe_mul_fu_512_ap_return_0,
        ap_return_1 => grp_fe_mul_fu_512_ap_return_1,
        ap_return_2 => grp_fe_mul_fu_512_ap_return_2,
        ap_return_3 => grp_fe_mul_fu_512_ap_return_3,
        ap_return_4 => grp_fe_mul_fu_512_ap_return_4,
        ap_return_5 => grp_fe_mul_fu_512_ap_return_5,
        ap_return_6 => grp_fe_mul_fu_512_ap_return_6,
        ap_return_7 => grp_fe_mul_fu_512_ap_return_7,
        ap_return_8 => grp_fe_mul_fu_512_ap_return_8,
        ap_return_9 => grp_fe_mul_fu_512_ap_return_9);

    grp_ge_scalarmult_base_fu_579 : component ge_scalarmult_base
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ge_scalarmult_base_fu_579_ap_start,
        ap_done => grp_ge_scalarmult_base_fu_579_ap_done,
        ap_idle => grp_ge_scalarmult_base_fu_579_ap_idle,
        ap_ready => grp_ge_scalarmult_base_fu_579_ap_ready,
        a_address0 => grp_ge_scalarmult_base_fu_579_a_address0,
        a_ce0 => grp_ge_scalarmult_base_fu_579_a_ce0,
        a_q0 => r_q0,
        ap_return_0 => grp_ge_scalarmult_base_fu_579_ap_return_0,
        ap_return_1 => grp_ge_scalarmult_base_fu_579_ap_return_1,
        ap_return_2 => grp_ge_scalarmult_base_fu_579_ap_return_2,
        ap_return_3 => grp_ge_scalarmult_base_fu_579_ap_return_3,
        ap_return_4 => grp_ge_scalarmult_base_fu_579_ap_return_4,
        ap_return_5 => grp_ge_scalarmult_base_fu_579_ap_return_5,
        ap_return_6 => grp_ge_scalarmult_base_fu_579_ap_return_6,
        ap_return_7 => grp_ge_scalarmult_base_fu_579_ap_return_7,
        ap_return_8 => grp_ge_scalarmult_base_fu_579_ap_return_8,
        ap_return_9 => grp_ge_scalarmult_base_fu_579_ap_return_9,
        ap_return_10 => grp_ge_scalarmult_base_fu_579_ap_return_10,
        ap_return_11 => grp_ge_scalarmult_base_fu_579_ap_return_11,
        ap_return_12 => grp_ge_scalarmult_base_fu_579_ap_return_12,
        ap_return_13 => grp_ge_scalarmult_base_fu_579_ap_return_13,
        ap_return_14 => grp_ge_scalarmult_base_fu_579_ap_return_14,
        ap_return_15 => grp_ge_scalarmult_base_fu_579_ap_return_15,
        ap_return_16 => grp_ge_scalarmult_base_fu_579_ap_return_16,
        ap_return_17 => grp_ge_scalarmult_base_fu_579_ap_return_17,
        ap_return_18 => grp_ge_scalarmult_base_fu_579_ap_return_18,
        ap_return_19 => grp_ge_scalarmult_base_fu_579_ap_return_19,
        ap_return_20 => grp_ge_scalarmult_base_fu_579_ap_return_20,
        ap_return_21 => grp_ge_scalarmult_base_fu_579_ap_return_21,
        ap_return_22 => grp_ge_scalarmult_base_fu_579_ap_return_22,
        ap_return_23 => grp_ge_scalarmult_base_fu_579_ap_return_23,
        ap_return_24 => grp_ge_scalarmult_base_fu_579_ap_return_24,
        ap_return_25 => grp_ge_scalarmult_base_fu_579_ap_return_25,
        ap_return_26 => grp_ge_scalarmult_base_fu_579_ap_return_26,
        ap_return_27 => grp_ge_scalarmult_base_fu_579_ap_return_27,
        ap_return_28 => grp_ge_scalarmult_base_fu_579_ap_return_28,
        ap_return_29 => grp_ge_scalarmult_base_fu_579_ap_return_29);

    grp_fe_invert_fu_646 : component fe_invert
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fe_invert_fu_646_ap_start,
        ap_done => grp_fe_invert_fu_646_ap_done,
        ap_idle => grp_fe_invert_fu_646_ap_idle,
        ap_ready => grp_fe_invert_fu_646_ap_ready,
        z_0_read => R_Z_0_reg_1697,
        z_1_read => R_Z_1_reg_1702,
        z_2_read => R_Z_2_reg_1707,
        z_3_read => R_Z_3_reg_1712,
        z_4_read => R_Z_4_reg_1717,
        z_5_read => R_Z_5_reg_1722,
        z_6_read => R_Z_6_reg_1727,
        z_7_read => R_Z_7_reg_1732,
        z_8_read => R_Z_8_reg_1737,
        z_9_read => R_Z_9_reg_1742,
        ap_return_0 => grp_fe_invert_fu_646_ap_return_0,
        ap_return_1 => grp_fe_invert_fu_646_ap_return_1,
        ap_return_2 => grp_fe_invert_fu_646_ap_return_2,
        ap_return_3 => grp_fe_invert_fu_646_ap_return_3,
        ap_return_4 => grp_fe_invert_fu_646_ap_return_4,
        ap_return_5 => grp_fe_invert_fu_646_ap_return_5,
        ap_return_6 => grp_fe_invert_fu_646_ap_return_6,
        ap_return_7 => grp_fe_invert_fu_646_ap_return_7,
        ap_return_8 => grp_fe_invert_fu_646_ap_return_8,
        ap_return_9 => grp_fe_invert_fu_646_ap_return_9);

    grp_sha512_update_32_fu_791 : component sha512_update_32
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_update_32_fu_791_ap_start,
        ap_done => grp_sha512_update_32_fu_791_ap_done,
        ap_idle => grp_sha512_update_32_fu_791_ap_idle,
        ap_ready => grp_sha512_update_32_fu_791_ap_ready,
        md_length_i => hash_length_fu_206,
        md_length_o => grp_sha512_update_32_fu_791_md_length_o,
        md_length_o_ap_vld => grp_sha512_update_32_fu_791_md_length_o_ap_vld,
        md_state_address0 => grp_sha512_update_32_fu_791_md_state_address0,
        md_state_ce0 => grp_sha512_update_32_fu_791_md_state_ce0,
        md_state_we0 => grp_sha512_update_32_fu_791_md_state_we0,
        md_state_d0 => grp_sha512_update_32_fu_791_md_state_d0,
        md_state_q0 => hash_state_q0,
        md_curlen_i => hash_curlen_fu_214,
        md_curlen_o => grp_sha512_update_32_fu_791_md_curlen_o,
        md_curlen_o_ap_vld => grp_sha512_update_32_fu_791_md_curlen_o_ap_vld,
        md_buf_address0 => grp_sha512_update_32_fu_791_md_buf_address0,
        md_buf_ce0 => grp_sha512_update_32_fu_791_md_buf_ce0,
        md_buf_we0 => grp_sha512_update_32_fu_791_md_buf_we0,
        md_buf_d0 => grp_sha512_update_32_fu_791_md_buf_d0,
        md_buf_q0 => hash_buf_q0,
        in_r_address0 => grp_sha512_update_32_fu_791_in_r_address0,
        in_r_ce0 => grp_sha512_update_32_fu_791_in_r_ce0,
        in_r_q0 => public_key_q0);

    grp_sc_muladd_fu_962 : component sc_muladd
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sc_muladd_fu_962_ap_start,
        ap_done => grp_sc_muladd_fu_962_ap_done,
        ap_idle => grp_sc_muladd_fu_962_ap_idle,
        ap_ready => grp_sc_muladd_fu_962_ap_ready,
        s_address0 => grp_sc_muladd_fu_962_s_address0,
        s_ce0 => grp_sc_muladd_fu_962_s_ce0,
        s_we0 => grp_sc_muladd_fu_962_s_we0,
        s_d0 => grp_sc_muladd_fu_962_s_d0,
        a_address0 => grp_sc_muladd_fu_962_a_address0,
        a_ce0 => grp_sc_muladd_fu_962_a_ce0,
        a_q0 => hram_q0,
        b_address0 => grp_sc_muladd_fu_962_b_address0,
        b_ce0 => grp_sc_muladd_fu_962_b_ce0,
        b_q0 => private_key_q0,
        c_address0 => grp_sc_muladd_fu_962_c_address0,
        c_ce0 => grp_sc_muladd_fu_962_c_ce0,
        c_q0 => r_q0);

    grp_sha512_update_32_2_fu_972 : component sha512_update_32_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_update_32_2_fu_972_ap_start,
        ap_done => grp_sha512_update_32_2_fu_972_ap_done,
        ap_idle => grp_sha512_update_32_2_fu_972_ap_idle,
        ap_ready => grp_sha512_update_32_2_fu_972_ap_ready,
        md_length_i => hash_length_fu_206,
        md_length_o => grp_sha512_update_32_2_fu_972_md_length_o,
        md_length_o_ap_vld => grp_sha512_update_32_2_fu_972_md_length_o_ap_vld,
        md_state_address0 => grp_sha512_update_32_2_fu_972_md_state_address0,
        md_state_ce0 => grp_sha512_update_32_2_fu_972_md_state_ce0,
        md_state_we0 => grp_sha512_update_32_2_fu_972_md_state_we0,
        md_state_d0 => grp_sha512_update_32_2_fu_972_md_state_d0,
        md_state_q0 => hash_state_q0,
        md_curlen_i => hash_curlen_fu_214,
        md_curlen_o => grp_sha512_update_32_2_fu_972_md_curlen_o,
        md_curlen_o_ap_vld => grp_sha512_update_32_2_fu_972_md_curlen_o_ap_vld,
        md_buf_address0 => grp_sha512_update_32_2_fu_972_md_buf_address0,
        md_buf_ce0 => grp_sha512_update_32_2_fu_972_md_buf_ce0,
        md_buf_we0 => grp_sha512_update_32_2_fu_972_md_buf_we0,
        md_buf_d0 => grp_sha512_update_32_2_fu_972_md_buf_d0,
        md_buf_q0 => hash_buf_q0,
        in_r_address0 => grp_sha512_update_32_2_fu_972_in_r_address0,
        in_r_ce0 => grp_sha512_update_32_2_fu_972_in_r_ce0,
        in_r_q0 => private_key_q0);

    grp_sha512_update_32_1_fu_984 : component sha512_update_32_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha512_update_32_1_fu_984_ap_start,
        ap_done => grp_sha512_update_32_1_fu_984_ap_done,
        ap_idle => grp_sha512_update_32_1_fu_984_ap_idle,
        ap_ready => grp_sha512_update_32_1_fu_984_ap_ready,
        md_length_i => hash_length_fu_206,
        md_length_o => grp_sha512_update_32_1_fu_984_md_length_o,
        md_length_o_ap_vld => grp_sha512_update_32_1_fu_984_md_length_o_ap_vld,
        md_state_address0 => grp_sha512_update_32_1_fu_984_md_state_address0,
        md_state_ce0 => grp_sha512_update_32_1_fu_984_md_state_ce0,
        md_state_we0 => grp_sha512_update_32_1_fu_984_md_state_we0,
        md_state_d0 => grp_sha512_update_32_1_fu_984_md_state_d0,
        md_state_q0 => hash_state_q0,
        md_curlen_i => hash_curlen_fu_214,
        md_curlen_o => grp_sha512_update_32_1_fu_984_md_curlen_o,
        md_curlen_o_ap_vld => grp_sha512_update_32_1_fu_984_md_curlen_o_ap_vld,
        md_buf_address0 => grp_sha512_update_32_1_fu_984_md_buf_address0,
        md_buf_ce0 => grp_sha512_update_32_1_fu_984_md_buf_ce0,
        md_buf_we0 => grp_sha512_update_32_1_fu_984_md_buf_we0,
        md_buf_d0 => grp_sha512_update_32_1_fu_984_md_buf_d0,
        md_buf_q0 => hash_buf_q0,
        in_r_address0 => grp_sha512_update_32_1_fu_984_in_r_address0,
        in_r_ce0 => grp_sha512_update_32_1_fu_984_in_r_ce0,
        in_r_q0 => signature_q0);

    grp_sc_reduce_fu_996 : component sc_reduce
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sc_reduce_fu_996_ap_start,
        ap_done => grp_sc_reduce_fu_996_ap_done,
        ap_idle => grp_sc_reduce_fu_996_ap_idle,
        ap_ready => grp_sc_reduce_fu_996_ap_ready,
        s_address0 => grp_sc_reduce_fu_996_s_address0,
        s_ce0 => grp_sc_reduce_fu_996_s_ce0,
        s_we0 => grp_sc_reduce_fu_996_s_we0,
        s_d0 => grp_sc_reduce_fu_996_s_d0,
        s_q0 => grp_sc_reduce_fu_996_s_q0);

    grp_fe_tobytes_1_fu_1001 : component fe_tobytes_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fe_tobytes_1_fu_1001_ap_start,
        ap_done => grp_fe_tobytes_1_fu_1001_ap_done,
        ap_idle => grp_fe_tobytes_1_fu_1001_ap_idle,
        ap_ready => grp_fe_tobytes_1_fu_1001_ap_ready,
        s_address0 => grp_fe_tobytes_1_fu_1001_s_address0,
        s_ce0 => grp_fe_tobytes_1_fu_1001_s_ce0,
        s_we0 => grp_fe_tobytes_1_fu_1001_s_we0,
        s_d0 => grp_fe_tobytes_1_fu_1001_s_d0,
        p_read => reg_1043,
        p_read1 => y_1_reg_1797,
        p_read2 => y_2_reg_1802,
        p_read3 => y_3_reg_1807,
        p_read4 => y_4_reg_1812,
        p_read5 => y_5_reg_1817,
        p_read6 => y_6_reg_1822,
        p_read7 => y_7_reg_1827,
        p_read8 => y_8_reg_1832,
        p_read9 => reg_1049);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_fe_invert_fu_646_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_fe_invert_fu_646_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_ge_scalarmult_base_fu_579_ap_done = ap_const_logic_1))) then 
                    ap_reg_grp_fe_invert_fu_646_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fe_invert_fu_646_ap_ready)) then 
                    ap_reg_grp_fe_invert_fu_646_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fe_mul_fu_512_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_fe_mul_fu_512_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_fe_mul_fu_512_ap_done = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    ap_reg_grp_fe_mul_fu_512_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fe_mul_fu_512_ap_ready)) then 
                    ap_reg_grp_fe_mul_fu_512_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fe_tobytes_1_fu_1001_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_fe_tobytes_1_fu_1001_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_fe_mul_fu_512_ap_done = ap_const_logic_1))) then 
                    ap_reg_grp_fe_tobytes_1_fu_1001_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fe_tobytes_1_fu_1001_ap_ready)) then 
                    ap_reg_grp_fe_tobytes_1_fu_1001_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_ge_scalarmult_base_fu_579_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_ge_scalarmult_base_fu_579_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_reg_grp_ge_scalarmult_base_fu_579_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_ge_scalarmult_base_fu_579_ap_ready)) then 
                    ap_reg_grp_ge_scalarmult_base_fu_579_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sc_muladd_fu_962_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sc_muladd_fu_962_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                    ap_reg_grp_sc_muladd_fu_962_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sc_muladd_fu_962_ap_ready)) then 
                    ap_reg_grp_sc_muladd_fu_962_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sc_reduce_fu_996_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sc_reduce_fu_996_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                    ap_reg_grp_sc_reduce_fu_996_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sc_reduce_fu_996_ap_ready)) then 
                    ap_reg_grp_sc_reduce_fu_996_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_final_fu_511_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_final_fu_511_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0) and (grp_fu_939_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_block_state40_io = ap_const_boolean_0) and (grp_fu_939_p2 = ap_const_lv1_0)))) then 
                    ap_reg_grp_sha512_final_fu_511_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_final_fu_511_ap_ready)) then 
                    ap_reg_grp_sha512_final_fu_511_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_update_128_fu_510_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_update_128_fu_510_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state14) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID))) and (ap_const_lv1_1 = grp_fu_949_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID))) and (ap_const_lv1_1 = grp_fu_949_p2)))) then 
                    ap_reg_grp_sha512_update_128_fu_510_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_update_128_fu_510_ap_ready)) then 
                    ap_reg_grp_sha512_update_128_fu_510_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_update_32_1_fu_984_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_update_32_1_fu_984_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_reg_grp_sha512_update_32_1_fu_984_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_update_32_1_fu_984_ap_ready)) then 
                    ap_reg_grp_sha512_update_32_1_fu_984_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_update_32_2_fu_972_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_update_32_2_fu_972_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_reg_grp_sha512_update_32_2_fu_972_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_update_32_2_fu_972_ap_ready)) then 
                    ap_reg_grp_sha512_update_32_2_fu_972_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_update_32_fu_791_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_sha512_update_32_fu_791_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_reg_grp_sha512_update_32_fu_791_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_update_32_fu_791_ap_ready)) then 
                    ap_reg_grp_sha512_update_32_fu_791_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_microblaze_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_microblaze_mem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fu_939_p2 = ap_const_lv1_1) and (ap_block_state7_io = ap_const_boolean_0)) or ((grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (ap_block_state40_io = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_microblaze_mem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = microblaze_mem_ARREADY)) or ((grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_logic_1 = microblaze_mem_ARREADY)))) then 
                    ap_reg_ioackin_microblaze_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    blocks_in_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                blocks_in_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_sc_muladd_fu_962_ap_done = ap_const_logic_1))) then 
                    blocks_in_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blocks_in_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    blocks_in_ap_vld_preg <= blocks_in_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    blocks_in_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                blocks_in_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = blocks_in_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    blocks_in_preg <= blocks_in;
                end if; 
            end if;
        end if;
    end process;


    hash_curlen_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                hash_curlen_fu_214 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_logic_1 = grp_sha512_update_32_1_fu_984_md_curlen_o_ap_vld))) then 
                hash_curlen_fu_214 <= grp_sha512_update_32_1_fu_984_md_curlen_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha512_update_32_2_fu_972_md_curlen_o_ap_vld))) then 
                hash_curlen_fu_214 <= grp_sha512_update_32_2_fu_972_md_curlen_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_logic_1 = grp_sha512_update_32_fu_791_md_curlen_o_ap_vld))) then 
                hash_curlen_fu_214 <= grp_sha512_update_32_fu_791_md_curlen_o;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_logic_1 = grp_sha512_final_fu_511_md_curlen_o_ap_vld)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_const_logic_1 = grp_sha512_final_fu_511_md_curlen_o_ap_vld)))) then 
                hash_curlen_fu_214 <= grp_sha512_final_fu_511_md_curlen_o;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_1 = grp_sha512_update_128_fu_510_md_curlen_o_ap_vld)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_1 = grp_sha512_update_128_fu_510_md_curlen_o_ap_vld)))) then 
                hash_curlen_fu_214 <= grp_sha512_update_128_fu_510_md_curlen_o;
            end if; 
        end if;
    end process;

    hash_length_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                hash_length_fu_206 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (ap_const_logic_1 = grp_sha512_update_32_1_fu_984_md_length_o_ap_vld))) then 
                hash_length_fu_206 <= grp_sha512_update_32_1_fu_984_md_length_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = grp_sha512_update_32_2_fu_972_md_length_o_ap_vld))) then 
                hash_length_fu_206 <= grp_sha512_update_32_2_fu_972_md_length_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_logic_1 = grp_sha512_update_32_fu_791_md_length_o_ap_vld))) then 
                hash_length_fu_206 <= grp_sha512_update_32_fu_791_md_length_o;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_logic_1 = grp_sha512_final_fu_511_md_length_o_ap_vld)) or ((ap_const_logic_1 = grp_sha512_final_fu_511_md_length_o_ap_vld) and (ap_const_logic_1 = ap_CS_fsm_state50)))) then 
                hash_length_fu_206 <= grp_sha512_final_fu_511_md_length_o;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_1 = grp_sha512_update_128_fu_510_md_length_o_ap_vld)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_1 = grp_sha512_update_128_fu_510_md_length_o_ap_vld)))) then 
                hash_length_fu_206 <= grp_sha512_update_128_fu_510_md_length_o;
            end if; 
        end if;
    end process;

    reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_sha512_update_128_fu_510_ap_done = ap_const_logic_1))) then 
                reg_364 <= reg_387;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = blocks_in_ap_vld_in_sig) or (ap_const_logic_0 = grp_sha512_update_32_2_fu_972_ap_done))))) then 
                reg_364 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_block_state40_io = ap_const_boolean_0))) then 
                reg_364 <= grp_fu_410_p2;
            end if; 
        end if;
    end process;

    reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_375 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                reg_375 <= reg_398;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state47) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID))))) then 
                reg_375 <= grp_fu_410_p2(8 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha512_update_128_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_387 <= reg_364;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_sha512_update_32_fu_791_ap_done = ap_const_logic_1))) then 
                reg_387 <= ap_const_lv32_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                reg_387 <= grp_fu_410_p2;
            end if; 
        end if;
    end process;

    reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_398 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_398 <= reg_375;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID))))) then 
                reg_398 <= grp_fu_410_p2(8 - 1 downto 0);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_ge_scalarmult_base_fu_579_ap_done = ap_const_logic_1))) then
                R_X_0_reg_1597 <= grp_ge_scalarmult_base_fu_579_ap_return_0;
                R_X_1_reg_1602 <= grp_ge_scalarmult_base_fu_579_ap_return_1;
                R_X_2_reg_1607 <= grp_ge_scalarmult_base_fu_579_ap_return_2;
                R_X_3_reg_1612 <= grp_ge_scalarmult_base_fu_579_ap_return_3;
                R_X_4_reg_1617 <= grp_ge_scalarmult_base_fu_579_ap_return_4;
                R_X_5_reg_1622 <= grp_ge_scalarmult_base_fu_579_ap_return_5;
                R_X_6_reg_1627 <= grp_ge_scalarmult_base_fu_579_ap_return_6;
                R_X_7_reg_1632 <= grp_ge_scalarmult_base_fu_579_ap_return_7;
                R_X_8_reg_1637 <= grp_ge_scalarmult_base_fu_579_ap_return_8;
                R_X_9_reg_1642 <= grp_ge_scalarmult_base_fu_579_ap_return_9;
                R_Y_0_reg_1647 <= grp_ge_scalarmult_base_fu_579_ap_return_10;
                R_Y_1_reg_1652 <= grp_ge_scalarmult_base_fu_579_ap_return_11;
                R_Y_2_reg_1657 <= grp_ge_scalarmult_base_fu_579_ap_return_12;
                R_Y_3_reg_1662 <= grp_ge_scalarmult_base_fu_579_ap_return_13;
                R_Y_4_reg_1667 <= grp_ge_scalarmult_base_fu_579_ap_return_14;
                R_Y_5_reg_1672 <= grp_ge_scalarmult_base_fu_579_ap_return_15;
                R_Y_6_reg_1677 <= grp_ge_scalarmult_base_fu_579_ap_return_16;
                R_Y_7_reg_1682 <= grp_ge_scalarmult_base_fu_579_ap_return_17;
                R_Y_8_reg_1687 <= grp_ge_scalarmult_base_fu_579_ap_return_18;
                R_Y_9_reg_1692 <= grp_ge_scalarmult_base_fu_579_ap_return_19;
                R_Z_0_reg_1697 <= grp_ge_scalarmult_base_fu_579_ap_return_20;
                R_Z_1_reg_1702 <= grp_ge_scalarmult_base_fu_579_ap_return_21;
                R_Z_2_reg_1707 <= grp_ge_scalarmult_base_fu_579_ap_return_22;
                R_Z_3_reg_1712 <= grp_ge_scalarmult_base_fu_579_ap_return_23;
                R_Z_4_reg_1717 <= grp_ge_scalarmult_base_fu_579_ap_return_24;
                R_Z_5_reg_1722 <= grp_ge_scalarmult_base_fu_579_ap_return_25;
                R_Z_6_reg_1727 <= grp_ge_scalarmult_base_fu_579_ap_return_26;
                R_Z_7_reg_1732 <= grp_ge_scalarmult_base_fu_579_ap_return_27;
                R_Z_8_reg_1737 <= grp_ge_scalarmult_base_fu_579_ap_return_28;
                R_Z_9_reg_1742 <= grp_ge_scalarmult_base_fu_579_ap_return_29;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_block_state25_on_subcall_done = ap_const_boolean_0))) then
                fe_mul_ret1_i_reg_1837_1 <= grp_fe_mul_fu_512_ap_return_1;
                fe_mul_ret1_i_reg_1837_2 <= grp_fe_mul_fu_512_ap_return_2;
                fe_mul_ret1_i_reg_1837_3 <= grp_fe_mul_fu_512_ap_return_3;
                fe_mul_ret1_i_reg_1837_4 <= grp_fe_mul_fu_512_ap_return_4;
                fe_mul_ret1_i_reg_1837_5 <= grp_fe_mul_fu_512_ap_return_5;
                fe_mul_ret1_i_reg_1837_6 <= grp_fe_mul_fu_512_ap_return_6;
                fe_mul_ret1_i_reg_1837_7 <= grp_fe_mul_fu_512_ap_return_7;
                fe_mul_ret1_i_reg_1837_8 <= grp_fe_mul_fu_512_ap_return_8;
                tmp_561_i_i_i_reg_1849 <= grp_fu_410_p2(31 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_fe_invert_fu_646_ap_done = ap_const_logic_1))) then
                recip_0_reg_1747 <= grp_fe_invert_fu_646_ap_return_0;
                recip_1_reg_1752 <= grp_fe_invert_fu_646_ap_return_1;
                recip_2_reg_1757 <= grp_fe_invert_fu_646_ap_return_2;
                recip_3_reg_1762 <= grp_fe_invert_fu_646_ap_return_3;
                recip_4_reg_1767 <= grp_fe_invert_fu_646_ap_return_4;
                recip_5_reg_1772 <= grp_fe_invert_fu_646_ap_return_5;
                recip_6_reg_1777 <= grp_fe_invert_fu_646_ap_return_6;
                recip_7_reg_1782 <= grp_fe_invert_fu_646_ap_return_7;
                recip_8_reg_1787 <= grp_fe_invert_fu_646_ap_return_8;
                recip_9_reg_1792 <= grp_fe_invert_fu_646_ap_return_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_949_p2 = ap_const_lv1_0) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID)))) or ((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID)))))) then
                reg_1038 <= microblaze_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_fe_mul_fu_512_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_block_state25_on_subcall_done = ap_const_boolean_0)))) then
                reg_1043 <= grp_fe_mul_fu_512_ap_return_0;
                reg_1049 <= grp_fe_mul_fu_512_ap_return_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_579_i_i_i_reg_1854 <= grp_fu_410_p2(31 downto 26);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_fe_mul_fu_512_ap_done = ap_const_logic_1))) then
                y_1_reg_1797 <= grp_fe_mul_fu_512_ap_return_1;
                y_2_reg_1802 <= grp_fe_mul_fu_512_ap_return_2;
                y_3_reg_1807 <= grp_fe_mul_fu_512_ap_return_3;
                y_4_reg_1812 <= grp_fe_mul_fu_512_ap_return_4;
                y_5_reg_1817 <= grp_fe_mul_fu_512_ap_return_5;
                y_6_reg_1822 <= grp_fe_mul_fu_512_ap_return_6;
                y_7_reg_1827 <= grp_fe_mul_fu_512_ap_return_7;
                y_8_reg_1832 <= grp_fe_mul_fu_512_ap_return_8;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, blocks_in_ap_vld_in_sig, ap_CS_fsm_state7, grp_fu_939_p2, ap_CS_fsm_state14, grp_fu_949_p2, ap_CS_fsm_state40, ap_CS_fsm_state47, ap_CS_fsm_state6, microblaze_mem_RVALID, ap_block_state40_io, ap_block_state7_io, ap_CS_fsm_state24, grp_fe_mul_fu_512_ap_done, ap_CS_fsm_state25, ap_block_state25_on_subcall_done, grp_sha512_update_32_2_fu_972_ap_done, ap_CS_fsm_state21, grp_ge_scalarmult_base_fu_579_ap_done, ap_CS_fsm_state22, grp_fe_invert_fu_646_ap_done, grp_sha512_update_128_fu_510_ap_done, grp_sha512_final_fu_511_ap_done, grp_sha512_update_32_fu_791_ap_done, grp_sc_muladd_fu_962_ap_done, grp_sha512_update_32_1_fu_984_ap_done, grp_sc_reduce_fu_996_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state37, ap_CS_fsm_state19, ap_CS_fsm_state52)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = blocks_in_ap_vld_in_sig) or (ap_const_logic_0 = grp_sha512_update_32_2_fu_972_ap_done))))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_block_state7_io = ap_const_boolean_0) and (grp_fu_939_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fu_939_p2 = ap_const_lv1_1) and (ap_block_state7_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID))) and (ap_const_lv1_1 = grp_fu_949_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_949_p2 = ap_const_lv1_0) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_sha512_update_128_fu_510_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_sha512_final_fu_511_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sc_reduce_fu_996_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_ge_scalarmult_base_fu_579_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_fe_invert_fu_646_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_fe_mul_fu_512_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_block_state25_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_sha512_update_32_1_fu_984_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_sha512_update_32_fu_791_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_block_state40_io = ap_const_boolean_0) and (grp_fu_939_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                elsif (((grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (ap_block_state40_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID))) and (ap_const_lv1_1 = grp_fu_949_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                elsif (((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state49 => 
                if (((grp_sha512_update_128_fu_510_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_sha512_final_fu_511_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_sc_reduce_fu_996_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_sc_muladd_fu_962_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state14_assign_proc : process(grp_fu_949_p2, microblaze_mem_RVALID)
    begin
                ap_block_state14 <= ((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID));
    end process;


    ap_block_state14_ignore_call0_assign_proc : process(grp_fu_949_p2, microblaze_mem_RVALID)
    begin
                ap_block_state14_ignore_call0 <= ((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID));
    end process;


    ap_block_state25_on_subcall_done_assign_proc : process(grp_fe_mul_fu_512_ap_done, grp_fe_tobytes_1_fu_1001_ap_done)
    begin
                ap_block_state25_on_subcall_done <= ((ap_const_logic_0 = grp_fe_mul_fu_512_ap_done) or (ap_const_logic_0 = grp_fe_tobytes_1_fu_1001_ap_done));
    end process;


    ap_block_state40_io_assign_proc : process(grp_fu_939_p2, ap_sig_ioackin_microblaze_mem_ARREADY)
    begin
                ap_block_state40_io <= ((grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_microblaze_mem_ARREADY));
    end process;


    ap_block_state47_assign_proc : process(grp_fu_949_p2, microblaze_mem_RVALID)
    begin
                ap_block_state47 <= ((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID));
    end process;


    ap_block_state47_ignore_call0_assign_proc : process(grp_fu_949_p2, microblaze_mem_RVALID)
    begin
                ap_block_state47_ignore_call0 <= ((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID));
    end process;


    ap_block_state7_io_assign_proc : process(grp_fu_939_p2, ap_sig_ioackin_microblaze_mem_ARREADY)
    begin
                ap_block_state7_io <= ((grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_microblaze_mem_ARREADY));
    end process;


    ap_done_assign_proc : process(grp_sc_muladd_fu_962_ap_done, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_sc_muladd_fu_962_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sc_muladd_fu_962_ap_done, ap_CS_fsm_state54)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_sc_muladd_fu_962_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_microblaze_mem_ARREADY_assign_proc : process(microblaze_mem_ARREADY, ap_reg_ioackin_microblaze_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_microblaze_mem_ARREADY)) then 
            ap_sig_ioackin_microblaze_mem_ARREADY <= microblaze_mem_ARREADY;
        else 
            ap_sig_ioackin_microblaze_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    blocks_in_ap_vld_in_sig_assign_proc : process(blocks_in_ap_vld, blocks_in_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = blocks_in_ap_vld)) then 
            blocks_in_ap_vld_in_sig <= blocks_in_ap_vld;
        else 
            blocks_in_ap_vld_in_sig <= blocks_in_ap_vld_preg;
        end if; 
    end process;


    blocks_in_blk_n_assign_proc : process(blocks_in_ap_vld, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            blocks_in_blk_n <= blocks_in_ap_vld;
        else 
            blocks_in_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    blocks_in_in_sig_assign_proc : process(blocks_in, blocks_in_preg, blocks_in_ap_vld)
    begin
        if ((ap_const_logic_1 = blocks_in_ap_vld)) then 
            blocks_in_in_sig <= blocks_in;
        else 
            blocks_in_in_sig <= blocks_in_preg;
        end if; 
    end process;

    grp_fe_invert_fu_646_ap_start <= ap_reg_grp_fe_invert_fu_646_ap_start;
    grp_fe_mul_fu_512_ap_start <= ap_reg_grp_fe_mul_fu_512_ap_start;

    grp_fe_mul_fu_512_f_0_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_0_reg_1597, R_Y_0_reg_1647)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_0_read <= R_X_0_reg_1597;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_0_read <= R_Y_0_reg_1647;
        else 
            grp_fe_mul_fu_512_f_0_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_mul_fu_512_f_1_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_1_reg_1602, R_Y_1_reg_1652)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_1_read <= R_X_1_reg_1602;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_1_read <= R_Y_1_reg_1652;
        else 
            grp_fe_mul_fu_512_f_1_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_mul_fu_512_f_2_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_2_reg_1607, R_Y_2_reg_1657)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_2_read <= R_X_2_reg_1607;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_2_read <= R_Y_2_reg_1657;
        else 
            grp_fe_mul_fu_512_f_2_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_mul_fu_512_f_3_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_3_reg_1612, R_Y_3_reg_1662)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_3_read <= R_X_3_reg_1612;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_3_read <= R_Y_3_reg_1662;
        else 
            grp_fe_mul_fu_512_f_3_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_mul_fu_512_f_4_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_4_reg_1617, R_Y_4_reg_1667)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_4_read <= R_X_4_reg_1617;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_4_read <= R_Y_4_reg_1667;
        else 
            grp_fe_mul_fu_512_f_4_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_mul_fu_512_f_5_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_5_reg_1622, R_Y_5_reg_1672)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_5_read <= R_X_5_reg_1622;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_5_read <= R_Y_5_reg_1672;
        else 
            grp_fe_mul_fu_512_f_5_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_mul_fu_512_f_6_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_6_reg_1627, R_Y_6_reg_1677)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_6_read <= R_X_6_reg_1627;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_6_read <= R_Y_6_reg_1677;
        else 
            grp_fe_mul_fu_512_f_6_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_mul_fu_512_f_7_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_7_reg_1632, R_Y_7_reg_1682)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_7_read <= R_X_7_reg_1632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_7_read <= R_Y_7_reg_1682;
        else 
            grp_fe_mul_fu_512_f_7_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_mul_fu_512_f_8_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_8_reg_1637, R_Y_8_reg_1687)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_8_read <= R_X_8_reg_1637;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_8_read <= R_Y_8_reg_1687;
        else 
            grp_fe_mul_fu_512_f_8_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fe_mul_fu_512_f_9_read_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state25, R_X_9_reg_1642, R_Y_9_reg_1692)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fe_mul_fu_512_f_9_read <= R_X_9_reg_1642;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fe_mul_fu_512_f_9_read <= R_Y_9_reg_1692;
        else 
            grp_fe_mul_fu_512_f_9_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fe_tobytes_1_fu_1001_ap_start <= ap_reg_grp_fe_tobytes_1_fu_1001_ap_start;

    grp_fu_410_p0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state40, ap_CS_fsm_state47, reg_364, reg_375, reg_387, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, reg_398, ap_CS_fsm_state25, ap_CS_fsm_state34, ap_CS_fsm_state35, q_fu_1296_p1, q_10_fu_1314_p1, q_11_fu_1333_p1, q_12_fu_1352_p1, q_13_fu_1371_p1, q_14_fu_1390_p1, q_15_fu_1409_p1, q_16_fu_1428_p1, q_17_fu_1447_p1, q_18_fu_1462_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_410_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_398),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_410_p0 <= reg_387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_410_p0 <= q_18_fu_1462_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_410_p0 <= q_17_fu_1447_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_410_p0 <= q_16_fu_1428_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_410_p0 <= q_15_fu_1409_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_410_p0 <= q_14_fu_1390_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_410_p0 <= q_13_fu_1371_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_410_p0 <= q_12_fu_1352_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_410_p0 <= q_11_fu_1333_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_410_p0 <= q_10_fu_1314_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_410_p0 <= q_fu_1296_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_410_p0 <= ap_const_lv32_1000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_410_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_375),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_410_p0 <= reg_364;
        else 
            grp_fu_410_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_410_p1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state40, ap_CS_fsm_state47, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, reg_1043, ap_CS_fsm_state25, reg_1049, fe_mul_ret1_i_reg_1837_1, fe_mul_ret1_i_reg_1837_2, fe_mul_ret1_i_reg_1837_3, fe_mul_ret1_i_reg_1837_4, fe_mul_ret1_i_reg_1837_5, fe_mul_ret1_i_reg_1837_6, fe_mul_ret1_i_reg_1837_7, fe_mul_ret1_i_reg_1837_8, ap_CS_fsm_state34, ap_CS_fsm_state35, tmp_i_i_i_fu_496_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_410_p1 <= reg_1049;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_410_p1 <= fe_mul_ret1_i_reg_1837_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_410_p1 <= fe_mul_ret1_i_reg_1837_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_410_p1 <= fe_mul_ret1_i_reg_1837_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_410_p1 <= fe_mul_ret1_i_reg_1837_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_410_p1 <= fe_mul_ret1_i_reg_1837_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_410_p1 <= fe_mul_ret1_i_reg_1837_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_410_p1 <= fe_mul_ret1_i_reg_1837_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_410_p1 <= fe_mul_ret1_i_reg_1837_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_410_p1 <= reg_1043;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_410_p1 <= tmp_i_i_i_fu_496_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_1),32));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_fu_410_p1 <= ap_const_lv32_1;
        else 
            grp_fu_410_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_410_p2 <= std_logic_vector(unsigned(grp_fu_410_p0) + unsigned(grp_fu_410_p1));

    grp_fu_939_p0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state40, tmp_fu_1055_p1, tmp_1679_fu_1499_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_939_p0 <= tmp_1679_fu_1499_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_939_p0 <= tmp_fu_1055_p1;
        else 
            grp_fu_939_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_939_p2 <= "1" when (unsigned(grp_fu_939_p0) < unsigned(blocks_in_in_sig)) else "0";

    grp_fu_949_p0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state47, reg_375, reg_398)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_949_p0 <= reg_398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_949_p0 <= reg_375;
        else 
            grp_fu_949_p0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_fu_949_p2 <= "1" when (grp_fu_949_p0 = ap_const_lv8_80) else "0";
    grp_ge_scalarmult_base_fu_579_ap_start <= ap_reg_grp_ge_scalarmult_base_fu_579_ap_start;
    grp_sc_muladd_fu_962_ap_start <= ap_reg_grp_sc_muladd_fu_962_ap_start;
    grp_sc_reduce_fu_996_ap_start <= ap_reg_grp_sc_reduce_fu_996_ap_start;

    grp_sc_reduce_fu_996_s_q0_assign_proc : process(hram_q0, r_q0, ap_CS_fsm_state19, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_sc_reduce_fu_996_s_q0 <= hram_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_sc_reduce_fu_996_s_q0 <= r_q0;
        else 
            grp_sc_reduce_fu_996_s_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_sha512_final_fu_511_ap_start <= ap_reg_grp_sha512_final_fu_511_ap_start;
    grp_sha512_update_128_fu_510_ap_start <= ap_reg_grp_sha512_update_128_fu_510_ap_start;
    grp_sha512_update_32_1_fu_984_ap_start <= ap_reg_grp_sha512_update_32_1_fu_984_ap_start;
    grp_sha512_update_32_2_fu_972_ap_start <= ap_reg_grp_sha512_update_32_2_fu_972_ap_start;
    grp_sha512_update_32_fu_791_ap_start <= ap_reg_grp_sha512_update_32_fu_791_ap_start;

    hash_buf_address0_assign_proc : process(ap_CS_fsm_state6, grp_sha512_update_128_fu_510_md_buf_address0, grp_sha512_final_fu_511_md_buf_address0, grp_sha512_update_32_fu_791_md_buf_address0, grp_sha512_update_32_2_fu_972_md_buf_address0, grp_sha512_update_32_1_fu_984_md_buf_address0, ap_CS_fsm_state16, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            hash_buf_address0 <= grp_sha512_update_32_1_fu_984_md_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hash_buf_address0 <= grp_sha512_update_32_2_fu_972_md_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            hash_buf_address0 <= grp_sha512_update_32_fu_791_md_buf_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_buf_address0 <= grp_sha512_final_fu_511_md_buf_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            hash_buf_address0 <= grp_sha512_update_128_fu_510_md_buf_address0;
        else 
            hash_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    hash_buf_ce0_assign_proc : process(ap_CS_fsm_state6, grp_sha512_update_128_fu_510_md_buf_ce0, grp_sha512_final_fu_511_md_buf_ce0, grp_sha512_update_32_fu_791_md_buf_ce0, grp_sha512_update_32_2_fu_972_md_buf_ce0, grp_sha512_update_32_1_fu_984_md_buf_ce0, ap_CS_fsm_state16, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            hash_buf_ce0 <= grp_sha512_update_32_1_fu_984_md_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hash_buf_ce0 <= grp_sha512_update_32_2_fu_972_md_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            hash_buf_ce0 <= grp_sha512_update_32_fu_791_md_buf_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_buf_ce0 <= grp_sha512_final_fu_511_md_buf_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            hash_buf_ce0 <= grp_sha512_update_128_fu_510_md_buf_ce0;
        else 
            hash_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_buf_ce1_assign_proc : process(grp_sha512_final_fu_511_md_buf_ce1, ap_CS_fsm_state17, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_buf_ce1 <= grp_sha512_final_fu_511_md_buf_ce1;
        else 
            hash_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hash_buf_d0_assign_proc : process(ap_CS_fsm_state6, grp_sha512_update_128_fu_510_md_buf_d0, grp_sha512_final_fu_511_md_buf_d0, grp_sha512_update_32_fu_791_md_buf_d0, grp_sha512_update_32_2_fu_972_md_buf_d0, grp_sha512_update_32_1_fu_984_md_buf_d0, ap_CS_fsm_state16, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            hash_buf_d0 <= grp_sha512_update_32_1_fu_984_md_buf_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hash_buf_d0 <= grp_sha512_update_32_2_fu_972_md_buf_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            hash_buf_d0 <= grp_sha512_update_32_fu_791_md_buf_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_buf_d0 <= grp_sha512_final_fu_511_md_buf_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            hash_buf_d0 <= grp_sha512_update_128_fu_510_md_buf_d0;
        else 
            hash_buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    hash_buf_we0_assign_proc : process(ap_CS_fsm_state6, grp_sha512_update_128_fu_510_md_buf_we0, grp_sha512_final_fu_511_md_buf_we0, grp_sha512_update_32_fu_791_md_buf_we0, grp_sha512_update_32_2_fu_972_md_buf_we0, grp_sha512_update_32_1_fu_984_md_buf_we0, ap_CS_fsm_state16, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            hash_buf_we0 <= grp_sha512_update_32_1_fu_984_md_buf_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hash_buf_we0 <= grp_sha512_update_32_2_fu_972_md_buf_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            hash_buf_we0 <= grp_sha512_update_32_fu_791_md_buf_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_buf_we0 <= grp_sha512_final_fu_511_md_buf_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            hash_buf_we0 <= grp_sha512_update_128_fu_510_md_buf_we0;
        else 
            hash_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_buf_we1_assign_proc : process(grp_sha512_final_fu_511_md_buf_we1, ap_CS_fsm_state17, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_buf_we1 <= grp_sha512_final_fu_511_md_buf_we1;
        else 
            hash_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    hash_state_addr_1_reg_1545 <= ap_const_lv64_1(3 - 1 downto 0);
    hash_state_addr_2_reg_1550 <= ap_const_lv64_2(3 - 1 downto 0);
    hash_state_addr_3_reg_1555 <= ap_const_lv64_3(3 - 1 downto 0);
    hash_state_addr_4_reg_1560 <= ap_const_lv64_4(3 - 1 downto 0);
    hash_state_addr_5_reg_1565 <= ap_const_lv64_5(3 - 1 downto 0);
    hash_state_addr_6_reg_1570 <= ap_const_lv64_6(3 - 1 downto 0);
    hash_state_addr_7_reg_1575 <= ap_const_lv64_7(3 - 1 downto 0);
    hash_state_addr_reg_1540 <= ap_const_lv64_0(3 - 1 downto 0);

    hash_state_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, hash_state_addr_reg_1540, hash_state_addr_2_reg_1550, ap_CS_fsm_state2, hash_state_addr_4_reg_1560, ap_CS_fsm_state3, hash_state_addr_6_reg_1570, ap_CS_fsm_state4, ap_CS_fsm_state21, grp_sha512_update_128_fu_510_md_state_address0, grp_sha512_final_fu_511_md_state_address0, grp_sha512_update_32_fu_791_md_state_address0, grp_sha512_update_32_2_fu_972_md_state_address0, grp_sha512_update_32_1_fu_984_md_state_address0, ap_CS_fsm_state16, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            hash_state_address0 <= hash_state_addr_6_reg_1570;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            hash_state_address0 <= hash_state_addr_4_reg_1560;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            hash_state_address0 <= hash_state_addr_2_reg_1550;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hash_state_address0 <= hash_state_addr_reg_1540;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hash_state_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hash_state_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hash_state_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hash_state_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            hash_state_address0 <= grp_sha512_update_32_1_fu_984_md_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hash_state_address0 <= grp_sha512_update_32_2_fu_972_md_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            hash_state_address0 <= grp_sha512_update_32_fu_791_md_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_state_address0 <= grp_sha512_final_fu_511_md_state_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            hash_state_address0 <= grp_sha512_update_128_fu_510_md_state_address0;
        else 
            hash_state_address0 <= "XXX";
        end if; 
    end process;


    hash_state_address1_assign_proc : process(ap_CS_fsm_state1, hash_state_addr_1_reg_1545, ap_CS_fsm_state2, hash_state_addr_3_reg_1555, ap_CS_fsm_state3, hash_state_addr_5_reg_1565, ap_CS_fsm_state4, hash_state_addr_7_reg_1575, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            hash_state_address1 <= hash_state_addr_7_reg_1575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            hash_state_address1 <= hash_state_addr_5_reg_1565;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            hash_state_address1 <= hash_state_addr_3_reg_1555;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hash_state_address1 <= hash_state_addr_1_reg_1545;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hash_state_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hash_state_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hash_state_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hash_state_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            hash_state_address1 <= "XXX";
        end if; 
    end process;


    hash_state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state21, grp_ge_scalarmult_base_fu_579_ap_done, grp_sha512_update_128_fu_510_md_state_ce0, grp_sha512_final_fu_511_md_state_ce0, grp_sha512_update_32_fu_791_md_state_ce0, grp_sha512_update_32_2_fu_972_md_state_ce0, grp_sha512_update_32_1_fu_984_md_state_ce0, grp_sc_reduce_fu_996_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_ge_scalarmult_base_fu_579_ap_done = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sc_reduce_fu_996_ap_done = ap_const_logic_1)))) then 
            hash_state_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            hash_state_ce0 <= grp_sha512_update_32_1_fu_984_md_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hash_state_ce0 <= grp_sha512_update_32_2_fu_972_md_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            hash_state_ce0 <= grp_sha512_update_32_fu_791_md_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_state_ce0 <= grp_sha512_final_fu_511_md_state_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            hash_state_ce0 <= grp_sha512_update_128_fu_510_md_state_ce0;
        else 
            hash_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_state_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state21, grp_ge_scalarmult_base_fu_579_ap_done, grp_sc_reduce_fu_996_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_ge_scalarmult_base_fu_579_ap_done = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sc_reduce_fu_996_ap_done = ap_const_logic_1)))) then 
            hash_state_ce1 <= ap_const_logic_1;
        else 
            hash_state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hash_state_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state21, grp_sha512_update_128_fu_510_md_state_d0, grp_sha512_final_fu_511_md_state_d0, grp_sha512_update_32_fu_791_md_state_d0, grp_sha512_update_32_2_fu_972_md_state_d0, grp_sha512_update_32_1_fu_984_md_state_d0, ap_CS_fsm_state16, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            hash_state_d0 <= ap_const_lv64_1F83D9ABFB41BD6B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            hash_state_d0 <= ap_const_lv64_510E527FADE682D1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            hash_state_d0 <= ap_const_lv64_3C6EF372FE94F82B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            hash_state_d0 <= ap_const_lv64_6A09E667F3BCC908;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            hash_state_d0 <= grp_sha512_update_32_1_fu_984_md_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hash_state_d0 <= grp_sha512_update_32_2_fu_972_md_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            hash_state_d0 <= grp_sha512_update_32_fu_791_md_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_state_d0 <= grp_sha512_final_fu_511_md_state_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            hash_state_d0 <= grp_sha512_update_128_fu_510_md_state_d0;
        else 
            hash_state_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hash_state_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state20, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            hash_state_d1 <= ap_const_lv64_5BE0CD19137E2179;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            hash_state_d1 <= ap_const_lv64_9B05688C2B3E6C1F;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            hash_state_d1 <= ap_const_lv64_A54FF53A5F1D36F1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            hash_state_d1 <= ap_const_lv64_BB67AE8584CAA73B;
        else 
            hash_state_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hash_state_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state21, grp_ge_scalarmult_base_fu_579_ap_done, grp_sha512_update_128_fu_510_md_state_we0, grp_sha512_final_fu_511_md_state_we0, grp_sha512_update_32_fu_791_md_state_we0, grp_sha512_update_32_2_fu_972_md_state_we0, grp_sha512_update_32_1_fu_984_md_state_we0, grp_sc_reduce_fu_996_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state39, ap_CS_fsm_state49, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state20, ap_CS_fsm_state37, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_ge_scalarmult_base_fu_579_ap_done = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sc_reduce_fu_996_ap_done = ap_const_logic_1)))) then 
            hash_state_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            hash_state_we0 <= grp_sha512_update_32_1_fu_984_md_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            hash_state_we0 <= grp_sha512_update_32_2_fu_972_md_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            hash_state_we0 <= grp_sha512_update_32_fu_791_md_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            hash_state_we0 <= grp_sha512_final_fu_511_md_state_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            hash_state_we0 <= grp_sha512_update_128_fu_510_md_state_we0;
        else 
            hash_state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_state_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state21, grp_ge_scalarmult_base_fu_579_ap_done, grp_sc_reduce_fu_996_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_ge_scalarmult_base_fu_579_ap_done = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sc_reduce_fu_996_ap_done = ap_const_logic_1)))) then 
            hash_state_we1 <= ap_const_logic_1;
        else 
            hash_state_we1 <= ap_const_logic_0;
        end if; 
    end process;


    hram_address0_assign_proc : process(grp_sha512_final_fu_511_out_r_address0, grp_sc_muladd_fu_962_a_address0, grp_sc_reduce_fu_996_s_address0, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            hram_address0 <= grp_sc_reduce_fu_996_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            hram_address0 <= grp_sc_muladd_fu_962_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            hram_address0 <= grp_sha512_final_fu_511_out_r_address0;
        else 
            hram_address0 <= "XXXXXX";
        end if; 
    end process;


    hram_ce0_assign_proc : process(grp_sha512_final_fu_511_out_r_ce0, grp_sc_muladd_fu_962_a_ce0, grp_sc_reduce_fu_996_s_ce0, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            hram_ce0 <= grp_sc_reduce_fu_996_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            hram_ce0 <= grp_sc_muladd_fu_962_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            hram_ce0 <= grp_sha512_final_fu_511_out_r_ce0;
        else 
            hram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hram_d0_assign_proc : process(grp_sha512_final_fu_511_out_r_d0, grp_sc_reduce_fu_996_s_d0, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            hram_d0 <= grp_sc_reduce_fu_996_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            hram_d0 <= grp_sha512_final_fu_511_out_r_d0;
        else 
            hram_d0 <= "XXXXXXXX";
        end if; 
    end process;


    hram_we0_assign_proc : process(grp_sha512_final_fu_511_out_r_we0, grp_sc_reduce_fu_996_s_we0, ap_CS_fsm_state50, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            hram_we0 <= grp_sc_reduce_fu_996_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            hram_we0 <= grp_sha512_final_fu_511_out_r_we0;
        else 
            hram_we0 <= ap_const_logic_0;
        end if; 
    end process;


    microblaze_mem_ARADDR_assign_proc : process(ap_CS_fsm_state7, grp_fu_939_p2, ap_CS_fsm_state40, tmp_1240_fu_1060_p1, tmp_1727_fu_1504_p1, ap_reg_ioackin_microblaze_mem_ARREADY)
    begin
        if (((grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_reg_ioackin_microblaze_mem_ARREADY))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                microblaze_mem_ARADDR <= tmp_1727_fu_1504_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                microblaze_mem_ARADDR <= tmp_1240_fu_1060_p1(32 - 1 downto 0);
            else 
                microblaze_mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            microblaze_mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    microblaze_mem_ARVALID_assign_proc : process(ap_CS_fsm_state7, grp_fu_939_p2, ap_CS_fsm_state40, ap_reg_ioackin_microblaze_mem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_reg_ioackin_microblaze_mem_ARREADY)) or ((grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_logic_0 = ap_reg_ioackin_microblaze_mem_ARREADY)))) then 
            microblaze_mem_ARVALID <= ap_const_logic_1;
        else 
            microblaze_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    microblaze_mem_RREADY_assign_proc : process(ap_CS_fsm_state14, grp_fu_949_p2, ap_CS_fsm_state47, microblaze_mem_RVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_949_p2 = ap_const_lv1_0) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID)))) or ((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47) and not(((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_0 = microblaze_mem_RVALID)))))) then 
            microblaze_mem_RREADY <= ap_const_logic_1;
        else 
            microblaze_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    microblaze_mem_blk_n_AR_assign_proc : process(m_axi_microblaze_mem_ARREADY, ap_CS_fsm_state7, grp_fu_939_p2, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fu_939_p2 = ap_const_lv1_1)) or ((grp_fu_939_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then 
            microblaze_mem_blk_n_AR <= m_axi_microblaze_mem_ARREADY;
        else 
            microblaze_mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    microblaze_mem_blk_n_R_assign_proc : process(m_axi_microblaze_mem_RVALID, ap_CS_fsm_state14, grp_fu_949_p2, ap_CS_fsm_state47)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_949_p2 = ap_const_lv1_0)) or ((grp_fu_949_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47)))) then 
            microblaze_mem_blk_n_R <= m_axi_microblaze_mem_RVALID;
        else 
            microblaze_mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    private_key_address0_assign_proc : process(ap_CS_fsm_state6, grp_sc_muladd_fu_962_b_address0, grp_sha512_update_32_2_fu_972_in_r_address0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            private_key_address0 <= grp_sha512_update_32_2_fu_972_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            private_key_address0 <= grp_sc_muladd_fu_962_b_address0;
        else 
            private_key_address0 <= "XXXXXX";
        end if; 
    end process;


    private_key_ce0_assign_proc : process(ap_CS_fsm_state6, grp_sc_muladd_fu_962_b_ce0, grp_sha512_update_32_2_fu_972_in_r_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            private_key_ce0 <= grp_sha512_update_32_2_fu_972_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            private_key_ce0 <= grp_sc_muladd_fu_962_b_ce0;
        else 
            private_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        q_10_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_563_i_i_i_fu_1304_p4),32));

        q_11_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_565_i_i_i_fu_1323_p4),32));

        q_12_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_567_i_i_i_fu_1342_p4),32));

        q_13_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_569_i_i_i_fu_1361_p4),32));

        q_14_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_571_i_i_i_fu_1380_p4),32));

        q_15_fu_1409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_573_i_i_i_fu_1399_p4),32));

        q_16_fu_1428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_575_i_i_i_fu_1418_p4),32));

        q_17_fu_1447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_577_i_i_i_fu_1437_p4),32));

        q_18_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_579_i_i_i_reg_1854),32));

        q_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_561_i_i_i_reg_1849),32));


    r_address0_assign_proc : process(ap_CS_fsm_state21, grp_sha512_final_fu_511_out_r_address0, grp_ge_scalarmult_base_fu_579_a_address0, grp_sc_muladd_fu_962_c_address0, grp_sc_reduce_fu_996_s_address0, ap_CS_fsm_state17, ap_CS_fsm_state54, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            r_address0 <= grp_sc_reduce_fu_996_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            r_address0 <= grp_sc_muladd_fu_962_c_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            r_address0 <= grp_ge_scalarmult_base_fu_579_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_address0 <= grp_sha512_final_fu_511_out_r_address0;
        else 
            r_address0 <= "XXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state21, grp_sha512_final_fu_511_out_r_ce0, grp_ge_scalarmult_base_fu_579_a_ce0, grp_sc_muladd_fu_962_c_ce0, grp_sc_reduce_fu_996_s_ce0, ap_CS_fsm_state17, ap_CS_fsm_state54, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            r_ce0 <= grp_sc_reduce_fu_996_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            r_ce0 <= grp_sc_muladd_fu_962_c_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            r_ce0 <= grp_ge_scalarmult_base_fu_579_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_ce0 <= grp_sha512_final_fu_511_out_r_ce0;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_d0_assign_proc : process(grp_sha512_final_fu_511_out_r_d0, grp_sc_reduce_fu_996_s_d0, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            r_d0 <= grp_sc_reduce_fu_996_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_d0 <= grp_sha512_final_fu_511_out_r_d0;
        else 
            r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    r_we0_assign_proc : process(grp_sha512_final_fu_511_out_r_we0, grp_sc_reduce_fu_996_s_we0, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            r_we0 <= grp_sc_reduce_fu_996_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            r_we0 <= grp_sha512_final_fu_511_out_r_we0;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    s_0_i_i_i_fu_1478_p2 <= (tmp_1724_fu_1466_p3 xor tmp_1725_fu_1474_p1);
    signature_addr_reg_1859 <= ap_const_lv64_1F(6 - 1 downto 0);

    signature_address0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state34, signature_addr_reg_1859, grp_sc_muladd_fu_962_s_address0, grp_sha512_update_32_1_fu_984_in_r_address0, grp_fe_tobytes_1_fu_1001_s_address0, ap_CS_fsm_state54, ap_CS_fsm_state37, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            signature_address0 <= signature_addr_reg_1859;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            signature_address0 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            signature_address0 <= grp_fe_tobytes_1_fu_1001_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            signature_address0 <= grp_sha512_update_32_1_fu_984_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            signature_address0 <= grp_sc_muladd_fu_962_s_address0;
        else 
            signature_address0 <= "XXXXXX";
        end if; 
    end process;


    signature_ce0_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state34, grp_sc_muladd_fu_962_s_ce0, grp_sha512_update_32_1_fu_984_in_r_ce0, grp_fe_tobytes_1_fu_1001_s_ce0, ap_CS_fsm_state54, ap_CS_fsm_state37, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            signature_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            signature_ce0 <= grp_fe_tobytes_1_fu_1001_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            signature_ce0 <= grp_sha512_update_32_1_fu_984_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            signature_ce0 <= grp_sc_muladd_fu_962_s_ce0;
        else 
            signature_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    signature_d0_assign_proc : process(ap_CS_fsm_state25, grp_sc_muladd_fu_962_s_d0, grp_fe_tobytes_1_fu_1001_s_d0, ap_CS_fsm_state54, ap_CS_fsm_state35, tmp_1490_i_fu_1492_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            signature_d0 <= tmp_1490_i_fu_1492_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            signature_d0 <= grp_fe_tobytes_1_fu_1001_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            signature_d0 <= grp_sc_muladd_fu_962_s_d0;
        else 
            signature_d0 <= "XXXXXXXX";
        end if; 
    end process;


    signature_we0_assign_proc : process(ap_CS_fsm_state25, grp_sc_muladd_fu_962_s_we0, grp_fe_tobytes_1_fu_1001_s_we0, ap_CS_fsm_state54, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            signature_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            signature_we0 <= grp_fe_tobytes_1_fu_1001_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            signature_we0 <= grp_sc_muladd_fu_962_s_we0;
        else 
            signature_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_data_address0_assign_proc : process(grp_sha512_update_128_fu_510_in_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state15, ap_CS_fsm_state49, ap_CS_fsm_state48, tmp_1681_fu_1071_p1, tmp_1683_fu_1515_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            temp_data_address0 <= tmp_1683_fu_1515_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_data_address0 <= tmp_1681_fu_1071_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            temp_data_address0 <= grp_sha512_update_128_fu_510_in_r_address0;
        else 
            temp_data_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_data_ce0_assign_proc : process(grp_sha512_update_128_fu_510_in_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state15, ap_CS_fsm_state49, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            temp_data_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            temp_data_ce0 <= grp_sha512_update_128_fu_510_in_r_ce0;
        else 
            temp_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_data_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            temp_data_we0 <= ap_const_logic_1;
        else 
            temp_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1240_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1723_fu_943_p2),64));
    tmp_1489_i_fu_1484_p3 <= (s_0_i_i_i_fu_1478_p2 & ap_const_lv7_0);
    tmp_1490_i_fu_1492_p2 <= (signature_q0 xor tmp_1489_i_fu_1484_p3);
    tmp_1679_fu_1499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_387),64));
    tmp_1681_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_375),64));
    tmp_1683_fu_1515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_398),64));
    tmp_1723_fu_943_p2 <= std_logic_vector(shift_left(unsigned(reg_364),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    tmp_1724_fu_1466_p3 <= grp_fu_410_p2(25 downto 25);
    tmp_1725_fu_1474_p1 <= reg_1043(1 - 1 downto 0);
    tmp_1726_fu_955_p2 <= std_logic_vector(shift_left(unsigned(reg_387),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    tmp_1727_fu_1504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1726_fu_955_p2),64));
    tmp_563_i_i_i_fu_1304_p4 <= reg_387(31 downto 26);
    tmp_565_i_i_i_fu_1323_p4 <= reg_387(31 downto 25);
    tmp_567_i_i_i_fu_1342_p4 <= reg_387(31 downto 26);
    tmp_569_i_i_i_fu_1361_p4 <= reg_387(31 downto 25);
    tmp_571_i_i_i_fu_1380_p4 <= reg_387(31 downto 26);
    tmp_573_i_i_i_fu_1399_p4 <= reg_387(31 downto 25);
    tmp_575_i_i_i_fu_1418_p4 <= reg_387(31 downto 26);
    tmp_577_i_i_i_fu_1437_p4 <= reg_387(31 downto 25);
    tmp_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_364),64));
    tmp_i_i_i_fu_496_p1 <= grp_fe_mul_fu_512_ap_return_9;
    tmp_i_i_i_fu_496_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_13) * signed(tmp_i_i_i_fu_496_p1))), 32));
end behav;
