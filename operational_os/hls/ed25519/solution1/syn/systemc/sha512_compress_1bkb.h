// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __sha512_compress_1bkb_H__
#define __sha512_compress_1bkb_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct sha512_compress_1bkb_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 64;
  static const unsigned AddressRange = 80;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(sha512_compress_1bkb_ram) {
        ram[0] = "0b0100001010001010001011111001100011010111001010001010111000100010";
        ram[1] = "0b0111000100110111010001001001000100100011111011110110010111001101";
        ram[2] = "0b1011010111000000111110111100111111101100010011010011101100101111";
        ram[3] = "0b1110100110110101110110111010010110000001100010011101101110111100";
        ram[4] = "0b0011100101010110110000100101101111110011010010001011010100111000";
        ram[5] = "0b0101100111110001000100011111000110110110000001011101000000011001";
        ram[6] = "0b1001001000111111100000101010010010101111000110010100111110011011";
        ram[7] = "0b1010101100011100010111101101010111011010011011011000000100011000";
        ram[8] = "0b1101100000000111101010101001100010100011000000110000001001000010";
        ram[9] = "0b0001001010000011010110110000000101000101011100000110111110111110";
        ram[10] = "0b0010010000110001100001011011111001001110111001001011001010001100";
        ram[11] = "0b0101010100001100011111011100001111010101111111111011010011100010";
        ram[12] = "0b0111001010111110010111010111010011110010011110111000100101101111";
        ram[13] = "0b1000000011011110101100011111111000111011000101101001011010110001";
        ram[14] = "0b1001101111011100000001101010011100100101110001110001001000110101";
        ram[15] = "0b1100000110011011111100010111010011001111011010010010011010010100";
        ram[16] = "0b1110010010011011011010011100000110011110111100010100101011010010";
        ram[17] = "0b1110111110111110010001111000011000111000010011110010010111100011";
        ram[18] = "0b0000111111000001100111011100011010001011100011001101010110110101";
        ram[19] = "0b0010010000001100101000011100110001110111101011001001110001100101";
        ram[20] = "0b0010110111101001001011000110111101011001001010110000001001110101";
        ram[21] = "0b0100101001110100100001001010101001101110101001101110010010000011";
        ram[22] = "0b0101110010110000101010011101110010111101010000011111101111010100";
        ram[23] = "0b0111011011111001100010001101101010000011000100010101001110110101";
        ram[24] = "0b1001100000111110010100010101001011101110011001101101111110101011";
        ram[25] = "0b1010100000110001110001100110110100101101101101000011001000010000";
        ram[26] = "0b1011000000000011001001111100100010011000111110110010000100111111";
        ram[27] = "0b1011111101011001011111111100011110111110111011110000111011100100";
        ram[28] = "0b1100011011100000000010111111001100111101101010001000111111000010";
        ram[29] = "0b1101010110100111100100010100011110010011000010101010011100100101";
        ram[30] = "0b0000011011001010011000110101000111100000000000111000001001101111";
        ram[31] = "0b0001010000101001001010010110011100001010000011100110111001110000";
        ram[32] = "0b0010011110110111000010101000010101000110110100100010111111111100";
        ram[33] = "0b0010111000011011001000010011100001011100001001101100100100100110";
        ram[34] = "0b0100110100101100011011011111110001011010110001000010101011101101";
        ram[35] = "0b0101001100111000000011010001001110011101100101011011001111011111";
        ram[36] = "0b0110010100001010011100110101010010001011101011110110001111011110";
        ram[37] = "0b0111011001101010000010101011101100111100011101111011001010101000";
        ram[38] = "0b1000000111000010110010010010111001000111111011011010111011100110";
        ram[39] = "0b1001001001110010001011001000010100010100100000100011010100111011";
        ram[40] = "0b1010001010111111111010001010000101001100111100010000001101100100";
        ram[41] = "0b1010100000011010011001100100101110111100010000100011000000000001";
        ram[42] = "0b1100001001001011100010110111000011010000111110001001011110010001";
        ram[43] = "0b1100011101101100010100011010001100000110010101001011111000110000";
        ram[44] = "0b1101000110010010111010000001100111010110111011110101001000011000";
        ram[45] = "0b1101011010011001000001100010010001010101011001011010100100010000";
        ram[46] = "0b1111010000001110001101011000010101010111011100010010000000101010";
        ram[47] = "0b0001000001101010101000000111000000110010101110111101000110111000";
        ram[48] = "0b0001100110100100110000010001011010111000110100101101000011001000";
        ram[49] = "0b0001111000110111011011000000100001010001010000011010101101010011";
        ram[50] = "0b0010011101001000011101110100110011011111100011101110101110011001";
        ram[51] = "0b0011010010110000101111001011010111100001100110110100100010101000";
        ram[52] = "0b0011100100011100000011001011001111000101110010010101101001100011";
        ram[53] = "0b0100111011011000101010100100101011100011010000011000101011001011";
        ram[54] = "0b0101101110011100110010100100111101110111011000111110001101110011";
        ram[55] = "0b0110100000101110011011111111001111010110101100101011100010100011";
        ram[56] = "0b0111010010001111100000101110111001011101111011111011001011111100";
        ram[57] = "0b0111100010100101011000110110111101000011000101110010111101100000";
        ram[58] = "0b1000010011001000011110000001010010100001111100001010101101110010";
        ram[59] = "0b1000110011000111000000100000100000011010011001000011100111101100";
        ram[60] = "0b1001000010111110111111111111101000100011011000110001111000101000";
        ram[61] = "0b1010010001010000011011001110101111011110100000101011110111101001";
        ram[62] = "0b1011111011111001101000111111011110110010110001100111100100010101";
        ram[63] = "0b1100011001110001011110001111001011100011011100100101001100101011";
        ram[64] = "0b1100101000100111001111101100111011101010001001100110000110011100";
        ram[65] = "0b1101000110000110101110001100011100100001110000001100001000000111";
        ram[66] = "0b1110101011011010011111011101011011001101111000001110101100011110";
        ram[67] = "0b1111010101111101010011110111111111101110011011101101000101111000";
        ram[68] = "0b0000011011110000011001111010101001110010000101110110111110111010";
        ram[69] = "0b0000101001100011011111011100010110100010110010001001100010100110";
        ram[70] = "0b0001000100111111100110000000010010111110111110010000110110101110";
        ram[71] = "0b0001101101110001000010110011010100010011000111000100011100011011";
        ram[72] = "0b0010100011011011011101111111010100100011000001000111110110000100";
        ram[73] = "0b0011001011001010101010110111101101000000110001110010010010010011";
        ram[74] = "0b0011110010011110101111100000101000010101110010011011111010111100";
        ram[75] = "0b0100001100011101011001111100010010011100000100000000110101001100";
        ram[76] = "0b0100110011000101110101001011111011001011001111100100001010110110";
        ram[77] = "0b0101100101111111001010011001110011111100011001010111111000101010";
        ram[78] = "0b0101111111001011011011111010101100111010110101101111101011101100";
        ram[79] = "0b0110110001000100000110011000110001001010010001110101100000010111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(sha512_compress_1bkb) {


static const unsigned DataWidth = 64;
static const unsigned AddressRange = 80;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sha512_compress_1bkb_ram* meminst;


SC_CTOR(sha512_compress_1bkb) {
meminst = new sha512_compress_1bkb_ram("sha512_compress_1bkb_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~sha512_compress_1bkb() {
    delete meminst;
}


};//endmodule
#endif
