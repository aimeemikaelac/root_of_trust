// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "update.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic update::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic update::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> update::ap_ST_fsm_state1 = "1";
const sc_lv<9> update::ap_ST_fsm_state2 = "10";
const sc_lv<9> update::ap_ST_fsm_state3 = "100";
const sc_lv<9> update::ap_ST_fsm_state4 = "1000";
const sc_lv<9> update::ap_ST_fsm_state5 = "10000";
const sc_lv<9> update::ap_ST_fsm_state6 = "100000";
const sc_lv<9> update::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> update::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> update::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> update::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> update::ap_const_lv32_1 = "1";
const sc_lv<1> update::ap_const_lv1_0 = "0";
const sc_lv<1> update::ap_const_lv1_1 = "1";
const sc_lv<32> update::ap_const_lv32_4 = "100";
const sc_lv<32> update::ap_const_lv32_5 = "101";
const sc_lv<32> update::ap_const_lv32_6 = "110";
const sc_lv<7> update::ap_const_lv7_0 = "0000000";
const sc_lv<32> update::ap_const_lv32_2 = "10";
const sc_lv<6> update::ap_const_lv6_0 = "000000";
const sc_lv<32> update::ap_const_lv32_7 = "111";
const sc_lv<32> update::ap_const_lv32_3 = "11";
const sc_lv<2> update::ap_const_lv2_1 = "1";
const sc_lv<32> update::ap_const_lv32_40 = "1000000";
const sc_lv<7> update::ap_const_lv7_40 = "1000000";
const sc_lv<7> update::ap_const_lv7_1 = "1";
const sc_lv<32> update::ap_const_lv32_FFFFFFBF = "11111111111111111111111110111111";
const sc_lv<6> update::ap_const_lv6_1 = "1";
const sc_lv<8> update::ap_const_lv8_40 = "1000000";
const sc_lv<32> update::ap_const_lv32_8 = "1000";
const bool update::ap_const_boolean_1 = true;

update::update(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_transform_1_fu_152 = new transform_1("grp_transform_1_fu_152");
    grp_transform_1_fu_152->ap_clk(ap_clk);
    grp_transform_1_fu_152->ap_rst(ap_rst);
    grp_transform_1_fu_152->ap_start(grp_transform_1_fu_152_ap_start);
    grp_transform_1_fu_152->ap_done(grp_transform_1_fu_152_ap_done);
    grp_transform_1_fu_152->ap_idle(grp_transform_1_fu_152_ap_idle);
    grp_transform_1_fu_152->ap_ready(grp_transform_1_fu_152_ap_ready);
    grp_transform_1_fu_152->SHA256_m_h_address0(grp_transform_1_fu_152_SHA256_m_h_address0);
    grp_transform_1_fu_152->SHA256_m_h_ce0(grp_transform_1_fu_152_SHA256_m_h_ce0);
    grp_transform_1_fu_152->SHA256_m_h_we0(grp_transform_1_fu_152_SHA256_m_h_we0);
    grp_transform_1_fu_152->SHA256_m_h_d0(grp_transform_1_fu_152_SHA256_m_h_d0);
    grp_transform_1_fu_152->SHA256_m_h_q0(SHA256_m_h_q0);
    grp_transform_1_fu_152->message_address0(grp_transform_1_fu_152_message_address0);
    grp_transform_1_fu_152->message_ce0(grp_transform_1_fu_152_message_ce0);
    grp_transform_1_fu_152->message_q0(message_q0);
    grp_transform_1_fu_152->message_address1(grp_transform_1_fu_152_message_address1);
    grp_transform_1_fu_152->message_ce1(grp_transform_1_fu_152_message_ce1);
    grp_transform_1_fu_152->message_q1(message_q1);
    grp_transform_1_fu_152->tmp_1(rem_len_reg_372);
    grp_transform_1_fu_152->block_nb(tmp_11_reg_422);
    grp_transform_fu_164 = new transform("grp_transform_fu_164");
    grp_transform_fu_164->ap_clk(ap_clk);
    grp_transform_fu_164->ap_rst(ap_rst);
    grp_transform_fu_164->ap_start(grp_transform_fu_164_ap_start);
    grp_transform_fu_164->ap_done(grp_transform_fu_164_ap_done);
    grp_transform_fu_164->ap_idle(grp_transform_fu_164_ap_idle);
    grp_transform_fu_164->ap_ready(grp_transform_fu_164_ap_ready);
    grp_transform_fu_164->SHA256_m_h_address0(grp_transform_fu_164_SHA256_m_h_address0);
    grp_transform_fu_164->SHA256_m_h_ce0(grp_transform_fu_164_SHA256_m_h_ce0);
    grp_transform_fu_164->SHA256_m_h_we0(grp_transform_fu_164_SHA256_m_h_we0);
    grp_transform_fu_164->SHA256_m_h_d0(grp_transform_fu_164_SHA256_m_h_d0);
    grp_transform_fu_164->SHA256_m_h_q0(SHA256_m_h_q0);
    grp_transform_fu_164->message_address0(grp_transform_fu_164_message_address0);
    grp_transform_fu_164->message_ce0(grp_transform_fu_164_message_ce0);
    grp_transform_fu_164->message_q0(SHA256_m_block_q0);
    grp_transform_fu_164->message_address1(grp_transform_fu_164_message_address1);
    grp_transform_fu_164->message_ce1(grp_transform_fu_164_message_ce1);
    grp_transform_fu_164->message_q1(SHA256_m_block_q1);
    grp_transform_fu_164->block_nb(ap_var_for_const0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_SHA256_m_block_address0);
    sensitive << ( grp_transform_fu_164_message_address0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sum_i_cast_fu_237_p1 );
    sensitive << ( tmp_i3_fu_339_p1 );

    SC_METHOD(thread_SHA256_m_block_address1);
    sensitive << ( grp_transform_fu_164_message_address1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_SHA256_m_block_ce0);
    sensitive << ( grp_transform_fu_164_message_ce0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_SHA256_m_block_ce1);
    sensitive << ( grp_transform_fu_164_message_ce1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_SHA256_m_block_d0);
    sensitive << ( message_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_SHA256_m_block_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_SHA256_m_h_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_transform_1_fu_152_SHA256_m_h_address0 );
    sensitive << ( grp_transform_fu_164_SHA256_m_h_address0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_SHA256_m_h_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_transform_1_fu_152_SHA256_m_h_ce0 );
    sensitive << ( grp_transform_fu_164_SHA256_m_h_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_SHA256_m_h_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_transform_1_fu_152_SHA256_m_h_d0 );
    sensitive << ( grp_transform_fu_164_SHA256_m_h_d0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_SHA256_m_h_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_transform_1_fu_152_SHA256_m_h_we0 );
    sensitive << ( grp_transform_fu_164_SHA256_m_h_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_SHA256_m_len_write_a_1_fu_344_p1);
    sensitive << ( SHA256_m_len_write_a_reg_143 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( SHA256_m_tot_len_reg_134 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( SHA256_m_len_write_a_1_fu_344_p1 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_exitcond_i2_fu_273_p2);
    sensitive << ( rem_len_1_reg_416 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i_i1_reg_122 );

    SC_METHOD(thread_exitcond_i_fu_204_p2);
    sensitive << ( rem_len_reg_372 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_i_reg_111 );

    SC_METHOD(thread_grp_transform_1_fu_152_ap_start);
    sensitive << ( ap_reg_grp_transform_1_fu_152_ap_start );

    SC_METHOD(thread_grp_transform_fu_164_ap_start);
    sensitive << ( ap_reg_grp_transform_fu_164_ap_start );

    SC_METHOD(thread_i_1_fu_278_p2);
    sensitive << ( i_i1_reg_122 );

    SC_METHOD(thread_i_fu_209_p2);
    sensitive << ( i_i_reg_111 );

    SC_METHOD(thread_message_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_transform_1_fu_152_message_address0 );
    sensitive << ( tmp_i_fu_215_p1 );
    sensitive << ( sum3_i_cast_fu_302_p1 );

    SC_METHOD(thread_message_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_transform_1_fu_152_message_address1 );

    SC_METHOD(thread_message_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_transform_1_fu_152_message_ce0 );

    SC_METHOD(thread_message_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_transform_1_fu_152_message_ce1 );

    SC_METHOD(thread_new_len_cast3_fu_259_p1);
    sensitive << ( new_len_reg_411 );

    SC_METHOD(thread_new_len_fu_241_p2);
    sensitive << ( rem_len_reg_372 );

    SC_METHOD(thread_rem_len_1_fu_246_p1);
    sensitive << ( new_len_fu_241_p2 );

    SC_METHOD(thread_rem_len_fu_192_p3);
    sensitive << ( tmp_fu_186_p2 );
    sensitive << ( tmp_1_fu_182_p1 );

    SC_METHOD(thread_sum3_i_cast_fu_302_p1);
    sensitive << ( sum3_i_fu_297_p2 );

    SC_METHOD(thread_sum3_i_fu_297_p2);
    sensitive << ( tmp_3_cast_reg_433 );
    sensitive << ( tmp1_cast_fu_293_p1 );

    SC_METHOD(thread_sum_i_cast_fu_237_p1);
    sensitive << ( sum_i_reg_398 );

    SC_METHOD(thread_sum_i_fu_224_p2);
    sensitive << ( tmp_3_reg_380 );
    sensitive << ( tmp_i_cast_fu_220_p1 );

    SC_METHOD(thread_tmp1_cast_fu_293_p1);
    sensitive << ( tmp1_fu_288_p2 );

    SC_METHOD(thread_tmp1_fu_288_p2);
    sensitive << ( rem_len_reg_372 );
    sensitive << ( tmp_i3_cast_fu_284_p1 );

    SC_METHOD(thread_tmp_1_fu_182_p1);
    sensitive << ( tmp_len_fu_176_p2 );

    SC_METHOD(thread_tmp_2_fu_262_p3);
    sensitive << ( tmp_11_reg_422 );

    SC_METHOD(thread_tmp_3_cast_fu_269_p1);
    sensitive << ( tmp_2_fu_262_p3 );

    SC_METHOD(thread_tmp_3_fu_200_p1);
    sensitive << ( SHA256_m_len_read );

    SC_METHOD(thread_tmp_4_fu_307_p2);
    sensitive << ( new_len_cast3_reg_428 );

    SC_METHOD(thread_tmp_5_cast_fu_330_p1);
    sensitive << ( tmp_5_fu_322_p3 );

    SC_METHOD(thread_tmp_5_fu_322_p3);
    sensitive << ( tmp_7_fu_312_p4 );

    SC_METHOD(thread_tmp_6_fu_334_p2);
    sensitive << ( SHA256_m_tot_len_read );
    sensitive << ( tmp_5_cast_fu_330_p1 );

    SC_METHOD(thread_tmp_7_fu_312_p4);
    sensitive << ( tmp_4_fu_307_p2 );

    SC_METHOD(thread_tmp_8_fu_234_p1);
    sensitive << ( SHA256_m_len_read );

    SC_METHOD(thread_tmp_9_fu_229_p2);
    sensitive << ( SHA256_m_len_read );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_204_p2 );

    SC_METHOD(thread_tmp_fu_186_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_len_fu_176_p2 );

    SC_METHOD(thread_tmp_i3_cast_fu_284_p1);
    sensitive << ( i_i1_reg_122 );

    SC_METHOD(thread_tmp_i3_fu_339_p1);
    sensitive << ( i_i1_reg_122 );

    SC_METHOD(thread_tmp_i_cast_fu_220_p1);
    sensitive << ( i_i_reg_111 );

    SC_METHOD(thread_tmp_i_fu_215_p1);
    sensitive << ( i_i_reg_111 );

    SC_METHOD(thread_tmp_len_fu_176_p2);
    sensitive << ( SHA256_m_len_read );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_204_p2 );
    sensitive << ( tmp_9_fu_229_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_transform_1_fu_152_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond_i2_fu_273_p2 );
    sensitive << ( grp_transform_fu_164_ap_done );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000001";
    ap_reg_grp_transform_1_fu_152_ap_start = SC_LOGIC_0;
    ap_reg_grp_transform_fu_164_ap_start = SC_LOGIC_0;
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "update_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, SHA256_m_tot_len_read, "(port)SHA256_m_tot_len_read");
    sc_trace(mVcdFile, SHA256_m_len_read, "(port)SHA256_m_len_read");
    sc_trace(mVcdFile, SHA256_m_block_address0, "(port)SHA256_m_block_address0");
    sc_trace(mVcdFile, SHA256_m_block_ce0, "(port)SHA256_m_block_ce0");
    sc_trace(mVcdFile, SHA256_m_block_we0, "(port)SHA256_m_block_we0");
    sc_trace(mVcdFile, SHA256_m_block_d0, "(port)SHA256_m_block_d0");
    sc_trace(mVcdFile, SHA256_m_block_q0, "(port)SHA256_m_block_q0");
    sc_trace(mVcdFile, SHA256_m_block_address1, "(port)SHA256_m_block_address1");
    sc_trace(mVcdFile, SHA256_m_block_ce1, "(port)SHA256_m_block_ce1");
    sc_trace(mVcdFile, SHA256_m_block_q1, "(port)SHA256_m_block_q1");
    sc_trace(mVcdFile, SHA256_m_h_address0, "(port)SHA256_m_h_address0");
    sc_trace(mVcdFile, SHA256_m_h_ce0, "(port)SHA256_m_h_ce0");
    sc_trace(mVcdFile, SHA256_m_h_we0, "(port)SHA256_m_h_we0");
    sc_trace(mVcdFile, SHA256_m_h_d0, "(port)SHA256_m_h_d0");
    sc_trace(mVcdFile, SHA256_m_h_q0, "(port)SHA256_m_h_q0");
    sc_trace(mVcdFile, message_address0, "(port)message_address0");
    sc_trace(mVcdFile, message_ce0, "(port)message_ce0");
    sc_trace(mVcdFile, message_q0, "(port)message_q0");
    sc_trace(mVcdFile, message_address1, "(port)message_address1");
    sc_trace(mVcdFile, message_ce1, "(port)message_ce1");
    sc_trace(mVcdFile, message_q1, "(port)message_q1");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, rem_len_fu_192_p3, "rem_len_fu_192_p3");
    sc_trace(mVcdFile, rem_len_reg_372, "rem_len_reg_372");
    sc_trace(mVcdFile, tmp_3_fu_200_p1, "tmp_3_fu_200_p1");
    sc_trace(mVcdFile, tmp_3_reg_380, "tmp_3_reg_380");
    sc_trace(mVcdFile, i_fu_209_p2, "i_fu_209_p2");
    sc_trace(mVcdFile, i_reg_388, "i_reg_388");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_i_fu_204_p2, "exitcond_i_fu_204_p2");
    sc_trace(mVcdFile, sum_i_fu_224_p2, "sum_i_fu_224_p2");
    sc_trace(mVcdFile, sum_i_reg_398, "sum_i_reg_398");
    sc_trace(mVcdFile, tmp_8_fu_234_p1, "tmp_8_fu_234_p1");
    sc_trace(mVcdFile, tmp_9_fu_229_p2, "tmp_9_fu_229_p2");
    sc_trace(mVcdFile, new_len_fu_241_p2, "new_len_fu_241_p2");
    sc_trace(mVcdFile, new_len_reg_411, "new_len_reg_411");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, rem_len_1_fu_246_p1, "rem_len_1_fu_246_p1");
    sc_trace(mVcdFile, rem_len_1_reg_416, "rem_len_1_reg_416");
    sc_trace(mVcdFile, tmp_11_reg_422, "tmp_11_reg_422");
    sc_trace(mVcdFile, new_len_cast3_fu_259_p1, "new_len_cast3_fu_259_p1");
    sc_trace(mVcdFile, new_len_cast3_reg_428, "new_len_cast3_reg_428");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_transform_1_fu_152_ap_done, "grp_transform_1_fu_152_ap_done");
    sc_trace(mVcdFile, tmp_3_cast_fu_269_p1, "tmp_3_cast_fu_269_p1");
    sc_trace(mVcdFile, tmp_3_cast_reg_433, "tmp_3_cast_reg_433");
    sc_trace(mVcdFile, i_1_fu_278_p2, "i_1_fu_278_p2");
    sc_trace(mVcdFile, i_1_reg_441, "i_1_reg_441");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, exitcond_i2_fu_273_p2, "exitcond_i2_fu_273_p2");
    sc_trace(mVcdFile, tmp_6_fu_334_p2, "tmp_6_fu_334_p2");
    sc_trace(mVcdFile, grp_transform_1_fu_152_ap_start, "grp_transform_1_fu_152_ap_start");
    sc_trace(mVcdFile, grp_transform_1_fu_152_ap_idle, "grp_transform_1_fu_152_ap_idle");
    sc_trace(mVcdFile, grp_transform_1_fu_152_ap_ready, "grp_transform_1_fu_152_ap_ready");
    sc_trace(mVcdFile, grp_transform_1_fu_152_SHA256_m_h_address0, "grp_transform_1_fu_152_SHA256_m_h_address0");
    sc_trace(mVcdFile, grp_transform_1_fu_152_SHA256_m_h_ce0, "grp_transform_1_fu_152_SHA256_m_h_ce0");
    sc_trace(mVcdFile, grp_transform_1_fu_152_SHA256_m_h_we0, "grp_transform_1_fu_152_SHA256_m_h_we0");
    sc_trace(mVcdFile, grp_transform_1_fu_152_SHA256_m_h_d0, "grp_transform_1_fu_152_SHA256_m_h_d0");
    sc_trace(mVcdFile, grp_transform_1_fu_152_message_address0, "grp_transform_1_fu_152_message_address0");
    sc_trace(mVcdFile, grp_transform_1_fu_152_message_ce0, "grp_transform_1_fu_152_message_ce0");
    sc_trace(mVcdFile, grp_transform_1_fu_152_message_address1, "grp_transform_1_fu_152_message_address1");
    sc_trace(mVcdFile, grp_transform_1_fu_152_message_ce1, "grp_transform_1_fu_152_message_ce1");
    sc_trace(mVcdFile, grp_transform_fu_164_ap_start, "grp_transform_fu_164_ap_start");
    sc_trace(mVcdFile, grp_transform_fu_164_ap_done, "grp_transform_fu_164_ap_done");
    sc_trace(mVcdFile, grp_transform_fu_164_ap_idle, "grp_transform_fu_164_ap_idle");
    sc_trace(mVcdFile, grp_transform_fu_164_ap_ready, "grp_transform_fu_164_ap_ready");
    sc_trace(mVcdFile, grp_transform_fu_164_SHA256_m_h_address0, "grp_transform_fu_164_SHA256_m_h_address0");
    sc_trace(mVcdFile, grp_transform_fu_164_SHA256_m_h_ce0, "grp_transform_fu_164_SHA256_m_h_ce0");
    sc_trace(mVcdFile, grp_transform_fu_164_SHA256_m_h_we0, "grp_transform_fu_164_SHA256_m_h_we0");
    sc_trace(mVcdFile, grp_transform_fu_164_SHA256_m_h_d0, "grp_transform_fu_164_SHA256_m_h_d0");
    sc_trace(mVcdFile, grp_transform_fu_164_message_address0, "grp_transform_fu_164_message_address0");
    sc_trace(mVcdFile, grp_transform_fu_164_message_ce0, "grp_transform_fu_164_message_ce0");
    sc_trace(mVcdFile, grp_transform_fu_164_message_address1, "grp_transform_fu_164_message_address1");
    sc_trace(mVcdFile, grp_transform_fu_164_message_ce1, "grp_transform_fu_164_message_ce1");
    sc_trace(mVcdFile, i_i_reg_111, "i_i_reg_111");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_i1_reg_122, "i_i1_reg_122");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, SHA256_m_tot_len_reg_134, "SHA256_m_tot_len_reg_134");
    sc_trace(mVcdFile, SHA256_m_len_write_a_reg_143, "SHA256_m_len_write_a_reg_143");
    sc_trace(mVcdFile, ap_reg_grp_transform_1_fu_152_ap_start, "ap_reg_grp_transform_1_fu_152_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_transform_fu_164_ap_start, "ap_reg_grp_transform_fu_164_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_i_fu_215_p1, "tmp_i_fu_215_p1");
    sc_trace(mVcdFile, sum_i_cast_fu_237_p1, "sum_i_cast_fu_237_p1");
    sc_trace(mVcdFile, sum3_i_cast_fu_302_p1, "sum3_i_cast_fu_302_p1");
    sc_trace(mVcdFile, tmp_i3_fu_339_p1, "tmp_i3_fu_339_p1");
    sc_trace(mVcdFile, tmp_len_fu_176_p2, "tmp_len_fu_176_p2");
    sc_trace(mVcdFile, tmp_fu_186_p2, "tmp_fu_186_p2");
    sc_trace(mVcdFile, tmp_1_fu_182_p1, "tmp_1_fu_182_p1");
    sc_trace(mVcdFile, tmp_i_cast_fu_220_p1, "tmp_i_cast_fu_220_p1");
    sc_trace(mVcdFile, tmp_2_fu_262_p3, "tmp_2_fu_262_p3");
    sc_trace(mVcdFile, tmp_i3_cast_fu_284_p1, "tmp_i3_cast_fu_284_p1");
    sc_trace(mVcdFile, tmp1_fu_288_p2, "tmp1_fu_288_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_293_p1, "tmp1_cast_fu_293_p1");
    sc_trace(mVcdFile, sum3_i_fu_297_p2, "sum3_i_fu_297_p2");
    sc_trace(mVcdFile, tmp_4_fu_307_p2, "tmp_4_fu_307_p2");
    sc_trace(mVcdFile, tmp_7_fu_312_p4, "tmp_7_fu_312_p4");
    sc_trace(mVcdFile, tmp_5_fu_322_p3, "tmp_5_fu_322_p3");
    sc_trace(mVcdFile, tmp_5_cast_fu_330_p1, "tmp_5_cast_fu_330_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, SHA256_m_len_write_a_1_fu_344_p1, "SHA256_m_len_write_a_1_fu_344_p1");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

update::~update() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_transform_1_fu_152;
    delete grp_transform_fu_164;
}

void update::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv2_1;
}

void update::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i2_fu_273_p2.read()))) {
        SHA256_m_len_write_a_reg_143 = rem_len_1_reg_416.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond_i_fu_204_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_fu_229_p2.read()))) {
        SHA256_m_len_write_a_reg_143 = tmp_8_fu_234_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i2_fu_273_p2.read()))) {
        SHA256_m_tot_len_reg_134 = tmp_6_fu_334_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond_i_fu_204_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_fu_229_p2.read()))) {
        SHA256_m_tot_len_reg_134 = SHA256_m_tot_len_read.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_transform_1_fu_152_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_reg_grp_transform_1_fu_152_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_transform_1_fu_152_ap_ready.read())) {
            ap_reg_grp_transform_1_fu_152_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_transform_fu_164_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(exitcond_i_fu_204_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_229_p2.read()))) {
            ap_reg_grp_transform_fu_164_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_transform_fu_164_ap_ready.read())) {
            ap_reg_grp_transform_fu_164_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_0_preg = SHA256_m_tot_len_reg_134.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_return_1_preg = SHA256_m_len_write_a_1_fu_344_p1.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_i1_reg_122 = i_1_reg_441.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(grp_transform_1_fu_152_ap_done.read(), ap_const_logic_1))) {
        i_i1_reg_122 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_i_reg_111 = i_reg_388.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_i_reg_111 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_1_reg_441 = i_1_fu_278_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_388 = i_fu_209_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_transform_1_fu_152_ap_done.read(), ap_const_logic_1))) {
        new_len_cast3_reg_428 = new_len_cast3_fu_259_p1.read();
        tmp_3_cast_reg_433 = tmp_3_cast_fu_269_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        new_len_reg_411 = new_len_fu_241_p2.read();
        rem_len_1_reg_416 = rem_len_1_fu_246_p1.read();
        tmp_11_reg_422 = new_len_fu_241_p2.read().range(6, 6);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        rem_len_reg_372 = rem_len_fu_192_p3.read();
        tmp_3_reg_380 = tmp_3_fu_200_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_i_fu_204_p2.read(), ap_const_lv1_0))) {
        sum_i_reg_398 = sum_i_fu_224_p2.read();
    }
}

void update::thread_SHA256_m_block_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        SHA256_m_block_address0 =  (sc_lv<7>) (tmp_i3_fu_339_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        SHA256_m_block_address0 =  (sc_lv<7>) (sum_i_cast_fu_237_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SHA256_m_block_address0 = grp_transform_fu_164_message_address0.read();
    } else {
        SHA256_m_block_address0 = "XXXXXXX";
    }
}

void update::thread_SHA256_m_block_address1() {
    SHA256_m_block_address1 = grp_transform_fu_164_message_address1.read();
}

void update::thread_SHA256_m_block_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        SHA256_m_block_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SHA256_m_block_ce0 = grp_transform_fu_164_message_ce0.read();
    } else {
        SHA256_m_block_ce0 = ap_const_logic_0;
    }
}

void update::thread_SHA256_m_block_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SHA256_m_block_ce1 = grp_transform_fu_164_message_ce1.read();
    } else {
        SHA256_m_block_ce1 = ap_const_logic_0;
    }
}

void update::thread_SHA256_m_block_d0() {
    SHA256_m_block_d0 = message_q0.read();
}

void update::thread_SHA256_m_block_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        SHA256_m_block_we0 = ap_const_logic_1;
    } else {
        SHA256_m_block_we0 = ap_const_logic_0;
    }
}

void update::thread_SHA256_m_h_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SHA256_m_h_address0 = grp_transform_fu_164_SHA256_m_h_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        SHA256_m_h_address0 = grp_transform_1_fu_152_SHA256_m_h_address0.read();
    } else {
        SHA256_m_h_address0 =  (sc_lv<3>) ("XXX");
    }
}

void update::thread_SHA256_m_h_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SHA256_m_h_ce0 = grp_transform_fu_164_SHA256_m_h_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        SHA256_m_h_ce0 = grp_transform_1_fu_152_SHA256_m_h_ce0.read();
    } else {
        SHA256_m_h_ce0 = ap_const_logic_0;
    }
}

void update::thread_SHA256_m_h_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SHA256_m_h_d0 = grp_transform_fu_164_SHA256_m_h_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        SHA256_m_h_d0 = grp_transform_1_fu_152_SHA256_m_h_d0.read();
    } else {
        SHA256_m_h_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void update::thread_SHA256_m_h_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        SHA256_m_h_we0 = grp_transform_fu_164_SHA256_m_h_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        SHA256_m_h_we0 = grp_transform_1_fu_152_SHA256_m_h_we0.read();
    } else {
        SHA256_m_h_we0 = ap_const_logic_0;
    }
}

void update::thread_SHA256_m_len_write_a_1_fu_344_p1() {
    SHA256_m_len_write_a_1_fu_344_p1 = esl_zext<32,6>(SHA256_m_len_write_a_reg_143.read());
}

void update::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void update::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void update::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void update::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void update::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void update::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void update::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void update::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void update::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void update::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void update::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void update::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void update::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_0 = SHA256_m_tot_len_reg_134.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void update::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ap_return_1 = SHA256_m_len_write_a_1_fu_344_p1.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void update::thread_exitcond_i2_fu_273_p2() {
    exitcond_i2_fu_273_p2 = (!i_i1_reg_122.read().is_01() || !rem_len_1_reg_416.read().is_01())? sc_lv<1>(): sc_lv<1>(i_i1_reg_122.read() == rem_len_1_reg_416.read());
}

void update::thread_exitcond_i_fu_204_p2() {
    exitcond_i_fu_204_p2 = (!i_i_reg_111.read().is_01() || !rem_len_reg_372.read().is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_111.read() == rem_len_reg_372.read());
}

void update::thread_grp_transform_1_fu_152_ap_start() {
    grp_transform_1_fu_152_ap_start = ap_reg_grp_transform_1_fu_152_ap_start.read();
}

void update::thread_grp_transform_fu_164_ap_start() {
    grp_transform_fu_164_ap_start = ap_reg_grp_transform_fu_164_ap_start.read();
}

void update::thread_i_1_fu_278_p2() {
    i_1_fu_278_p2 = (!i_i1_reg_122.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_i1_reg_122.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void update::thread_i_fu_209_p2() {
    i_fu_209_p2 = (!i_i_reg_111.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_i_reg_111.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void update::thread_message_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        message_address0 =  (sc_lv<6>) (sum3_i_cast_fu_302_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        message_address0 =  (sc_lv<6>) (tmp_i_fu_215_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        message_address0 = grp_transform_1_fu_152_message_address0.read();
    } else {
        message_address0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void update::thread_message_address1() {
    message_address1 = grp_transform_1_fu_152_message_address1.read();
}

void update::thread_message_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        message_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        message_ce0 = grp_transform_1_fu_152_message_ce0.read();
    } else {
        message_ce0 = ap_const_logic_0;
    }
}

void update::thread_message_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        message_ce1 = grp_transform_1_fu_152_message_ce1.read();
    } else {
        message_ce1 = ap_const_logic_0;
    }
}

void update::thread_new_len_cast3_fu_259_p1() {
    new_len_cast3_fu_259_p1 = esl_zext<8,7>(new_len_reg_411.read());
}

void update::thread_new_len_fu_241_p2() {
    new_len_fu_241_p2 = (!ap_const_lv7_40.is_01() || !rem_len_reg_372.read().is_01())? sc_lv<7>(): (sc_bigint<7>(ap_const_lv7_40) - sc_biguint<7>(rem_len_reg_372.read()));
}

void update::thread_rem_len_1_fu_246_p1() {
    rem_len_1_fu_246_p1 = new_len_fu_241_p2.read().range(6-1, 0);
}

void update::thread_rem_len_fu_192_p3() {
    rem_len_fu_192_p3 = (!tmp_fu_186_p2.read()[0].is_01())? sc_lv<7>(): ((tmp_fu_186_p2.read()[0].to_bool())? ap_const_lv7_40: tmp_1_fu_182_p1.read());
}

void update::thread_sum3_i_cast_fu_302_p1() {
    sum3_i_cast_fu_302_p1 = esl_zext<64,8>(sum3_i_fu_297_p2.read());
}

void update::thread_sum3_i_fu_297_p2() {
    sum3_i_fu_297_p2 = (!tmp1_cast_fu_293_p1.read().is_01() || !tmp_3_cast_reg_433.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp1_cast_fu_293_p1.read()) + sc_biguint<8>(tmp_3_cast_reg_433.read()));
}

void update::thread_sum_i_cast_fu_237_p1() {
    sum_i_cast_fu_237_p1 = esl_zext<64,9>(sum_i_reg_398.read());
}

void update::thread_sum_i_fu_224_p2() {
    sum_i_fu_224_p2 = (!tmp_3_reg_380.read().is_01() || !tmp_i_cast_fu_220_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_3_reg_380.read()) + sc_biguint<9>(tmp_i_cast_fu_220_p1.read()));
}

void update::thread_tmp1_cast_fu_293_p1() {
    tmp1_cast_fu_293_p1 = esl_zext<8,7>(tmp1_fu_288_p2.read());
}

void update::thread_tmp1_fu_288_p2() {
    tmp1_fu_288_p2 = (!rem_len_reg_372.read().is_01() || !tmp_i3_cast_fu_284_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(rem_len_reg_372.read()) + sc_biguint<7>(tmp_i3_cast_fu_284_p1.read()));
}

void update::thread_tmp_1_fu_182_p1() {
    tmp_1_fu_182_p1 = tmp_len_fu_176_p2.read().range(7-1, 0);
}

void update::thread_tmp_2_fu_262_p3() {
    tmp_2_fu_262_p3 = esl_concat<1,6>(tmp_11_reg_422.read(), ap_const_lv6_0);
}

void update::thread_tmp_3_cast_fu_269_p1() {
    tmp_3_cast_fu_269_p1 = esl_zext<8,7>(tmp_2_fu_262_p3.read());
}

void update::thread_tmp_3_fu_200_p1() {
    tmp_3_fu_200_p1 = SHA256_m_len_read.read().range(9-1, 0);
}

void update::thread_tmp_4_fu_307_p2() {
    tmp_4_fu_307_p2 = (!new_len_cast3_reg_428.read().is_01() || !ap_const_lv8_40.is_01())? sc_lv<8>(): (sc_biguint<8>(new_len_cast3_reg_428.read()) + sc_biguint<8>(ap_const_lv8_40));
}

void update::thread_tmp_5_cast_fu_330_p1() {
    tmp_5_cast_fu_330_p1 = esl_zext<32,8>(tmp_5_fu_322_p3.read());
}

void update::thread_tmp_5_fu_322_p3() {
    tmp_5_fu_322_p3 = esl_concat<2,6>(tmp_7_fu_312_p4.read(), ap_const_lv6_0);
}

void update::thread_tmp_6_fu_334_p2() {
    tmp_6_fu_334_p2 = (!tmp_5_cast_fu_330_p1.read().is_01() || !SHA256_m_tot_len_read.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_5_cast_fu_330_p1.read()) + sc_biguint<32>(SHA256_m_tot_len_read.read()));
}

void update::thread_tmp_7_fu_312_p4() {
    tmp_7_fu_312_p4 = tmp_4_fu_307_p2.read().range(7, 6);
}

void update::thread_tmp_8_fu_234_p1() {
    tmp_8_fu_234_p1 = SHA256_m_len_read.read().range(6-1, 0);
}

void update::thread_tmp_9_fu_229_p2() {
    tmp_9_fu_229_p2 = (!SHA256_m_len_read.read().is_01() || !ap_const_lv32_FFFFFFBF.is_01())? sc_lv<1>(): (sc_biguint<32>(SHA256_m_len_read.read()) > sc_biguint<32>(ap_const_lv32_FFFFFFBF));
}

void update::thread_tmp_fu_186_p2() {
    tmp_fu_186_p2 = (!tmp_len_fu_176_p2.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<1>(): (sc_biguint<32>(tmp_len_fu_176_p2.read()) > sc_biguint<32>(ap_const_lv32_40));
}

void update::thread_tmp_i3_cast_fu_284_p1() {
    tmp_i3_cast_fu_284_p1 = esl_zext<7,6>(i_i1_reg_122.read());
}

void update::thread_tmp_i3_fu_339_p1() {
    tmp_i3_fu_339_p1 = esl_zext<64,6>(i_i1_reg_122.read());
}

void update::thread_tmp_i_cast_fu_220_p1() {
    tmp_i_cast_fu_220_p1 = esl_zext<9,7>(i_i_reg_111.read());
}

void update::thread_tmp_i_fu_215_p1() {
    tmp_i_fu_215_p1 = esl_zext<64,7>(i_i_reg_111.read());
}

void update::thread_tmp_len_fu_176_p2() {
    tmp_len_fu_176_p2 = (!ap_const_lv32_40.is_01() || !SHA256_m_len_read.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_40) - sc_biguint<32>(SHA256_m_len_read.read()));
}

void update::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_i_fu_204_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_fu_229_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_i_fu_204_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_9_fu_229_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_transform_fu_164_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_transform_1_fu_152_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i2_fu_273_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

