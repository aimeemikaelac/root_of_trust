-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity secure_enclave is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    key_out_V : OUT STD_LOGIC_VECTOR (127 downto 0);
    key_out_V_ap_vld : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of secure_enclave is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "secure_enclave,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i-es2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.134000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=640,HLS_SYN_LUT=1108}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal secure_storage_in_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal secure_storage_in_V_ce0 : STD_LOGIC;
    signal secure_storage_in_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal pin_attempt_V : STD_LOGIC_VECTOR (127 downto 0);
    signal pin_attempt_V_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal pin_attempt_V_ap_vld : STD_LOGIC;
    signal pin_attempt_V_in_sig : STD_LOGIC_VECTOR (127 downto 0);
    signal pin_attempt_V_ap_vld_preg : STD_LOGIC := '0';
    signal pin_attempt_V_ap_vld_in_sig : STD_LOGIC;
    signal counter_in : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_in_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal counter_in_ap_vld : STD_LOGIC;
    signal counter_in_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_in_ap_vld_preg : STD_LOGIC := '0';
    signal counter_in_ap_vld_in_sig : STD_LOGIC;
    signal increment_counter : STD_LOGIC_VECTOR (31 downto 0);
    signal increment_counter_ap_vld : STD_LOGIC;
    signal reset_counter : STD_LOGIC_VECTOR (31 downto 0);
    signal reset_counter_ap_vld : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal pin_attempt_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal counter_in_blk_n : STD_LOGIC;
    signal p_s_phi_fu_119_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_condition_118 : BOOLEAN;

    component secure_enclave_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        secure_storage_in_V_address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        secure_storage_in_V_ce0 : IN STD_LOGIC;
        secure_storage_in_V_q0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        pin_attempt_V : OUT STD_LOGIC_VECTOR (127 downto 0);
        pin_attempt_V_ap_vld : OUT STD_LOGIC;
        counter_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        counter_in_ap_vld : OUT STD_LOGIC;
        increment_counter : IN STD_LOGIC_VECTOR (31 downto 0);
        increment_counter_ap_vld : IN STD_LOGIC;
        reset_counter : IN STD_LOGIC_VECTOR (31 downto 0);
        reset_counter_ap_vld : IN STD_LOGIC );
    end component;



begin
    secure_enclave_AXILiteS_s_axi_U : component secure_enclave_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        secure_storage_in_V_address0 => secure_storage_in_V_address0,
        secure_storage_in_V_ce0 => secure_storage_in_V_ce0,
        secure_storage_in_V_q0 => secure_storage_in_V_q0,
        pin_attempt_V => pin_attempt_V,
        pin_attempt_V_ap_vld => pin_attempt_V_ap_vld,
        counter_in => counter_in,
        counter_in_ap_vld => counter_in_ap_vld,
        increment_counter => increment_counter,
        increment_counter_ap_vld => increment_counter_ap_vld,
        reset_counter => reset_counter,
        reset_counter_ap_vld => reset_counter_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    counter_in_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                counter_in_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))))) then 
                    counter_in_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) and (ap_const_logic_1 = counter_in_ap_vld))) then 
                    counter_in_ap_vld_preg <= counter_in_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    counter_in_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                counter_in_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) and (ap_const_logic_1 = counter_in_ap_vld))) then 
                    counter_in_preg <= counter_in;
                end if; 
            end if;
        end if;
    end process;


    pin_attempt_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pin_attempt_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))))) then 
                    pin_attempt_V_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = pin_attempt_V_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))))) then 
                    pin_attempt_V_ap_vld_preg <= pin_attempt_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    pin_attempt_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                pin_attempt_V_preg <= ap_const_lv128_lc_1;
            else
                if (((ap_const_logic_1 = pin_attempt_V_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))))) then 
                    pin_attempt_V_preg <= pin_attempt_V;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, pin_attempt_V_ap_vld_in_sig, counter_in_ap_vld_in_sig)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);

    ap_condition_118_assign_proc : process(pin_attempt_V_ap_vld_in_sig, counter_in_ap_vld_in_sig, ap_CS_fsm_state2)
    begin
                ap_condition_118 <= ((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))));
    end process;


    ap_done_assign_proc : process(pin_attempt_V_ap_vld_in_sig, counter_in_ap_vld_in_sig, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(pin_attempt_V_ap_vld_in_sig, counter_in_ap_vld_in_sig, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(resize(unsigned(p_s_phi_fu_119_p4),32));

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    counter_in_ap_vld_in_sig_assign_proc : process(counter_in_ap_vld, counter_in_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = counter_in_ap_vld)) then 
            counter_in_ap_vld_in_sig <= counter_in_ap_vld;
        else 
            counter_in_ap_vld_in_sig <= counter_in_ap_vld_preg;
        end if; 
    end process;


    counter_in_blk_n_assign_proc : process(counter_in_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            counter_in_blk_n <= counter_in_ap_vld;
        else 
            counter_in_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    counter_in_in_sig_assign_proc : process(counter_in, counter_in_preg, counter_in_ap_vld)
    begin
        if ((ap_const_logic_1 = counter_in_ap_vld)) then 
            counter_in_in_sig <= counter_in;
        else 
            counter_in_in_sig <= counter_in_preg;
        end if; 
    end process;


    increment_counter_assign_proc : process(or_cond_fu_139_p2, ap_condition_118)
    begin
        if ((ap_condition_118 = ap_const_boolean_1)) then
            if (not((or_cond_fu_139_p2 = ap_const_lv1_0))) then 
                increment_counter <= ap_const_lv32_0;
            elsif ((or_cond_fu_139_p2 = ap_const_lv1_0)) then 
                increment_counter <= ap_const_lv32_1;
            else 
                increment_counter <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            increment_counter <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    increment_counter_ap_vld_assign_proc : process(pin_attempt_V_ap_vld_in_sig, counter_in_ap_vld_in_sig, ap_CS_fsm_state2, or_cond_fu_139_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))) and not((or_cond_fu_139_p2 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))) and (or_cond_fu_139_p2 = ap_const_lv1_0)))) then 
            increment_counter_ap_vld <= ap_const_logic_1;
        else 
            increment_counter_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    key_out_V_assign_proc : process(pin_attempt_V_in_sig, or_cond_fu_139_p2, ap_condition_118)
    begin
        if ((ap_condition_118 = ap_const_boolean_1)) then
            if (not((or_cond_fu_139_p2 = ap_const_lv1_0))) then 
                key_out_V <= pin_attempt_V_in_sig;
            elsif ((or_cond_fu_139_p2 = ap_const_lv1_0)) then 
                key_out_V <= ap_const_lv128_lc_1;
            else 
                key_out_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            key_out_V <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    key_out_V_ap_vld_assign_proc : process(pin_attempt_V_ap_vld_in_sig, counter_in_ap_vld_in_sig, ap_CS_fsm_state2, or_cond_fu_139_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))) and not((or_cond_fu_139_p2 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))) and (or_cond_fu_139_p2 = ap_const_lv1_0)))) then 
            key_out_V_ap_vld <= ap_const_logic_1;
        else 
            key_out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_139_p2 <= (tmp_fu_127_p2 and tmp_1_fu_133_p2);

    p_s_phi_fu_119_p4_assign_proc : process(ap_CS_fsm_state2, or_cond_fu_139_p2)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
            if ((or_cond_fu_139_p2 = ap_const_lv1_0)) then 
                p_s_phi_fu_119_p4 <= ap_const_lv1_0;
            elsif (not((or_cond_fu_139_p2 = ap_const_lv1_0))) then 
                p_s_phi_fu_119_p4 <= ap_const_lv1_1;
            else 
                p_s_phi_fu_119_p4 <= "X";
            end if;
        else 
            p_s_phi_fu_119_p4 <= "X";
        end if; 
    end process;


    pin_attempt_V_ap_vld_in_sig_assign_proc : process(pin_attempt_V_ap_vld, pin_attempt_V_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = pin_attempt_V_ap_vld)) then 
            pin_attempt_V_ap_vld_in_sig <= pin_attempt_V_ap_vld;
        else 
            pin_attempt_V_ap_vld_in_sig <= pin_attempt_V_ap_vld_preg;
        end if; 
    end process;


    pin_attempt_V_blk_n_assign_proc : process(pin_attempt_V_ap_vld, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            pin_attempt_V_blk_n <= pin_attempt_V_ap_vld;
        else 
            pin_attempt_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pin_attempt_V_in_sig_assign_proc : process(pin_attempt_V, pin_attempt_V_preg, pin_attempt_V_ap_vld)
    begin
        if ((ap_const_logic_1 = pin_attempt_V_ap_vld)) then 
            pin_attempt_V_in_sig <= pin_attempt_V;
        else 
            pin_attempt_V_in_sig <= pin_attempt_V_preg;
        end if; 
    end process;


    reset_counter_assign_proc : process(or_cond_fu_139_p2, ap_condition_118)
    begin
        if ((ap_condition_118 = ap_const_boolean_1)) then
            if (not((or_cond_fu_139_p2 = ap_const_lv1_0))) then 
                reset_counter <= ap_const_lv32_1;
            elsif ((or_cond_fu_139_p2 = ap_const_lv1_0)) then 
                reset_counter <= ap_const_lv32_0;
            else 
                reset_counter <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            reset_counter <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    reset_counter_ap_vld_assign_proc : process(pin_attempt_V_ap_vld_in_sig, counter_in_ap_vld_in_sig, ap_CS_fsm_state2, or_cond_fu_139_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))) and not((or_cond_fu_139_p2 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((counter_in_ap_vld_in_sig = ap_const_logic_0) or (pin_attempt_V_ap_vld_in_sig = ap_const_logic_0))) and (or_cond_fu_139_p2 = ap_const_lv1_0)))) then 
            reset_counter_ap_vld <= ap_const_logic_1;
        else 
            reset_counter_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    secure_storage_in_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    secure_storage_in_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            secure_storage_in_V_ce0 <= ap_const_logic_1;
        else 
            secure_storage_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_133_p2 <= "1" when (secure_storage_in_V_q0 = pin_attempt_V_in_sig) else "0";
    tmp_fu_127_p2 <= "1" when (unsigned(counter_in_in_sig) < unsigned(ap_const_lv32_5)) else "0";
end behav;
