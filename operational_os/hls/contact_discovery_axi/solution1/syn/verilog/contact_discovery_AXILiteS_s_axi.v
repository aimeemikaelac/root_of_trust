// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module contact_discovery_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 11,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    output wire [31:0]                   operation,
    output wire                          operation_ap_vld,
    input  wire [5:0]                    contact_in_address0,
    input  wire                          contact_in_ce0,
    output wire [7:0]                    contact_in_q0,
    input  wire [5:0]                    database_in_address0,
    input  wire                          database_in_ce0,
    output wire [7:0]                    database_in_q0,
    input  wire [8:0]                    matched_out_address0,
    input  wire                          matched_out_ce0,
    input  wire                          matched_out_we0,
    input  wire [0:0]                    matched_out_d0,
    input  wire [31:0]                   matched_finished,
    input  wire [31:0]                   error_out,
    input  wire [31:0]                   database_size_out,
    input  wire [31:0]                   contacts_size_out
);
//------------------------Address Info-------------------
// 0x000 : Control signals
//         bit 0  - ap_start (Read/Write/COH)
//         bit 1  - ap_done (Read/COR)
//         bit 2  - ap_idle (Read)
//         bit 3  - ap_ready (Read)
//         bit 7  - auto_restart (Read/Write)
//         others - reserved
// 0x004 : Global Interrupt Enable Register
//         bit 0  - Global Interrupt Enable (Read/Write)
//         others - reserved
// 0x008 : IP Interrupt Enable Register (Read/Write)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x00c : IP Interrupt Status Register (Read/TOW)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x010 : Data signal of operation
//         bit 31~0 - operation[31:0] (Read/Write)
// 0x014 : Control signal of operation
//         bit 0  - operation_ap_vld (Read/Write/SC)
//         others - reserved
// 0x400 : Data signal of matched_finished
//         bit 31~0 - matched_finished[31:0] (Read)
// 0x404 : reserved
// 0x408 : Data signal of error_out
//         bit 31~0 - error_out[31:0] (Read)
// 0x40c : reserved
// 0x410 : Data signal of database_size_out
//         bit 31~0 - database_size_out[31:0] (Read)
// 0x414 : reserved
// 0x418 : Data signal of contacts_size_out
//         bit 31~0 - contacts_size_out[31:0] (Read)
// 0x41c : reserved
// 0x040 ~
// 0x07f : Memory 'contact_in' (64 * 8b)
//         Word n : bit [ 7: 0] - contact_in[4n]
//                  bit [15: 8] - contact_in[4n+1]
//                  bit [23:16] - contact_in[4n+2]
//                  bit [31:24] - contact_in[4n+3]
// 0x080 ~
// 0x0bf : Memory 'database_in' (64 * 8b)
//         Word n : bit [ 7: 0] - database_in[4n]
//                  bit [15: 8] - database_in[4n+1]
//                  bit [23:16] - database_in[4n+2]
//                  bit [31:24] - database_in[4n+3]
// 0x200 ~
// 0x3ff : Memory 'matched_out' (300 * 1b)
//         Word n : bit [ 0: 0] - matched_out[4n]
//                  bit [ 8: 8] - matched_out[4n+1]
//                  bit [16:16] - matched_out[4n+2]
//                  bit [24:24] - matched_out[4n+3]
//                  others      - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                  = 11'h000,
    ADDR_GIE                      = 11'h004,
    ADDR_IER                      = 11'h008,
    ADDR_ISR                      = 11'h00c,
    ADDR_OPERATION_DATA_0         = 11'h010,
    ADDR_OPERATION_CTRL           = 11'h014,
    ADDR_MATCHED_FINISHED_DATA_0  = 11'h400,
    ADDR_MATCHED_FINISHED_CTRL    = 11'h404,
    ADDR_ERROR_OUT_DATA_0         = 11'h408,
    ADDR_ERROR_OUT_CTRL           = 11'h40c,
    ADDR_DATABASE_SIZE_OUT_DATA_0 = 11'h410,
    ADDR_DATABASE_SIZE_OUT_CTRL   = 11'h414,
    ADDR_CONTACTS_SIZE_OUT_DATA_0 = 11'h418,
    ADDR_CONTACTS_SIZE_OUT_CTRL   = 11'h41c,
    ADDR_CONTACT_IN_BASE          = 11'h040,
    ADDR_CONTACT_IN_HIGH          = 11'h07f,
    ADDR_DATABASE_IN_BASE         = 11'h080,
    ADDR_DATABASE_IN_HIGH         = 11'h0bf,
    ADDR_MATCHED_OUT_BASE         = 11'h200,
    ADDR_MATCHED_OUT_HIGH         = 11'h3ff,
    WRIDLE                        = 2'd0,
    WRDATA                        = 2'd1,
    WRRESP                        = 2'd2,
    WRRESET                       = 2'd3,
    RDIDLE                        = 2'd0,
    RDDATA                        = 2'd1,
    RDRESET                       = 2'd2,
    ADDR_BITS         = 11;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [31:0]                   int_operation = 'b0;
    reg                           int_operation_ap_vld = 1'b0;
    reg  [31:0]                   int_matched_finished = 'b0;
    reg  [31:0]                   int_error_out = 'b0;
    reg  [31:0]                   int_database_size_out = 'b0;
    reg  [31:0]                   int_contacts_size_out = 'b0;
    // memory signals
    wire [3:0]                    int_contact_in_address0;
    wire                          int_contact_in_ce0;
    wire                          int_contact_in_we0;
    wire [3:0]                    int_contact_in_be0;
    wire [31:0]                   int_contact_in_d0;
    wire [31:0]                   int_contact_in_q0;
    wire [3:0]                    int_contact_in_address1;
    wire                          int_contact_in_ce1;
    wire                          int_contact_in_we1;
    wire [3:0]                    int_contact_in_be1;
    wire [31:0]                   int_contact_in_d1;
    wire [31:0]                   int_contact_in_q1;
    reg                           int_contact_in_read;
    reg                           int_contact_in_write;
    reg  [1:0]                    int_contact_in_shift;
    wire [3:0]                    int_database_in_address0;
    wire                          int_database_in_ce0;
    wire                          int_database_in_we0;
    wire [3:0]                    int_database_in_be0;
    wire [31:0]                   int_database_in_d0;
    wire [31:0]                   int_database_in_q0;
    wire [3:0]                    int_database_in_address1;
    wire                          int_database_in_ce1;
    wire                          int_database_in_we1;
    wire [3:0]                    int_database_in_be1;
    wire [31:0]                   int_database_in_d1;
    wire [31:0]                   int_database_in_q1;
    reg                           int_database_in_read;
    reg                           int_database_in_write;
    reg  [1:0]                    int_database_in_shift;
    wire [6:0]                    int_matched_out_address0;
    wire                          int_matched_out_ce0;
    wire                          int_matched_out_we0;
    wire [3:0]                    int_matched_out_be0;
    wire [31:0]                   int_matched_out_d0;
    wire [31:0]                   int_matched_out_q0;
    wire [6:0]                    int_matched_out_address1;
    wire                          int_matched_out_ce1;
    wire                          int_matched_out_we1;
    wire [3:0]                    int_matched_out_be1;
    wire [31:0]                   int_matched_out_d1;
    wire [31:0]                   int_matched_out_q1;
    reg                           int_matched_out_read;
    reg                           int_matched_out_write;
    reg  [1:0]                    int_matched_out_shift;

//------------------------Instantiation------------------
// int_contact_in
contact_discovery_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 16 )
) int_contact_in (
    .clk0     ( ACLK ),
    .address0 ( int_contact_in_address0 ),
    .ce0      ( int_contact_in_ce0 ),
    .we0      ( int_contact_in_we0 ),
    .be0      ( int_contact_in_be0 ),
    .d0       ( int_contact_in_d0 ),
    .q0       ( int_contact_in_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_contact_in_address1 ),
    .ce1      ( int_contact_in_ce1 ),
    .we1      ( int_contact_in_we1 ),
    .be1      ( int_contact_in_be1 ),
    .d1       ( int_contact_in_d1 ),
    .q1       ( int_contact_in_q1 )
);
// int_database_in
contact_discovery_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 16 )
) int_database_in (
    .clk0     ( ACLK ),
    .address0 ( int_database_in_address0 ),
    .ce0      ( int_database_in_ce0 ),
    .we0      ( int_database_in_we0 ),
    .be0      ( int_database_in_be0 ),
    .d0       ( int_database_in_d0 ),
    .q0       ( int_database_in_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_database_in_address1 ),
    .ce1      ( int_database_in_ce1 ),
    .we1      ( int_database_in_we1 ),
    .be1      ( int_database_in_be1 ),
    .d1       ( int_database_in_d1 ),
    .q1       ( int_database_in_q1 )
);
// int_matched_out
contact_discovery_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 75 )
) int_matched_out (
    .clk0     ( ACLK ),
    .address0 ( int_matched_out_address0 ),
    .ce0      ( int_matched_out_ce0 ),
    .we0      ( int_matched_out_we0 ),
    .be0      ( int_matched_out_be0 ),
    .d0       ( int_matched_out_d0 ),
    .q0       ( int_matched_out_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_matched_out_address1 ),
    .ce1      ( int_matched_out_ce1 ),
    .we1      ( int_matched_out_we1 ),
    .be1      ( int_matched_out_be1 ),
    .d1       ( int_matched_out_d1 ),
    .q1       ( int_matched_out_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_contact_in_read & !int_database_in_read & !int_matched_out_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_OPERATION_DATA_0: begin
                    rdata <= int_operation[31:0];
                end
                ADDR_OPERATION_CTRL: begin
                    rdata[0] <= int_operation_ap_vld;
                end
                ADDR_MATCHED_FINISHED_DATA_0: begin
                    rdata <= int_matched_finished[31:0];
                end
                ADDR_ERROR_OUT_DATA_0: begin
                    rdata <= int_error_out[31:0];
                end
                ADDR_DATABASE_SIZE_OUT_DATA_0: begin
                    rdata <= int_database_size_out[31:0];
                end
                ADDR_CONTACTS_SIZE_OUT_DATA_0: begin
                    rdata <= int_contacts_size_out[31:0];
                end
            endcase
        end
        else if (int_contact_in_read) begin
            rdata <= int_contact_in_q1;
        end
        else if (int_database_in_read) begin
            rdata <= int_database_in_q1;
        end
        else if (int_matched_out_read) begin
            rdata <= int_matched_out_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt        = int_gie & (|int_isr);
assign ap_start         = int_ap_start;
assign int_ap_idle      = ap_idle;
assign int_ap_ready     = ap_ready;
assign operation        = int_operation;
assign operation_ap_vld = int_operation_ap_vld;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_operation[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_operation[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_OPERATION_DATA_0)
            int_operation[31:0] <= (WDATA[31:0] & wmask) | (int_operation[31:0] & ~wmask);
    end
end

// int_operation_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_operation_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_OPERATION_CTRL && WSTRB[0] && WDATA[0])
            int_operation_ap_vld <= 1'b1;
        else
            int_operation_ap_vld <= 1'b0; // self clear
    end
end

// int_matched_finished
always @(posedge ACLK) begin
    if (ARESET)
        int_matched_finished <= 0;
    else if (ACLK_EN) begin
            int_matched_finished <= matched_finished;
    end
end

// int_error_out
always @(posedge ACLK) begin
    if (ARESET)
        int_error_out <= 0;
    else if (ACLK_EN) begin
            int_error_out <= error_out;
    end
end

// int_database_size_out
always @(posedge ACLK) begin
    if (ARESET)
        int_database_size_out <= 0;
    else if (ACLK_EN) begin
            int_database_size_out <= database_size_out;
    end
end

// int_contacts_size_out
always @(posedge ACLK) begin
    if (ARESET)
        int_contacts_size_out <= 0;
    else if (ACLK_EN) begin
            int_contacts_size_out <= contacts_size_out;
    end
end


//------------------------Memory logic-------------------
// contact_in
assign int_contact_in_address0  = contact_in_address0 >> 2;
assign int_contact_in_ce0       = contact_in_ce0;
assign int_contact_in_we0       = 1'b0;
assign int_contact_in_be0       = 1'b0;
assign int_contact_in_d0        = 1'b0;
assign contact_in_q0            = int_contact_in_q0 >> (int_contact_in_shift * 8);
assign int_contact_in_address1  = ar_hs? raddr[5:2] : waddr[5:2];
assign int_contact_in_ce1       = ar_hs | (int_contact_in_write & WVALID);
assign int_contact_in_we1       = int_contact_in_write & WVALID;
assign int_contact_in_be1       = WSTRB;
assign int_contact_in_d1        = WDATA;
// database_in
assign int_database_in_address0 = database_in_address0 >> 2;
assign int_database_in_ce0      = database_in_ce0;
assign int_database_in_we0      = 1'b0;
assign int_database_in_be0      = 1'b0;
assign int_database_in_d0       = 1'b0;
assign database_in_q0           = int_database_in_q0 >> (int_database_in_shift * 8);
assign int_database_in_address1 = ar_hs? raddr[5:2] : waddr[5:2];
assign int_database_in_ce1      = ar_hs | (int_database_in_write & WVALID);
assign int_database_in_we1      = int_database_in_write & WVALID;
assign int_database_in_be1      = WSTRB;
assign int_database_in_d1       = WDATA;
// matched_out
assign int_matched_out_address0 = matched_out_address0 >> 2;
assign int_matched_out_ce0      = matched_out_ce0;
assign int_matched_out_we0      = matched_out_we0;
assign int_matched_out_be0      = 1 << matched_out_address0[1:0];
assign int_matched_out_d0       = {4{7'd0, matched_out_d0}};
assign int_matched_out_address1 = ar_hs? raddr[8:2] : waddr[8:2];
assign int_matched_out_ce1      = ar_hs | (int_matched_out_write & WVALID);
assign int_matched_out_we1      = int_matched_out_write & WVALID;
assign int_matched_out_be1      = WSTRB;
assign int_matched_out_d1       = WDATA;
// int_contact_in_read
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_CONTACT_IN_BASE && raddr <= ADDR_CONTACT_IN_HIGH)
            int_contact_in_read <= 1'b1;
        else
            int_contact_in_read <= 1'b0;
    end
end

// int_contact_in_write
always @(posedge ACLK) begin
    if (ARESET)
        int_contact_in_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_CONTACT_IN_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_CONTACT_IN_HIGH)
            int_contact_in_write <= 1'b1;
        else if (WVALID)
            int_contact_in_write <= 1'b0;
    end
end

// int_contact_in_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (contact_in_ce0)
            int_contact_in_shift <= contact_in_address0[1:0];
    end
end

// int_database_in_read
always @(posedge ACLK) begin
    if (ARESET)
        int_database_in_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_DATABASE_IN_BASE && raddr <= ADDR_DATABASE_IN_HIGH)
            int_database_in_read <= 1'b1;
        else
            int_database_in_read <= 1'b0;
    end
end

// int_database_in_write
always @(posedge ACLK) begin
    if (ARESET)
        int_database_in_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_DATABASE_IN_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_DATABASE_IN_HIGH)
            int_database_in_write <= 1'b1;
        else if (WVALID)
            int_database_in_write <= 1'b0;
    end
end

// int_database_in_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (database_in_ce0)
            int_database_in_shift <= database_in_address0[1:0];
    end
end

// int_matched_out_read
always @(posedge ACLK) begin
    if (ARESET)
        int_matched_out_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_MATCHED_OUT_BASE && raddr <= ADDR_MATCHED_OUT_HIGH)
            int_matched_out_read <= 1'b1;
        else
            int_matched_out_read <= 1'b0;
    end
end

// int_matched_out_write
always @(posedge ACLK) begin
    if (ARESET)
        int_matched_out_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_MATCHED_OUT_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_MATCHED_OUT_HIGH)
            int_matched_out_write <= 1'b1;
        else if (WVALID)
            int_matched_out_write <= 1'b0;
    end
end

// int_matched_out_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (matched_out_ce0)
            int_matched_out_shift <= matched_out_address0[1:0];
    end
end


endmodule


`timescale 1ns/1ps

module contact_discovery_AXILiteS_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

