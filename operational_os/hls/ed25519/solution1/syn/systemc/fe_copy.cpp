// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fe_copy.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool fe_copy::ap_const_boolean_1 = true;
const sc_logic fe_copy::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fe_copy::ap_const_logic_0 = sc_dt::Log_0;

fe_copy::fe_copy(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_return_0);
    sensitive << ( f_0_read );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( f_1_read );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( f_2_read );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( f_3_read );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( f_4_read );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( f_5_read );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( f_6_read );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( f_7_read );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( f_8_read );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( f_9_read );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fe_copy_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, f_0_read, "(port)f_0_read");
    sc_trace(mVcdFile, f_1_read, "(port)f_1_read");
    sc_trace(mVcdFile, f_2_read, "(port)f_2_read");
    sc_trace(mVcdFile, f_3_read, "(port)f_3_read");
    sc_trace(mVcdFile, f_4_read, "(port)f_4_read");
    sc_trace(mVcdFile, f_5_read, "(port)f_5_read");
    sc_trace(mVcdFile, f_6_read, "(port)f_6_read");
    sc_trace(mVcdFile, f_7_read, "(port)f_7_read");
    sc_trace(mVcdFile, f_8_read, "(port)f_8_read");
    sc_trace(mVcdFile, f_9_read, "(port)f_9_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
#endif

    }
}

fe_copy::~fe_copy() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void fe_copy::thread_ap_return_0() {
    ap_return_0 = f_0_read.read();
}

void fe_copy::thread_ap_return_1() {
    ap_return_1 = f_1_read.read();
}

void fe_copy::thread_ap_return_2() {
    ap_return_2 = f_2_read.read();
}

void fe_copy::thread_ap_return_3() {
    ap_return_3 = f_3_read.read();
}

void fe_copy::thread_ap_return_4() {
    ap_return_4 = f_4_read.read();
}

void fe_copy::thread_ap_return_5() {
    ap_return_5 = f_5_read.read();
}

void fe_copy::thread_ap_return_6() {
    ap_return_6 = f_6_read.read();
}

void fe_copy::thread_ap_return_7() {
    ap_return_7 = f_7_read.read();
}

void fe_copy::thread_ap_return_8() {
    ap_return_8 = f_8_read.read();
}

void fe_copy::thread_ap_return_9() {
    ap_return_9 = f_9_read.read();
}

}

