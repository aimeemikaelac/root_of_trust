// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sha256_HH_
#define _sha256_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "update.h"
#include "final.h"
#include "sha256_data_buffer.h"
#include "sha256_cipher_m_bdEe.h"
#include "sha256_cipher_m_h.h"
#include "sha256_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct sha256 : public sc_module {
    // Port declarations 26
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > stream_in_V_TDATA;
    sc_in< sc_logic > stream_in_V_TVALID;
    sc_out< sc_logic > stream_in_V_TREADY;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    sha256(sc_module_name name);
    SC_HAS_PROCESS(sha256);

    ~sha256();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sha256_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* sha256_AXILiteS_s_axi_U;
    sha256_data_buffer* data_buffer_U;
    sha256_cipher_m_bdEe* cipher_m_block_U;
    sha256_cipher_m_h* cipher_m_h_U;
    update* grp_update_fu_256;
    final* grp_final_fu_269;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > stream_in_V_0_data_out;
    sc_signal< sc_logic > stream_in_V_0_vld_in;
    sc_signal< sc_logic > stream_in_V_0_vld_out;
    sc_signal< sc_logic > stream_in_V_0_ack_in;
    sc_signal< sc_logic > stream_in_V_0_ack_out;
    sc_signal< sc_lv<8> > stream_in_V_0_payload_A;
    sc_signal< sc_lv<8> > stream_in_V_0_payload_B;
    sc_signal< sc_logic > stream_in_V_0_sel_rd;
    sc_signal< sc_logic > stream_in_V_0_sel_wr;
    sc_signal< sc_logic > stream_in_V_0_sel;
    sc_signal< sc_logic > stream_in_V_0_load_A;
    sc_signal< sc_logic > stream_in_V_0_load_B;
    sc_signal< sc_lv<2> > stream_in_V_0_state;
    sc_signal< sc_logic > stream_in_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > num_blocks;
    sc_signal< sc_lv<32> > num_blocks_preg;
    sc_signal< sc_logic > num_blocks_ap_vld;
    sc_signal< sc_lv<32> > num_blocks_in_sig;
    sc_signal< sc_logic > num_blocks_ap_vld_preg;
    sc_signal< sc_logic > num_blocks_ap_vld_in_sig;
    sc_signal< sc_logic > stream_in_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > num_blocks_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<31> > block_counter_1_fu_292_p2;
    sc_signal< sc_lv<31> > block_counter_1_reg_331;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<7> > data_index_1_fu_304_p2;
    sc_signal< sc_lv<7> > data_index_1_reg_339;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > grp_update_fu_256_ap_done;
    sc_signal< sc_lv<6> > data_buffer_address0;
    sc_signal< sc_logic > data_buffer_ce0;
    sc_signal< sc_logic > data_buffer_we0;
    sc_signal< sc_lv<8> > data_buffer_q0;
    sc_signal< sc_logic > data_buffer_ce1;
    sc_signal< sc_lv<8> > data_buffer_q1;
    sc_signal< sc_lv<7> > cipher_m_block_address0;
    sc_signal< sc_logic > cipher_m_block_ce0;
    sc_signal< sc_logic > cipher_m_block_we0;
    sc_signal< sc_lv<8> > cipher_m_block_d0;
    sc_signal< sc_lv<8> > cipher_m_block_q0;
    sc_signal< sc_lv<7> > cipher_m_block_address1;
    sc_signal< sc_logic > cipher_m_block_ce1;
    sc_signal< sc_lv<8> > cipher_m_block_q1;
    sc_signal< sc_lv<3> > cipher_m_h_address0;
    sc_signal< sc_logic > cipher_m_h_ce0;
    sc_signal< sc_logic > cipher_m_h_we0;
    sc_signal< sc_lv<32> > cipher_m_h_d0;
    sc_signal< sc_lv<32> > cipher_m_h_q0;
    sc_signal< sc_lv<3> > cipher_m_h_address1;
    sc_signal< sc_logic > cipher_m_h_ce1;
    sc_signal< sc_logic > cipher_m_h_we1;
    sc_signal< sc_lv<32> > cipher_m_h_d1;
    sc_signal< sc_logic > grp_update_fu_256_ap_start;
    sc_signal< sc_logic > grp_update_fu_256_ap_idle;
    sc_signal< sc_logic > grp_update_fu_256_ap_ready;
    sc_signal< sc_lv<7> > grp_update_fu_256_SHA256_m_block_address0;
    sc_signal< sc_logic > grp_update_fu_256_SHA256_m_block_ce0;
    sc_signal< sc_logic > grp_update_fu_256_SHA256_m_block_we0;
    sc_signal< sc_lv<8> > grp_update_fu_256_SHA256_m_block_d0;
    sc_signal< sc_lv<7> > grp_update_fu_256_SHA256_m_block_address1;
    sc_signal< sc_logic > grp_update_fu_256_SHA256_m_block_ce1;
    sc_signal< sc_lv<3> > grp_update_fu_256_SHA256_m_h_address0;
    sc_signal< sc_logic > grp_update_fu_256_SHA256_m_h_ce0;
    sc_signal< sc_logic > grp_update_fu_256_SHA256_m_h_we0;
    sc_signal< sc_lv<32> > grp_update_fu_256_SHA256_m_h_d0;
    sc_signal< sc_lv<6> > grp_update_fu_256_message_address0;
    sc_signal< sc_logic > grp_update_fu_256_message_ce0;
    sc_signal< sc_lv<6> > grp_update_fu_256_message_address1;
    sc_signal< sc_logic > grp_update_fu_256_message_ce1;
    sc_signal< sc_lv<32> > grp_update_fu_256_ap_return_0;
    sc_signal< sc_lv<32> > grp_update_fu_256_ap_return_1;
    sc_signal< sc_logic > grp_final_fu_269_ap_start;
    sc_signal< sc_logic > grp_final_fu_269_ap_done;
    sc_signal< sc_logic > grp_final_fu_269_ap_idle;
    sc_signal< sc_logic > grp_final_fu_269_ap_ready;
    sc_signal< sc_lv<7> > grp_final_fu_269_SHA256_m_block_address0;
    sc_signal< sc_logic > grp_final_fu_269_SHA256_m_block_ce0;
    sc_signal< sc_logic > grp_final_fu_269_SHA256_m_block_we0;
    sc_signal< sc_lv<8> > grp_final_fu_269_SHA256_m_block_d0;
    sc_signal< sc_lv<7> > grp_final_fu_269_SHA256_m_block_address1;
    sc_signal< sc_logic > grp_final_fu_269_SHA256_m_block_ce1;
    sc_signal< sc_lv<3> > grp_final_fu_269_SHA256_m_h_address0;
    sc_signal< sc_logic > grp_final_fu_269_SHA256_m_h_ce0;
    sc_signal< sc_logic > grp_final_fu_269_SHA256_m_h_we0;
    sc_signal< sc_lv<32> > grp_final_fu_269_SHA256_m_h_d0;
    sc_signal< sc_lv<5> > grp_final_fu_269_digest_address0;
    sc_signal< sc_logic > grp_final_fu_269_digest_ce0;
    sc_signal< sc_logic > grp_final_fu_269_digest_we0;
    sc_signal< sc_lv<8> > grp_final_fu_269_digest_d0;
    sc_signal< sc_lv<32> > cipher_m_len_reg_209;
    sc_signal< sc_lv<32> > cipher_m_tot_len_reg_221;
    sc_signal< sc_lv<31> > block_counter_reg_233;
    sc_signal< sc_lv<7> > data_index_reg_244;
    sc_signal< sc_lv<1> > tmp_fu_287_p2;
    sc_signal< sc_logic > ap_reg_grp_update_fu_256_ap_start;
    sc_signal< sc_lv<1> > exitcond_fu_298_p2;
    sc_signal< sc_logic > ap_reg_grp_final_fu_269_ap_start;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_3_fu_310_p1;
    sc_signal< sc_lv<32> > block_counter_cast_fu_283_p1;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<32> ap_const_lv32_6A09E667;
    static const sc_lv<32> ap_const_lv32_BB67AE85;
    static const sc_lv<32> ap_const_lv32_3C6EF372;
    static const sc_lv<32> ap_const_lv32_A54FF53A;
    static const sc_lv<32> ap_const_lv32_510E527F;
    static const sc_lv<32> ap_const_lv32_9B05688C;
    static const sc_lv<32> ap_const_lv32_1F83D9AB;
    static const sc_lv<32> ap_const_lv32_5BE0CD19;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_block_counter_1_fu_292_p2();
    void thread_block_counter_cast_fu_283_p1();
    void thread_cipher_m_block_address0();
    void thread_cipher_m_block_address1();
    void thread_cipher_m_block_ce0();
    void thread_cipher_m_block_ce1();
    void thread_cipher_m_block_d0();
    void thread_cipher_m_block_we0();
    void thread_cipher_m_h_address0();
    void thread_cipher_m_h_address1();
    void thread_cipher_m_h_ce0();
    void thread_cipher_m_h_ce1();
    void thread_cipher_m_h_d0();
    void thread_cipher_m_h_d1();
    void thread_cipher_m_h_we0();
    void thread_cipher_m_h_we1();
    void thread_data_buffer_address0();
    void thread_data_buffer_ce0();
    void thread_data_buffer_ce1();
    void thread_data_buffer_we0();
    void thread_data_index_1_fu_304_p2();
    void thread_exitcond_fu_298_p2();
    void thread_grp_final_fu_269_ap_start();
    void thread_grp_update_fu_256_ap_start();
    void thread_num_blocks_ap_vld_in_sig();
    void thread_num_blocks_blk_n();
    void thread_num_blocks_in_sig();
    void thread_stream_in_V_0_ack_in();
    void thread_stream_in_V_0_ack_out();
    void thread_stream_in_V_0_data_out();
    void thread_stream_in_V_0_load_A();
    void thread_stream_in_V_0_load_B();
    void thread_stream_in_V_0_sel();
    void thread_stream_in_V_0_state_cmp_full();
    void thread_stream_in_V_0_vld_in();
    void thread_stream_in_V_0_vld_out();
    void thread_stream_in_V_TDATA_blk_n();
    void thread_stream_in_V_TREADY();
    void thread_tmp_3_fu_310_p1();
    void thread_tmp_fu_287_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
