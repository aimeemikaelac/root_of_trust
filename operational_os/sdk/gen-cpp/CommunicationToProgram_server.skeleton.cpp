// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CommunicationToProgram.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::communication_to_program;

class CommunicationToProgramHandler : virtual public CommunicationToProgramIf {
 public:
  CommunicationToProgramHandler() {
    // Your initialization goes here
  }

  void begin_attestation(std::string& _return, const std::string& remote_message) {
    // Your implementation goes here
    printf("begin_attestation\n");
  }

  bool check_message_ready() {
    // Your implementation goes here
    printf("check_message_ready\n");
  }

  void get_message(std::string& _return) {
    // Your implementation goes here
    printf("get_message\n");
  }

  void signal_message_received() {
    // Your implementation goes here
    printf("signal_message_received\n");
  }

  bool transfer_message(const std::string& remote_message) {
    // Your implementation goes here
    printf("transfer_message\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<CommunicationToProgramHandler> handler(new CommunicationToProgramHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new CommunicationToProgramProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

