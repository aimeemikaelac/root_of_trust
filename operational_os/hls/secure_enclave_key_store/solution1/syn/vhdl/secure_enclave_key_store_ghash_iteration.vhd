-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity secure_enclave_key_store_ghash_iteration is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    h_V : IN STD_LOGIC_VECTOR (127 downto 0);
    d_V : IN STD_LOGIC_VECTOR (127 downto 0);
    x_prev_V : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of secure_enclave_key_store_ghash_iteration is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_19 : BOOLEAN;
    signal h_V_read_reg_153 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_3_fu_88_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_fu_104_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_42 : BOOLEAN;
    signal agg_result_V_0_r_V_i_fu_123_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal exitcond_i_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_r_V_i_fu_131_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_2_fu_149_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal agg_result_V_i_reg_46 : STD_LOGIC_VECTOR (127 downto 0);
    signal lhs_V_reg_57 : STD_LOGIC_VECTOR (127 downto 0);
    signal rhs_V_reg_68 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_assign_reg_77 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_assign_cast1_fu_94_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_110_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_V_fu_117_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_1_fu_139_p4 : STD_LOGIC_VECTOR (126 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv128_lc_1;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i_fu_98_p2 = ap_const_lv1_0)))) then 
                    ap_return_preg <= agg_result_V_i_reg_46;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_i_reg_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_i_fu_98_p2 = ap_const_lv1_0))) then 
                agg_result_V_i_reg_46 <= agg_result_V_0_r_V_i_fu_123_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                agg_result_V_i_reg_46 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    i_assign_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_i_fu_98_p2 = ap_const_lv1_0))) then 
                i_assign_reg_77 <= i_fu_104_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_assign_reg_77 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    lhs_V_reg_57_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_i_fu_98_p2 = ap_const_lv1_0))) then 
                lhs_V_reg_57 <= lhs_V_r_V_i_fu_131_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                lhs_V_reg_57 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    rhs_V_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_i_fu_98_p2 = ap_const_lv1_0))) then 
                rhs_V_reg_68 <= r_V_2_fu_149_p1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                rhs_V_reg_68 <= r_V_3_fu_88_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i_fu_98_p2 = ap_const_lv1_0)))) then
                ap_return <= agg_result_V_i_reg_46;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                h_V_read_reg_153 <= h_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_i_fu_98_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_i_fu_98_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    agg_result_V_0_r_V_i_fu_123_p3 <= 
        z_V_fu_117_p2 when (tmp_fu_110_p3(0) = '1') else 
        agg_result_V_i_reg_46;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_i_fu_98_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i_fu_98_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_19_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_19 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_42 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_19)
    begin
        if (ap_sig_19) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_42)
    begin
        if (ap_sig_42) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_98_p2 <= "1" when (i_assign_reg_77 = ap_const_lv8_80) else "0";
    i_assign_cast1_fu_94_p1 <= std_logic_vector(resize(unsigned(i_assign_reg_77),32));
    i_fu_104_p2 <= std_logic_vector(unsigned(i_assign_reg_77) + unsigned(ap_const_lv8_1));
    lhs_V_r_V_i_fu_131_p3 <= 
        z_V_fu_117_p2 when (tmp_fu_110_p3(0) = '1') else 
        lhs_V_reg_57;
    r_V_1_fu_139_p4 <= rhs_V_reg_68(127 downto 1);
    r_V_2_fu_149_p1 <= std_logic_vector(resize(unsigned(r_V_1_fu_139_p4),128));
    r_V_3_fu_88_p2 <= (d_V xor x_prev_V);
    tmp_fu_110_p3 <= h_V_read_reg_153(to_integer(unsigned(i_assign_cast1_fu_94_p1)) downto to_integer(unsigned(i_assign_cast1_fu_94_p1))) when (to_integer(unsigned(i_assign_cast1_fu_94_p1))>= 0 and to_integer(unsigned(i_assign_cast1_fu_94_p1))<=127) else "-";
    z_V_fu_117_p2 <= (lhs_V_reg_57 xor rhs_V_reg_68);
end behav;
