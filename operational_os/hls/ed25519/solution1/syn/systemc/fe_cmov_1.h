// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fe_cmov_1_HH_
#define _fe_cmov_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct fe_cmov_1 : public sc_module {
    // Port declarations 31
    sc_in< sc_lv<32> > f_0_read;
    sc_in< sc_lv<32> > f_1_read;
    sc_in< sc_lv<32> > f_2_read;
    sc_in< sc_lv<32> > f_3_read;
    sc_in< sc_lv<32> > f_4_read;
    sc_in< sc_lv<32> > f_5_read;
    sc_in< sc_lv<32> > f_6_read;
    sc_in< sc_lv<32> > f_7_read;
    sc_in< sc_lv<32> > f_8_read;
    sc_in< sc_lv<32> > f_9_read;
    sc_in< sc_lv<32> > p_read;
    sc_in< sc_lv<32> > p_read11;
    sc_in< sc_lv<32> > p_read12;
    sc_in< sc_lv<32> > p_read13;
    sc_in< sc_lv<32> > p_read14;
    sc_in< sc_lv<32> > p_read15;
    sc_in< sc_lv<32> > p_read16;
    sc_in< sc_lv<32> > p_read17;
    sc_in< sc_lv<32> > p_read18;
    sc_in< sc_lv<32> > p_read19;
    sc_in< sc_lv<1> > b;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<32> > ap_return_1;
    sc_out< sc_lv<32> > ap_return_2;
    sc_out< sc_lv<32> > ap_return_3;
    sc_out< sc_lv<32> > ap_return_4;
    sc_out< sc_lv<32> > ap_return_5;
    sc_out< sc_lv<32> > ap_return_6;
    sc_out< sc_lv<32> > ap_return_7;
    sc_out< sc_lv<32> > ap_return_8;
    sc_out< sc_lv<32> > ap_return_9;


    // Module declarations
    fe_cmov_1(sc_module_name name);
    SC_HAS_PROCESS(fe_cmov_1);

    ~fe_cmov_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<32> > x0_fu_198_p2;
    sc_signal< sc_lv<32> > b_assign_cast_fu_258_p3;
    sc_signal< sc_lv<32> > x1_fu_204_p2;
    sc_signal< sc_lv<32> > x2_fu_210_p2;
    sc_signal< sc_lv<32> > x3_fu_216_p2;
    sc_signal< sc_lv<32> > x4_fu_222_p2;
    sc_signal< sc_lv<32> > x5_fu_228_p2;
    sc_signal< sc_lv<32> > x6_fu_234_p2;
    sc_signal< sc_lv<32> > x7_fu_240_p2;
    sc_signal< sc_lv<32> > x8_fu_246_p2;
    sc_signal< sc_lv<32> > x9_fu_252_p2;
    sc_signal< sc_lv<32> > x0_1_fu_266_p2;
    sc_signal< sc_lv<32> > x1_1_fu_272_p2;
    sc_signal< sc_lv<32> > x2_1_fu_278_p2;
    sc_signal< sc_lv<32> > x3_1_fu_284_p2;
    sc_signal< sc_lv<32> > x4_1_fu_290_p2;
    sc_signal< sc_lv<32> > x5_1_fu_296_p2;
    sc_signal< sc_lv<32> > x6_1_fu_302_p2;
    sc_signal< sc_lv<32> > x7_1_fu_308_p2;
    sc_signal< sc_lv<32> > x8_1_fu_314_p2;
    sc_signal< sc_lv<32> > x9_1_fu_320_p2;
    sc_signal< sc_lv<32> > f_0_write_assign_fu_326_p2;
    sc_signal< sc_lv<32> > f_1_write_assign_fu_332_p2;
    sc_signal< sc_lv<32> > f_2_write_assign_fu_338_p2;
    sc_signal< sc_lv<32> > f_3_write_assign_fu_344_p2;
    sc_signal< sc_lv<32> > f_4_write_assign_fu_350_p2;
    sc_signal< sc_lv<32> > f_5_write_assign_fu_356_p2;
    sc_signal< sc_lv<32> > f_6_write_assign_fu_362_p2;
    sc_signal< sc_lv<32> > f_7_write_assign_fu_368_p2;
    sc_signal< sc_lv<32> > f_8_write_assign_fu_374_p2;
    sc_signal< sc_lv<32> > f_9_write_assign_fu_380_p2;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_b_assign_cast_fu_258_p3();
    void thread_f_0_write_assign_fu_326_p2();
    void thread_f_1_write_assign_fu_332_p2();
    void thread_f_2_write_assign_fu_338_p2();
    void thread_f_3_write_assign_fu_344_p2();
    void thread_f_4_write_assign_fu_350_p2();
    void thread_f_5_write_assign_fu_356_p2();
    void thread_f_6_write_assign_fu_362_p2();
    void thread_f_7_write_assign_fu_368_p2();
    void thread_f_8_write_assign_fu_374_p2();
    void thread_f_9_write_assign_fu_380_p2();
    void thread_x0_1_fu_266_p2();
    void thread_x0_fu_198_p2();
    void thread_x1_1_fu_272_p2();
    void thread_x1_fu_204_p2();
    void thread_x2_1_fu_278_p2();
    void thread_x2_fu_210_p2();
    void thread_x3_1_fu_284_p2();
    void thread_x3_fu_216_p2();
    void thread_x4_1_fu_290_p2();
    void thread_x4_fu_222_p2();
    void thread_x5_1_fu_296_p2();
    void thread_x5_fu_228_p2();
    void thread_x6_1_fu_302_p2();
    void thread_x6_fu_234_p2();
    void thread_x7_1_fu_308_p2();
    void thread_x7_fu_240_p2();
    void thread_x8_1_fu_314_p2();
    void thread_x8_fu_246_p2();
    void thread_x9_1_fu_320_p2();
    void thread_x9_fu_252_p2();
};

}

using namespace ap_rtl;

#endif
