-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity contact_discovery is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    db_in_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    db_in_V_empty_n : IN STD_LOGIC;
    db_in_V_read : OUT STD_LOGIC;
    results_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    results_out_V_full_n : IN STD_LOGIC;
    results_out_V_write : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of contact_discovery is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "contact_discovery,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.321000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=695,HLS_SYN_LUT=1118}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal operation : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal operation_ap_vld : STD_LOGIC;
    signal operation_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_ap_vld_preg : STD_LOGIC := '0';
    signal operation_ap_vld_in_sig : STD_LOGIC;
    signal contact_in_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal contact_in_ce0 : STD_LOGIC;
    signal contact_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal db_size_in : STD_LOGIC_VECTOR (31 downto 0);
    signal error_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal error_out_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal error_out_1_vld_reg : STD_LOGIC := '0';
    signal error_out_1_vld_in : STD_LOGIC;
    signal error_out_1_ack_in : STD_LOGIC;
    signal contacts_size_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contacts_size_out_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal contacts_size_out_1_vld_reg : STD_LOGIC := '0';
    signal contacts_size_out_1_vld_in : STD_LOGIC;
    signal contacts_size_out_1_ack_in : STD_LOGIC;
    signal contacts_size : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contacts_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal contacts_ce0 : STD_LOGIC;
    signal contacts_we0 : STD_LOGIC;
    signal contacts_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal operation_blk_n : STD_LOGIC;
    signal db_in_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_out_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal operation_read_read_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal contacts_size_load_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_296_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_cast_reg_394 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal database_index_1_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal database_index_1_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_4_fu_321_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal db_stream_V_full_n : STD_LOGIC;
    signal db_stream_V_write : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal i_6_fu_338_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_reg_418 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_i_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_i_fu_353_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_i_reg_428 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_match_db_contact_fu_259_ap_start : STD_LOGIC;
    signal grp_match_db_contact_fu_259_ap_done : STD_LOGIC;
    signal grp_match_db_contact_fu_259_ap_idle : STD_LOGIC;
    signal grp_match_db_contact_fu_259_ap_ready : STD_LOGIC;
    signal grp_match_db_contact_fu_259_db_stream_V_read : STD_LOGIC;
    signal grp_match_db_contact_fu_259_contacts_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_match_db_contact_fu_259_contacts_ce0 : STD_LOGIC;
    signal grp_match_db_contact_fu_259_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal database_index_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_225 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond4_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_236 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal storemerge_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_reg_grp_match_db_contact_fu_259_ap_start : STD_LOGIC := '0';
    signal ap_block_state4_ignore_call0 : BOOLEAN;
    signal db_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal db_stream_V_empty_n : STD_LOGIC;
    signal db_stream_V_read : STD_LOGIC;
    signal tmp_i_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_fu_278_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_13_fu_293_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_cast_fu_349_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component match_db_contact IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        db_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        db_stream_V_empty_n : IN STD_LOGIC;
        db_stream_V_read : OUT STD_LOGIC;
        contacts_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        contacts_ce0 : OUT STD_LOGIC;
        contacts_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component contact_discoveryeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component fifo_w8_d128_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component contact_discovery_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        operation : OUT STD_LOGIC_VECTOR (31 downto 0);
        operation_ap_vld : OUT STD_LOGIC;
        contact_in_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        contact_in_ce0 : IN STD_LOGIC;
        contact_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        db_size_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        error_out : IN STD_LOGIC_VECTOR (31 downto 0);
        contacts_size_out : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    contacts_U : component contact_discoveryeOg
    generic map (
        DataWidth => 8,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => contacts_address0,
        ce0 => contacts_ce0,
        we0 => contacts_we0,
        d0 => contact_in_q0,
        q0 => contacts_q0);

    contact_discovery_AXILiteS_s_axi_U : component contact_discovery_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        operation => operation,
        operation_ap_vld => operation_ap_vld,
        contact_in_address0 => contact_in_address0,
        contact_in_ce0 => contact_in_ce0,
        contact_in_q0 => contact_in_q0,
        db_size_in => db_size_in,
        error_out => error_out_1_data_reg,
        contacts_size_out => contacts_size_out_1_data_reg);

    grp_match_db_contact_fu_259 : component match_db_contact
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_match_db_contact_fu_259_ap_start,
        ap_done => grp_match_db_contact_fu_259_ap_done,
        ap_idle => grp_match_db_contact_fu_259_ap_idle,
        ap_ready => grp_match_db_contact_fu_259_ap_ready,
        db_stream_V_dout => db_stream_V_dout,
        db_stream_V_empty_n => db_stream_V_empty_n,
        db_stream_V_read => grp_match_db_contact_fu_259_db_stream_V_read,
        contacts_address0 => grp_match_db_contact_fu_259_contacts_address0,
        contacts_ce0 => grp_match_db_contact_fu_259_contacts_ce0,
        contacts_q0 => contacts_q0,
        ap_return => grp_match_db_contact_fu_259_ap_return);

    db_stream_V_fifo_U : component fifo_w8_d128_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => db_in_V_dout,
        if_full_n => db_stream_V_full_n,
        if_write => db_stream_V_write,
        if_dout => db_stream_V_dout,
        if_empty_n => db_stream_V_empty_n,
        if_read => db_stream_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_match_db_contact_fu_259_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_match_db_contact_fu_259_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and not((((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_in_V_empty_n)) or ((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_stream_V_full_n)))) and (exitcond_fu_315_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_match_db_contact_fu_259_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_match_db_contact_fu_259_ap_ready)) then 
                    ap_reg_grp_match_db_contact_fu_259_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    operation_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                operation_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
                    operation_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = operation_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    operation_ap_vld_preg <= operation_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    operation_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                operation_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = operation_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    operation_preg <= operation;
                end if; 
            end if;
        end if;
    end process;


    contacts_size_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_i_fu_332_p2 = ap_const_lv1_1))) then 
                contacts_size <= tmp_2_fu_358_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_144_p2 = ap_const_lv32_2))) then 
                contacts_size <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    contacts_size_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    database_index_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_logic_0 = results_out_V_full_n) or (ap_const_logic_0 = grp_match_db_contact_fu_259_ap_done))))) then 
                database_index_reg_214 <= database_index_1_reg_402;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_144_p2 = ap_const_lv32_1))) then 
                database_index_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    error_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_i_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_i_reg_236 <= i_6_reg_418;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_144_p2) and (ap_const_lv1_0 = icmp_fu_287_p2))) then 
                i_i_reg_236 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_304_p2))) then 
                i_reg_225 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_315_p2 = ap_const_lv1_0) and not((((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_in_V_empty_n)) or ((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_stream_V_full_n)))))) then 
                i_reg_225 <= i_4_fu_321_p2;
            end if; 
        end if;
    end process;

    storemerge_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                storemerge_reg_247 <= contacts_size_load_reg_382;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_i_fu_332_p2 = ap_const_lv1_1))) then 
                storemerge_reg_247 <= tmp_2_fu_358_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))))) then
                contacts_size_load_reg_382 <= contacts_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = contacts_size_out_1_vld_in) and (ap_const_logic_0 = contacts_size_out_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = contacts_size_out_1_vld_in) and (ap_const_logic_1 = contacts_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                contacts_size_out_1_data_reg <= contacts_size_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                database_index_1_reg_402 <= database_index_1_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = error_out_1_vld_in) and (ap_const_logic_0 = error_out_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = error_out_1_vld_in) and (ap_const_logic_1 = error_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                error_out_1_data_reg <= error_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_6_reg_418 <= i_6_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_i_fu_332_p2))) then
                sum_i_reg_428 <= sum_i_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_144_p2) and (ap_const_lv1_0 = icmp_fu_287_p2))) then
                    tmp_1_cast_reg_394(14 downto 6) <= tmp_1_cast_fu_296_p3(14 downto 6);
            end if;
        end if;
    end process;
    tmp_1_cast_reg_394(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, operation_ap_vld_in_sig, db_in_V_empty_n, error_out_1_ack_in, contacts_size_out_1_ack_in, results_out_V_full_n, ap_CS_fsm_state4, exitcond_fu_315_p2, ap_CS_fsm_state5, operation_read_read_fu_144_p2, ap_CS_fsm_state2, icmp_fu_287_p2, ap_CS_fsm_state3, db_stream_V_full_n, ap_CS_fsm_state6, exitcond_i_fu_332_p2, grp_match_db_contact_fu_259_ap_done, exitcond4_fu_304_p2, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_144_p2) and (ap_const_lv1_0 = icmp_fu_287_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_144_p2) and (icmp_fu_287_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_144_p2 = ap_const_lv32_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond4_fu_304_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_315_p2 = ap_const_lv1_0) and not((((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_in_V_empty_n)) or ((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_stream_V_full_n)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and not((((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_in_V_empty_n)) or ((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_stream_V_full_n)))) and (exitcond_fu_315_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_logic_0 = results_out_V_full_n) or (ap_const_logic_0 = grp_match_db_contact_fu_259_ap_done))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_i_fu_332_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, operation_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig));
    end process;


    ap_block_state10_assign_proc : process(error_out_1_ack_in, contacts_size_out_1_ack_in)
    begin
                ap_block_state10 <= ((ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in));
    end process;


    ap_block_state4_assign_proc : process(db_in_V_empty_n, exitcond_fu_315_p2, db_stream_V_full_n)
    begin
                ap_block_state4 <= (((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_in_V_empty_n)) or ((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_stream_V_full_n)));
    end process;


    ap_block_state4_ignore_call0_assign_proc : process(db_in_V_empty_n, exitcond_fu_315_p2, db_stream_V_full_n)
    begin
                ap_block_state4_ignore_call0 <= (((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_in_V_empty_n)) or ((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_stream_V_full_n)));
    end process;


    ap_done_assign_proc : process(error_out_1_ack_in, contacts_size_out_1_ack_in, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(error_out_1_ack_in, contacts_size_out_1_ack_in, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    contact_in_address0 <= tmp_i_fu_344_p1(6 - 1 downto 0);

    contact_in_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            contact_in_ce0 <= ap_const_logic_1;
        else 
            contact_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    contacts_address0_assign_proc : process(ap_CS_fsm_state5, grp_match_db_contact_fu_259_contacts_address0, ap_CS_fsm_state7, sum_i_cast_fu_369_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            contacts_address0 <= sum_i_cast_fu_369_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            contacts_address0 <= grp_match_db_contact_fu_259_contacts_address0;
        else 
            contacts_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    contacts_ce0_assign_proc : process(ap_CS_fsm_state5, grp_match_db_contact_fu_259_contacts_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            contacts_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            contacts_ce0 <= grp_match_db_contact_fu_259_contacts_ce0;
        else 
            contacts_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    contacts_size_out_1_ack_in_assign_proc : process(contacts_size_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = contacts_size_out_1_vld_reg) or ((ap_const_logic_1 = contacts_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            contacts_size_out_1_ack_in <= ap_const_logic_1;
        else 
            contacts_size_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    contacts_size_out_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, contacts_size, operation_read_read_fu_144_p2, storemerge_reg_247, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            contacts_size_out_1_data_in <= storemerge_reg_247;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_144_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_144_p2)) and not((operation_read_read_fu_144_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_144_p2 = ap_const_lv32_2))))) then 
            contacts_size_out_1_data_in <= contacts_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_144_p2 = ap_const_lv32_2))) then 
            contacts_size_out_1_data_in <= ap_const_lv32_0;
        else 
            contacts_size_out_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    contacts_size_out_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_144_p2, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_144_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_144_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_144_p2)) and not((operation_read_read_fu_144_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_144_p2 = ap_const_lv32_2))) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            contacts_size_out_1_vld_in <= ap_const_logic_1;
        else 
            contacts_size_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    contacts_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            contacts_we0 <= ap_const_logic_1;
        else 
            contacts_we0 <= ap_const_logic_0;
        end if; 
    end process;

    database_index_1_fu_309_p2 <= std_logic_vector(unsigned(database_index_reg_214) + unsigned(ap_const_lv32_1));

    db_in_V_blk_n_assign_proc : process(db_in_V_empty_n, ap_CS_fsm_state4, exitcond_fu_315_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_315_p2 = ap_const_lv1_0))) then 
            db_in_V_blk_n <= db_in_V_empty_n;
        else 
            db_in_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    db_in_V_read_assign_proc : process(db_in_V_empty_n, ap_CS_fsm_state4, exitcond_fu_315_p2, db_stream_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_315_p2 = ap_const_lv1_0) and not((((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_in_V_empty_n)) or ((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_stream_V_full_n)))))) then 
            db_in_V_read <= ap_const_logic_1;
        else 
            db_in_V_read <= ap_const_logic_0;
        end if; 
    end process;


    db_stream_V_read_assign_proc : process(ap_CS_fsm_state5, grp_match_db_contact_fu_259_db_stream_V_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            db_stream_V_read <= grp_match_db_contact_fu_259_db_stream_V_read;
        else 
            db_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    db_stream_V_write_assign_proc : process(db_in_V_empty_n, ap_CS_fsm_state4, exitcond_fu_315_p2, db_stream_V_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_315_p2 = ap_const_lv1_0) and not((((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_in_V_empty_n)) or ((exitcond_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_0 = db_stream_V_full_n)))))) then 
            db_stream_V_write <= ap_const_logic_1;
        else 
            db_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    error_out_1_ack_in_assign_proc : process(error_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = error_out_1_vld_reg) or ((ap_const_logic_1 = error_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            error_out_1_ack_in <= ap_const_logic_1;
        else 
            error_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    error_out_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_144_p2, ap_CS_fsm_state2, icmp_fu_287_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_144_p2) and (icmp_fu_287_p2 = ap_const_lv1_1))) then 
            error_out_1_data_in <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_144_p2)) and not((operation_read_read_fu_144_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_144_p2 = ap_const_lv32_2)))) then 
            error_out_1_data_in <= ap_const_lv32_3;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_144_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_144_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_144_p2)))) then 
            error_out_1_data_in <= ap_const_lv32_0;
        else 
            error_out_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    error_out_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_144_p2, ap_CS_fsm_state2, icmp_fu_287_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_144_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_144_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_144_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_144_p2)) and not((operation_read_read_fu_144_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_144_p2 = ap_const_lv32_2))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_144_p2) and (icmp_fu_287_p2 = ap_const_lv1_1)))) then 
            error_out_1_vld_in <= ap_const_logic_1;
        else 
            error_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_fu_304_p2 <= "1" when (database_index_reg_214 = db_size_in) else "0";
    exitcond_fu_315_p2 <= "1" when (i_reg_225 = ap_const_lv7_40) else "0";
    exitcond_i_fu_332_p2 <= "1" when (i_i_reg_236 = ap_const_lv7_40) else "0";
    grp_match_db_contact_fu_259_ap_start <= ap_reg_grp_match_db_contact_fu_259_ap_start;
    i_4_fu_321_p2 <= std_logic_vector(unsigned(i_reg_225) + unsigned(ap_const_lv7_1));
    i_6_fu_338_p2 <= std_logic_vector(unsigned(i_i_reg_236) + unsigned(ap_const_lv7_1));
    icmp_fu_287_p2 <= "1" when (signed(tmp_fu_278_p4) > signed(ap_const_lv25_0)) else "0";

    operation_ap_vld_in_sig_assign_proc : process(operation_ap_vld, operation_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = operation_ap_vld)) then 
            operation_ap_vld_in_sig <= operation_ap_vld;
        else 
            operation_ap_vld_in_sig <= operation_ap_vld_preg;
        end if; 
    end process;


    operation_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            operation_blk_n <= operation_ap_vld;
        else 
            operation_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    operation_in_sig_assign_proc : process(operation, operation_preg, operation_ap_vld)
    begin
        if ((ap_const_logic_1 = operation_ap_vld)) then 
            operation_in_sig <= operation;
        else 
            operation_in_sig <= operation_preg;
        end if; 
    end process;

    operation_read_read_fu_144_p2 <= operation_in_sig;

    results_out_V_blk_n_assign_proc : process(results_out_V_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            results_out_V_blk_n <= results_out_V_full_n;
        else 
            results_out_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    results_out_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_match_db_contact_fu_259_ap_return),32));

    results_out_V_write_assign_proc : process(results_out_V_full_n, ap_CS_fsm_state5, grp_match_db_contact_fu_259_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_logic_0 = results_out_V_full_n) or (ap_const_logic_0 = grp_match_db_contact_fu_259_ap_done))))) then 
            results_out_V_write <= ap_const_logic_1;
        else 
            results_out_V_write <= ap_const_logic_0;
        end if; 
    end process;

        sum_i_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i_reg_428),64));

    sum_i_fu_353_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_349_p1) + unsigned(tmp_1_cast_reg_394));
    tmp_13_fu_293_p1 <= contacts_size_load_reg_382(9 - 1 downto 0);
    tmp_1_cast_fu_296_p3 <= (tmp_13_fu_293_p1 & ap_const_lv6_0);
    tmp_2_fu_358_p2 <= std_logic_vector(unsigned(contacts_size_load_reg_382) + unsigned(ap_const_lv32_1));
    tmp_fu_278_p4 <= contacts_size_load_reg_382(31 downto 7);
    tmp_i_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_236),15));
    tmp_i_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_236),64));
end behav;
