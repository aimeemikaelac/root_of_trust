// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        SHA256_m_h_address0,
        SHA256_m_h_ce0,
        SHA256_m_h_we0,
        SHA256_m_h_d0,
        SHA256_m_h_q0,
        message_address0,
        message_ce0,
        message_q0,
        message_address1,
        message_ce1,
        message_q1,
        block_nb
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] SHA256_m_h_address0;
output   SHA256_m_h_ce0;
output   SHA256_m_h_we0;
output  [31:0] SHA256_m_h_d0;
input  [31:0] SHA256_m_h_q0;
output  [6:0] message_address0;
output   message_ce0;
input  [7:0] message_q0;
output  [6:0] message_address1;
output   message_ce1;
input  [7:0] message_q1;
input  [1:0] block_nb;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] SHA256_m_h_address0;
reg SHA256_m_h_ce0;
reg SHA256_m_h_we0;
reg[6:0] message_address0;
reg message_ce0;
reg[6:0] message_address1;
reg message_ce1;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] SHA256_sha256_k_address0;
reg    SHA256_sha256_k_ce0;
wire   [31:0] SHA256_sha256_k_q0;
wire   [31:0] wv_q0;
reg   [31:0] reg_445;
wire    ap_CS_fsm_state12;
wire   [31:0] wv_q1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire   [1:0] i_2_fu_457_p2;
reg   [1:0] i_2_reg_1110;
wire    ap_CS_fsm_state2;
wire   [4:0] j_5_fu_469_p2;
reg   [4:0] j_5_reg_1118;
wire    ap_CS_fsm_state3;
wire   [6:0] sub_block_0_sum_fu_483_p4;
reg   [6:0] sub_block_0_sum_reg_1123;
wire   [0:0] exitcond1_fu_463_p2;
reg   [7:0] message_load_reg_1139;
wire    ap_CS_fsm_state4;
reg   [7:0] message_load_1_reg_1144;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond9_fu_545_p2;
wire   [31:0] w_q0;
reg   [31:0] w_load_reg_1172;
wire    ap_CS_fsm_state7;
wire   [31:0] w_q1;
reg   [31:0] w_load_1_reg_1181;
wire   [6:0] j_6_fu_753_p2;
wire    ap_CS_fsm_state8;
wire   [3:0] j_7_fu_765_p2;
reg   [3:0] j_7_reg_1204;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_51_fu_771_p1;
reg   [63:0] tmp_51_reg_1209;
wire   [0:0] exitcond8_fu_759_p2;
wire   [6:0] j_8_fu_782_p2;
reg   [6:0] j_8_reg_1222;
wire    ap_CS_fsm_state11;
reg   [31:0] wv_load_1_reg_1227;
wire   [31:0] tmp_62_fu_860_p2;
reg   [31:0] tmp_62_reg_1234;
reg   [31:0] wv_load_3_reg_1249;
wire   [31:0] t1_fu_911_p2;
reg   [31:0] t1_reg_1254;
reg   [31:0] wv_load_4_reg_1260;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_75_fu_989_p2;
reg   [31:0] tmp_75_reg_1266;
reg   [31:0] wv_load_5_reg_1271;
wire   [31:0] tmp_80_fu_1016_p2;
reg   [31:0] tmp_80_reg_1278;
wire   [31:0] tmp_81_fu_1026_p2;
reg   [31:0] tmp_81_reg_1283;
wire   [3:0] j_9_fu_1037_p2;
reg   [3:0] j_9_reg_1291;
wire    ap_CS_fsm_state19;
wire   [0:0] exitcond_fu_1031_p2;
reg   [2:0] SHA256_m_h_addr_1_reg_1301;
reg   [5:0] w_address0;
reg    w_ce0;
reg    w_we0;
wire   [31:0] w_d0;
reg   [5:0] w_address1;
reg    w_ce1;
reg    w_we1;
wire   [31:0] w_d1;
reg   [2:0] wv_address0;
reg    wv_ce0;
reg    wv_we0;
reg   [31:0] wv_d0;
reg   [2:0] wv_address1;
reg    wv_ce1;
reg    wv_we1;
reg   [31:0] wv_d1;
reg   [1:0] i_reg_375;
reg   [4:0] j_reg_387;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond2_fu_452_p2;
reg   [6:0] j_1_reg_399;
reg   [3:0] j_2_reg_411;
wire    ap_CS_fsm_state10;
reg   [6:0] j_3_reg_422;
wire    ap_CS_fsm_state18;
reg   [3:0] j_4_reg_434;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond7_fu_776_p2;
wire   [63:0] p_sum1_cast_fu_499_p1;
wire   [63:0] p_sum3_cast_fu_510_p1;
wire   [63:0] p_sum5_cast_fu_524_p1;
wire   [63:0] sub_block_0_sum_cast_fu_515_p1;
wire   [63:0] tmp_20_fu_540_p1;
wire   [63:0] tmp_22_fu_557_p1;
wire   [63:0] tmp_33_fu_568_p1;
wire   [63:0] tmp_35_fu_579_p1;
wire   [63:0] tmp_46_fu_590_p1;
wire   [63:0] tmp_50_fu_748_p1;
wire   [63:0] tmp_66_fu_866_p1;
wire   [63:0] tmp_82_fu_1043_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_71_fu_479_p1;
wire   [3:0] tmp_fu_475_p1;
wire   [6:0] p_sum1_fu_493_p2;
wire   [6:0] p_sum3_fu_504_p2;
wire   [6:0] p_sum5_fu_519_p2;
wire   [6:0] tmp_21_fu_551_p2;
wire   [6:0] tmp_32_fu_562_p2;
wire   [6:0] tmp_34_fu_573_p2;
wire   [6:0] tmp_45_fu_584_p2;
wire   [16:0] tmp_74_fu_604_p1;
wire   [14:0] tmp_23_fu_595_p4;
wire   [18:0] tmp_84_fu_624_p1;
wire   [12:0] tmp_26_fu_615_p4;
wire   [21:0] tmp_29_fu_635_p4;
wire   [31:0] tmp_85_fu_644_p1;
wire   [31:0] tmp_28_fu_627_p3;
wire   [31:0] tmp1_fu_648_p2;
wire   [31:0] tmp_25_fu_607_p3;
wire   [6:0] tmp_86_fu_670_p1;
wire   [24:0] tmp_36_fu_660_p4;
wire   [17:0] tmp_87_fu_692_p1;
wire   [13:0] tmp_39_fu_682_p4;
wire   [28:0] tmp_42_fu_704_p4;
wire   [31:0] tmp_88_fu_714_p1;
wire   [31:0] tmp_41_fu_696_p3;
wire   [31:0] tmp2_fu_718_p2;
wire   [31:0] tmp_38_fu_674_p3;
wire   [31:0] tmp_31_fu_654_p2;
wire   [31:0] tmp_44_fu_724_p2;
wire   [31:0] tmp4_fu_735_p2;
wire   [31:0] tmp3_fu_730_p2;
wire   [5:0] tmp_89_fu_798_p1;
wire   [25:0] tmp_52_fu_788_p4;
wire   [10:0] tmp_90_fu_820_p1;
wire   [20:0] tmp_55_fu_810_p4;
wire   [24:0] tmp_91_fu_842_p1;
wire   [6:0] tmp_58_fu_832_p4;
wire   [31:0] tmp_60_fu_846_p3;
wire   [31:0] tmp_57_fu_824_p3;
wire   [31:0] tmp5_fu_854_p2;
wire   [31:0] tmp_54_fu_802_p3;
wire   [31:0] tmp_64_fu_877_p2;
wire   [31:0] tmp_s_fu_882_p2;
wire   [31:0] tmp_63_fu_872_p2;
wire   [31:0] tmp_65_fu_888_p2;
wire   [31:0] tmp10_fu_900_p2;
wire   [31:0] tmp9_fu_905_p2;
wire   [31:0] tmp8_fu_894_p2;
wire   [1:0] tmp_92_fu_927_p1;
wire   [29:0] tmp_67_fu_917_p4;
wire   [12:0] tmp_93_fu_949_p1;
wire   [18:0] tmp_69_fu_939_p4;
wire   [21:0] tmp_94_fu_971_p1;
wire   [9:0] tmp_72_fu_961_p4;
wire   [31:0] tmp_73_fu_975_p3;
wire   [31:0] tmp_70_fu_953_p3;
wire   [31:0] tmp11_fu_983_p2;
wire   [31:0] tmp_68_fu_931_p3;
wire   [31:0] tmp_77_fu_1000_p2;
wire   [31:0] tmp_78_fu_1005_p2;
wire   [31:0] tmp_76_fu_995_p2;
wire   [31:0] tmp_79_fu_1010_p2;
wire   [31:0] tmp12_fu_1021_p2;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
end

transform_SHA256_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
SHA256_sha256_k_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SHA256_sha256_k_address0),
    .ce0(SHA256_sha256_k_ce0),
    .q0(SHA256_sha256_k_q0)
);

transform_w #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
w_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_address0),
    .ce0(w_ce0),
    .we0(w_we0),
    .d0(w_d0),
    .q0(w_q0),
    .address1(w_address1),
    .ce1(w_ce1),
    .we1(w_we1),
    .d1(w_d1),
    .q1(w_q1)
);

transform_wv #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
wv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wv_address0),
    .ce0(wv_ce0),
    .we0(wv_we0),
    .d0(wv_d0),
    .q0(wv_q0),
    .address1(wv_address1),
    .ce1(wv_ce1),
    .we1(wv_we1),
    .d1(wv_d1),
    .q1(wv_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond_fu_1031_p2 == 1'd1))) begin
        i_reg_375 <= i_2_reg_1110;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_375 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_463_p2 == 1'd1))) begin
        j_1_reg_399 <= 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_1_reg_399 <= j_6_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond9_fu_545_p2 == 1'd1))) begin
        j_2_reg_411 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_2_reg_411 <= j_7_reg_1204;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_759_p2 == 1'd1))) begin
        j_3_reg_422 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_3_reg_422 <= j_8_reg_1222;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond7_fu_776_p2))) begin
        j_4_reg_434 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        j_4_reg_434 <= j_9_reg_1291;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond2_fu_452_p2))) begin
        j_reg_387 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_387 <= j_5_reg_1118;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_445 <= wv_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_445 <= wv_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (1'd0 == exitcond_fu_1031_p2))) begin
        SHA256_m_h_addr_1_reg_1301 <= tmp_82_fu_1043_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_1110 <= i_2_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_5_reg_1118 <= j_5_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_7_reg_1204 <= j_7_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_8_reg_1222 <= j_8_fu_782_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_9_reg_1291 <= j_9_fu_1037_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        message_load_1_reg_1144 <= message_q1;
        message_load_reg_1139 <= message_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_463_p2 == 1'd0))) begin
        sub_block_0_sum_reg_1123[6 : 2] <= sub_block_0_sum_fu_483_p4[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        t1_reg_1254 <= t1_fu_911_p2;
        wv_load_3_reg_1249 <= wv_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond8_fu_759_p2))) begin
        tmp_51_reg_1209[3 : 0] <= tmp_51_fu_771_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_62_reg_1234 <= tmp_62_fu_860_p2;
        wv_load_1_reg_1227 <= wv_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_75_reg_1266 <= tmp_75_fu_989_p2;
        wv_load_4_reg_1260 <= wv_q1;
        wv_load_5_reg_1271 <= wv_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_80_reg_1278 <= tmp_80_fu_1016_p2;
        tmp_81_reg_1283 <= tmp_81_fu_1026_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        w_load_1_reg_1181 <= w_q1;
        w_load_reg_1172 <= w_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        SHA256_m_h_address0 = SHA256_m_h_addr_1_reg_1301;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        SHA256_m_h_address0 = tmp_82_fu_1043_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        SHA256_m_h_address0 = tmp_51_fu_771_p1;
    end else begin
        SHA256_m_h_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20))) begin
        SHA256_m_h_ce0 = 1'b1;
    end else begin
        SHA256_m_h_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        SHA256_m_h_we0 = 1'b1;
    end else begin
        SHA256_m_h_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        SHA256_sha256_k_ce0 = 1'b1;
    end else begin
        SHA256_sha256_k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_452_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_452_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        message_address0 = p_sum5_cast_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        message_address0 = p_sum1_cast_fu_499_p1;
    end else begin
        message_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        message_address1 = sub_block_0_sum_cast_fu_515_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        message_address1 = p_sum3_cast_fu_510_p1;
    end else begin
        message_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        message_ce0 = 1'b1;
    end else begin
        message_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        message_ce1 = 1'b1;
    end else begin
        message_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        w_address0 = tmp_66_fu_866_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        w_address0 = tmp_46_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        w_address0 = tmp_22_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_address0 = tmp_20_fu_540_p1;
    end else begin
        w_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        w_address1 = tmp_50_fu_748_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        w_address1 = tmp_35_fu_579_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        w_address1 = tmp_33_fu_568_p1;
    end else begin
        w_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        w_ce0 = 1'b1;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        w_ce1 = 1'b1;
    end else begin
        w_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        w_we0 = 1'b1;
    end else begin
        w_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        w_we1 = 1'b1;
    end else begin
        w_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        wv_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        wv_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        wv_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        wv_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        wv_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15))) begin
        wv_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        wv_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        wv_address0 = tmp_51_reg_1209;
    end else begin
        wv_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        wv_address1 = tmp_82_fu_1043_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        wv_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        wv_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        wv_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        wv_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        wv_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state16))) begin
        wv_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        wv_address1 = 64'd4;
    end else begin
        wv_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        wv_ce0 = 1'b1;
    end else begin
        wv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        wv_ce1 = 1'b1;
    end else begin
        wv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        wv_d0 = tmp_81_reg_1283;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        wv_d0 = wv_load_5_reg_1271;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        wv_d0 = tmp_80_reg_1278;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        wv_d0 = reg_445;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        wv_d0 = SHA256_m_h_q0;
    end else begin
        wv_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        wv_d1 = wv_load_4_reg_1260;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        wv_d1 = reg_445;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        wv_d1 = wv_load_1_reg_1227;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        wv_d1 = wv_load_3_reg_1249;
    end else begin
        wv_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        wv_we0 = 1'b1;
    end else begin
        wv_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        wv_we1 = 1'b1;
    end else begin
        wv_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond2_fu_452_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_463_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond9_fu_545_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_759_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond7_fu_776_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (exitcond_fu_1031_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SHA256_m_h_d0 = (wv_q1 + SHA256_m_h_q0);

assign SHA256_sha256_k_address0 = tmp_66_fu_866_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_463_p2 = ((j_reg_387 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond2_fu_452_p2 = ((i_reg_375 == block_nb) ? 1'b1 : 1'b0);

assign exitcond7_fu_776_p2 = ((j_3_reg_422 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond8_fu_759_p2 = ((j_2_reg_411 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond9_fu_545_p2 = ((j_1_reg_399 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_1031_p2 = ((j_4_reg_434 == 4'd8) ? 1'b1 : 1'b0);

assign i_2_fu_457_p2 = (i_reg_375 + 2'd1);

assign j_5_fu_469_p2 = (j_reg_387 + 5'd1);

assign j_6_fu_753_p2 = (7'd1 + j_1_reg_399);

assign j_7_fu_765_p2 = (j_2_reg_411 + 4'd1);

assign j_8_fu_782_p2 = (j_3_reg_422 + 7'd1);

assign j_9_fu_1037_p2 = (j_4_reg_434 + 4'd1);

assign p_sum1_cast_fu_499_p1 = p_sum1_fu_493_p2;

assign p_sum1_fu_493_p2 = (sub_block_0_sum_fu_483_p4 | 7'd3);

assign p_sum3_cast_fu_510_p1 = p_sum3_fu_504_p2;

assign p_sum3_fu_504_p2 = (sub_block_0_sum_fu_483_p4 | 7'd2);

assign p_sum5_cast_fu_524_p1 = p_sum5_fu_519_p2;

assign p_sum5_fu_519_p2 = (sub_block_0_sum_reg_1123 | 7'd1);

assign sub_block_0_sum_cast_fu_515_p1 = sub_block_0_sum_reg_1123;

assign sub_block_0_sum_fu_483_p4 = {{{tmp_71_fu_479_p1}, {tmp_fu_475_p1}}, {2'd0}};

assign t1_fu_911_p2 = (tmp9_fu_905_p2 + tmp8_fu_894_p2);

assign tmp10_fu_900_p2 = (tmp_62_reg_1234 + tmp_65_fu_888_p2);

assign tmp11_fu_983_p2 = (tmp_73_fu_975_p3 ^ tmp_70_fu_953_p3);

assign tmp12_fu_1021_p2 = (tmp_75_reg_1266 + tmp_79_fu_1010_p2);

assign tmp1_fu_648_p2 = (tmp_85_fu_644_p1 ^ tmp_28_fu_627_p3);

assign tmp2_fu_718_p2 = (tmp_88_fu_714_p1 ^ tmp_41_fu_696_p3);

assign tmp3_fu_730_p2 = (w_load_1_reg_1181 + w_q0);

assign tmp4_fu_735_p2 = (tmp_31_fu_654_p2 + tmp_44_fu_724_p2);

assign tmp5_fu_854_p2 = (tmp_60_fu_846_p3 ^ tmp_57_fu_824_p3);

assign tmp8_fu_894_p2 = (SHA256_sha256_k_q0 + reg_445);

assign tmp9_fu_905_p2 = (tmp10_fu_900_p2 + w_q0);

assign tmp_20_fu_540_p1 = j_reg_387;

assign tmp_21_fu_551_p2 = ($signed(7'd126) + $signed(j_1_reg_399));

assign tmp_22_fu_557_p1 = tmp_21_fu_551_p2;

assign tmp_23_fu_595_p4 = {{w_load_reg_1172[31:17]}};

assign tmp_25_fu_607_p3 = {{tmp_74_fu_604_p1}, {tmp_23_fu_595_p4}};

assign tmp_26_fu_615_p4 = {{w_load_reg_1172[31:19]}};

assign tmp_28_fu_627_p3 = {{tmp_84_fu_624_p1}, {tmp_26_fu_615_p4}};

assign tmp_29_fu_635_p4 = {{w_load_reg_1172[31:10]}};

assign tmp_31_fu_654_p2 = (tmp1_fu_648_p2 ^ tmp_25_fu_607_p3);

assign tmp_32_fu_562_p2 = ($signed(7'd121) + $signed(j_1_reg_399));

assign tmp_33_fu_568_p1 = tmp_32_fu_562_p2;

assign tmp_34_fu_573_p2 = ($signed(7'd113) + $signed(j_1_reg_399));

assign tmp_35_fu_579_p1 = tmp_34_fu_573_p2;

assign tmp_36_fu_660_p4 = {{w_q1[31:7]}};

assign tmp_38_fu_674_p3 = {{tmp_86_fu_670_p1}, {tmp_36_fu_660_p4}};

assign tmp_39_fu_682_p4 = {{w_q1[31:18]}};

assign tmp_41_fu_696_p3 = {{tmp_87_fu_692_p1}, {tmp_39_fu_682_p4}};

assign tmp_42_fu_704_p4 = {{w_q1[31:3]}};

assign tmp_44_fu_724_p2 = (tmp2_fu_718_p2 ^ tmp_38_fu_674_p3);

assign tmp_45_fu_584_p2 = ($signed(7'd112) + $signed(j_1_reg_399));

assign tmp_46_fu_590_p1 = tmp_45_fu_584_p2;

assign tmp_50_fu_748_p1 = j_1_reg_399;

assign tmp_51_fu_771_p1 = j_2_reg_411;

assign tmp_52_fu_788_p4 = {{wv_q1[31:6]}};

assign tmp_54_fu_802_p3 = {{tmp_89_fu_798_p1}, {tmp_52_fu_788_p4}};

assign tmp_55_fu_810_p4 = {{wv_q1[31:11]}};

assign tmp_57_fu_824_p3 = {{tmp_90_fu_820_p1}, {tmp_55_fu_810_p4}};

assign tmp_58_fu_832_p4 = {{wv_q1[31:25]}};

assign tmp_60_fu_846_p3 = {{tmp_91_fu_842_p1}, {tmp_58_fu_832_p4}};

assign tmp_62_fu_860_p2 = (tmp5_fu_854_p2 ^ tmp_54_fu_802_p3);

assign tmp_63_fu_872_p2 = (wv_q1 & wv_load_1_reg_1227);

assign tmp_64_fu_877_p2 = (wv_load_1_reg_1227 ^ 32'd4294967295);

assign tmp_65_fu_888_p2 = (tmp_s_fu_882_p2 ^ tmp_63_fu_872_p2);

assign tmp_66_fu_866_p1 = j_3_reg_422;

assign tmp_67_fu_917_p4 = {{wv_q1[31:2]}};

assign tmp_68_fu_931_p3 = {{tmp_92_fu_927_p1}, {tmp_67_fu_917_p4}};

assign tmp_69_fu_939_p4 = {{wv_q1[31:13]}};

assign tmp_70_fu_953_p3 = {{tmp_93_fu_949_p1}, {tmp_69_fu_939_p4}};

assign tmp_71_fu_479_p1 = i_reg_375[0:0];

assign tmp_72_fu_961_p4 = {{wv_q1[31:22]}};

assign tmp_73_fu_975_p3 = {{tmp_94_fu_971_p1}, {tmp_72_fu_961_p4}};

assign tmp_74_fu_604_p1 = w_load_reg_1172[16:0];

assign tmp_75_fu_989_p2 = (tmp11_fu_983_p2 ^ tmp_68_fu_931_p3);

assign tmp_76_fu_995_p2 = (wv_q1 & wv_load_5_reg_1271);

assign tmp_77_fu_1000_p2 = (wv_q1 ^ wv_load_5_reg_1271);

assign tmp_78_fu_1005_p2 = (wv_load_4_reg_1260 & tmp_77_fu_1000_p2);

assign tmp_79_fu_1010_p2 = (tmp_78_fu_1005_p2 ^ tmp_76_fu_995_p2);

assign tmp_80_fu_1016_p2 = (wv_q0 + t1_reg_1254);

assign tmp_81_fu_1026_p2 = (tmp12_fu_1021_p2 + t1_reg_1254);

assign tmp_82_fu_1043_p1 = j_4_reg_434;

assign tmp_84_fu_624_p1 = w_load_reg_1172[18:0];

assign tmp_85_fu_644_p1 = tmp_29_fu_635_p4;

assign tmp_86_fu_670_p1 = w_q1[6:0];

assign tmp_87_fu_692_p1 = w_q1[17:0];

assign tmp_88_fu_714_p1 = tmp_42_fu_704_p4;

assign tmp_89_fu_798_p1 = wv_q1[5:0];

assign tmp_90_fu_820_p1 = wv_q1[10:0];

assign tmp_91_fu_842_p1 = wv_q1[24:0];

assign tmp_92_fu_927_p1 = wv_q1[1:0];

assign tmp_93_fu_949_p1 = wv_q1[12:0];

assign tmp_94_fu_971_p1 = wv_q1[21:0];

assign tmp_fu_475_p1 = j_reg_387[3:0];

assign tmp_s_fu_882_p2 = (wv_q0 & tmp_64_fu_877_p2);

assign w_d0 = {{{{message_q1}, {message_q0}}, {message_load_1_reg_1144}}, {message_load_reg_1139}};

assign w_d1 = (tmp4_fu_735_p2 + tmp3_fu_730_p2);

always @ (posedge ap_clk) begin
    sub_block_0_sum_reg_1123[1:0] <= 2'b00;
    tmp_51_reg_1209[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //transform
