// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="curve25519_donna,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.111743,HLS_SYN_LAT=502158,HLS_SYN_TPT=none,HLS_SYN_MEM=95,HLS_SYN_DSP=39,HLS_SYN_FF=34322,HLS_SYN_LUT=35276}" *)

module curve25519_donna (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    mypublic_in_ce0;
wire   [7:0] mypublic_in_q0;
wire   [7:0] secret_in_q0;
wire   [7:0] basepoint_in_q0;
reg    mypublic_out_ce0;
reg    mypublic_out_we0;
reg    secret_out_ce0;
reg    secret_out_we0;
reg    basepoint_out_ce0;
reg    basepoint_out_we0;
wire   [4:0] indvarinc_fu_292_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] i_14_fu_315_p2;
reg   [5:0] i_14_reg_378;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_827_fu_321_p1;
reg   [63:0] tmp_827_reg_383;
wire   [0:0] exitcond_fu_309_p2;
wire   [4:0] e_addr_2_reg_393;
reg   [3:0] bp_address0;
reg    bp_ce0;
reg    bp_we0;
wire   [25:0] bp_q0;
reg   [3:0] x_address0;
reg    x_ce0;
reg    x_we0;
wire   [63:0] x_q0;
reg   [3:0] z_address0;
reg    z_ce0;
reg    z_we0;
reg   [63:0] z_d0;
wire   [63:0] z_q0;
reg   [3:0] zmone_address0;
reg    zmone_ce0;
reg    zmone_we0;
wire   [63:0] zmone_q0;
reg   [4:0] e_address0;
reg    e_ce0;
reg    e_we0;
reg   [7:0] e_d0;
wire   [7:0] e_q0;
reg   [4:0] e_address1;
reg    e_ce1;
reg    e_we1;
reg   [7:0] e_d1;
wire   [7:0] e_q1;
reg   [4:0] mypublic_address0;
reg    mypublic_ce0;
reg    mypublic_we0;
reg   [7:0] mypublic_d0;
wire   [7:0] mypublic_q0;
reg   [4:0] secret_address0;
reg    secret_ce0;
reg    secret_we0;
wire   [7:0] secret_q0;
reg   [4:0] basepoint_address0;
reg    basepoint_ce0;
reg    basepoint_we0;
wire   [7:0] basepoint_q0;
wire    grp_cmult_fu_216_ap_start;
wire    grp_cmult_fu_216_ap_done;
wire    grp_cmult_fu_216_ap_idle;
wire    grp_cmult_fu_216_ap_ready;
wire   [3:0] grp_cmult_fu_216_resultx_address0;
wire    grp_cmult_fu_216_resultx_ce0;
wire    grp_cmult_fu_216_resultx_we0;
wire   [63:0] grp_cmult_fu_216_resultx_d0;
wire   [3:0] grp_cmult_fu_216_resultz_address0;
wire    grp_cmult_fu_216_resultz_ce0;
wire    grp_cmult_fu_216_resultz_we0;
wire   [63:0] grp_cmult_fu_216_resultz_d0;
wire   [4:0] grp_cmult_fu_216_n_address0;
wire    grp_cmult_fu_216_n_ce0;
wire   [3:0] grp_cmult_fu_216_q_address0;
wire    grp_cmult_fu_216_q_ce0;
wire    grp_crecip_fu_234_ap_start;
wire    grp_crecip_fu_234_ap_done;
wire    grp_crecip_fu_234_ap_idle;
wire    grp_crecip_fu_234_ap_ready;
wire   [3:0] grp_crecip_fu_234_out_r_address0;
wire    grp_crecip_fu_234_out_r_ce0;
wire    grp_crecip_fu_234_out_r_we0;
wire   [63:0] grp_crecip_fu_234_out_r_d0;
wire   [3:0] grp_crecip_fu_234_z_address0;
wire    grp_crecip_fu_234_z_ce0;
wire    grp_fmul_2_fu_249_ap_start;
wire    grp_fmul_2_fu_249_ap_done;
wire    grp_fmul_2_fu_249_ap_idle;
wire    grp_fmul_2_fu_249_ap_ready;
wire   [3:0] grp_fmul_2_fu_249_output_r_address0;
wire    grp_fmul_2_fu_249_output_r_ce0;
wire    grp_fmul_2_fu_249_output_r_we0;
wire   [63:0] grp_fmul_2_fu_249_output_r_d0;
wire   [3:0] grp_fmul_2_fu_249_in_r_address0;
wire    grp_fmul_2_fu_249_in_r_ce0;
wire   [3:0] grp_fmul_2_fu_249_in2_address0;
wire    grp_fmul_2_fu_249_in2_ce0;
wire    grp_fcontract_fu_256_ap_start;
wire    grp_fcontract_fu_256_ap_done;
wire    grp_fcontract_fu_256_ap_idle;
wire    grp_fcontract_fu_256_ap_ready;
wire   [4:0] grp_fcontract_fu_256_output_r_address0;
wire    grp_fcontract_fu_256_output_r_ce0;
wire    grp_fcontract_fu_256_output_r_we0;
wire   [7:0] grp_fcontract_fu_256_output_r_d0;
wire   [3:0] grp_fcontract_fu_256_input_limbs_address0;
wire    grp_fcontract_fu_256_input_limbs_ce0;
wire    grp_fexpand_fu_262_ap_start;
wire    grp_fexpand_fu_262_ap_done;
wire    grp_fexpand_fu_262_ap_idle;
wire    grp_fexpand_fu_262_ap_ready;
wire   [3:0] grp_fexpand_fu_262_output_r_address0;
wire    grp_fexpand_fu_262_output_r_ce0;
wire    grp_fexpand_fu_262_output_r_we0;
wire   [25:0] grp_fexpand_fu_262_output_r_d0;
wire   [4:0] grp_fexpand_fu_262_input_r_address0;
wire    grp_fexpand_fu_262_input_r_ce0;
wire    grp_p_memcpy_char_fu_268_ap_start;
wire    grp_p_memcpy_char_fu_268_ap_done;
wire    grp_p_memcpy_char_fu_268_ap_idle;
wire    grp_p_memcpy_char_fu_268_ap_ready;
wire   [4:0] grp_p_memcpy_char_fu_268_dst_address0;
wire    grp_p_memcpy_char_fu_268_dst_ce0;
wire    grp_p_memcpy_char_fu_268_dst_we0;
wire   [7:0] grp_p_memcpy_char_fu_268_dst_d0;
wire   [4:0] grp_p_memcpy_char_fu_268_src_address0;
wire    grp_p_memcpy_char_fu_268_src_ce0;
reg   [7:0] grp_p_memcpy_char_fu_268_src_q0;
wire    grp_p_memcpy_char_fu_275_ap_start;
wire    grp_p_memcpy_char_fu_275_ap_done;
wire    grp_p_memcpy_char_fu_275_ap_idle;
wire    grp_p_memcpy_char_fu_275_ap_ready;
wire   [4:0] grp_p_memcpy_char_fu_275_dst_address0;
wire    grp_p_memcpy_char_fu_275_dst_ce0;
wire    grp_p_memcpy_char_fu_275_dst_we0;
wire   [7:0] grp_p_memcpy_char_fu_275_dst_d0;
wire   [4:0] grp_p_memcpy_char_fu_275_src_address0;
wire    grp_p_memcpy_char_fu_275_src_ce0;
wire    grp_p_memcpy_char_fu_282_ap_start;
wire    grp_p_memcpy_char_fu_282_ap_done;
wire    grp_p_memcpy_char_fu_282_ap_idle;
wire    grp_p_memcpy_char_fu_282_ap_ready;
wire   [4:0] grp_p_memcpy_char_fu_282_dst_address0;
wire    grp_p_memcpy_char_fu_282_dst_ce0;
wire    grp_p_memcpy_char_fu_282_dst_we0;
wire   [7:0] grp_p_memcpy_char_fu_282_dst_d0;
wire   [4:0] grp_p_memcpy_char_fu_282_src_address0;
wire    grp_p_memcpy_char_fu_282_src_ce0;
reg   [4:0] invdar_reg_194;
wire   [0:0] tmp_s_fu_303_p2;
reg   [5:0] i_reg_205;
wire    ap_CS_fsm_state3;
reg    ap_block_state3_on_subcall_done;
wire    ap_CS_fsm_state5;
reg    ap_reg_grp_cmult_fu_216_ap_start;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    ap_reg_grp_crecip_fu_234_ap_start;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    ap_reg_grp_fmul_2_fu_249_ap_start;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    ap_reg_grp_fcontract_fu_256_ap_start;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    ap_reg_grp_fexpand_fu_262_ap_start;
wire    ap_CS_fsm_state6;
reg    ap_reg_grp_p_memcpy_char_fu_268_ap_start;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    ap_reg_grp_p_memcpy_char_fu_275_ap_start;
reg    ap_reg_grp_p_memcpy_char_fu_282_ap_start;
wire   [63:0] tmp_fu_298_p1;
reg    ap_block_state6_on_subcall_done;
wire   [7:0] tmp_825_fu_336_p3;
wire   [7:0] tmp_1063_cast_fu_357_p1;
wire   [4:0] tmp_629_fu_326_p4;
wire   [5:0] tmp_925_fu_345_p1;
wire   [6:0] tmp_826_fu_349_p3;
reg   [15:0] ap_NS_fsm;
reg    ap_block_state8_on_subcall_done;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_reg_grp_cmult_fu_216_ap_start = 1'b0;
#0 ap_reg_grp_crecip_fu_234_ap_start = 1'b0;
#0 ap_reg_grp_fmul_2_fu_249_ap_start = 1'b0;
#0 ap_reg_grp_fcontract_fu_256_ap_start = 1'b0;
#0 ap_reg_grp_fexpand_fu_262_ap_start = 1'b0;
#0 ap_reg_grp_p_memcpy_char_fu_268_ap_start = 1'b0;
#0 ap_reg_grp_p_memcpy_char_fu_275_ap_start = 1'b0;
#0 ap_reg_grp_p_memcpy_char_fu_282_ap_start = 1'b0;
end

curve25519_donna_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
curve25519_donna_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(32'd0),
    .mypublic_in_address0(grp_p_memcpy_char_fu_268_src_address0),
    .mypublic_in_ce0(mypublic_in_ce0),
    .mypublic_in_q0(mypublic_in_q0),
    .secret_in_address0(grp_p_memcpy_char_fu_275_src_address0),
    .secret_in_ce0(grp_p_memcpy_char_fu_275_src_ce0),
    .secret_in_q0(secret_in_q0),
    .basepoint_in_address0(grp_p_memcpy_char_fu_282_src_address0),
    .basepoint_in_ce0(grp_p_memcpy_char_fu_282_src_ce0),
    .basepoint_in_q0(basepoint_in_q0),
    .mypublic_out_address0(grp_p_memcpy_char_fu_268_dst_address0),
    .mypublic_out_ce0(mypublic_out_ce0),
    .mypublic_out_we0(mypublic_out_we0),
    .mypublic_out_d0(grp_p_memcpy_char_fu_268_dst_d0),
    .secret_out_address0(grp_p_memcpy_char_fu_268_dst_address0),
    .secret_out_ce0(secret_out_ce0),
    .secret_out_we0(secret_out_we0),
    .secret_out_d0(grp_p_memcpy_char_fu_268_dst_d0),
    .basepoint_out_address0(grp_p_memcpy_char_fu_268_dst_address0),
    .basepoint_out_ce0(basepoint_out_ce0),
    .basepoint_out_we0(basepoint_out_we0),
    .basepoint_out_d0(grp_p_memcpy_char_fu_268_dst_d0)
);

curve25519_donna_bp #(
    .DataWidth( 26 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
bp_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bp_address0),
    .ce0(bp_ce0),
    .we0(bp_we0),
    .d0(grp_fexpand_fu_262_output_r_d0),
    .q0(bp_q0)
);

curve25519_donna_x #(
    .DataWidth( 64 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
x_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_address0),
    .ce0(x_ce0),
    .we0(x_we0),
    .d0(grp_cmult_fu_216_resultx_d0),
    .q0(x_q0)
);

curve25519_donna_z #(
    .DataWidth( 64 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
z_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(z_address0),
    .ce0(z_ce0),
    .we0(z_we0),
    .d0(z_d0),
    .q0(z_q0)
);

curve25519_donna_x #(
    .DataWidth( 64 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
zmone_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(zmone_address0),
    .ce0(zmone_ce0),
    .we0(zmone_we0),
    .d0(grp_crecip_fu_234_out_r_d0),
    .q0(zmone_q0)
);

curve25519_donna_e #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
e_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(e_address0),
    .ce0(e_ce0),
    .we0(e_we0),
    .d0(e_d0),
    .q0(e_q0),
    .address1(e_address1),
    .ce1(e_ce1),
    .we1(e_we1),
    .d1(e_d1),
    .q1(e_q1)
);

curve25519_donna_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
mypublic_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mypublic_address0),
    .ce0(mypublic_ce0),
    .we0(mypublic_we0),
    .d0(mypublic_d0),
    .q0(mypublic_q0)
);

curve25519_donna_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
secret_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(secret_address0),
    .ce0(secret_ce0),
    .we0(secret_we0),
    .d0(grp_p_memcpy_char_fu_275_dst_d0),
    .q0(secret_q0)
);

curve25519_donna_dEe #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
basepoint_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(basepoint_address0),
    .ce0(basepoint_ce0),
    .we0(basepoint_we0),
    .d0(grp_p_memcpy_char_fu_282_dst_d0),
    .q0(basepoint_q0)
);

cmult grp_cmult_fu_216(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_cmult_fu_216_ap_start),
    .ap_done(grp_cmult_fu_216_ap_done),
    .ap_idle(grp_cmult_fu_216_ap_idle),
    .ap_ready(grp_cmult_fu_216_ap_ready),
    .resultx_address0(grp_cmult_fu_216_resultx_address0),
    .resultx_ce0(grp_cmult_fu_216_resultx_ce0),
    .resultx_we0(grp_cmult_fu_216_resultx_we0),
    .resultx_d0(grp_cmult_fu_216_resultx_d0),
    .resultz_address0(grp_cmult_fu_216_resultz_address0),
    .resultz_ce0(grp_cmult_fu_216_resultz_ce0),
    .resultz_we0(grp_cmult_fu_216_resultz_we0),
    .resultz_d0(grp_cmult_fu_216_resultz_d0),
    .n_address0(grp_cmult_fu_216_n_address0),
    .n_ce0(grp_cmult_fu_216_n_ce0),
    .n_q0(e_q0),
    .q_address0(grp_cmult_fu_216_q_address0),
    .q_ce0(grp_cmult_fu_216_q_ce0),
    .q_q0(bp_q0)
);

crecip grp_crecip_fu_234(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crecip_fu_234_ap_start),
    .ap_done(grp_crecip_fu_234_ap_done),
    .ap_idle(grp_crecip_fu_234_ap_idle),
    .ap_ready(grp_crecip_fu_234_ap_ready),
    .out_r_address0(grp_crecip_fu_234_out_r_address0),
    .out_r_ce0(grp_crecip_fu_234_out_r_ce0),
    .out_r_we0(grp_crecip_fu_234_out_r_we0),
    .out_r_d0(grp_crecip_fu_234_out_r_d0),
    .z_address0(grp_crecip_fu_234_z_address0),
    .z_ce0(grp_crecip_fu_234_z_ce0),
    .z_q0(z_q0)
);

fmul_2 grp_fmul_2_fu_249(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fmul_2_fu_249_ap_start),
    .ap_done(grp_fmul_2_fu_249_ap_done),
    .ap_idle(grp_fmul_2_fu_249_ap_idle),
    .ap_ready(grp_fmul_2_fu_249_ap_ready),
    .output_r_address0(grp_fmul_2_fu_249_output_r_address0),
    .output_r_ce0(grp_fmul_2_fu_249_output_r_ce0),
    .output_r_we0(grp_fmul_2_fu_249_output_r_we0),
    .output_r_d0(grp_fmul_2_fu_249_output_r_d0),
    .in_r_address0(grp_fmul_2_fu_249_in_r_address0),
    .in_r_ce0(grp_fmul_2_fu_249_in_r_ce0),
    .in_r_q0(x_q0),
    .in2_address0(grp_fmul_2_fu_249_in2_address0),
    .in2_ce0(grp_fmul_2_fu_249_in2_ce0),
    .in2_q0(zmone_q0)
);

fcontract grp_fcontract_fu_256(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fcontract_fu_256_ap_start),
    .ap_done(grp_fcontract_fu_256_ap_done),
    .ap_idle(grp_fcontract_fu_256_ap_idle),
    .ap_ready(grp_fcontract_fu_256_ap_ready),
    .output_r_address0(grp_fcontract_fu_256_output_r_address0),
    .output_r_ce0(grp_fcontract_fu_256_output_r_ce0),
    .output_r_we0(grp_fcontract_fu_256_output_r_we0),
    .output_r_d0(grp_fcontract_fu_256_output_r_d0),
    .input_limbs_address0(grp_fcontract_fu_256_input_limbs_address0),
    .input_limbs_ce0(grp_fcontract_fu_256_input_limbs_ce0),
    .input_limbs_q0(z_q0)
);

fexpand grp_fexpand_fu_262(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fexpand_fu_262_ap_start),
    .ap_done(grp_fexpand_fu_262_ap_done),
    .ap_idle(grp_fexpand_fu_262_ap_idle),
    .ap_ready(grp_fexpand_fu_262_ap_ready),
    .output_r_address0(grp_fexpand_fu_262_output_r_address0),
    .output_r_ce0(grp_fexpand_fu_262_output_r_ce0),
    .output_r_we0(grp_fexpand_fu_262_output_r_we0),
    .output_r_d0(grp_fexpand_fu_262_output_r_d0),
    .input_r_address0(grp_fexpand_fu_262_input_r_address0),
    .input_r_ce0(grp_fexpand_fu_262_input_r_ce0),
    .input_r_q0(basepoint_q0)
);

p_memcpy_char grp_p_memcpy_char_fu_268(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_p_memcpy_char_fu_268_ap_start),
    .ap_done(grp_p_memcpy_char_fu_268_ap_done),
    .ap_idle(grp_p_memcpy_char_fu_268_ap_idle),
    .ap_ready(grp_p_memcpy_char_fu_268_ap_ready),
    .dst_address0(grp_p_memcpy_char_fu_268_dst_address0),
    .dst_ce0(grp_p_memcpy_char_fu_268_dst_ce0),
    .dst_we0(grp_p_memcpy_char_fu_268_dst_we0),
    .dst_d0(grp_p_memcpy_char_fu_268_dst_d0),
    .src_address0(grp_p_memcpy_char_fu_268_src_address0),
    .src_ce0(grp_p_memcpy_char_fu_268_src_ce0),
    .src_q0(grp_p_memcpy_char_fu_268_src_q0)
);

p_memcpy_char grp_p_memcpy_char_fu_275(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_p_memcpy_char_fu_275_ap_start),
    .ap_done(grp_p_memcpy_char_fu_275_ap_done),
    .ap_idle(grp_p_memcpy_char_fu_275_ap_idle),
    .ap_ready(grp_p_memcpy_char_fu_275_ap_ready),
    .dst_address0(grp_p_memcpy_char_fu_275_dst_address0),
    .dst_ce0(grp_p_memcpy_char_fu_275_dst_ce0),
    .dst_we0(grp_p_memcpy_char_fu_275_dst_we0),
    .dst_d0(grp_p_memcpy_char_fu_275_dst_d0),
    .src_address0(grp_p_memcpy_char_fu_275_src_address0),
    .src_ce0(grp_p_memcpy_char_fu_275_src_ce0),
    .src_q0(secret_in_q0)
);

p_memcpy_char grp_p_memcpy_char_fu_282(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_p_memcpy_char_fu_282_ap_start),
    .ap_done(grp_p_memcpy_char_fu_282_ap_done),
    .ap_idle(grp_p_memcpy_char_fu_282_ap_idle),
    .ap_ready(grp_p_memcpy_char_fu_282_ap_ready),
    .dst_address0(grp_p_memcpy_char_fu_282_dst_address0),
    .dst_ce0(grp_p_memcpy_char_fu_282_dst_ce0),
    .dst_we0(grp_p_memcpy_char_fu_282_dst_we0),
    .dst_d0(grp_p_memcpy_char_fu_282_dst_d0),
    .src_address0(grp_p_memcpy_char_fu_282_src_address0),
    .src_ce0(grp_p_memcpy_char_fu_282_src_ce0),
    .src_q0(basepoint_in_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_cmult_fu_216_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_reg_grp_cmult_fu_216_ap_start <= 1'b1;
        end else if ((1'b1 == grp_cmult_fu_216_ap_ready)) begin
            ap_reg_grp_cmult_fu_216_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_crecip_fu_234_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_reg_grp_crecip_fu_234_ap_start <= 1'b1;
        end else if ((1'b1 == grp_crecip_fu_234_ap_ready)) begin
            ap_reg_grp_crecip_fu_234_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_fcontract_fu_256_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_reg_grp_fcontract_fu_256_ap_start <= 1'b1;
        end else if ((1'b1 == grp_fcontract_fu_256_ap_ready)) begin
            ap_reg_grp_fcontract_fu_256_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_fexpand_fu_262_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_309_p2 == 1'd1))) begin
            ap_reg_grp_fexpand_fu_262_ap_start <= 1'b1;
        end else if ((1'b1 == grp_fexpand_fu_262_ap_ready)) begin
            ap_reg_grp_fexpand_fu_262_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_fmul_2_fu_249_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_reg_grp_fmul_2_fu_249_ap_start <= 1'b1;
        end else if ((1'b1 == grp_fmul_2_fu_249_ap_ready)) begin
            ap_reg_grp_fmul_2_fu_249_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_p_memcpy_char_fu_268_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_309_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_s_fu_303_p2)) | (1'b1 == ap_CS_fsm_state15))) begin
            ap_reg_grp_p_memcpy_char_fu_268_ap_start <= 1'b1;
        end else if ((1'b1 == grp_p_memcpy_char_fu_268_ap_ready)) begin
            ap_reg_grp_p_memcpy_char_fu_268_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_p_memcpy_char_fu_275_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_s_fu_303_p2))) begin
            ap_reg_grp_p_memcpy_char_fu_275_ap_start <= 1'b1;
        end else if ((1'b1 == grp_p_memcpy_char_fu_275_ap_ready)) begin
            ap_reg_grp_p_memcpy_char_fu_275_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_p_memcpy_char_fu_282_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_s_fu_303_p2))) begin
            ap_reg_grp_p_memcpy_char_fu_282_ap_start <= 1'b1;
        end else if ((1'b1 == grp_p_memcpy_char_fu_282_ap_ready)) begin
            ap_reg_grp_p_memcpy_char_fu_282_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_205 <= i_14_reg_378;
    end else if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_on_subcall_done == 1'b0))) begin
        i_reg_205 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_s_fu_303_p2))) begin
        invdar_reg_194 <= indvarinc_fu_292_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_194 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_14_reg_378 <= i_14_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_309_p2 == 1'd0))) begin
        tmp_827_reg_383[5 : 0] <= tmp_827_fu_321_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_p_memcpy_char_fu_268_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (grp_p_memcpy_char_fu_268_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        basepoint_address0 = grp_p_memcpy_char_fu_282_dst_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        basepoint_address0 = grp_p_memcpy_char_fu_268_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        basepoint_address0 = grp_fexpand_fu_262_input_r_address0;
    end else begin
        basepoint_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        basepoint_ce0 = grp_p_memcpy_char_fu_282_dst_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        basepoint_ce0 = grp_p_memcpy_char_fu_268_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        basepoint_ce0 = grp_fexpand_fu_262_input_r_ce0;
    end else begin
        basepoint_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        basepoint_out_ce0 = grp_p_memcpy_char_fu_268_dst_ce0;
    end else begin
        basepoint_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        basepoint_out_we0 = grp_p_memcpy_char_fu_268_dst_we0;
    end else begin
        basepoint_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        basepoint_we0 = grp_p_memcpy_char_fu_282_dst_we0;
    end else begin
        basepoint_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bp_address0 = grp_fexpand_fu_262_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        bp_address0 = grp_cmult_fu_216_q_address0;
    end else begin
        bp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bp_ce0 = grp_fexpand_fu_262_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        bp_ce0 = grp_cmult_fu_216_q_ce0;
    end else begin
        bp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bp_we0 = grp_fexpand_fu_262_output_r_we0;
    end else begin
        bp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        e_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        e_address0 = tmp_fu_298_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        e_address0 = grp_cmult_fu_216_n_address0;
    end else begin
        e_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        e_address1 = e_addr_2_reg_393;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        e_address1 = tmp_827_reg_383;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        e_address1 = 64'd31;
    end else begin
        e_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_on_subcall_done == 1'b0)))) begin
        e_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        e_ce0 = grp_cmult_fu_216_n_ce0;
    end else begin
        e_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_on_subcall_done == 1'b0)))) begin
        e_ce1 = 1'b1;
    end else begin
        e_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        e_d0 = tmp_825_fu_336_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        e_d0 = 8'd0;
    end else begin
        e_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        e_d1 = tmp_1063_cast_fu_357_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        e_d1 = secret_q0;
    end else begin
        e_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_on_subcall_done == 1'b0)))) begin
        e_we0 = 1'b1;
    end else begin
        e_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_on_subcall_done == 1'b0)))) begin
        e_we1 = 1'b1;
    end else begin
        e_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_p_memcpy_char_fu_268_src_q0 = mypublic_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_p_memcpy_char_fu_268_src_q0 = basepoint_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_p_memcpy_char_fu_268_src_q0 = secret_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_p_memcpy_char_fu_268_src_q0 = mypublic_in_q0;
    end else begin
        grp_p_memcpy_char_fu_268_src_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mypublic_address0 = grp_p_memcpy_char_fu_268_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mypublic_address0 = grp_p_memcpy_char_fu_268_dst_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mypublic_address0 = grp_fcontract_fu_256_output_r_address0;
    end else begin
        mypublic_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mypublic_ce0 = grp_p_memcpy_char_fu_268_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        mypublic_ce0 = grp_p_memcpy_char_fu_268_dst_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mypublic_ce0 = grp_fcontract_fu_256_output_r_ce0;
    end else begin
        mypublic_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mypublic_d0 = grp_p_memcpy_char_fu_268_dst_d0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mypublic_d0 = grp_fcontract_fu_256_output_r_d0;
    end else begin
        mypublic_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mypublic_in_ce0 = grp_p_memcpy_char_fu_268_src_ce0;
    end else begin
        mypublic_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mypublic_out_ce0 = grp_p_memcpy_char_fu_268_dst_ce0;
    end else begin
        mypublic_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mypublic_out_we0 = grp_p_memcpy_char_fu_268_dst_we0;
    end else begin
        mypublic_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mypublic_we0 = grp_p_memcpy_char_fu_268_dst_we0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        mypublic_we0 = grp_fcontract_fu_256_output_r_we0;
    end else begin
        mypublic_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_309_p2 == 1'd0))) begin
        secret_address0 = tmp_827_fu_321_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        secret_address0 = grp_p_memcpy_char_fu_275_dst_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        secret_address0 = grp_p_memcpy_char_fu_268_src_address0;
    end else begin
        secret_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_309_p2 == 1'd0))) begin
        secret_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        secret_ce0 = grp_p_memcpy_char_fu_275_dst_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        secret_ce0 = grp_p_memcpy_char_fu_268_src_ce0;
    end else begin
        secret_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        secret_out_ce0 = grp_p_memcpy_char_fu_268_dst_ce0;
    end else begin
        secret_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        secret_out_we0 = grp_p_memcpy_char_fu_268_dst_we0;
    end else begin
        secret_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        secret_we0 = grp_p_memcpy_char_fu_275_dst_we0;
    end else begin
        secret_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        x_address0 = grp_fmul_2_fu_249_in_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_address0 = grp_cmult_fu_216_resultx_address0;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        x_ce0 = grp_fmul_2_fu_249_in_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_ce0 = grp_cmult_fu_216_resultx_ce0;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_we0 = grp_cmult_fu_216_resultx_we0;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        z_address0 = grp_fcontract_fu_256_input_limbs_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        z_address0 = grp_fmul_2_fu_249_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        z_address0 = grp_crecip_fu_234_z_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        z_address0 = grp_cmult_fu_216_resultz_address0;
    end else begin
        z_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        z_ce0 = grp_fcontract_fu_256_input_limbs_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        z_ce0 = grp_fmul_2_fu_249_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        z_ce0 = grp_crecip_fu_234_z_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        z_ce0 = grp_cmult_fu_216_resultz_ce0;
    end else begin
        z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        z_d0 = grp_fmul_2_fu_249_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        z_d0 = grp_cmult_fu_216_resultz_d0;
    end else begin
        z_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        z_we0 = grp_fmul_2_fu_249_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        z_we0 = grp_cmult_fu_216_resultz_we0;
    end else begin
        z_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        zmone_address0 = grp_fmul_2_fu_249_in2_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        zmone_address0 = grp_crecip_fu_234_out_r_address0;
    end else begin
        zmone_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        zmone_ce0 = grp_fmul_2_fu_249_in2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        zmone_ce0 = grp_crecip_fu_234_out_r_ce0;
    end else begin
        zmone_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zmone_we0 = grp_crecip_fu_234_out_r_we0;
    end else begin
        zmone_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_s_fu_303_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_309_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (ap_block_state8_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_crecip_fu_234_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_fmul_2_fu_249_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_fcontract_fu_256_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_p_memcpy_char_fu_268_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((1'b0 == grp_p_memcpy_char_fu_268_ap_done) | (1'b0 == grp_p_memcpy_char_fu_275_ap_done) | (1'b0 == grp_p_memcpy_char_fu_282_ap_done));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((1'b0 == grp_p_memcpy_char_fu_268_ap_done) | (1'b0 == grp_fexpand_fu_262_ap_done));
end

always @ (*) begin
    ap_block_state8_on_subcall_done = ((1'b0 == grp_p_memcpy_char_fu_268_ap_done) | (1'b0 == grp_cmult_fu_216_ap_done));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign e_addr_2_reg_393 = 64'd31;

assign exitcond_fu_309_p2 = ((i_reg_205 == 6'd32) ? 1'b1 : 1'b0);

assign grp_cmult_fu_216_ap_start = ap_reg_grp_cmult_fu_216_ap_start;

assign grp_crecip_fu_234_ap_start = ap_reg_grp_crecip_fu_234_ap_start;

assign grp_fcontract_fu_256_ap_start = ap_reg_grp_fcontract_fu_256_ap_start;

assign grp_fexpand_fu_262_ap_start = ap_reg_grp_fexpand_fu_262_ap_start;

assign grp_fmul_2_fu_249_ap_start = ap_reg_grp_fmul_2_fu_249_ap_start;

assign grp_p_memcpy_char_fu_268_ap_start = ap_reg_grp_p_memcpy_char_fu_268_ap_start;

assign grp_p_memcpy_char_fu_275_ap_start = ap_reg_grp_p_memcpy_char_fu_275_ap_start;

assign grp_p_memcpy_char_fu_282_ap_start = ap_reg_grp_p_memcpy_char_fu_282_ap_start;

assign i_14_fu_315_p2 = (i_reg_205 + 6'd1);

assign indvarinc_fu_292_p2 = (invdar_reg_194 + 5'd1);

assign tmp_1063_cast_fu_357_p1 = tmp_826_fu_349_p3;

assign tmp_629_fu_326_p4 = {{e_q0[7:3]}};

assign tmp_825_fu_336_p3 = {{tmp_629_fu_326_p4}, {3'd0}};

assign tmp_826_fu_349_p3 = {{1'd1}, {tmp_925_fu_345_p1}};

assign tmp_827_fu_321_p1 = i_reg_205;

assign tmp_925_fu_345_p1 = e_q1[5:0];

assign tmp_fu_298_p1 = invdar_reg_194;

assign tmp_s_fu_303_p2 = ((invdar_reg_194 == 5'd31) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_827_reg_383[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //curve25519_donna
