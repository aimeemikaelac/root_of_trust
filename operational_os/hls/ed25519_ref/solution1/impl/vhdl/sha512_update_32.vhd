-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha512_update_32 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    md_state_ce0 : OUT STD_LOGIC;
    md_state_we0 : OUT STD_LOGIC;
    md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    md_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    md_buf_ce0 : OUT STD_LOGIC;
    md_buf_we0 : OUT STD_LOGIC;
    md_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    md_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sha512_update_32 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_400 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_80 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000";
    constant ap_const_lv64_FFFFFFFFFFFFFF80 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111110000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_193 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_8_reg_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_01_idx9_reg_207 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal temp_index_2_reg_223 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal temp_index_3_reg_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_2_reg_240 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_load_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal md_curlen_load_2_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal n_fu_395_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_506 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_16_fu_402_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_reg_513 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_406_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_s_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_538 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_551 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01_idx_load_reg_561 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal temp_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal temp_buf_ce0 : STD_LOGIC;
    signal temp_buf_we0 : STD_LOGIC;
    signal temp_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_buf_ce1 : STD_LOGIC;
    signal temp_buf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha512_compress_32_fu_289_ap_start : STD_LOGIC;
    signal grp_sha512_compress_32_fu_289_ap_done : STD_LOGIC;
    signal grp_sha512_compress_32_fu_289_ap_idle : STD_LOGIC;
    signal grp_sha512_compress_32_fu_289_ap_ready : STD_LOGIC;
    signal grp_sha512_compress_32_fu_289_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_compress_32_fu_289_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_compress_32_fu_289_md_state_we0 : STD_LOGIC;
    signal grp_sha512_compress_32_fu_289_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_compress_32_fu_289_buf_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha512_compress_32_fu_289_buf_r_ce0 : STD_LOGIC;
    signal grp_sha512_compress_128_fu_300_ap_start : STD_LOGIC;
    signal grp_sha512_compress_128_fu_300_ap_done : STD_LOGIC;
    signal grp_sha512_compress_128_fu_300_ap_idle : STD_LOGIC;
    signal grp_sha512_compress_128_fu_300_ap_ready : STD_LOGIC;
    signal grp_sha512_compress_128_fu_300_md_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha512_compress_128_fu_300_md_state_ce0 : STD_LOGIC;
    signal grp_sha512_compress_128_fu_300_md_state_we0 : STD_LOGIC;
    signal grp_sha512_compress_128_fu_300_md_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha512_compress_128_fu_300_buf_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_compress_128_fu_300_buf_r_ce0 : STD_LOGIC;
    signal grp_sha512_compress_128_fu_300_buf_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sha512_compress_128_fu_300_buf_r_ce1 : STD_LOGIC;
    signal i_reg_151 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal temp_index_reg_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp_index_1_reg_173 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_reg_grp_sha512_compress_32_fu_289_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_reg_grp_sha512_compress_128_fu_300_ap_start : STD_LOGIC := '0';
    signal sum2_cast_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_cast_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_01_idx_fu_70 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_fu_74 : STD_LOGIC_VECTOR (63 downto 0);
    signal md_curlen_fu_78 : STD_LOGIC_VECTOR (63 downto 0);
    signal md_length_fu_82 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_410_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_420_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_380_p4 : STD_LOGIC_VECTOR (56 downto 0);
    signal icmp_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum2_cast_fu_415_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_fu_425_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component sha512_compress_32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sum : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha512_compress_128 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        md_state_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        md_state_ce0 : OUT STD_LOGIC;
        md_state_we0 : OUT STD_LOGIC;
        md_state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        md_state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha512_update_32_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_buf_U : component sha512_update_32_hbi
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_buf_address0,
        ce0 => temp_buf_ce0,
        we0 => temp_buf_we0,
        d0 => md_buf_q0,
        q0 => temp_buf_q0,
        address1 => grp_sha512_compress_128_fu_300_buf_r_address1,
        ce1 => temp_buf_ce1,
        q1 => temp_buf_q1);

    grp_sha512_compress_32_fu_289 : component sha512_compress_32
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha512_compress_32_fu_289_ap_start,
        ap_done => grp_sha512_compress_32_fu_289_ap_done,
        ap_idle => grp_sha512_compress_32_fu_289_ap_idle,
        ap_ready => grp_sha512_compress_32_fu_289_ap_ready,
        md_state_address0 => grp_sha512_compress_32_fu_289_md_state_address0,
        md_state_ce0 => grp_sha512_compress_32_fu_289_md_state_ce0,
        md_state_we0 => grp_sha512_compress_32_fu_289_md_state_we0,
        md_state_d0 => grp_sha512_compress_32_fu_289_md_state_d0,
        md_state_q0 => md_state_q0,
        buf_r_address0 => grp_sha512_compress_32_fu_289_buf_r_address0,
        buf_r_ce0 => grp_sha512_compress_32_fu_289_buf_r_ce0,
        buf_r_q0 => in_r_q0,
        sum => p_01_idx_load_reg_561);

    grp_sha512_compress_128_fu_300 : component sha512_compress_128
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha512_compress_128_fu_300_ap_start,
        ap_done => grp_sha512_compress_128_fu_300_ap_done,
        ap_idle => grp_sha512_compress_128_fu_300_ap_idle,
        ap_ready => grp_sha512_compress_128_fu_300_ap_ready,
        md_state_address0 => grp_sha512_compress_128_fu_300_md_state_address0,
        md_state_ce0 => grp_sha512_compress_128_fu_300_md_state_ce0,
        md_state_we0 => grp_sha512_compress_128_fu_300_md_state_we0,
        md_state_d0 => grp_sha512_compress_128_fu_300_md_state_d0,
        md_state_q0 => md_state_q0,
        buf_r_address0 => grp_sha512_compress_128_fu_300_buf_r_address0,
        buf_r_ce0 => grp_sha512_compress_128_fu_300_buf_r_ce0,
        buf_r_q0 => temp_buf_q0,
        buf_r_address1 => grp_sha512_compress_128_fu_300_buf_r_address1,
        buf_r_ce1 => grp_sha512_compress_128_fu_300_buf_r_ce1,
        buf_r_q1 => temp_buf_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_compress_128_fu_300_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_sha512_compress_128_fu_300_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_fu_268_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_sha512_compress_128_fu_300_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_compress_128_fu_300_ap_ready)) then 
                    ap_reg_grp_sha512_compress_128_fu_300_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_sha512_compress_32_fu_289_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_sha512_compress_32_fu_289_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_reg_grp_sha512_compress_32_fu_289_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_sha512_compress_32_fu_289_ap_ready)) then 
                    ap_reg_grp_sha512_compress_32_fu_289_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_151 <= i_1_reg_193;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_151 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    inlen_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_sha512_compress_32_fu_289_ap_done = ap_const_logic_1))) then 
                inlen_fu_74 <= grp_fu_184_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_268_p2 = ap_const_lv1_1))) then 
                inlen_fu_74 <= inlen_2_reg_240;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_fu_268_p2 = ap_const_lv1_0))) then 
                inlen_fu_74 <= grp_fu_248_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                inlen_fu_74 <= ap_const_lv64_20;
            end if; 
        end if;
    end process;

    md_curlen_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_fu_268_p2 = ap_const_lv1_0))) then 
                md_curlen_fu_78 <= tmp_8_reg_204;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_268_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (or_cond_fu_390_p2 = ap_const_lv1_1)))) then 
                md_curlen_fu_78 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    md_length_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (or_cond_fu_390_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (or_cond_reg_502 = ap_const_lv1_0) and (tmp_s_reg_531 = ap_const_lv1_1)))) then 
                md_length_fu_82 <= grp_fu_184_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                md_length_fu_82 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_01_idx_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_268_p2 = ap_const_lv1_1))) then 
                p_01_idx_fu_70 <= p_01_idx9_reg_207;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_fu_268_p2 = ap_const_lv1_0)))) then 
                p_01_idx_fu_70 <= grp_fu_184_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_01_idx_fu_70 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    temp_index_1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_sha512_compress_128_fu_300_ap_done = ap_const_logic_1))) then 
                temp_index_1_reg_173 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                temp_index_1_reg_173 <= temp_index_3_reg_230;
            end if; 
        end if;
    end process;

    temp_index_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_fu_268_p2 = ap_const_lv1_1))) then 
                temp_index_reg_162 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                temp_index_reg_162 <= temp_index_2_reg_223;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_1_reg_193 <= grp_fu_184_p2;
                tmp_16_reg_513 <= tmp_16_fu_402_p1;
                tmp_17_reg_518 <= tmp_17_fu_406_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                inlen_2_reg_240 <= grp_fu_248_p2;
                p_01_idx9_reg_207 <= grp_fu_184_p2;
                tmp_s_reg_531 <= grp_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                inlen_load_reg_480 <= inlen_fu_74;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                md_curlen_load_2_reg_492 <= md_curlen_fu_78;
                tmp_2_reg_497 <= grp_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                n_reg_506 <= n_fu_395_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                or_cond_reg_502 <= or_cond_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                p_01_idx_load_reg_561 <= p_01_idx_fu_70;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                temp_index_2_reg_223 <= grp_fu_184_p2(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                temp_index_3_reg_230 <= grp_fu_184_p2(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_268_p2 = ap_const_lv1_0))) then
                    tmp_11_reg_551(7 downto 0) <= tmp_11_fu_440_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_8_reg_204 <= grp_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_fu_268_p2 = ap_const_lv1_0))) then
                    tmp_9_reg_538(7 downto 0) <= tmp_9_fu_435_p1(7 downto 0);
            end if;
        end if;
    end process;
    tmp_9_reg_538(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_11_reg_551(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state2, grp_fu_268_p2, or_cond_fu_390_p2, ap_CS_fsm_state4, grp_sha512_compress_32_fu_289_ap_done, grp_sha512_compress_128_fu_300_ap_done, ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (or_cond_fu_390_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_sha512_compress_128_fu_300_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_sha512_compress_32_fu_289_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_fu_268_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_268_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, grp_fu_268_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_268_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= md_length_fu_82;
    ap_return_1 <= md_curlen_fu_78;

    grp_fu_184_p0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, inlen_load_reg_480, ap_CS_fsm_state4, n_reg_506, tmp_16_reg_513, tmp_17_reg_518, ap_CS_fsm_state7, ap_CS_fsm_state17, ap_CS_fsm_state8, temp_index_reg_162, temp_index_1_reg_173, ap_CS_fsm_state18, p_01_idx_fu_70, md_length_fu_82, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_184_p0 <= inlen_load_reg_480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_184_p0 <= p_01_idx_fu_70;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_184_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_index_1_reg_173),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_184_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_index_reg_162),64));
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_184_p0 <= n_reg_506;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_184_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_reg_513),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_184_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_518),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_184_p0 <= ap_const_lv64_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_184_p0 <= md_length_fu_82;
        else 
            grp_fu_184_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_184_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state17, i_reg_151, ap_CS_fsm_state8, ap_CS_fsm_state18, p_01_idx_fu_70, md_curlen_fu_78, ap_CS_fsm_state16, tmp_18_fu_410_p1, tmp_19_fu_420_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_184_p1 <= ap_const_lv64_FFFFFFFFFFFFFF80;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_184_p1 <= ap_const_lv64_80;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_1),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_184_p1 <= p_01_idx_fu_70;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_184_p1 <= md_curlen_fu_78;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_420_p1),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_410_p1),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_184_p1 <= i_reg_151;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_184_p1 <= ap_const_lv64_400;
        else 
            grp_fu_184_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_184_p2 <= std_logic_vector(unsigned(grp_fu_184_p0) + unsigned(grp_fu_184_p1));

    grp_fu_248_p0_assign_proc : process(ap_CS_fsm_state10, inlen_load_reg_480, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_248_p0 <= inlen_load_reg_480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_248_p0 <= ap_const_lv64_80;
        else 
            grp_fu_248_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_248_p1_assign_proc : process(ap_CS_fsm_state10, md_curlen_load_2_reg_492, n_reg_506, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_248_p1 <= n_reg_506;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_248_p1 <= md_curlen_load_2_reg_492;
        else 
            grp_fu_248_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_248_p2 <= std_logic_vector(unsigned(grp_fu_248_p0) - unsigned(grp_fu_248_p1));

    grp_fu_268_p0_assign_proc : process(ap_CS_fsm_state6, tmp_8_reg_204, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state3, i_reg_151, temp_index_reg_162, temp_index_1_reg_173, inlen_fu_74, md_curlen_fu_78)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_268_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_index_1_reg_173),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_268_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_index_reg_162),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_268_p0 <= tmp_8_reg_204;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_268_p0 <= i_reg_151;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_268_p0 <= md_curlen_fu_78;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_268_p0 <= inlen_fu_74;
        else 
            grp_fu_268_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_268_p1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state3, n_reg_506)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_80),64));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_268_p1 <= ap_const_lv64_80;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_268_p1 <= n_reg_506;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_268_p1 <= ap_const_lv64_0;
        else 
            grp_fu_268_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_268_p2 <= "1" when (grp_fu_268_p0 = grp_fu_268_p1) else "0";
    grp_sha512_compress_128_fu_300_ap_start <= ap_reg_grp_sha512_compress_128_fu_300_ap_start;
    grp_sha512_compress_32_fu_289_ap_start <= ap_reg_grp_sha512_compress_32_fu_289_ap_start;
    icmp_fu_273_p2 <= "0" when (tmp_fu_380_p4 = ap_const_lv57_0) else "1";

    in_r_address0_assign_proc : process(ap_CS_fsm_state7, grp_sha512_compress_32_fu_289_buf_r_address0, ap_CS_fsm_state18, sum2_cast_fu_415_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_address0 <= sum2_cast_fu_415_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            in_r_address0 <= grp_sha512_compress_32_fu_289_buf_r_address0;
        else 
            in_r_address0 <= "XXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_state7, grp_sha512_compress_32_fu_289_buf_r_ce0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            in_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            in_r_ce0 <= grp_sha512_compress_32_fu_289_buf_r_ce0;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    md_buf_address0_assign_proc : process(ap_CS_fsm_state11, tmp_9_fu_435_p1, tmp_11_reg_551, ap_CS_fsm_state8, ap_CS_fsm_state15, tmp_5_cast_fu_425_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            md_buf_address0 <= tmp_11_reg_551(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            md_buf_address0 <= tmp_9_fu_435_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            md_buf_address0 <= tmp_5_cast_fu_425_p1(7 - 1 downto 0);
        else 
            md_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    md_buf_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            md_buf_ce0 <= ap_const_logic_1;
        else 
            md_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    md_buf_d0_assign_proc : process(in_r_q0, temp_buf_q0, ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            md_buf_d0 <= temp_buf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            md_buf_d0 <= in_r_q0;
        else 
            md_buf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    md_buf_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            md_buf_we0 <= ap_const_logic_1;
        else 
            md_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    md_state_address0_assign_proc : process(grp_sha512_compress_32_fu_289_md_state_address0, grp_sha512_compress_128_fu_300_md_state_address0, ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            md_state_address0 <= grp_sha512_compress_128_fu_300_md_state_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            md_state_address0 <= grp_sha512_compress_32_fu_289_md_state_address0;
        else 
            md_state_address0 <= "XXX";
        end if; 
    end process;


    md_state_ce0_assign_proc : process(grp_sha512_compress_32_fu_289_md_state_ce0, grp_sha512_compress_128_fu_300_md_state_ce0, ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            md_state_ce0 <= grp_sha512_compress_128_fu_300_md_state_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            md_state_ce0 <= grp_sha512_compress_32_fu_289_md_state_ce0;
        else 
            md_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    md_state_d0_assign_proc : process(grp_sha512_compress_32_fu_289_md_state_d0, grp_sha512_compress_128_fu_300_md_state_d0, ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            md_state_d0 <= grp_sha512_compress_128_fu_300_md_state_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            md_state_d0 <= grp_sha512_compress_32_fu_289_md_state_d0;
        else 
            md_state_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    md_state_we0_assign_proc : process(grp_sha512_compress_32_fu_289_md_state_we0, grp_sha512_compress_128_fu_300_md_state_we0, ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            md_state_we0 <= grp_sha512_compress_128_fu_300_md_state_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            md_state_we0 <= grp_sha512_compress_32_fu_289_md_state_we0;
        else 
            md_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    n_fu_395_p3 <= 
        inlen_load_reg_480 when (tmp_7_fu_278_p2(0) = '1') else 
        grp_fu_248_p2;
    or_cond_fu_390_p2 <= (tmp_2_reg_497 and icmp_fu_273_p2);
    sum2_cast_fu_415_p0 <= grp_fu_184_p2(8 - 1 downto 0);
    sum2_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_cast_fu_415_p0),64));

    temp_buf_address0_assign_proc : process(ap_CS_fsm_state14, tmp_9_reg_538, tmp_11_fu_440_p1, grp_sha512_compress_128_fu_300_buf_r_address0, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_buf_address0 <= tmp_11_fu_440_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_buf_address0 <= tmp_9_reg_538(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_buf_address0 <= grp_sha512_compress_128_fu_300_buf_r_address0;
        else 
            temp_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    temp_buf_ce0_assign_proc : process(ap_CS_fsm_state14, grp_sha512_compress_128_fu_300_buf_r_ce0, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            temp_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_buf_ce0 <= grp_sha512_compress_128_fu_300_buf_r_ce0;
        else 
            temp_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buf_ce1_assign_proc : process(grp_sha512_compress_128_fu_300_buf_r_ce1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_buf_ce1 <= grp_sha512_compress_128_fu_300_buf_r_ce1;
        else 
            temp_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_buf_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_buf_we0 <= ap_const_logic_1;
        else 
            temp_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_index_1_reg_173),64));
    tmp_16_fu_402_p1 <= i_reg_151(9 - 1 downto 0);
    tmp_17_fu_406_p1 <= i_reg_151(8 - 1 downto 0);
    tmp_18_fu_410_p1 <= p_01_idx_fu_70(8 - 1 downto 0);
    tmp_19_fu_420_p1 <= md_curlen_fu_78(9 - 1 downto 0);
    tmp_5_cast_fu_425_p0 <= grp_fu_184_p2(9 - 1 downto 0);
    tmp_5_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_cast_fu_425_p0),64));
    tmp_7_fu_278_p2 <= "1" when (unsigned(inlen_load_reg_480) < unsigned(grp_fu_248_p2)) else "0";
    tmp_9_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_index_reg_162),64));
    tmp_fu_380_p4 <= inlen_load_reg_480(63 downto 7);
end behav;
