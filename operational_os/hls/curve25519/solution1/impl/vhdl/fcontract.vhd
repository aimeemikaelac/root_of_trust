-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fcontract is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_limbs_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_limbs_ce0 : OUT STD_LOGIC;
    input_limbs_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fcontract is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (49 downto 0) := "00000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (49 downto 0) := "00000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (49 downto 0) := "00000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (49 downto 0) := "00000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (49 downto 0) := "00000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (49 downto 0) := "00000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (49 downto 0) := "00001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (49 downto 0) := "00010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (49 downto 0) := "00100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (49 downto 0) := "01000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (49 downto 0) := "10000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_FC000013 : STD_LOGIC_VECTOR (31 downto 0) := "11111100000000000000000000010011";
    constant ap_const_lv32_FC000000 : STD_LOGIC_VECTOR (31 downto 0) := "11111100000000000000000000000000";
    constant ap_const_lv32_FE000000 : STD_LOGIC_VECTOR (31 downto 0) := "11111110000000000000000000000000";
    constant ap_const_lv26_1FFFFFF : STD_LOGIC_VECTOR (25 downto 0) := "01111111111111111111111111";
    constant ap_const_lv26_3FFFFFF : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_13 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal reg_849 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal reg_854 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_859 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_864 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_6_fu_875_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_reg_1960 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1965 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond6_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_897_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_1990 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_addr_33_reg_1995 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_883_fu_903_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_883_reg_2001 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_7_fu_913_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_2008 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_addr_34_reg_2015 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_387_fu_946_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_387_reg_2021 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_addr_35_reg_2026 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_389_fu_975_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_389_reg_2032 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_addr_36_reg_2037 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_752_fu_1119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_3_fu_1139_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_2051 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal mask_2_cast_fu_1165_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_887_fu_1173_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_887_reg_2061 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_9_fu_1183_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_reg_2068 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_addr_37_reg_2075 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_393_reg_2080 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal input_addr_39_reg_2085 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_766_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_395_reg_2091 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_addr_40_reg_2096 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1943_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal exitcond1_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_888_fu_1274_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_888_reg_2115 : STD_LOGIC_VECTOR (25 downto 0);
    signal mask_1_fu_1495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_8_fu_1501_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_addr_48_reg_2133 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal exitcond_fu_1507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_1546_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal input_addr_42_reg_2144 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_915_fu_1552_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_915_reg_2149 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_784_reg_2154 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_785_reg_2159 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_addr_41_reg_2164 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_917_fu_1587_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_917_reg_2175 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_793_reg_2180 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_794_reg_2185 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_795_reg_2190 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_45_reg_2195 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_788_reg_2206 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_789_reg_2211 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_792_fu_1676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_792_reg_2216 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_920_fu_1682_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_920_reg_2221 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_806_reg_2226 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_807_reg_2231 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_808_reg_2236 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_load_50_reg_2241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_922_fu_1716_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_922_reg_2246 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_816_reg_2251 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_817_reg_2256 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_818_reg_2261 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_782_fu_1769_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_782_reg_2266 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_800_reg_2283 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_810_fu_1825_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_810_reg_2288 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_811_reg_2293 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_812_reg_2298 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_815_fu_1867_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_815_reg_2303 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_820_fu_1885_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_820_reg_2313 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_823_reg_2318 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_919_fu_1896_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_919_reg_2323 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_805_fu_1907_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_805_reg_2328 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_ce0 : STD_LOGIC;
    signal input_we0 : STD_LOGIC;
    signal input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_ce1 : STD_LOGIC;
    signal input_we1 : STD_LOGIC;
    signal input_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_667 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_reg_678 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_1_reg_689 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal a_assign_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_710 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_721 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_3_reg_732 : STD_LOGIC_VECTOR (3 downto 0);
    signal mask4_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_754 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_758_fu_919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_766_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_762_fu_1000_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_773_fu_1189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_776_fu_1217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_774_fu_1226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_770_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_824_fu_1513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_881_fu_886_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_765_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_761_fu_993_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_767_fu_1007_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_763_fu_1017_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_755_fu_1068_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1934_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_753_fu_1126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_964_cast_fu_1212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_968_cast_fu_1221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_777_fu_1233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_775_fu_1243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_954_cast_fu_1258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_769_fu_1320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_fu_1539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_906_fu_1750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_908_fu_1775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_910_fu_1782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_912_fu_1789_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_907_fu_1890_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_909_fu_1913_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_911_fu_1920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_913_fu_1927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_787_fu_1633_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_914_fu_1757_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_797_fu_1807_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_886_fu_924_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_4_fu_932_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_759_fu_940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_985_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_764_fu_1004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_760_fu_1014_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_885_fu_1024_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_3_fu_1032_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_754_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_383_fu_1046_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_fu_1060_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_882_fu_1075_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_fu_1083_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1091_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_379_fu_1097_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_fu_1111_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_751_fu_1107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_1_fu_1145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_884_fu_1151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_2_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_904_fu_1194_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_905_fu_1198_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal carry_1_fu_1230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal carry_fu_1240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_903_fu_1250_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_597_fu_1278_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_598_fu_1288_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_889_fu_1298_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_768_fu_1302_p6 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_953_cast_fu_1316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_3_fu_1327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_890_fu_1333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_4_fu_1339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_891_fu_1345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_5_fu_1351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_892_fu_1357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_6_fu_1363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_893_fu_1369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_7_fu_1375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_894_fu_1381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_9_fu_1393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_895_fu_1399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_s_fu_1405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_896_fu_1411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_2_fu_1417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_897_fu_1423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_10_fu_1429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_898_fu_1435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_11_fu_1441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_899_fu_1447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_12_fu_1453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_8_fu_1387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_902_fu_1475_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_900_fu_1459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_901_fu_1467_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_612_fu_1479_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_pn_fu_1487_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_924_fu_1518_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1121_pn_v_fu_1522_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_1121_pn_fu_1530_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_1121_pn_cast_fu_1535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_916_fu_1621_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_786_fu_1625_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_791_fu_1669_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_790_fu_1659_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_796_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_781_fu_1762_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_918_fu_1795_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_796_fu_1799_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_921_fu_1813_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_809_fu_1817_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_814_fu_1860_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_813_fu_1850_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_923_fu_1873_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_819_fu_1877_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_804_fu_1900_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1934_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1943_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (49 downto 0);

    component curve25519_donna_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fcontract_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    input_U : component fcontract_input
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_address0,
        ce0 => input_ce0,
        we0 => input_we0,
        d0 => input_d0,
        q0 => input_q0,
        address1 => input_address1,
        ce1 => input_ce1,
        we1 => input_we1,
        d1 => input_d1,
        q1 => input_q1);

    curve25519_donna_bkb_U71 : component curve25519_donna_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1934_p0,
        din1 => tmp_383_fu_1046_p4,
        din2 => input_q0,
        dout => grp_fu_1934_p3);

    curve25519_donna_bkb_U72 : component curve25519_donna_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1943_p0,
        din1 => grp_fu_766_p4,
        din2 => input_q0,
        dout => grp_fu_1943_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_assign_reg_700_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                a_assign_reg_700 <= grp_fu_1943_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                a_assign_reg_700 <= tmp_752_fu_1119_p2;
            end if; 
        end if;
    end process;

    i_1_reg_689_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_891_p2))) then 
                i_1_reg_689 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_689 <= i_7_reg_2008;
            end if; 
        end if;
    end process;

    i_2_reg_721_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond3_fu_1133_p2))) then 
                i_2_reg_721 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_2_reg_721 <= i_9_reg_2068;
            end if; 
        end if;
    end process;

    i_3_reg_732_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_3_reg_732 <= i_8_fu_1501_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond3_fu_1133_p2))) then 
                i_3_reg_732 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    i_4_reg_754_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_4_reg_754 <= i_13_fu_1546_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond1_fu_1263_p2))) then 
                i_4_reg_754 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    i_reg_667_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_667 <= i_6_reg_1960;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_667 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_1_reg_710_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_1_reg_710 <= j_3_reg_2051;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_1_reg_710 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_678_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond6_fu_869_p2 = ap_const_lv1_1))) then 
                j_reg_678 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_678 <= j_2_reg_1990;
            end if; 
        end if;
    end process;

    mask4_reg_744_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                mask4_reg_744 <= mask_1_fu_1495_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond3_fu_1133_p2))) then 
                mask4_reg_744 <= mask_2_cast_fu_1165_p3;
            end if; 
        end if;
    end process;

    reg_844_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                reg_844 <= input_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                reg_844 <= input_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_6_reg_1960 <= i_6_fu_875_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_7_reg_2008 <= i_7_fu_913_p2;
                tmp_883_reg_2001 <= tmp_883_fu_903_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_9_reg_2068 <= i_9_fu_1183_p2;
                tmp_887_reg_2061 <= tmp_887_fu_1173_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_907_p2))) then
                input_addr_34_reg_2015 <= tmp_758_fu_919_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_883_reg_2001))) then
                input_addr_35_reg_2026 <= tmp_766_fu_971_p1(4 - 1 downto 0);
                tmp_387_reg_2021 <= tmp_759_fu_940_p2(31 downto 26);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_883_reg_2001))) then
                input_addr_36_reg_2037 <= tmp_762_fu_1000_p1(4 - 1 downto 0);
                tmp_389_reg_2032 <= tmp_759_fu_940_p2(31 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond2_fu_1177_p2))) then
                input_addr_37_reg_2075 <= tmp_773_fu_1189_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_887_reg_2061))) then
                input_addr_39_reg_2085 <= tmp_776_fu_1217_p1(4 - 1 downto 0);
                tmp_393_reg_2080 <= input_q1(31 downto 26);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_887_reg_2061))) then
                input_addr_40_reg_2096 <= tmp_774_fu_1226_p1(4 - 1 downto 0);
                tmp_395_reg_2091 <= input_q1(31 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = exitcond_fu_1507_p2))) then
                input_addr_48_reg_2133 <= tmp_824_fu_1513_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                input_load_45_reg_2195 <= input_q1;
                tmp_788_reg_2206 <= input_q1(12 downto 5);
                tmp_789_reg_2211 <= input_q1(20 downto 13);
                tmp_792_reg_2216 <= tmp_792_fu_1676_p2;
                tmp_806_reg_2226 <= input_q0(14 downto 7);
                tmp_807_reg_2231 <= input_q0(22 downto 15);
                tmp_808_reg_2236 <= input_q0(30 downto 23);
                tmp_920_reg_2221 <= tmp_920_fu_1682_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                input_load_50_reg_2241 <= input_q1;
                tmp_816_reg_2251 <= input_q1(11 downto 4);
                tmp_817_reg_2256 <= input_q1(19 downto 12);
                tmp_818_reg_2261 <= input_q1(27 downto 20);
                tmp_922_reg_2246 <= tmp_922_fu_1716_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_2_reg_1990 <= j_2_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_3_reg_2051 <= j_3_fu_1139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_836 <= input_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_840 <= input_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_849 <= input_q0(15 downto 8);
                reg_854 <= input_q0(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_859 <= input_q1(9 downto 2);
                reg_864 <= input_q1(17 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_782_reg_2266 <= tmp_782_fu_1769_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_784_reg_2154 <= input_q1(21 downto 14);
                tmp_785_reg_2159 <= input_q1(29 downto 22);
                tmp_915_reg_2149 <= tmp_915_fu_1552_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_793_reg_2180 <= input_q0(10 downto 3);
                tmp_794_reg_2185 <= input_q0(18 downto 11);
                tmp_795_reg_2190 <= input_q0(26 downto 19);
                tmp_917_reg_2175 <= tmp_917_fu_1587_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_800_reg_2283 <= input_q1(25 downto 18);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_805_reg_2328 <= tmp_805_fu_1907_p2;
                tmp_919_reg_2323 <= tmp_919_fu_1896_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_810_reg_2288 <= tmp_810_fu_1825_p2;
                tmp_811_reg_2293 <= input_q0(12 downto 5);
                tmp_812_reg_2298 <= input_q0(20 downto 13);
                tmp_815_reg_2303 <= tmp_815_fu_1867_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_820_reg_2313 <= tmp_820_fu_1885_p2;
                tmp_823_reg_2318 <= input_q1(25 downto 18);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond1_fu_1263_p2))) then
                tmp_888_reg_2115 <= tmp_888_fu_1274_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond6_fu_869_p2 = ap_const_lv1_0))) then
                    tmp_reg_1965(3 downto 0) <= tmp_fu_881_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_1965(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond6_fu_869_p2, ap_CS_fsm_state4, exitcond5_fu_891_p2, ap_CS_fsm_state5, exitcond4_fu_907_p2, ap_CS_fsm_state10, exitcond3_fu_1133_p2, ap_CS_fsm_state11, exitcond2_fu_1177_p2, ap_CS_fsm_state15, exitcond1_fu_1263_p2, ap_CS_fsm_state17, exitcond_fu_1507_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond6_fu_869_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_891_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_907_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond3_fu_1133_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond2_fu_1177_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond1_fu_1263_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond_fu_1507_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_10_fu_1429_p2 <= (tmp_897_fu_1423_p2 and a_assign_2_fu_1417_p2);
    a_assign_11_fu_1441_p2 <= (tmp_898_fu_1435_p2 and a_assign_10_fu_1429_p2);
    a_assign_12_fu_1453_p2 <= (tmp_899_fu_1447_p2 and a_assign_11_fu_1441_p2);
    a_assign_1_fu_1145_p2 <= std_logic_vector(signed(ap_const_lv32_FC000013) + signed(a_assign_reg_700));
    a_assign_2_fu_1417_p2 <= (tmp_896_fu_1411_p2 and a_assign_s_fu_1405_p2);
    a_assign_3_fu_1327_p2 <= (input_q0 xor ap_const_lv32_FC000000);
    a_assign_4_fu_1339_p2 <= (tmp_890_fu_1333_p2 and a_assign_3_fu_1327_p2);
    a_assign_5_fu_1351_p2 <= (tmp_891_fu_1345_p2 and a_assign_4_fu_1339_p2);
    a_assign_6_fu_1363_p2 <= (tmp_892_fu_1357_p2 and a_assign_5_fu_1351_p2);
    a_assign_7_fu_1375_p2 <= (tmp_893_fu_1369_p2 and a_assign_6_fu_1363_p2);
    a_assign_8_fu_1387_p2 <= (tmp_894_fu_1381_p2 and a_assign_7_fu_1375_p2);
    a_assign_9_fu_1393_p2 <= (input_q0 xor ap_const_lv32_FE000000);
    a_assign_s_fu_1405_p2 <= (tmp_895_fu_1399_p2 and a_assign_9_fu_1393_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state50)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        carry_1_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_393_reg_2080),32));

        carry_fu_1240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_395_reg_2091),32));

    exitcond1_fu_1263_p2 <= "1" when (i_3_reg_732 = ap_const_lv4_A) else "0";
    exitcond2_fu_1177_p2 <= "1" when (i_2_reg_721 = ap_const_lv4_9) else "0";
    exitcond3_fu_1133_p2 <= "1" when (j_1_reg_710 = ap_const_lv2_2) else "0";
    exitcond4_fu_907_p2 <= "1" when (i_1_reg_689 = ap_const_lv4_9) else "0";
    exitcond5_fu_891_p2 <= "1" when (j_reg_678 = ap_const_lv2_2) else "0";
    exitcond6_fu_869_p2 <= "1" when (i_reg_667 = ap_const_lv4_A) else "0";
    exitcond_fu_1507_p2 <= "1" when (i_4_reg_754 = ap_const_lv4_A) else "0";
    grp_fu_1934_p0 <= ap_const_lv13_13(6 - 1 downto 0);
    grp_fu_1943_p0 <= ap_const_lv13_13(6 - 1 downto 0);
    grp_fu_766_p4 <= input_q1(31 downto 25);
    grp_fu_796_p4 <= input_q0(31 downto 24);
    i_13_fu_1546_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_4_reg_754));
    i_6_fu_875_p2 <= std_logic_vector(unsigned(i_reg_667) + unsigned(ap_const_lv4_1));
    i_7_fu_913_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_1_reg_689));
    i_8_fu_1501_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_3_reg_732));
    i_9_fu_1183_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_2_reg_721));
    input_addr_33_reg_1995 <= ap_const_lv64_1(4 - 1 downto 0);
    input_addr_41_reg_2164 <= ap_const_lv64_2(4 - 1 downto 0);
    input_addr_42_reg_2144 <= ap_const_lv64_3(4 - 1 downto 0);

    input_address0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state33, tmp_reg_1965, ap_CS_fsm_state4, tmp_883_reg_2001, ap_CS_fsm_state5, input_addr_34_reg_2015, ap_CS_fsm_state6, input_addr_35_reg_2026, input_addr_36_reg_2037, ap_CS_fsm_state9, tmp_887_reg_2061, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, exitcond1_fu_1263_p2, input_addr_48_reg_2133, ap_CS_fsm_state18, input_addr_42_reg_2144, ap_CS_fsm_state22, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state7, tmp_776_fu_1217_p1, tmp_774_fu_1226_p1, tmp_770_fu_1269_p1, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            input_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            input_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            input_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_address0 <= input_addr_42_reg_2144;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_address0 <= input_addr_48_reg_2133;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond1_fu_1263_p2))) then 
            input_address0 <= tmp_770_fu_1269_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            input_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_887_reg_2061))) then 
            input_address0 <= tmp_774_fu_1226_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_887_reg_2061))) then 
            input_address0 <= tmp_776_fu_1217_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = tmp_883_reg_2001) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            input_address0 <= input_addr_36_reg_2037;
        elsif (((ap_const_lv1_0 = tmp_883_reg_2001) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            input_address0 <= input_addr_35_reg_2026;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_883_reg_2001)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_883_reg_2001)))) then 
            input_address0 <= input_addr_34_reg_2015;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond1_fu_1263_p2)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_address0 <= tmp_reg_1965(4 - 1 downto 0);
        else 
            input_address0 <= "XXXX";
        end if; 
    end process;


    input_address1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state32, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state4, input_addr_33_reg_1995, tmp_883_reg_2001, ap_CS_fsm_state5, exitcond4_fu_907_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, tmp_887_reg_2061, ap_CS_fsm_state11, input_addr_37_reg_2075, exitcond2_fu_1177_p2, ap_CS_fsm_state12, input_addr_39_reg_2085, input_addr_40_reg_2096, ap_CS_fsm_state14, ap_CS_fsm_state17, exitcond_fu_1507_p2, input_addr_41_reg_2164, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state13, tmp_758_fu_919_p1, tmp_766_fu_971_p1, tmp_762_fu_1000_p1, tmp_773_fu_1189_p1, tmp_824_fu_1513_p1, ap_CS_fsm_state25, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            input_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_address1 <= input_addr_41_reg_2164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            input_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond_fu_1507_p2)))) then 
            input_address1 <= input_addr_33_reg_1995;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = exitcond_fu_1507_p2))) then 
            input_address1 <= tmp_824_fu_1513_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = tmp_887_reg_2061) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            input_address1 <= input_addr_40_reg_2096;
        elsif (((ap_const_lv1_0 = tmp_887_reg_2061) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            input_address1 <= input_addr_39_reg_2085;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_887_reg_2061)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_887_reg_2061)))) then 
            input_address1 <= input_addr_37_reg_2075;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond2_fu_1177_p2))) then 
            input_address1 <= tmp_773_fu_1189_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            input_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_883_reg_2001))) then 
            input_address1 <= tmp_762_fu_1000_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_883_reg_2001))) then 
            input_address1 <= tmp_766_fu_971_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_907_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond2_fu_1177_p2)))) then 
            input_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_907_p2))) then 
            input_address1 <= tmp_758_fu_919_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            input_address1 <= "XXXX";
        end if; 
    end process;


    input_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state33, ap_CS_fsm_state4, tmp_883_reg_2001, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, tmp_887_reg_2061, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, exitcond1_fu_1263_p2, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_883_reg_2001)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_883_reg_2001)) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_887_reg_2061)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_887_reg_2061)) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond1_fu_1263_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond1_fu_1263_p2)) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_const_lv1_0 = tmp_883_reg_2001) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = tmp_883_reg_2001) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            input_ce0 <= ap_const_logic_1;
        else 
            input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state32, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state4, tmp_883_reg_2001, ap_CS_fsm_state5, exitcond4_fu_907_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, tmp_887_reg_2061, ap_CS_fsm_state11, exitcond2_fu_1177_p2, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state17, exitcond_fu_1507_p2, ap_CS_fsm_state30, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state25, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_907_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_883_reg_2001)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_883_reg_2001)) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond2_fu_1177_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_887_reg_2061)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_887_reg_2061)) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = exitcond_fu_1507_p2)) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_907_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond2_fu_1177_p2)) or ((ap_const_lv1_0 = tmp_887_reg_2061) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = tmp_887_reg_2061) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond_fu_1507_p2)))) then 
            input_ce1 <= ap_const_logic_1;
        else 
            input_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_d0_assign_proc : process(tmp_883_reg_2001, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, exitcond1_fu_1263_p2, ap_CS_fsm_state18, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state35, ap_CS_fsm_state37, tmp_881_fu_886_p1, tmp_765_fu_964_p2, tmp_761_fu_993_p2, tmp_767_fu_1007_p2, tmp_763_fu_1017_p2, grp_fu_1934_p3, tmp_753_fu_1126_p2, tmp_954_cast_fu_1258_p1, tmp_769_fu_1320_p2, storemerge_fu_1539_p2, tmp_908_fu_1775_p2, tmp_912_fu_1789_p2, tmp_909_fu_1913_p2, tmp_913_fu_1927_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            input_d0 <= tmp_913_fu_1927_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            input_d0 <= tmp_909_fu_1913_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            input_d0 <= tmp_912_fu_1789_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_d0 <= tmp_908_fu_1775_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_d0 <= storemerge_fu_1539_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond1_fu_1263_p2))) then 
            input_d0 <= tmp_769_fu_1320_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_d0 <= tmp_954_cast_fu_1258_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_d0 <= tmp_753_fu_1126_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_d0 <= grp_fu_1934_p3;
        elsif (((ap_const_lv1_1 = tmp_883_reg_2001) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            input_d0 <= tmp_763_fu_1017_p2;
        elsif (((ap_const_lv1_0 = tmp_883_reg_2001) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            input_d0 <= tmp_767_fu_1007_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_883_reg_2001))) then 
            input_d0 <= tmp_761_fu_993_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_883_reg_2001))) then 
            input_d0 <= tmp_765_fu_964_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_d0 <= tmp_881_fu_886_p1;
        else 
            input_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_d1_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state34, tmp_752_fu_1119_p2, ap_CS_fsm_state9, tmp_887_reg_2061, ap_CS_fsm_state12, grp_fu_1943_p3, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state25, ap_CS_fsm_state36, tmp_755_fu_1068_p2, tmp_964_cast_fu_1212_p1, tmp_968_cast_fu_1221_p1, tmp_777_fu_1233_p2, tmp_775_fu_1243_p2, tmp_906_fu_1750_p2, tmp_910_fu_1782_p2, tmp_907_fu_1890_p2, tmp_911_fu_1920_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            input_d1 <= tmp_911_fu_1920_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_d1 <= tmp_907_fu_1890_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_d1 <= tmp_910_fu_1782_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input_d1 <= tmp_906_fu_1750_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_d1 <= grp_fu_1943_p3;
        elsif (((ap_const_lv1_1 = tmp_887_reg_2061) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            input_d1 <= tmp_775_fu_1243_p2;
        elsif (((ap_const_lv1_0 = tmp_887_reg_2061) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            input_d1 <= tmp_777_fu_1233_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_887_reg_2061))) then 
            input_d1 <= tmp_968_cast_fu_1221_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_887_reg_2061))) then 
            input_d1 <= tmp_964_cast_fu_1212_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_d1 <= tmp_752_fu_1119_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_d1 <= tmp_755_fu_1068_p2;
        else 
            input_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    input_limbs_address0 <= tmp_fu_881_p1(4 - 1 downto 0);

    input_limbs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_limbs_ce0 <= ap_const_logic_1;
        else 
            input_limbs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_we0_assign_proc : process(tmp_883_reg_2001, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state15, exitcond1_fu_1263_p2, ap_CS_fsm_state18, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state35, ap_CS_fsm_state37)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_883_reg_2001)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_883_reg_2001)) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond1_fu_1263_p2)) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_const_lv1_0 = tmp_883_reg_2001) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = tmp_883_reg_2001) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            input_we0 <= ap_const_logic_1;
        else 
            input_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_we1_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state9, tmp_887_reg_2061, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state25, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = tmp_887_reg_2061)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_887_reg_2061)) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_const_lv1_0 = tmp_887_reg_2061) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = tmp_887_reg_2061) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            input_we1 <= ap_const_logic_1;
        else 
            input_we1 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_897_p2 <= std_logic_vector(unsigned(j_reg_678) + unsigned(ap_const_lv2_1));
    j_3_fu_1139_p2 <= std_logic_vector(unsigned(j_1_reg_710) + unsigned(ap_const_lv2_1));
    mask_1_fu_1495_p2 <= (p_pn_fu_1487_p3 and mask4_reg_744);
    mask_2_cast_fu_1165_p3 <= 
        ap_const_lv32_FFFFFFFF when (mask_2_fu_1159_p2(0) = '1') else 
        ap_const_lv32_0;
    mask_2_fu_1159_p2 <= (tmp_884_fu_1151_p3 xor ap_const_lv1_1);
    mask_3_fu_1032_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_885_fu_1024_p3(0) = '1') else 
        ap_const_lv32_0;
    mask_4_fu_932_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_886_fu_924_p3(0) = '1') else 
        ap_const_lv32_0;
    mask_fu_1083_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_882_fu_1075_p3(0) = '1') else 
        ap_const_lv32_0;

    output_r_address0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state32, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state22, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            output_r_address0 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            output_r_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output_r_address0 <= ap_const_lv64_1D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            output_r_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            output_r_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_r_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_r_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            output_r_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_r_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            output_r_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_r_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_r_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_r_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            output_r_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            output_r_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            output_r_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_r_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            output_r_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_r_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            output_r_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_r_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_r_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            output_r_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_r_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_r_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state32, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state22, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_q1, ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state32, ap_CS_fsm_state21, ap_CS_fsm_state33, reg_849, ap_CS_fsm_state23, ap_CS_fsm_state34, reg_854, reg_859, reg_864, tmp_784_reg_2154, tmp_793_reg_2180, tmp_794_reg_2185, tmp_788_reg_2206, tmp_789_reg_2211, tmp_792_reg_2216, tmp_806_reg_2226, tmp_807_reg_2231, ap_CS_fsm_state22, tmp_816_reg_2251, tmp_817_reg_2256, tmp_782_reg_2266, ap_CS_fsm_state30, tmp_800_reg_2283, tmp_810_reg_2288, tmp_811_reg_2293, tmp_812_reg_2298, tmp_815_reg_2303, tmp_820_reg_2313, tmp_823_reg_2318, tmp_919_reg_2323, tmp_805_reg_2328, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, tmp_787_fu_1633_p2, tmp_914_fu_1757_p1, tmp_797_fu_1807_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            output_r_d0 <= tmp_823_reg_2318;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            output_r_d0 <= tmp_820_reg_2313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            output_r_d0 <= tmp_817_reg_2256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            output_r_d0 <= tmp_816_reg_2251;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            output_r_d0 <= tmp_815_reg_2303;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            output_r_d0 <= tmp_812_reg_2298;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            output_r_d0 <= tmp_811_reg_2293;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            output_r_d0 <= tmp_810_reg_2288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_r_d0 <= tmp_807_reg_2231;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_r_d0 <= tmp_806_reg_2226;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_r_d0 <= tmp_805_reg_2328;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            output_r_d0 <= tmp_919_reg_2323;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            output_r_d0 <= tmp_800_reg_2283;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            output_r_d0 <= reg_864;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            output_r_d0 <= reg_859;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_r_d0 <= tmp_797_fu_1807_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            output_r_d0 <= tmp_794_reg_2185;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_r_d0 <= tmp_793_reg_2180;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_r_d0 <= tmp_792_reg_2216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_d0 <= tmp_789_reg_2211;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            output_r_d0 <= tmp_782_reg_2266;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            output_r_d0 <= reg_854;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            output_r_d0 <= reg_849;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_d0 <= tmp_914_fu_1757_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_r_d0 <= tmp_788_reg_2206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_d0 <= tmp_787_fu_1633_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_r_d0 <= tmp_784_reg_2154;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_d0 <= input_q1(13 downto 6);
        else 
            output_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, ap_CS_fsm_state20, ap_CS_fsm_state32, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state22, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_pn_fu_1487_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_612_fu_1479_p3(0) = '1') else 
        ap_const_lv32_0;
    p_shl1_fu_1111_p3 <= (tmp_379_fu_1097_p4 & ap_const_lv26_0);
    p_shl2_fu_1060_p3 <= (tmp_383_fu_1046_p4 & ap_const_lv25_0);
    p_shl3_fu_956_p3 <= (tmp_387_fu_946_p4 & ap_const_lv26_0);
    p_shl_fu_985_p3 <= (tmp_389_fu_975_p4 & ap_const_lv25_0);
    storemerge_fu_1539_p2 <= std_logic_vector(unsigned(input_q1) - unsigned(tmp_1121_pn_cast_fu_1535_p1));
    tmp_1121_pn_cast_fu_1535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1121_pn_fu_1530_p2),32));
    tmp_1121_pn_fu_1530_p2 <= (tmp_888_reg_2115 and tmp_1121_pn_v_fu_1522_p3);
    tmp_1121_pn_v_fu_1522_p3 <= 
        ap_const_lv26_1FFFFFF when (tmp_924_fu_1518_p1(0) = '1') else 
        ap_const_lv26_3FFFFFF;
    tmp_379_fu_1097_p4 <= tmp_s_fu_1091_p2(31 downto 26);
    tmp_383_fu_1046_p4 <= tmp_754_fu_1040_p2(31 downto 25);
    tmp_387_fu_946_p4 <= tmp_759_fu_940_p2(31 downto 26);
    tmp_389_fu_975_p4 <= tmp_759_fu_940_p2(31 downto 25);
    tmp_597_fu_1278_p4 <= mask4_reg_744(25 downto 5);
    tmp_598_fu_1288_p4 <= mask4_reg_744(3 downto 2);
    tmp_612_fu_1479_p3 <= 
        tmp_900_fu_1459_p3 when (tmp_902_fu_1475_p1(0) = '1') else 
        tmp_901_fu_1467_p3;
        tmp_751_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_379_fu_1097_p4),32));

    tmp_752_fu_1119_p2 <= std_logic_vector(unsigned(input_q0) - unsigned(p_shl1_fu_1111_p3));
    tmp_753_fu_1126_p2 <= std_logic_vector(unsigned(input_q1) + unsigned(tmp_751_fu_1107_p1));
    tmp_754_fu_1040_p2 <= (input_q1 and mask_3_fu_1032_p3);
    tmp_755_fu_1068_p2 <= std_logic_vector(unsigned(input_q1) - unsigned(p_shl2_fu_1060_p3));
    tmp_758_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_689),64));
    tmp_759_fu_940_p2 <= (input_q1 and mask_4_fu_932_p3);
        tmp_760_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_389_reg_2032),32));

    tmp_761_fu_993_p2 <= std_logic_vector(unsigned(input_q1) - unsigned(p_shl_fu_985_p3));
    tmp_762_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_2008),64));
    tmp_763_fu_1017_p2 <= std_logic_vector(unsigned(input_q1) + unsigned(tmp_760_fu_1014_p1));
        tmp_764_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_387_reg_2021),32));

    tmp_765_fu_964_p2 <= std_logic_vector(unsigned(input_q1) - unsigned(p_shl3_fu_956_p3));
    tmp_766_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_2008),64));
    tmp_767_fu_1007_p2 <= std_logic_vector(unsigned(input_q1) + unsigned(tmp_764_fu_1004_p1));
    tmp_768_fu_1302_p6 <= ((((tmp_597_fu_1278_p4 & ap_const_lv1_0) & tmp_598_fu_1288_p4) & ap_const_lv1_0) & tmp_889_fu_1298_p1);
    tmp_769_fu_1320_p2 <= std_logic_vector(unsigned(a_assign_reg_700) - unsigned(tmp_953_cast_fu_1316_p1));
    tmp_770_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_732),64));
    tmp_773_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_721),64));
    tmp_774_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_2068),64));
    tmp_775_fu_1243_p2 <= std_logic_vector(unsigned(input_q0) + unsigned(carry_fu_1240_p1));
    tmp_776_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_2068),64));
    tmp_777_fu_1233_p2 <= std_logic_vector(unsigned(input_q0) + unsigned(carry_1_fu_1230_p1));
    tmp_781_fu_1762_p3 <= (tmp_915_reg_2149 & ap_const_lv2_0);
    tmp_782_fu_1769_p2 <= (grp_fu_796_p4 or tmp_781_fu_1762_p3);
    tmp_786_fu_1625_p3 <= (tmp_916_fu_1621_p1 & ap_const_lv3_0);
    tmp_787_fu_1633_p2 <= (tmp_786_fu_1625_p3 or tmp_785_reg_2159);
    tmp_790_fu_1659_p4 <= input_q1(28 downto 21);
    tmp_791_fu_1669_p3 <= (tmp_917_reg_2175 & ap_const_lv5_0);
    tmp_792_fu_1676_p2 <= (tmp_791_fu_1669_p3 or tmp_790_fu_1659_p4);
    tmp_796_fu_1799_p3 <= (tmp_918_fu_1795_p1 & ap_const_lv6_0);
    tmp_797_fu_1807_p2 <= (tmp_796_fu_1799_p3 or tmp_795_reg_2190);
    tmp_804_fu_1900_p3 <= (tmp_920_reg_2221 & ap_const_lv1_0);
    tmp_805_fu_1907_p2 <= (grp_fu_796_p4 or tmp_804_fu_1900_p3);
    tmp_809_fu_1817_p3 <= (tmp_921_fu_1813_p1 & ap_const_lv3_0);
    tmp_810_fu_1825_p2 <= (tmp_809_fu_1817_p3 or tmp_808_reg_2236);
    tmp_813_fu_1850_p4 <= input_q0(28 downto 21);
    tmp_814_fu_1860_p3 <= (tmp_922_reg_2246 & ap_const_lv4_0);
    tmp_815_fu_1867_p2 <= (tmp_814_fu_1860_p3 or tmp_813_fu_1850_p4);
    tmp_819_fu_1877_p3 <= (tmp_923_fu_1873_p1 & ap_const_lv6_0);
    tmp_820_fu_1885_p2 <= (tmp_819_fu_1877_p3 or tmp_818_reg_2261);
    tmp_824_fu_1513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_754),64));
    tmp_881_fu_886_p1 <= input_limbs_q0(32 - 1 downto 0);
    tmp_882_fu_1075_p3 <= input_q0(31 downto 31);
    tmp_883_fu_903_p1 <= i_1_reg_689(1 - 1 downto 0);
    tmp_884_fu_1151_p3 <= a_assign_1_fu_1145_p2(31 downto 31);
    tmp_885_fu_1024_p3 <= input_q1(31 downto 31);
    tmp_886_fu_924_p3 <= input_q1(31 downto 31);
    tmp_887_fu_1173_p1 <= i_2_reg_721(1 - 1 downto 0);
    tmp_888_fu_1274_p1 <= mask4_reg_744(26 - 1 downto 0);
    tmp_889_fu_1298_p1 <= mask4_reg_744(1 - 1 downto 0);
    tmp_890_fu_1333_p2 <= std_logic_vector(shift_left(unsigned(a_assign_3_fu_1327_p2),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    tmp_891_fu_1345_p2 <= std_logic_vector(shift_left(unsigned(a_assign_4_fu_1339_p2),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    tmp_892_fu_1357_p2 <= std_logic_vector(shift_left(unsigned(a_assign_5_fu_1351_p2),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_893_fu_1369_p2 <= std_logic_vector(shift_left(unsigned(a_assign_6_fu_1363_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_894_fu_1381_p2 <= std_logic_vector(shift_left(unsigned(a_assign_7_fu_1375_p2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_895_fu_1399_p2 <= std_logic_vector(shift_left(unsigned(a_assign_9_fu_1393_p2),to_integer(unsigned('0' & ap_const_lv32_10(31-1 downto 0)))));
    tmp_896_fu_1411_p2 <= std_logic_vector(shift_left(unsigned(a_assign_s_fu_1405_p2),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    tmp_897_fu_1423_p2 <= std_logic_vector(shift_left(unsigned(a_assign_2_fu_1417_p2),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_898_fu_1435_p2 <= std_logic_vector(shift_left(unsigned(a_assign_10_fu_1429_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_899_fu_1447_p2 <= std_logic_vector(shift_left(unsigned(a_assign_11_fu_1441_p2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_900_fu_1459_p3 <= a_assign_12_fu_1453_p2(31 downto 31);
    tmp_901_fu_1467_p3 <= a_assign_8_fu_1387_p2(31 downto 31);
    tmp_902_fu_1475_p1 <= i_3_reg_732(1 - 1 downto 0);
    tmp_903_fu_1250_p1 <= input_q1(25 - 1 downto 0);
    tmp_904_fu_1194_p1 <= input_q1(26 - 1 downto 0);
    tmp_905_fu_1198_p1 <= input_q1(25 - 1 downto 0);
    tmp_906_fu_1750_p2 <= std_logic_vector(shift_left(unsigned(reg_836),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_907_fu_1890_p2 <= std_logic_vector(shift_left(unsigned(input_load_45_reg_2195),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_908_fu_1775_p2 <= std_logic_vector(shift_left(unsigned(reg_840),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    tmp_909_fu_1913_p2 <= std_logic_vector(shift_left(unsigned(reg_836),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_910_fu_1782_p2 <= std_logic_vector(shift_left(unsigned(reg_844),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_911_fu_1920_p2 <= std_logic_vector(shift_left(unsigned(reg_840),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_912_fu_1789_p2 <= std_logic_vector(shift_left(unsigned(input_load_50_reg_2241),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    tmp_913_fu_1927_p2 <= std_logic_vector(shift_left(unsigned(reg_844),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_914_fu_1757_p1 <= input_q0(8 - 1 downto 0);
    tmp_915_fu_1552_p1 <= input_q1(6 - 1 downto 0);
    tmp_916_fu_1621_p1 <= input_q1(5 - 1 downto 0);
    tmp_917_fu_1587_p1 <= input_q0(3 - 1 downto 0);
    tmp_918_fu_1795_p1 <= input_q1(2 - 1 downto 0);
    tmp_919_fu_1896_p1 <= input_q0(8 - 1 downto 0);
    tmp_920_fu_1682_p1 <= input_q0(7 - 1 downto 0);
    tmp_921_fu_1813_p1 <= input_q0(5 - 1 downto 0);
    tmp_922_fu_1716_p1 <= input_q1(4 - 1 downto 0);
    tmp_923_fu_1873_p1 <= input_q1(2 - 1 downto 0);
    tmp_924_fu_1518_p1 <= i_4_reg_754(1 - 1 downto 0);
    tmp_953_cast_fu_1316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_768_fu_1302_p6),32));
    tmp_954_cast_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_903_fu_1250_p1),32));
    tmp_964_cast_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_904_fu_1194_p1),32));
    tmp_968_cast_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_905_fu_1198_p1),32));
    tmp_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_667),64));
    tmp_s_fu_1091_p2 <= (input_q0 and mask_fu_1083_p3);
end behav;
