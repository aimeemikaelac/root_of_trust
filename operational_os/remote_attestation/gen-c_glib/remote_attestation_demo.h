/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef REMOTE_ATTESTATION_DEMO_H
#define REMOTE_ATTESTATION_DEMO_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "remote_attestation_demo_types.h"

/* RemoteAttestationDemo service interface */
typedef struct _RemoteAttestationDemoIf RemoteAttestationDemoIf;  /* dummy object */

struct _RemoteAttestationDemoIfInterface
{
  GTypeInterface parent;

  gboolean (*begin_attestation) (RemoteAttestationDemoIf *iface, GByteArray ** _return, const GByteArray * remote_message, GError **error);
  gboolean (*check_message) (RemoteAttestationDemoIf *iface, gboolean* _return, GError **error);
  gboolean (*get_message) (RemoteAttestationDemoIf *iface, GByteArray ** _return, GError **error);
};
typedef struct _RemoteAttestationDemoIfInterface RemoteAttestationDemoIfInterface;

GType remote_attestation_demo_if_get_type (void);
#define TYPE_REMOTE_ATTESTATION_DEMO_IF (remote_attestation_demo_if_get_type())
#define REMOTE_ATTESTATION_DEMO_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_REMOTE_ATTESTATION_DEMO_IF, RemoteAttestationDemoIf))
#define IS_REMOTE_ATTESTATION_DEMO_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_REMOTE_ATTESTATION_DEMO_IF))
#define REMOTE_ATTESTATION_DEMO_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_REMOTE_ATTESTATION_DEMO_IF, RemoteAttestationDemoIfInterface))

gboolean remote_attestation_demo_if_begin_attestation (RemoteAttestationDemoIf *iface, GByteArray ** _return, const GByteArray * remote_message, GError **error);
gboolean remote_attestation_demo_if_check_message (RemoteAttestationDemoIf *iface, gboolean* _return, GError **error);
gboolean remote_attestation_demo_if_get_message (RemoteAttestationDemoIf *iface, GByteArray ** _return, GError **error);

/* RemoteAttestationDemo service client */
struct _RemoteAttestationDemoClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _RemoteAttestationDemoClient RemoteAttestationDemoClient;

struct _RemoteAttestationDemoClientClass
{
  GObjectClass parent;
};
typedef struct _RemoteAttestationDemoClientClass RemoteAttestationDemoClientClass;

GType remote_attestation_demo_client_get_type (void);
#define TYPE_REMOTE_ATTESTATION_DEMO_CLIENT (remote_attestation_demo_client_get_type())
#define REMOTE_ATTESTATION_DEMO_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_REMOTE_ATTESTATION_DEMO_CLIENT, RemoteAttestationDemoClient))
#define REMOTE_ATTESTATION_DEMO_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_REMOTE_ATTESTATION_DEMO_CLIENT, RemoteAttestationDemoClientClass))
#define REMOTE_ATTESTATION_DEMO_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_REMOTE_ATTESTATION_DEMO_CLIENT))
#define REMOTE_ATTESTATION_DEMO_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_REMOTE_ATTESTATION_DEMO_CLIENT))
#define REMOTE_ATTESTATION_DEMO_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_REMOTE_ATTESTATION_DEMO_CLIENT, RemoteAttestationDemoClientClass))

gboolean remote_attestation_demo_client_begin_attestation (RemoteAttestationDemoIf * iface, GByteArray ** _return, const GByteArray * remote_message, GError ** error);
gboolean remote_attestation_demo_client_send_begin_attestation (RemoteAttestationDemoIf * iface, const GByteArray * remote_message, GError ** error);
gboolean remote_attestation_demo_client_recv_begin_attestation (RemoteAttestationDemoIf * iface, GByteArray ** _return, GError ** error);
gboolean remote_attestation_demo_client_check_message (RemoteAttestationDemoIf * iface, gboolean* _return, GError ** error);
gboolean remote_attestation_demo_client_send_check_message (RemoteAttestationDemoIf * iface, GError ** error);
gboolean remote_attestation_demo_client_recv_check_message (RemoteAttestationDemoIf * iface, gboolean* _return, GError ** error);
gboolean remote_attestation_demo_client_get_message (RemoteAttestationDemoIf * iface, GByteArray ** _return, GError ** error);
gboolean remote_attestation_demo_client_send_get_message (RemoteAttestationDemoIf * iface, GError ** error);
gboolean remote_attestation_demo_client_recv_get_message (RemoteAttestationDemoIf * iface, GByteArray ** _return, GError ** error);
void remote_attestation_demo_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void remote_attestation_demo_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* RemoteAttestationDemo handler (abstract base class) */
struct _RemoteAttestationDemoHandler
{
  GObject parent;
};
typedef struct _RemoteAttestationDemoHandler RemoteAttestationDemoHandler;

struct _RemoteAttestationDemoHandlerClass
{
  GObjectClass parent;

  gboolean (*begin_attestation) (RemoteAttestationDemoIf *iface, GByteArray ** _return, const GByteArray * remote_message, GError **error);
  gboolean (*check_message) (RemoteAttestationDemoIf *iface, gboolean* _return, GError **error);
  gboolean (*get_message) (RemoteAttestationDemoIf *iface, GByteArray ** _return, GError **error);
};
typedef struct _RemoteAttestationDemoHandlerClass RemoteAttestationDemoHandlerClass;

GType remote_attestation_demo_handler_get_type (void);
#define TYPE_REMOTE_ATTESTATION_DEMO_HANDLER (remote_attestation_demo_handler_get_type())
#define REMOTE_ATTESTATION_DEMO_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_REMOTE_ATTESTATION_DEMO_HANDLER, RemoteAttestationDemoHandler))
#define IS_REMOTE_ATTESTATION_DEMO_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_REMOTE_ATTESTATION_DEMO_HANDLER))
#define REMOTE_ATTESTATION_DEMO_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_REMOTE_ATTESTATION_DEMO_HANDLER, RemoteAttestationDemoHandlerClass))
#define IS_REMOTE_ATTESTATION_DEMO_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_REMOTE_ATTESTATION_DEMO_HANDLER))
#define REMOTE_ATTESTATION_DEMO_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_REMOTE_ATTESTATION_DEMO_HANDLER, RemoteAttestationDemoHandlerClass))

gboolean remote_attestation_demo_handler_begin_attestation (RemoteAttestationDemoIf *iface, GByteArray ** _return, const GByteArray * remote_message, GError **error);
gboolean remote_attestation_demo_handler_check_message (RemoteAttestationDemoIf *iface, gboolean* _return, GError **error);
gboolean remote_attestation_demo_handler_get_message (RemoteAttestationDemoIf *iface, GByteArray ** _return, GError **error);

/* RemoteAttestationDemo processor */
struct _RemoteAttestationDemoProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  RemoteAttestationDemoHandler *handler;
  GHashTable *process_map;
};
typedef struct _RemoteAttestationDemoProcessor RemoteAttestationDemoProcessor;

struct _RemoteAttestationDemoProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _RemoteAttestationDemoProcessorClass RemoteAttestationDemoProcessorClass;

GType remote_attestation_demo_processor_get_type (void);
#define TYPE_REMOTE_ATTESTATION_DEMO_PROCESSOR (remote_attestation_demo_processor_get_type())
#define REMOTE_ATTESTATION_DEMO_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_REMOTE_ATTESTATION_DEMO_PROCESSOR, RemoteAttestationDemoProcessor))
#define IS_REMOTE_ATTESTATION_DEMO_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_REMOTE_ATTESTATION_DEMO_PROCESSOR))
#define REMOTE_ATTESTATION_DEMO_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_REMOTE_ATTESTATION_DEMO_PROCESSOR, RemoteAttestationDemoProcessorClass))
#define IS_REMOTE_ATTESTATION_DEMO_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_REMOTE_ATTESTATION_DEMO_PROCESSOR))
#define REMOTE_ATTESTATION_DEMO_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_REMOTE_ATTESTATION_DEMO_PROCESSOR, RemoteAttestationDemoProcessorClass))

#endif /* REMOTE_ATTESTATION_DEMO_H */
