// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="secure_enclave_aes_cipher,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.870000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=100,HLS_SYN_DSP=0,HLS_SYN_FF=3242,HLS_SYN_LUT=10356}" *)

module secure_enclave_aes_cipher (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_V,
        key_V_ap_vld,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_st1_fsm_0 = 21'b1;
parameter    ap_ST_st2_fsm_1 = 21'b10;
parameter    ap_ST_st3_fsm_2 = 21'b100;
parameter    ap_ST_st4_fsm_3 = 21'b1000;
parameter    ap_ST_st5_fsm_4 = 21'b10000;
parameter    ap_ST_st6_fsm_5 = 21'b100000;
parameter    ap_ST_st7_fsm_6 = 21'b1000000;
parameter    ap_ST_st8_fsm_7 = 21'b10000000;
parameter    ap_ST_st9_fsm_8 = 21'b100000000;
parameter    ap_ST_st10_fsm_9 = 21'b1000000000;
parameter    ap_ST_st11_fsm_10 = 21'b10000000000;
parameter    ap_ST_st12_fsm_11 = 21'b100000000000;
parameter    ap_ST_st13_fsm_12 = 21'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 21'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 21'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 21'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 21'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 21'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 21'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 21'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 21'b100000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv128_lc_1 = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] key_V;
input   key_V_ap_vld;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_38;
reg   [127:0] key_V_in_sig;
reg   [127:0] key_V_preg;
reg    key_V_ap_vld_in_sig;
reg    key_V_ap_vld_preg;
wire   [127:0] data_in_V;
reg    data_out_V_ap_vld;
wire   [127:0] counter_V;
reg    key_V_blk_n;
reg   [127:0] data_in_V_read_reg_74;
reg    ap_sig_102;
wire   [127:0] r_V_fu_69_p2;
reg   [127:0] r_V_reg_79;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_112;
reg    grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start;
wire    grp_secure_enclave_aes_cipher_aestest_fu_59_ap_done;
wire    grp_secure_enclave_aes_cipher_aestest_fu_59_ap_idle;
wire    grp_secure_enclave_aes_cipher_aestest_fu_59_ap_ready;
wire   [127:0] grp_secure_enclave_aes_cipher_aestest_fu_59_ap_return;
reg   [20:0] ap_NS_fsm;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_1705;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'b1;
#0 key_V_preg = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
#0 key_V_ap_vld_preg = 1'b0;
end

secure_enclave_aes_cipher_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
secure_enclave_aes_cipher_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .data_in_V(data_in_V),
    .data_out_V(r_V_reg_79),
    .data_out_V_ap_vld(data_out_V_ap_vld),
    .counter_V(counter_V)
);

secure_enclave_aes_cipher_aestest grp_secure_enclave_aes_cipher_aestest_fu_59(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start),
    .ap_done(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_done),
    .ap_idle(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_idle),
    .ap_ready(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_ready),
    .inptext_V_read(counter_V),
    .key_V_read(key_V_in_sig),
    .ap_return(grp_secure_enclave_aes_cipher_aestest_fu_59_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        key_V_ap_vld_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
            key_V_ap_vld_preg <= 1'b0;
        end else if (((1'b1 == key_V_ap_vld) & ~((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)))) begin
            key_V_ap_vld_preg <= key_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        key_V_preg <= ap_const_lv128_lc_1;
    end else begin
        if (((1'b1 == key_V_ap_vld) & ~((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)))) begin
            key_V_preg <= key_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_102)) begin
        data_in_V_read_reg_74 <= data_in_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        r_V_reg_79 <= r_V_fu_69_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_38) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_112) begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_1705) begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        data_out_V_ap_vld = 1'b1;
    end else begin
        data_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~ap_sig_102)) begin
        grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start = 1'b1;
    end else begin
        grp_secure_enclave_aes_cipher_aestest_fu_59_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == key_V_ap_vld)) begin
        key_V_ap_vld_in_sig = key_V_ap_vld;
    end else begin
        key_V_ap_vld_in_sig = key_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        key_V_blk_n = key_V_ap_vld;
    end else begin
        key_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == key_V_ap_vld)) begin
        key_V_in_sig = key_V;
    end else begin
        key_V_in_sig = key_V_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_102) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_102 = ((ap_start == 1'b0) | (key_V_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_sig_112 = (1'b1 == ap_CS_fsm[ap_const_lv32_13]);
end

always @ (*) begin
    ap_sig_1705 = (1'b1 == ap_CS_fsm[ap_const_lv32_14]);
end

always @ (*) begin
    ap_sig_38 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign r_V_fu_69_p2 = (grp_secure_enclave_aes_cipher_aestest_fu_59_ap_return ^ data_in_V_read_reg_74);

endmodule //secure_enclave_aes_cipher
