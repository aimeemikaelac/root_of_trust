// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XSECURE_ENCLAVE_H
#define XSECURE_ENCLAVE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xsecure_enclave_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XSecure_enclave_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XSecure_enclave;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
} XSecure_enclave_Secure_storage_in_v;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
} XSecure_enclave_Pin_attempt_v;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
} XSecure_enclave_Secure_storage_out_v;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XSecure_enclave_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XSecure_enclave_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XSecure_enclave_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XSecure_enclave_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XSecure_enclave_Initialize(XSecure_enclave *InstancePtr, u16 DeviceId);
XSecure_enclave_Config* XSecure_enclave_LookupConfig(u16 DeviceId);
int XSecure_enclave_CfgInitialize(XSecure_enclave *InstancePtr, XSecure_enclave_Config *ConfigPtr);
#else
int XSecure_enclave_Initialize(XSecure_enclave *InstancePtr, const char* InstanceName);
int XSecure_enclave_Release(XSecure_enclave *InstancePtr);
#endif

void XSecure_enclave_Start(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_IsDone(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_IsIdle(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_IsReady(XSecure_enclave *InstancePtr);
void XSecure_enclave_EnableAutoRestart(XSecure_enclave *InstancePtr);
void XSecure_enclave_DisableAutoRestart(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_return(XSecure_enclave *InstancePtr);

void XSecure_enclave_Set_pin_attempt_V(XSecure_enclave *InstancePtr, XSecure_enclave_Pin_attempt_v Data);
XSecure_enclave_Pin_attempt_v XSecure_enclave_Get_pin_attempt_V(XSecure_enclave *InstancePtr);
void XSecure_enclave_Set_pin_attempt_V_vld(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_pin_attempt_V_vld(XSecure_enclave *InstancePtr);
void XSecure_enclave_Set_counter_in(XSecure_enclave *InstancePtr, u32 Data);
u32 XSecure_enclave_Get_counter_in(XSecure_enclave *InstancePtr);
void XSecure_enclave_Set_counter_in_vld(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_counter_in_vld(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_increment_counter(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_increment_counter_vld(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_reset_counter(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_reset_counter_vld(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_secure_storage_in_V_BaseAddress(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_secure_storage_in_V_HighAddress(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_secure_storage_in_V_TotalBytes(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_secure_storage_in_V_BitWidth(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_secure_storage_in_V_Depth(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Write_secure_storage_in_V_Words(XSecure_enclave *InstancePtr, int offset, int *data, int length);
u32 XSecure_enclave_Read_secure_storage_in_V_Words(XSecure_enclave *InstancePtr, int offset, int *data, int length);
u32 XSecure_enclave_Write_secure_storage_in_V_Bytes(XSecure_enclave *InstancePtr, int offset, char *data, int length);
u32 XSecure_enclave_Read_secure_storage_in_V_Bytes(XSecure_enclave *InstancePtr, int offset, char *data, int length);
u32 XSecure_enclave_Get_secure_storage_out_V_BaseAddress(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_secure_storage_out_V_HighAddress(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_secure_storage_out_V_TotalBytes(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_secure_storage_out_V_BitWidth(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Get_secure_storage_out_V_Depth(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_Write_secure_storage_out_V_Words(XSecure_enclave *InstancePtr, int offset, int *data, int length);
u32 XSecure_enclave_Read_secure_storage_out_V_Words(XSecure_enclave *InstancePtr, int offset, int *data, int length);
u32 XSecure_enclave_Write_secure_storage_out_V_Bytes(XSecure_enclave *InstancePtr, int offset, char *data, int length);
u32 XSecure_enclave_Read_secure_storage_out_V_Bytes(XSecure_enclave *InstancePtr, int offset, char *data, int length);

void XSecure_enclave_InterruptGlobalEnable(XSecure_enclave *InstancePtr);
void XSecure_enclave_InterruptGlobalDisable(XSecure_enclave *InstancePtr);
void XSecure_enclave_InterruptEnable(XSecure_enclave *InstancePtr, u32 Mask);
void XSecure_enclave_InterruptDisable(XSecure_enclave *InstancePtr, u32 Mask);
void XSecure_enclave_InterruptClear(XSecure_enclave *InstancePtr, u32 Mask);
u32 XSecure_enclave_InterruptGetEnabled(XSecure_enclave *InstancePtr);
u32 XSecure_enclave_InterruptGetStatus(XSecure_enclave *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
