// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module secure_enclave_key_store_ghash_iteration (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        h_V,
        d_V,
        x_prev_V,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv128_lc_1 = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_7F = 32'b1111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] h_V;
input  [127:0] d_V;
input  [127:0] x_prev_V;
output  [127:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[127:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
reg   [127:0] h_V_read_reg_153;
wire   [127:0] r_V_3_fu_88_p2;
wire   [7:0] i_fu_104_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_42;
wire   [127:0] agg_result_V_0_r_V_i_fu_123_p3;
wire   [0:0] exitcond_i_fu_98_p2;
wire   [127:0] lhs_V_r_V_i_fu_131_p3;
wire   [127:0] r_V_2_fu_149_p1;
reg   [127:0] agg_result_V_i_reg_46;
reg   [127:0] lhs_V_reg_57;
reg   [127:0] rhs_V_reg_68;
reg   [7:0] i_assign_reg_77;
wire   [31:0] i_assign_cast1_fu_94_p1;
wire   [0:0] tmp_fu_110_p3;
wire   [127:0] z_V_fu_117_p2;
wire   [126:0] r_V_1_fu_139_p4;
reg   [127:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
#0 ap_return_preg = 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv128_lc_1;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_i_fu_98_p2 == 1'b0))) begin
            ap_return_preg <= agg_result_V_i_reg_46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i_fu_98_p2 == 1'b0))) begin
        agg_result_V_i_reg_46 <= agg_result_V_0_r_V_i_fu_123_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        agg_result_V_i_reg_46 <= ap_const_lv128_lc_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i_fu_98_p2 == 1'b0))) begin
        i_assign_reg_77 <= i_fu_104_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_assign_reg_77 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i_fu_98_p2 == 1'b0))) begin
        lhs_V_reg_57 <= lhs_V_r_V_i_fu_131_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        lhs_V_reg_57 <= ap_const_lv128_lc_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i_fu_98_p2 == 1'b0))) begin
        rhs_V_reg_68 <= r_V_2_fu_149_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        rhs_V_reg_68 <= r_V_3_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_i_fu_98_p2 == 1'b0))) begin
        ap_return <= agg_result_V_i_reg_46;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        h_V_read_reg_153 <= h_V;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_i_fu_98_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_42) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond_i_fu_98_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_V_0_r_V_i_fu_123_p3 = ((tmp_fu_110_p3[0:0] === 1'b1) ? z_V_fu_117_p2 : agg_result_V_i_reg_46);

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_42 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign exitcond_i_fu_98_p2 = ((i_assign_reg_77 == ap_const_lv8_80) ? 1'b1 : 1'b0);

assign i_assign_cast1_fu_94_p1 = i_assign_reg_77;

assign i_fu_104_p2 = (i_assign_reg_77 + ap_const_lv8_1);

assign lhs_V_r_V_i_fu_131_p3 = ((tmp_fu_110_p3[0:0] === 1'b1) ? z_V_fu_117_p2 : lhs_V_reg_57);

assign r_V_1_fu_139_p4 = {{rhs_V_reg_68[ap_const_lv32_7F : ap_const_lv32_1]}};

assign r_V_2_fu_149_p1 = r_V_1_fu_139_p4;

assign r_V_3_fu_88_p2 = (d_V ^ x_prev_V);

assign tmp_fu_110_p3 = h_V_read_reg_153[i_assign_cast1_fu_94_p1];

assign z_V_fu_117_p2 = (lhs_V_reg_57 ^ rhs_V_reg_68);

endmodule //secure_enclave_key_store_ghash_iteration
