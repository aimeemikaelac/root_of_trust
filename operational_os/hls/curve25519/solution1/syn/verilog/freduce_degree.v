// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module freduce_degree (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        output_r_address1,
        output_r_ce1,
        output_r_we1,
        output_r_d1,
        output_r_q1
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [63:0] output_r_d0;
input  [63:0] output_r_q0;
output  [4:0] output_r_address1;
output   output_r_ce1;
output   output_r_we1;
output  [63:0] output_r_d1;
input  [63:0] output_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[63:0] output_r_d0;
reg[4:0] output_r_address1;
reg output_r_ce1;
reg output_r_we1;
reg[63:0] output_r_d1;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] tmp_291_fu_231_p2;
reg   [63:0] tmp_291_reg_440;
wire    ap_CS_fsm_state2;
wire   [4:0] output_addr_57_reg_450;
wire   [63:0] tmp_292_fu_255_p2;
reg   [63:0] tmp_292_reg_455;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_293_fu_279_p2;
reg   [63:0] tmp_293_reg_471;
wire    ap_CS_fsm_state4;
wire   [4:0] output_addr_61_reg_481;
wire   [63:0] tmp_294_fu_303_p2;
reg   [63:0] tmp_294_reg_486;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_295_fu_327_p2;
reg   [63:0] tmp_295_reg_502;
wire    ap_CS_fsm_state6;
wire   [4:0] output_addr_65_reg_512;
wire   [63:0] tmp_s_fu_351_p2;
reg   [63:0] tmp_s_reg_517;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_296_fu_375_p2;
reg   [63:0] tmp_296_reg_533;
wire    ap_CS_fsm_state8;
wire   [4:0] output_addr_69_reg_543;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_297_fu_399_p2;
reg   [63:0] tmp_297_reg_554;
wire   [63:0] tmp_298_fu_423_p2;
reg   [63:0] tmp_298_reg_564;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [63:0] tmp_fu_213_p2;
wire   [63:0] tmp_379_fu_219_p2;
wire   [63:0] tmp2_fu_225_p2;
wire   [63:0] grp_fu_207_p2;
wire   [63:0] tmp_380_fu_237_p2;
wire   [63:0] tmp_381_fu_243_p2;
wire   [63:0] tmp4_fu_249_p2;
wire   [63:0] tmp_382_fu_261_p2;
wire   [63:0] tmp_383_fu_267_p2;
wire   [63:0] tmp6_fu_273_p2;
wire   [63:0] tmp_384_fu_285_p2;
wire   [63:0] tmp_385_fu_291_p2;
wire   [63:0] tmp8_fu_297_p2;
wire   [63:0] tmp_386_fu_309_p2;
wire   [63:0] tmp_387_fu_315_p2;
wire   [63:0] tmp10_fu_321_p2;
wire   [63:0] tmp_388_fu_333_p2;
wire   [63:0] tmp_389_fu_339_p2;
wire   [63:0] tmp12_fu_345_p2;
wire   [63:0] tmp_390_fu_357_p2;
wire   [63:0] tmp_391_fu_363_p2;
wire   [63:0] tmp14_fu_369_p2;
wire   [63:0] tmp_392_fu_381_p2;
wire   [63:0] tmp_393_fu_387_p2;
wire   [63:0] tmp16_fu_393_p2;
wire   [63:0] tmp_394_fu_405_p2;
wire   [63:0] tmp_395_fu_411_p2;
wire   [63:0] tmp18_fu_417_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_291_reg_440 <= tmp_291_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_292_reg_455 <= tmp_292_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_293_reg_471 <= tmp_293_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_294_reg_486 <= tmp_294_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_295_reg_502 <= tmp_295_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_296_reg_533 <= tmp_296_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_297_reg_554 <= tmp_297_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_298_reg_564 <= tmp_298_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_s_reg_517 <= tmp_s_fu_351_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state14))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_r_address0 = 64'd18;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_r_address1 = output_addr_69_reg_543;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_address1 = output_addr_65_reg_512;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address1 = output_addr_61_reg_481;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_address1 = output_addr_57_reg_450;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        output_r_address1 = 64'd8;
    end else begin
        output_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13))) begin
        output_r_ce1 = 1'b1;
    end else begin
        output_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_d0 = tmp_298_reg_564;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_r_d0 = tmp_296_reg_533;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_d0 = tmp_295_reg_502;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_d0 = tmp_293_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_d0 = tmp_291_reg_440;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_r_d1 = tmp_297_reg_554;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_d1 = tmp_s_reg_517;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_d1 = tmp_294_reg_486;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_d1 = tmp_292_reg_455;
    end else begin
        output_r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13))) begin
        output_r_we1 = 1'b1;
    end else begin
        output_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_207_p2 = (output_r_q1 + output_r_q0);

assign output_addr_57_reg_450 = 64'd7;

assign output_addr_61_reg_481 = 64'd5;

assign output_addr_65_reg_512 = 64'd3;

assign output_addr_69_reg_543 = 64'd1;

assign tmp10_fu_321_p2 = (tmp_386_fu_309_p2 + tmp_387_fu_315_p2);

assign tmp12_fu_345_p2 = (tmp_388_fu_333_p2 + tmp_389_fu_339_p2);

assign tmp14_fu_369_p2 = (tmp_390_fu_357_p2 + tmp_391_fu_363_p2);

assign tmp16_fu_393_p2 = (tmp_392_fu_381_p2 + tmp_393_fu_387_p2);

assign tmp18_fu_417_p2 = (tmp_394_fu_405_p2 + tmp_395_fu_411_p2);

assign tmp2_fu_225_p2 = (tmp_fu_213_p2 + tmp_379_fu_219_p2);

assign tmp4_fu_249_p2 = (tmp_380_fu_237_p2 + tmp_381_fu_243_p2);

assign tmp6_fu_273_p2 = (tmp_382_fu_261_p2 + tmp_383_fu_267_p2);

assign tmp8_fu_297_p2 = (tmp_384_fu_285_p2 + tmp_385_fu_291_p2);

assign tmp_291_fu_231_p2 = (tmp2_fu_225_p2 + grp_fu_207_p2);

assign tmp_292_fu_255_p2 = (tmp4_fu_249_p2 + grp_fu_207_p2);

assign tmp_293_fu_279_p2 = (tmp6_fu_273_p2 + grp_fu_207_p2);

assign tmp_294_fu_303_p2 = (tmp8_fu_297_p2 + grp_fu_207_p2);

assign tmp_295_fu_327_p2 = (tmp10_fu_321_p2 + grp_fu_207_p2);

assign tmp_296_fu_375_p2 = (tmp14_fu_369_p2 + grp_fu_207_p2);

assign tmp_297_fu_399_p2 = (tmp16_fu_393_p2 + grp_fu_207_p2);

assign tmp_298_fu_423_p2 = (tmp18_fu_417_p2 + grp_fu_207_p2);

assign tmp_379_fu_219_p2 = output_r_q0 << 64'd1;

assign tmp_380_fu_237_p2 = output_r_q0 << 64'd4;

assign tmp_381_fu_243_p2 = output_r_q0 << 64'd1;

assign tmp_382_fu_261_p2 = output_r_q0 << 64'd4;

assign tmp_383_fu_267_p2 = output_r_q0 << 64'd1;

assign tmp_384_fu_285_p2 = output_r_q0 << 64'd4;

assign tmp_385_fu_291_p2 = output_r_q0 << 64'd1;

assign tmp_386_fu_309_p2 = output_r_q0 << 64'd4;

assign tmp_387_fu_315_p2 = output_r_q0 << 64'd1;

assign tmp_388_fu_333_p2 = output_r_q0 << 64'd4;

assign tmp_389_fu_339_p2 = output_r_q0 << 64'd1;

assign tmp_390_fu_357_p2 = output_r_q0 << 64'd4;

assign tmp_391_fu_363_p2 = output_r_q0 << 64'd1;

assign tmp_392_fu_381_p2 = output_r_q0 << 64'd4;

assign tmp_393_fu_387_p2 = output_r_q0 << 64'd1;

assign tmp_394_fu_405_p2 = output_r_q0 << 64'd4;

assign tmp_395_fu_411_p2 = output_r_q0 << 64'd1;

assign tmp_fu_213_p2 = output_r_q0 << 64'd4;

assign tmp_s_fu_351_p2 = (tmp12_fu_345_p2 + grp_fu_207_p2);

endmodule //freduce_degree
