-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity contact_discovery is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    db_in_V_V_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    db_in_V_V_TVALID : IN STD_LOGIC;
    db_in_V_V_TREADY : OUT STD_LOGIC;
    results_out_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    results_out_V_TVALID : OUT STD_LOGIC;
    results_out_V_TREADY : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of contact_discovery is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "contact_discovery,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.045000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=15,HLS_SYN_DSP=0,HLS_SYN_FF=3072,HLS_SYN_LUT=2061}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal operation : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal operation_ap_vld : STD_LOGIC;
    signal operation_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal operation_ap_vld_preg : STD_LOGIC := '0';
    signal operation_ap_vld_in_sig : STD_LOGIC;
    signal contact_in_V : STD_LOGIC_VECTOR (511 downto 0);
    signal db_in_V_V_0_data_out : STD_LOGIC_VECTOR (511 downto 0);
    signal db_in_V_V_0_vld_in : STD_LOGIC;
    signal db_in_V_V_0_vld_out : STD_LOGIC;
    signal db_in_V_V_0_ack_in : STD_LOGIC;
    signal db_in_V_V_0_ack_out : STD_LOGIC;
    signal db_in_V_V_0_payload_A : STD_LOGIC_VECTOR (511 downto 0);
    signal db_in_V_V_0_payload_B : STD_LOGIC_VECTOR (511 downto 0);
    signal db_in_V_V_0_sel_rd : STD_LOGIC := '0';
    signal db_in_V_V_0_sel_wr : STD_LOGIC := '0';
    signal db_in_V_V_0_sel : STD_LOGIC;
    signal db_in_V_V_0_load_A : STD_LOGIC;
    signal db_in_V_V_0_load_B : STD_LOGIC;
    signal db_in_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal db_in_V_V_0_state_cmp_full : STD_LOGIC;
    signal db_size_in : STD_LOGIC_VECTOR (31 downto 0);
    signal error_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal error_out_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal error_out_1_vld_reg : STD_LOGIC := '0';
    signal error_out_1_vld_in : STD_LOGIC;
    signal error_out_1_ack_in : STD_LOGIC;
    signal contacts_size_out_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contacts_size_out_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal contacts_size_out_1_vld_reg : STD_LOGIC := '0';
    signal contacts_size_out_1_vld_in : STD_LOGIC;
    signal contacts_size_out_1_ack_in : STD_LOGIC;
    signal results_out_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal results_out_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal results_out_V_1_vld_in : STD_LOGIC;
    signal results_out_V_1_vld_out : STD_LOGIC;
    signal results_out_V_1_ack_in : STD_LOGIC;
    signal results_out_V_1_ack_out : STD_LOGIC;
    signal results_out_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal results_out_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal results_out_V_1_sel_rd : STD_LOGIC := '0';
    signal results_out_V_1_sel_wr : STD_LOGIC := '0';
    signal results_out_V_1_sel : STD_LOGIC;
    signal results_out_V_1_load_A : STD_LOGIC;
    signal results_out_V_1_load_B : STD_LOGIC;
    signal results_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal results_out_V_1_state_cmp_full : STD_LOGIC;
    signal contacts_size : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal contacts_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal contacts_V_ce0 : STD_LOGIC;
    signal contacts_V_we0 : STD_LOGIC;
    signal contacts_V_q0 : STD_LOGIC_VECTOR (511 downto 0);
    signal operation_blk_n : STD_LOGIC;
    signal db_in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal results_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_164 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal contact_in_V_read_reg_246 : STD_LOGIC_VECTOR (511 downto 0);
    signal operation_read_read_fu_84_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal contacts_size_load_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal database_index_1_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal database_index_1_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_6_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_221_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_match_db_contact_fu_156_ap_done : STD_LOGIC;
    signal tmp_2_fu_226_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_231_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_236_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_match_db_contact_fu_156_ap_start : STD_LOGIC;
    signal grp_match_db_contact_fu_156_ap_idle : STD_LOGIC;
    signal grp_match_db_contact_fu_156_ap_ready : STD_LOGIC;
    signal grp_match_db_contact_fu_156_contacts_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_match_db_contact_fu_156_contacts_V_ce0 : STD_LOGIC;
    signal grp_match_db_contact_fu_156_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal database_index_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_reg_grp_match_db_contact_fu_156_ap_start : STD_LOGIC := '0';
    signal tmp_4_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_fu_180_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state15 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component match_db_contact IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        db_item_V : IN STD_LOGIC_VECTOR (511 downto 0);
        contacts_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        contacts_V_ce0 : OUT STD_LOGIC;
        contacts_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component contact_discoverybkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (511 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component contact_discovery_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        operation : OUT STD_LOGIC_VECTOR (31 downto 0);
        operation_ap_vld : OUT STD_LOGIC;
        contact_in_V : OUT STD_LOGIC_VECTOR (511 downto 0);
        db_size_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        error_out : IN STD_LOGIC_VECTOR (31 downto 0);
        contacts_size_out : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    contacts_V_U : component contact_discoverybkb
    generic map (
        DataWidth => 512,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => contacts_V_address0,
        ce0 => contacts_V_ce0,
        we0 => contacts_V_we0,
        d0 => contact_in_V_read_reg_246,
        q0 => contacts_V_q0);

    contact_discovery_AXILiteS_s_axi_U : component contact_discovery_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        operation => operation,
        operation_ap_vld => operation_ap_vld,
        contact_in_V => contact_in_V,
        db_size_in => db_size_in,
        error_out => error_out_1_data_reg,
        contacts_size_out => contacts_size_out_1_data_reg);

    grp_match_db_contact_fu_156 : component match_db_contact
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_match_db_contact_fu_156_ap_start,
        ap_done => grp_match_db_contact_fu_156_ap_done,
        ap_idle => grp_match_db_contact_fu_156_ap_idle,
        ap_ready => grp_match_db_contact_fu_156_ap_ready,
        db_item_V => reg_164,
        contacts_V_address0 => grp_match_db_contact_fu_156_contacts_V_address0,
        contacts_V_ce0 => grp_match_db_contact_fu_156_contacts_V_ce0,
        contacts_V_q0 => contacts_V_q0,
        ap_return => grp_match_db_contact_fu_156_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_match_db_contact_fu_156_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_match_db_contact_fu_156_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (db_in_V_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in)))) or ((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in)))) or ((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in)))))) then 
                    ap_reg_grp_match_db_contact_fu_156_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_match_db_contact_fu_156_ap_ready)) then 
                    ap_reg_grp_match_db_contact_fu_156_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    db_in_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                db_in_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = db_in_V_V_0_ack_out) and (ap_const_logic_1 = db_in_V_V_0_vld_out))) then 
                                        db_in_V_V_0_sel_rd <= not(db_in_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    db_in_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                db_in_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = db_in_V_V_0_vld_in) and (ap_const_logic_1 = db_in_V_V_0_ack_in))) then 
                                        db_in_V_V_0_sel_wr <= not(db_in_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    db_in_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                db_in_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = db_in_V_V_0_vld_in) and (ap_const_logic_1 = db_in_V_V_0_ack_out) and (db_in_V_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = db_in_V_V_0_vld_in) and (db_in_V_V_0_state = ap_const_lv2_2)))) then 
                    db_in_V_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = db_in_V_V_0_vld_in) and (ap_const_logic_0 = db_in_V_V_0_ack_out) and (db_in_V_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = db_in_V_V_0_ack_out) and (db_in_V_V_0_state = ap_const_lv2_1)))) then 
                    db_in_V_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = db_in_V_V_0_vld_in) and (db_in_V_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = db_in_V_V_0_ack_out) and (db_in_V_V_0_state = ap_const_lv2_1)) or ((db_in_V_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = db_in_V_V_0_vld_in) and (ap_const_logic_0 = db_in_V_V_0_ack_out))) and not(((ap_const_logic_0 = db_in_V_V_0_vld_in) and (ap_const_logic_1 = db_in_V_V_0_ack_out)))))) then 
                    db_in_V_V_0_state <= ap_const_lv2_3;
                else 
                    db_in_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    operation_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                operation_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
                    operation_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = operation_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    operation_ap_vld_preg <= operation_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    operation_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                operation_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = operation_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    operation_preg <= operation;
                end if; 
            end if;
        end if;
    end process;


    results_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                results_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = results_out_V_1_ack_out) and (ap_const_logic_1 = results_out_V_1_vld_out))) then 
                                        results_out_V_1_sel_rd <= not(results_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    results_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                results_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = results_out_V_1_vld_in) and (ap_const_logic_1 = results_out_V_1_ack_in))) then 
                                        results_out_V_1_sel_wr <= not(results_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    results_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                results_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = results_out_V_1_vld_in) and (ap_const_logic_1 = results_out_V_1_ack_out) and (ap_const_lv2_3 = results_out_V_1_state)) or ((ap_const_logic_0 = results_out_V_1_vld_in) and (ap_const_lv2_2 = results_out_V_1_state)))) then 
                    results_out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = results_out_V_1_vld_in) and (ap_const_logic_0 = results_out_V_1_ack_out) and (ap_const_lv2_3 = results_out_V_1_state)) or ((ap_const_logic_0 = results_out_V_1_ack_out) and (ap_const_lv2_1 = results_out_V_1_state)))) then 
                    results_out_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = results_out_V_1_vld_in) and (ap_const_lv2_2 = results_out_V_1_state)) or ((ap_const_logic_1 = results_out_V_1_ack_out) and (ap_const_lv2_1 = results_out_V_1_state)) or ((ap_const_lv2_3 = results_out_V_1_state) and not(((ap_const_logic_1 = results_out_V_1_vld_in) and (ap_const_logic_0 = results_out_V_1_ack_out))) and not(((ap_const_logic_0 = results_out_V_1_vld_in) and (ap_const_logic_1 = results_out_V_1_ack_out)))))) then 
                    results_out_V_1_state <= ap_const_lv2_3;
                else 
                    results_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    contacts_size_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_84_p2) and (ap_const_lv1_0 = icmp_fu_189_p2))) then 
                contacts_size <= tmp_5_fu_199_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_84_p2 = ap_const_lv32_2))) then 
                contacts_size <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    contacts_size_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    database_index_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (results_out_V_1_ack_in = ap_const_logic_1))) then 
                database_index_reg_133 <= database_index_1_reg_275;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_84_p2 = ap_const_lv32_1))) then 
                database_index_reg_133 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    error_out_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    storemerge_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                storemerge_reg_144 <= contacts_size_load_reg_255;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_84_p2) and (ap_const_lv1_0 = icmp_fu_189_p2))) then 
                storemerge_reg_144 <= tmp_5_fu_199_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))))) then
                contact_in_V_read_reg_246 <= contact_in_V;
                contacts_size_load_reg_255 <= contacts_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = contacts_size_out_1_vld_in) and (ap_const_logic_0 = contacts_size_out_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = contacts_size_out_1_vld_in) and (ap_const_logic_1 = contacts_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                contacts_size_out_1_data_reg <= contacts_size_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_6_fu_210_p2))) then
                database_index_1_reg_275 <= database_index_1_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = db_in_V_V_0_load_A)) then
                db_in_V_V_0_payload_A <= db_in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = db_in_V_V_0_load_B)) then
                db_in_V_V_0_payload_B <= db_in_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = error_out_1_vld_in) and (ap_const_logic_0 = error_out_1_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = error_out_1_vld_in) and (ap_const_logic_1 = error_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                error_out_1_data_reg <= error_out_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (db_in_V_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in)))) or ((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in)))) or ((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in)))))) then
                reg_164 <= db_in_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = results_out_V_1_load_A)) then
                results_out_V_1_payload_A <= results_out_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = results_out_V_1_load_B)) then
                results_out_V_1_payload_B <= results_out_V_1_data_in;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, operation_ap_vld_in_sig, db_in_V_V_0_vld_out, error_out_1_ack_in, contacts_size_out_1_ack_in, results_out_V_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, operation_read_read_fu_84_p2, ap_CS_fsm_state2, icmp_fu_189_p2, ap_CS_fsm_state3, tmp_6_fu_210_p2, grp_match_db_contact_fu_156_ap_done, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_84_p2) and (ap_const_lv1_0 = icmp_fu_189_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_84_p2) and (ap_const_lv1_1 = icmp_fu_189_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (operation_read_read_fu_84_p2 = ap_const_lv32_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_6_fu_210_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (db_in_V_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = grp_match_db_contact_fu_156_ap_done))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = grp_match_db_contact_fu_156_ap_done))))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = grp_match_db_contact_fu_156_ap_done))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = grp_match_db_contact_fu_156_ap_done))))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (results_out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, operation_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig));
    end process;


    ap_block_state15_assign_proc : process(error_out_1_ack_in, contacts_size_out_1_ack_in, results_out_V_1_ack_in)
    begin
                ap_block_state15 <= ((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in));
    end process;


    ap_done_assign_proc : process(error_out_1_ack_in, contacts_size_out_1_ack_in, results_out_V_1_ack_in, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(error_out_1_ack_in, contacts_size_out_1_ack_in, results_out_V_1_ack_in, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = error_out_1_ack_in) or (ap_const_logic_0 = contacts_size_out_1_ack_in))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    contacts_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state2, grp_match_db_contact_fu_156_contacts_V_address0, tmp_4_fu_195_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            contacts_V_address0 <= tmp_4_fu_195_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            contacts_V_address0 <= grp_match_db_contact_fu_156_contacts_V_address0;
        else 
            contacts_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    contacts_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state2, grp_match_db_contact_fu_156_contacts_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            contacts_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            contacts_V_ce0 <= grp_match_db_contact_fu_156_contacts_V_ce0;
        else 
            contacts_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    contacts_V_we0_assign_proc : process(operation_read_read_fu_84_p2, ap_CS_fsm_state2, icmp_fu_189_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_84_p2) and (ap_const_lv1_0 = icmp_fu_189_p2))) then 
            contacts_V_we0 <= ap_const_logic_1;
        else 
            contacts_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    contacts_size_out_1_ack_in_assign_proc : process(contacts_size_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = contacts_size_out_1_vld_reg) or ((ap_const_logic_1 = contacts_size_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            contacts_size_out_1_ack_in <= ap_const_logic_1;
        else 
            contacts_size_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    contacts_size_out_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, contacts_size, operation_read_read_fu_84_p2, storemerge_reg_144, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            contacts_size_out_1_data_in <= storemerge_reg_144;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_84_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_84_p2)) and not((operation_read_read_fu_84_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_84_p2 = ap_const_lv32_2))))) then 
            contacts_size_out_1_data_in <= contacts_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_84_p2 = ap_const_lv32_2))) then 
            contacts_size_out_1_data_in <= ap_const_lv32_0;
        else 
            contacts_size_out_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    contacts_size_out_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_84_p2, ap_CS_fsm_state14)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_84_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_84_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_84_p2)) and not((operation_read_read_fu_84_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_84_p2 = ap_const_lv32_2))) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            contacts_size_out_1_vld_in <= ap_const_logic_1;
        else 
            contacts_size_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    database_index_1_fu_215_p2 <= std_logic_vector(unsigned(database_index_reg_133) + unsigned(ap_const_lv32_4));
    db_in_V_V_0_ack_in <= db_in_V_V_0_state(1);

    db_in_V_V_0_ack_out_assign_proc : process(db_in_V_V_0_vld_out, results_out_V_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (db_in_V_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in)))) or ((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in)))) or ((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = db_in_V_V_0_vld_out) or (ap_const_logic_0 = results_out_V_1_ack_in)))))) then 
            db_in_V_V_0_ack_out <= ap_const_logic_1;
        else 
            db_in_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    db_in_V_V_0_data_out_assign_proc : process(db_in_V_V_0_payload_A, db_in_V_V_0_payload_B, db_in_V_V_0_sel)
    begin
        if ((ap_const_logic_1 = db_in_V_V_0_sel)) then 
            db_in_V_V_0_data_out <= db_in_V_V_0_payload_B;
        else 
            db_in_V_V_0_data_out <= db_in_V_V_0_payload_A;
        end if; 
    end process;

    db_in_V_V_0_load_A <= (db_in_V_V_0_state_cmp_full and not(db_in_V_V_0_sel_wr));
    db_in_V_V_0_load_B <= (db_in_V_V_0_sel_wr and db_in_V_V_0_state_cmp_full);
    db_in_V_V_0_sel <= db_in_V_V_0_sel_rd;
    db_in_V_V_0_state_cmp_full <= '0' when (db_in_V_V_0_state = ap_const_lv2_1) else '1';
    db_in_V_V_0_vld_in <= db_in_V_V_TVALID;
    db_in_V_V_0_vld_out <= db_in_V_V_0_state(0);

    db_in_V_V_TDATA_blk_n_assign_proc : process(db_in_V_V_0_state, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            db_in_V_V_TDATA_blk_n <= db_in_V_V_0_state(0);
        else 
            db_in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    db_in_V_V_TREADY <= db_in_V_V_0_state(1);

    error_out_1_ack_in_assign_proc : process(error_out_1_vld_reg)
    begin
        if (((ap_const_logic_0 = error_out_1_vld_reg) or ((ap_const_logic_1 = error_out_1_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            error_out_1_ack_in <= ap_const_logic_1;
        else 
            error_out_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    error_out_1_data_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_84_p2, ap_CS_fsm_state2, icmp_fu_189_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_84_p2) and (ap_const_lv1_1 = icmp_fu_189_p2))) then 
            error_out_1_data_in <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_84_p2)) and not((operation_read_read_fu_84_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_84_p2 = ap_const_lv32_2)))) then 
            error_out_1_data_in <= ap_const_lv32_3;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_84_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_84_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_84_p2)))) then 
            error_out_1_data_in <= ap_const_lv32_0;
        else 
            error_out_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    error_out_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld_in_sig, operation_read_read_fu_84_p2, ap_CS_fsm_state2, icmp_fu_189_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_84_p2 = ap_const_lv32_2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (operation_read_read_fu_84_p2 = ap_const_lv32_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and (ap_const_lv32_0 = operation_read_read_fu_84_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = operation_ap_vld_in_sig))) and not((ap_const_lv32_0 = operation_read_read_fu_84_p2)) and not((operation_read_read_fu_84_p2 = ap_const_lv32_1)) and not((operation_read_read_fu_84_p2 = ap_const_lv32_2))) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv32_0 = operation_read_read_fu_84_p2) and (ap_const_lv1_1 = icmp_fu_189_p2)))) then 
            error_out_1_vld_in <= ap_const_logic_1;
        else 
            error_out_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    grp_match_db_contact_fu_156_ap_start <= ap_reg_grp_match_db_contact_fu_156_ap_start;
    icmp_fu_189_p2 <= "1" when (signed(tmp_fu_180_p4) > signed(ap_const_lv25_0)) else "0";

    operation_ap_vld_in_sig_assign_proc : process(operation_ap_vld, operation_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = operation_ap_vld)) then 
            operation_ap_vld_in_sig <= operation_ap_vld;
        else 
            operation_ap_vld_in_sig <= operation_ap_vld_preg;
        end if; 
    end process;


    operation_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, operation_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            operation_blk_n <= operation_ap_vld;
        else 
            operation_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    operation_in_sig_assign_proc : process(operation, operation_preg, operation_ap_vld)
    begin
        if ((ap_const_logic_1 = operation_ap_vld)) then 
            operation_in_sig <= operation;
        else 
            operation_in_sig <= operation_preg;
        end if; 
    end process;

    operation_read_read_fu_84_p2 <= operation_in_sig;
    results_out_V_1_ack_in <= results_out_V_1_state(1);
    results_out_V_1_ack_out <= results_out_V_TREADY;

    results_out_V_1_data_in_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, tmp_1_fu_221_p1, grp_match_db_contact_fu_156_ap_done, tmp_2_fu_226_p1, tmp_3_fu_231_p1, tmp_10_fu_236_p1)
    begin
        if ((grp_match_db_contact_fu_156_ap_done = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                results_out_V_1_data_in <= tmp_10_fu_236_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                results_out_V_1_data_in <= tmp_3_fu_231_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                results_out_V_1_data_in <= tmp_2_fu_226_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                results_out_V_1_data_in <= tmp_1_fu_221_p1;
            else 
                results_out_V_1_data_in <= "XXXXXXXX";
            end if;
        else 
            results_out_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    results_out_V_1_data_out_assign_proc : process(results_out_V_1_payload_A, results_out_V_1_payload_B, results_out_V_1_sel)
    begin
        if ((ap_const_logic_1 = results_out_V_1_sel)) then 
            results_out_V_1_data_out <= results_out_V_1_payload_B;
        else 
            results_out_V_1_data_out <= results_out_V_1_payload_A;
        end if; 
    end process;

    results_out_V_1_load_A <= (results_out_V_1_state_cmp_full and not(results_out_V_1_sel_wr));
    results_out_V_1_load_B <= (results_out_V_1_sel_wr and results_out_V_1_state_cmp_full);
    results_out_V_1_sel <= results_out_V_1_sel_rd;
    results_out_V_1_state_cmp_full <= '0' when (results_out_V_1_state = ap_const_lv2_1) else '1';

    results_out_V_1_vld_in_assign_proc : process(results_out_V_1_ack_in, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, grp_match_db_contact_fu_156_ap_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = grp_match_db_contact_fu_156_ap_done)))) or ((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = grp_match_db_contact_fu_156_ap_done)))) or ((ap_const_logic_1 = ap_CS_fsm_state9) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = grp_match_db_contact_fu_156_ap_done)))) or ((ap_const_logic_1 = ap_CS_fsm_state11) and not(((ap_const_logic_0 = results_out_V_1_ack_in) or (ap_const_logic_0 = grp_match_db_contact_fu_156_ap_done)))))) then 
            results_out_V_1_vld_in <= ap_const_logic_1;
        else 
            results_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    results_out_V_1_vld_out <= results_out_V_1_state(0);
    results_out_V_TDATA <= results_out_V_1_data_out;

    results_out_V_TDATA_blk_n_assign_proc : process(results_out_V_1_state, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            results_out_V_TDATA_blk_n <= results_out_V_1_state(1);
        else 
            results_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    results_out_V_TVALID <= results_out_V_1_state(0);
    tmp_10_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_match_db_contact_fu_156_ap_return),8));
    tmp_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_match_db_contact_fu_156_ap_return),8));
    tmp_2_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_match_db_contact_fu_156_ap_return),8));
    tmp_3_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_match_db_contact_fu_156_ap_return),8));
        tmp_4_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(contacts_size_load_reg_255),64));

    tmp_5_fu_199_p2 <= std_logic_vector(unsigned(contacts_size_load_reg_255) + unsigned(ap_const_lv32_1));
    tmp_6_fu_210_p2 <= "1" when (unsigned(database_index_reg_133) < unsigned(db_size_in)) else "0";
    tmp_fu_180_p4 <= contacts_size_load_reg_255(31 downto 7);
end behav;
