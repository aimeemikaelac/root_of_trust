/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RemoteAttestationDemo_H
#define RemoteAttestationDemo_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "remote_attestation_demo_types.h"

namespace remote_attestation_demo {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance
#endif

class RemoteAttestationDemoIf {
 public:
  virtual ~RemoteAttestationDemoIf() {}
  virtual void begin_attestation(std::string& _return, const std::string& remote_message) = 0;
  virtual bool check_message() = 0;
  virtual void get_message(std::string& _return) = 0;
};

class RemoteAttestationDemoIfFactory {
 public:
  typedef RemoteAttestationDemoIf Handler;

  virtual ~RemoteAttestationDemoIfFactory() {}

  virtual RemoteAttestationDemoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RemoteAttestationDemoIf* /* handler */) = 0;
};

class RemoteAttestationDemoIfSingletonFactory : virtual public RemoteAttestationDemoIfFactory {
 public:
  RemoteAttestationDemoIfSingletonFactory(const boost::shared_ptr<RemoteAttestationDemoIf>& iface) : iface_(iface) {}
  virtual ~RemoteAttestationDemoIfSingletonFactory() {}

  virtual RemoteAttestationDemoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RemoteAttestationDemoIf* /* handler */) {}

 protected:
  boost::shared_ptr<RemoteAttestationDemoIf> iface_;
};

class RemoteAttestationDemoNull : virtual public RemoteAttestationDemoIf {
 public:
  virtual ~RemoteAttestationDemoNull() {}
  void begin_attestation(std::string& /* _return */, const std::string& /* remote_message */) {
    return;
  }
  bool check_message() {
    bool _return = false;
    return _return;
  }
  void get_message(std::string& /* _return */) {
    return;
  }
};

typedef struct _RemoteAttestationDemo_begin_attestation_args__isset {
  _RemoteAttestationDemo_begin_attestation_args__isset() : remote_message(false) {}
  bool remote_message :1;
} _RemoteAttestationDemo_begin_attestation_args__isset;

class RemoteAttestationDemo_begin_attestation_args {
 public:

  RemoteAttestationDemo_begin_attestation_args(const RemoteAttestationDemo_begin_attestation_args&);
  RemoteAttestationDemo_begin_attestation_args& operator=(const RemoteAttestationDemo_begin_attestation_args&);
  RemoteAttestationDemo_begin_attestation_args() : remote_message() {
  }

  virtual ~RemoteAttestationDemo_begin_attestation_args() throw();
  std::string remote_message;

  _RemoteAttestationDemo_begin_attestation_args__isset __isset;

  void __set_remote_message(const std::string& val);

  bool operator == (const RemoteAttestationDemo_begin_attestation_args & rhs) const
  {
    if (!(remote_message == rhs.remote_message))
      return false;
    return true;
  }
  bool operator != (const RemoteAttestationDemo_begin_attestation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAttestationDemo_begin_attestation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteAttestationDemo_begin_attestation_pargs {
 public:


  virtual ~RemoteAttestationDemo_begin_attestation_pargs() throw();
  const std::string* remote_message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteAttestationDemo_begin_attestation_result__isset {
  _RemoteAttestationDemo_begin_attestation_result__isset() : success(false) {}
  bool success :1;
} _RemoteAttestationDemo_begin_attestation_result__isset;

class RemoteAttestationDemo_begin_attestation_result {
 public:

  RemoteAttestationDemo_begin_attestation_result(const RemoteAttestationDemo_begin_attestation_result&);
  RemoteAttestationDemo_begin_attestation_result& operator=(const RemoteAttestationDemo_begin_attestation_result&);
  RemoteAttestationDemo_begin_attestation_result() : success() {
  }

  virtual ~RemoteAttestationDemo_begin_attestation_result() throw();
  std::string success;

  _RemoteAttestationDemo_begin_attestation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const RemoteAttestationDemo_begin_attestation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteAttestationDemo_begin_attestation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAttestationDemo_begin_attestation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteAttestationDemo_begin_attestation_presult__isset {
  _RemoteAttestationDemo_begin_attestation_presult__isset() : success(false) {}
  bool success :1;
} _RemoteAttestationDemo_begin_attestation_presult__isset;

class RemoteAttestationDemo_begin_attestation_presult {
 public:


  virtual ~RemoteAttestationDemo_begin_attestation_presult() throw();
  std::string* success;

  _RemoteAttestationDemo_begin_attestation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RemoteAttestationDemo_check_message_args {
 public:

  RemoteAttestationDemo_check_message_args(const RemoteAttestationDemo_check_message_args&);
  RemoteAttestationDemo_check_message_args& operator=(const RemoteAttestationDemo_check_message_args&);
  RemoteAttestationDemo_check_message_args() {
  }

  virtual ~RemoteAttestationDemo_check_message_args() throw();

  bool operator == (const RemoteAttestationDemo_check_message_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteAttestationDemo_check_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAttestationDemo_check_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteAttestationDemo_check_message_pargs {
 public:


  virtual ~RemoteAttestationDemo_check_message_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteAttestationDemo_check_message_result__isset {
  _RemoteAttestationDemo_check_message_result__isset() : success(false) {}
  bool success :1;
} _RemoteAttestationDemo_check_message_result__isset;

class RemoteAttestationDemo_check_message_result {
 public:

  RemoteAttestationDemo_check_message_result(const RemoteAttestationDemo_check_message_result&);
  RemoteAttestationDemo_check_message_result& operator=(const RemoteAttestationDemo_check_message_result&);
  RemoteAttestationDemo_check_message_result() : success(0) {
  }

  virtual ~RemoteAttestationDemo_check_message_result() throw();
  bool success;

  _RemoteAttestationDemo_check_message_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteAttestationDemo_check_message_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteAttestationDemo_check_message_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAttestationDemo_check_message_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteAttestationDemo_check_message_presult__isset {
  _RemoteAttestationDemo_check_message_presult__isset() : success(false) {}
  bool success :1;
} _RemoteAttestationDemo_check_message_presult__isset;

class RemoteAttestationDemo_check_message_presult {
 public:


  virtual ~RemoteAttestationDemo_check_message_presult() throw();
  bool* success;

  _RemoteAttestationDemo_check_message_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RemoteAttestationDemo_get_message_args {
 public:

  RemoteAttestationDemo_get_message_args(const RemoteAttestationDemo_get_message_args&);
  RemoteAttestationDemo_get_message_args& operator=(const RemoteAttestationDemo_get_message_args&);
  RemoteAttestationDemo_get_message_args() {
  }

  virtual ~RemoteAttestationDemo_get_message_args() throw();

  bool operator == (const RemoteAttestationDemo_get_message_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteAttestationDemo_get_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAttestationDemo_get_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteAttestationDemo_get_message_pargs {
 public:


  virtual ~RemoteAttestationDemo_get_message_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteAttestationDemo_get_message_result__isset {
  _RemoteAttestationDemo_get_message_result__isset() : success(false) {}
  bool success :1;
} _RemoteAttestationDemo_get_message_result__isset;

class RemoteAttestationDemo_get_message_result {
 public:

  RemoteAttestationDemo_get_message_result(const RemoteAttestationDemo_get_message_result&);
  RemoteAttestationDemo_get_message_result& operator=(const RemoteAttestationDemo_get_message_result&);
  RemoteAttestationDemo_get_message_result() : success() {
  }

  virtual ~RemoteAttestationDemo_get_message_result() throw();
  std::string success;

  _RemoteAttestationDemo_get_message_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const RemoteAttestationDemo_get_message_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteAttestationDemo_get_message_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteAttestationDemo_get_message_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteAttestationDemo_get_message_presult__isset {
  _RemoteAttestationDemo_get_message_presult__isset() : success(false) {}
  bool success :1;
} _RemoteAttestationDemo_get_message_presult__isset;

class RemoteAttestationDemo_get_message_presult {
 public:


  virtual ~RemoteAttestationDemo_get_message_presult() throw();
  std::string* success;

  _RemoteAttestationDemo_get_message_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RemoteAttestationDemoClient : virtual public RemoteAttestationDemoIf {
 public:
  RemoteAttestationDemoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RemoteAttestationDemoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void begin_attestation(std::string& _return, const std::string& remote_message);
  void send_begin_attestation(const std::string& remote_message);
  void recv_begin_attestation(std::string& _return);
  bool check_message();
  void send_check_message();
  bool recv_check_message();
  void get_message(std::string& _return);
  void send_get_message();
  void recv_get_message(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RemoteAttestationDemoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RemoteAttestationDemoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RemoteAttestationDemoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_begin_attestation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RemoteAttestationDemoProcessor(boost::shared_ptr<RemoteAttestationDemoIf> iface) :
    iface_(iface) {
    processMap_["begin_attestation"] = &RemoteAttestationDemoProcessor::process_begin_attestation;
    processMap_["check_message"] = &RemoteAttestationDemoProcessor::process_check_message;
    processMap_["get_message"] = &RemoteAttestationDemoProcessor::process_get_message;
  }

  virtual ~RemoteAttestationDemoProcessor() {}
};

class RemoteAttestationDemoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RemoteAttestationDemoProcessorFactory(const ::boost::shared_ptr< RemoteAttestationDemoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RemoteAttestationDemoIfFactory > handlerFactory_;
};

class RemoteAttestationDemoMultiface : virtual public RemoteAttestationDemoIf {
 public:
  RemoteAttestationDemoMultiface(std::vector<boost::shared_ptr<RemoteAttestationDemoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RemoteAttestationDemoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RemoteAttestationDemoIf> > ifaces_;
  RemoteAttestationDemoMultiface() {}
  void add(boost::shared_ptr<RemoteAttestationDemoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void begin_attestation(std::string& _return, const std::string& remote_message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->begin_attestation(_return, remote_message);
    }
    ifaces_[i]->begin_attestation(_return, remote_message);
    return;
  }

  bool check_message() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_message();
    }
    return ifaces_[i]->check_message();
  }

  void get_message(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_message(_return);
    }
    ifaces_[i]->get_message(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RemoteAttestationDemoConcurrentClient : virtual public RemoteAttestationDemoIf {
 public:
  RemoteAttestationDemoConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RemoteAttestationDemoConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void begin_attestation(std::string& _return, const std::string& remote_message);
  int32_t send_begin_attestation(const std::string& remote_message);
  void recv_begin_attestation(std::string& _return, const int32_t seqid);
  bool check_message();
  int32_t send_check_message();
  bool recv_check_message(const int32_t seqid);
  void get_message(std::string& _return);
  int32_t send_get_message();
  void recv_get_message(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};


#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

void * attestation_server_serve(void * args);

#endif
