#include "xil_io.h"

//TODO: have this filled in by code generator
#define MEMORY_BUFFER_ADDRESS 0x40200000
#define DATA_OFFSET 0x100

void watch_mem_buffer(){
  {% for return_value in return_values %}
  volatile {{ return_value.type }} *{{ return_value.name}} = ({{ return_value.type }}*)(SHARED_BUFFER_ADDRESS + return_value.start);
  {% endfor %}
  unsigned int function;
  int i;
  //while true, check for the function
  while(1){
    // Check if a ready signal is set
    //TODO: use this register with a bitmask for more data?
    if(Xil_In32(MEMORY_BUFFER_ADDRESS + 0x70) == 0){
      continue;
    }
    function = Xil_In32(MEMORY_BUFFER_ADDRESS + 0x60);
    switch(function){
    {% for statement in statements %}
      case {{ statement.function_id }} :
        {% if statement.return_value %}
        *{{ statement.return_value.name }} = {{ statement.function_name }}(
        {% else %}
        {{ statement.function_name }}(
        {% endif %}
        {{ statement.arguments }}
        );
        Xil_Out32(SHARED_BUFFER_ADDRESS + 0x80, 0xFF);
      break;
    {% endfor %}
      default :
        continue;
    }
  }
}
