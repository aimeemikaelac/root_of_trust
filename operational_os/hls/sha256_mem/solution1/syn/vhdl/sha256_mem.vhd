-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_mem is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    digest_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    digest_out_ce0 : OUT STD_LOGIC;
    digest_out_we0 : OUT STD_LOGIC;
    digest_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    digest_out_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    digest_out_ce1 : OUT STD_LOGIC;
    digest_out_we1 : OUT STD_LOGIC;
    digest_out_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    digest_valid : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of sha256_mem is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256_mem,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-1-i-es1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=0,HLS_SYN_FF=2997,HLS_SYN_LUT=7162}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6A09E667 : STD_LOGIC_VECTOR (31 downto 0) := "01101010000010011110011001100111";
    constant ap_const_lv32_BB67AE85 : STD_LOGIC_VECTOR (31 downto 0) := "10111011011001111010111010000101";
    constant ap_const_lv32_3C6EF372 : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101110010";
    constant ap_const_lv32_A54FF53A : STD_LOGIC_VECTOR (31 downto 0) := "10100101010011111111010100111010";
    constant ap_const_lv32_510E527F : STD_LOGIC_VECTOR (31 downto 0) := "01010001000011100101001001111111";
    constant ap_const_lv32_9B05688C : STD_LOGIC_VECTOR (31 downto 0) := "10011011000001010110100010001100";
    constant ap_const_lv32_1F83D9AB : STD_LOGIC_VECTOR (31 downto 0) := "00011111100000111101100110101011";
    constant ap_const_lv32_5BE0CD19 : STD_LOGIC_VECTOR (31 downto 0) := "01011011111000001100110100011001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal message_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal message_addr_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal message_addr_ap_vld : STD_LOGIC;
    signal message_addr_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal message_addr_ap_vld_preg : STD_LOGIC := '0';
    signal message_addr_ap_vld_in_sig : STD_LOGIC;
    signal num_blocks : STD_LOGIC_VECTOR (31 downto 0);
    signal num_blocks_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal num_blocks_ap_vld : STD_LOGIC;
    signal num_blocks_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal num_blocks_ap_vld_preg : STD_LOGIC := '0';
    signal num_blocks_ap_vld_in_sig : STD_LOGIC;
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal message_addr_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal num_blocks_blk_n : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal block_counter_1_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_counter_1_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal data_index_2_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_index_2_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_index_1_fu_361_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffer_index_1_reg_433 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mem_addr_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_addr_read_reg_454 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_update_fu_311_ap_done : STD_LOGIC;
    signal data_buffer_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_buffer_ce0 : STD_LOGIC;
    signal data_buffer_we0 : STD_LOGIC;
    signal data_buffer_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_buffer_ce1 : STD_LOGIC;
    signal data_buffer_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_block_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cipher_m_block_ce0 : STD_LOGIC;
    signal cipher_m_block_we0 : STD_LOGIC;
    signal cipher_m_block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_block_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_block_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal cipher_m_block_ce1 : STD_LOGIC;
    signal cipher_m_block_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_h_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cipher_m_h_ce0 : STD_LOGIC;
    signal cipher_m_h_we0 : STD_LOGIC;
    signal cipher_m_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cipher_m_h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cipher_m_h_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal cipher_m_h_ce1 : STD_LOGIC;
    signal cipher_m_h_we1 : STD_LOGIC;
    signal cipher_m_h_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_311_ap_start : STD_LOGIC;
    signal grp_update_fu_311_ap_idle : STD_LOGIC;
    signal grp_update_fu_311_ap_ready : STD_LOGIC;
    signal grp_update_fu_311_SHA256_m_block_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_update_fu_311_SHA256_m_block_ce0 : STD_LOGIC;
    signal grp_update_fu_311_SHA256_m_block_we0 : STD_LOGIC;
    signal grp_update_fu_311_SHA256_m_block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_311_SHA256_m_block_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_update_fu_311_SHA256_m_block_ce1 : STD_LOGIC;
    signal grp_update_fu_311_SHA256_m_h_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_update_fu_311_SHA256_m_h_ce0 : STD_LOGIC;
    signal grp_update_fu_311_SHA256_m_h_we0 : STD_LOGIC;
    signal grp_update_fu_311_SHA256_m_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_311_message_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_fu_311_message_ce0 : STD_LOGIC;
    signal grp_update_fu_311_message_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_fu_311_message_ce1 : STD_LOGIC;
    signal grp_update_fu_311_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_fu_311_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_final_fu_324_ap_start : STD_LOGIC;
    signal grp_final_fu_324_ap_done : STD_LOGIC;
    signal grp_final_fu_324_ap_idle : STD_LOGIC;
    signal grp_final_fu_324_ap_ready : STD_LOGIC;
    signal grp_final_fu_324_SHA256_m_block_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_final_fu_324_SHA256_m_block_ce0 : STD_LOGIC;
    signal grp_final_fu_324_SHA256_m_block_we0 : STD_LOGIC;
    signal grp_final_fu_324_SHA256_m_block_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_final_fu_324_SHA256_m_block_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_final_fu_324_SHA256_m_block_ce1 : STD_LOGIC;
    signal grp_final_fu_324_SHA256_m_h_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_final_fu_324_SHA256_m_h_ce0 : STD_LOGIC;
    signal grp_final_fu_324_SHA256_m_h_we0 : STD_LOGIC;
    signal grp_final_fu_324_SHA256_m_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_final_fu_324_digest_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_final_fu_324_digest_ce0 : STD_LOGIC;
    signal grp_final_fu_324_digest_we0 : STD_LOGIC;
    signal grp_final_fu_324_digest_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_final_fu_324_digest_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_final_fu_324_digest_ce1 : STD_LOGIC;
    signal grp_final_fu_324_digest_we1 : STD_LOGIC;
    signal grp_final_fu_324_digest_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_m_len_reg_230 : STD_LOGIC_VECTOR (31 downto 0);
    signal cipher_m_tot_len_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_counter_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_index_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_index_1_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal buffer_index_reg_299 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_grp_update_fu_311_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_final_fu_324_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal tmp_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SHA256_m_tot_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_block_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        SHA256_m_block_ce0 : OUT STD_LOGIC;
        SHA256_m_block_we0 : OUT STD_LOGIC;
        SHA256_m_block_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_block_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_block_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        SHA256_m_block_ce1 : OUT STD_LOGIC;
        SHA256_m_block_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_h_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        SHA256_m_h_ce0 : OUT STD_LOGIC;
        SHA256_m_h_we0 : OUT STD_LOGIC;
        SHA256_m_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        message_ce1 : OUT STD_LOGIC;
        message_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SHA256_m_tot_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_len_read : IN STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_block_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        SHA256_m_block_ce0 : OUT STD_LOGIC;
        SHA256_m_block_we0 : OUT STD_LOGIC;
        SHA256_m_block_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_block_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_block_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        SHA256_m_block_ce1 : OUT STD_LOGIC;
        SHA256_m_block_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        SHA256_m_h_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        SHA256_m_h_ce0 : OUT STD_LOGIC;
        SHA256_m_h_we0 : OUT STD_LOGIC;
        SHA256_m_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SHA256_m_h_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        digest_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        digest_ce0 : OUT STD_LOGIC;
        digest_we0 : OUT STD_LOGIC;
        digest_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        digest_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        digest_ce1 : OUT STD_LOGIC;
        digest_we1 : OUT STD_LOGIC;
        digest_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_mem_data_bdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_mem_ciphereOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_mem_cipherfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_mem_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        message_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
        message_addr_ap_vld : OUT STD_LOGIC;
        num_blocks : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_blocks_ap_vld : OUT STD_LOGIC );
    end component;


    component sha256_mem_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sha256_mem_AXILiteS_s_axi_U : component sha256_mem_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        message_addr => message_addr,
        message_addr_ap_vld => message_addr_ap_vld,
        num_blocks => num_blocks,
        num_blocks_ap_vld => num_blocks_ap_vld);

    sha256_mem_mem_m_axi_U : component sha256_mem_mem_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_addr_reg_438,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => mem_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => mem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    data_buffer_U : component sha256_mem_data_bdEe
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_buffer_address0,
        ce0 => data_buffer_ce0,
        we0 => data_buffer_we0,
        d0 => mem_addr_read_reg_454,
        q0 => data_buffer_q0,
        address1 => grp_update_fu_311_message_address1,
        ce1 => data_buffer_ce1,
        q1 => data_buffer_q1);

    cipher_m_block_U : component sha256_mem_ciphereOg
    generic map (
        DataWidth => 8,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cipher_m_block_address0,
        ce0 => cipher_m_block_ce0,
        we0 => cipher_m_block_we0,
        d0 => cipher_m_block_d0,
        q0 => cipher_m_block_q0,
        address1 => cipher_m_block_address1,
        ce1 => cipher_m_block_ce1,
        q1 => cipher_m_block_q1);

    cipher_m_h_U : component sha256_mem_cipherfYi
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cipher_m_h_address0,
        ce0 => cipher_m_h_ce0,
        we0 => cipher_m_h_we0,
        d0 => cipher_m_h_d0,
        q0 => cipher_m_h_q0,
        address1 => cipher_m_h_address1,
        ce1 => cipher_m_h_ce1,
        we1 => cipher_m_h_we1,
        d1 => cipher_m_h_d1);

    grp_update_fu_311 : component update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_update_fu_311_ap_start,
        ap_done => grp_update_fu_311_ap_done,
        ap_idle => grp_update_fu_311_ap_idle,
        ap_ready => grp_update_fu_311_ap_ready,
        SHA256_m_tot_len_read => cipher_m_tot_len_reg_242,
        SHA256_m_len_read => cipher_m_len_reg_230,
        SHA256_m_block_address0 => grp_update_fu_311_SHA256_m_block_address0,
        SHA256_m_block_ce0 => grp_update_fu_311_SHA256_m_block_ce0,
        SHA256_m_block_we0 => grp_update_fu_311_SHA256_m_block_we0,
        SHA256_m_block_d0 => grp_update_fu_311_SHA256_m_block_d0,
        SHA256_m_block_q0 => cipher_m_block_q0,
        SHA256_m_block_address1 => grp_update_fu_311_SHA256_m_block_address1,
        SHA256_m_block_ce1 => grp_update_fu_311_SHA256_m_block_ce1,
        SHA256_m_block_q1 => cipher_m_block_q1,
        SHA256_m_h_address0 => grp_update_fu_311_SHA256_m_h_address0,
        SHA256_m_h_ce0 => grp_update_fu_311_SHA256_m_h_ce0,
        SHA256_m_h_we0 => grp_update_fu_311_SHA256_m_h_we0,
        SHA256_m_h_d0 => grp_update_fu_311_SHA256_m_h_d0,
        SHA256_m_h_q0 => cipher_m_h_q0,
        message_address0 => grp_update_fu_311_message_address0,
        message_ce0 => grp_update_fu_311_message_ce0,
        message_q0 => data_buffer_q0,
        message_address1 => grp_update_fu_311_message_address1,
        message_ce1 => grp_update_fu_311_message_ce1,
        message_q1 => data_buffer_q1,
        ap_return_0 => grp_update_fu_311_ap_return_0,
        ap_return_1 => grp_update_fu_311_ap_return_1);

    grp_final_fu_324 : component final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_final_fu_324_ap_start,
        ap_done => grp_final_fu_324_ap_done,
        ap_idle => grp_final_fu_324_ap_idle,
        ap_ready => grp_final_fu_324_ap_ready,
        SHA256_m_tot_len_read => cipher_m_tot_len_reg_242,
        SHA256_m_len_read => cipher_m_len_reg_230,
        SHA256_m_block_address0 => grp_final_fu_324_SHA256_m_block_address0,
        SHA256_m_block_ce0 => grp_final_fu_324_SHA256_m_block_ce0,
        SHA256_m_block_we0 => grp_final_fu_324_SHA256_m_block_we0,
        SHA256_m_block_d0 => grp_final_fu_324_SHA256_m_block_d0,
        SHA256_m_block_q0 => cipher_m_block_q0,
        SHA256_m_block_address1 => grp_final_fu_324_SHA256_m_block_address1,
        SHA256_m_block_ce1 => grp_final_fu_324_SHA256_m_block_ce1,
        SHA256_m_block_q1 => cipher_m_block_q1,
        SHA256_m_h_address0 => grp_final_fu_324_SHA256_m_h_address0,
        SHA256_m_h_ce0 => grp_final_fu_324_SHA256_m_h_ce0,
        SHA256_m_h_we0 => grp_final_fu_324_SHA256_m_h_we0,
        SHA256_m_h_d0 => grp_final_fu_324_SHA256_m_h_d0,
        SHA256_m_h_q0 => cipher_m_h_q0,
        digest_address0 => grp_final_fu_324_digest_address0,
        digest_ce0 => grp_final_fu_324_digest_ce0,
        digest_we0 => grp_final_fu_324_digest_we0,
        digest_d0 => grp_final_fu_324_digest_d0,
        digest_address1 => grp_final_fu_324_digest_address1,
        digest_ce1 => grp_final_fu_324_digest_ce1,
        digest_we1 => grp_final_fu_324_digest_we1,
        digest_d1 => grp_final_fu_324_digest_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_final_fu_324_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_final_fu_324_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_338_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_final_fu_324_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_final_fu_324_ap_ready)) then 
                    ap_reg_grp_final_fu_324_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_update_fu_311_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_update_fu_311_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_355_p2 = ap_const_lv1_1))) then 
                    ap_reg_grp_update_fu_311_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_update_fu_311_ap_ready)) then 
                    ap_reg_grp_update_fu_311_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    if ((ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = mem_ARREADY)) then 
                        ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    message_addr_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                message_addr_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_final_fu_324_ap_done = ap_const_logic_1))) then 
                    message_addr_ap_vld_preg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = message_addr_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    message_addr_ap_vld_preg <= message_addr_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    message_addr_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                message_addr_preg <= ap_const_lv32_0;
            else
                if (((ap_const_logic_1 = message_addr_ap_vld) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))))) then 
                    message_addr_preg <= message_addr;
                end if; 
            end if;
        end if;
    end process;


    num_blocks_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                num_blocks_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_final_fu_324_ap_done = ap_const_logic_1))) then 
                    num_blocks_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = num_blocks_ap_vld))) then 
                    num_blocks_ap_vld_preg <= num_blocks_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    num_blocks_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                num_blocks_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = num_blocks_ap_vld))) then 
                    num_blocks_preg <= num_blocks;
                end if; 
            end if;
        end if;
    end process;


    block_counter_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_update_fu_311_ap_done = ap_const_logic_1))) then 
                block_counter_reg_266 <= block_counter_1_reg_420;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig))))) then 
                block_counter_reg_266 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    buffer_index_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                buffer_index_reg_299 <= buffer_index_1_reg_433;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_338_p2 = ap_const_lv1_0))) then 
                buffer_index_reg_299 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    cipher_m_len_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_update_fu_311_ap_done = ap_const_logic_1))) then 
                cipher_m_len_reg_230 <= grp_update_fu_311_ap_return_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig))))) then 
                cipher_m_len_reg_230 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    cipher_m_tot_len_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_update_fu_311_ap_done = ap_const_logic_1))) then 
                cipher_m_tot_len_reg_242 <= grp_update_fu_311_ap_return_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig))))) then 
                cipher_m_tot_len_reg_242 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    data_index_1_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                data_index_1_reg_289 <= tmp_3_reg_444;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_338_p2 = ap_const_lv1_0))) then 
                data_index_1_reg_289 <= data_index_reg_277;
            end if; 
        end if;
    end process;

    data_index_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_update_fu_311_ap_done = ap_const_logic_1))) then 
                data_index_reg_277 <= data_index_2_reg_425;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig))))) then 
                data_index_reg_277 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_update_fu_311_ap_done = ap_const_logic_1))) then 
                indvars_iv_reg_254 <= indvars_iv_next_reg_449;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig))))) then 
                indvars_iv_reg_254 <= ap_const_lv32_40;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                block_counter_1_reg_420 <= block_counter_1_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                buffer_index_1_reg_433 <= buffer_index_1_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_338_p2 = ap_const_lv1_0))) then
                data_index_2_reg_425 <= data_index_2_fu_349_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_355_p2 = ap_const_lv1_1))) then
                indvars_iv_next_reg_449 <= indvars_iv_next_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (mem_RVALID = ap_const_logic_1))) then
                mem_addr_read_reg_454 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_355_p2))) then
                mem_addr_reg_438 <= tmp_1_fu_372_p1(32 - 1 downto 0);
                tmp_3_reg_444 <= tmp_3_fu_382_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, message_addr_ap_vld_in_sig, num_blocks_ap_vld_in_sig, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state4, mem_RVALID, ap_CS_fsm_state5, exitcond2_fu_338_p2, ap_CS_fsm_state6, exitcond_fu_355_p2, ap_CS_fsm_state16, grp_update_fu_311_ap_done, grp_final_fu_324_ap_done, ap_CS_fsm_state17, ap_sig_ioackin_mem_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig))))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_338_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_355_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_update_fu_311_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_final_fu_324_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state4_assign_proc : process(message_addr_ap_vld_in_sig, num_blocks_ap_vld_in_sig)
    begin
                ap_block_state4 <= ((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig));
    end process;


    ap_done_assign_proc : process(grp_final_fu_324_ap_done, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_final_fu_324_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_final_fu_324_ap_done, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_final_fu_324_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    block_counter_1_fu_343_p2 <= std_logic_vector(unsigned(block_counter_reg_266) + unsigned(ap_const_lv32_1));
    buffer_index_1_fu_361_p2 <= std_logic_vector(unsigned(buffer_index_reg_299) + unsigned(ap_const_lv7_1));

    cipher_m_block_address0_assign_proc : process(ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_block_address0, grp_final_fu_324_SHA256_m_block_address0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_block_address0 <= grp_final_fu_324_SHA256_m_block_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_block_address0 <= grp_update_fu_311_SHA256_m_block_address0;
        else 
            cipher_m_block_address0 <= "XXXXXXX";
        end if; 
    end process;


    cipher_m_block_address1_assign_proc : process(ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_block_address1, grp_final_fu_324_SHA256_m_block_address1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_block_address1 <= grp_final_fu_324_SHA256_m_block_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_block_address1 <= grp_update_fu_311_SHA256_m_block_address1;
        else 
            cipher_m_block_address1 <= "XXXXXXX";
        end if; 
    end process;


    cipher_m_block_ce0_assign_proc : process(ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_block_ce0, grp_final_fu_324_SHA256_m_block_ce0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_block_ce0 <= grp_final_fu_324_SHA256_m_block_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_block_ce0 <= grp_update_fu_311_SHA256_m_block_ce0;
        else 
            cipher_m_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_block_ce1_assign_proc : process(ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_block_ce1, grp_final_fu_324_SHA256_m_block_ce1, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_block_ce1 <= grp_final_fu_324_SHA256_m_block_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_block_ce1 <= grp_update_fu_311_SHA256_m_block_ce1;
        else 
            cipher_m_block_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_block_d0_assign_proc : process(ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_block_d0, grp_final_fu_324_SHA256_m_block_d0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_block_d0 <= grp_final_fu_324_SHA256_m_block_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_block_d0 <= grp_update_fu_311_SHA256_m_block_d0;
        else 
            cipher_m_block_d0 <= "XXXXXXXX";
        end if; 
    end process;


    cipher_m_block_we0_assign_proc : process(ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_block_we0, grp_final_fu_324_SHA256_m_block_we0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_block_we0 <= grp_final_fu_324_SHA256_m_block_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_block_we0 <= grp_update_fu_311_SHA256_m_block_we0;
        else 
            cipher_m_block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_h_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_h_address0, grp_final_fu_324_SHA256_m_h_address0, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_m_h_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_m_h_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipher_m_h_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cipher_m_h_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_h_address0 <= grp_final_fu_324_SHA256_m_h_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_h_address0 <= grp_update_fu_311_SHA256_m_h_address0;
        else 
            cipher_m_h_address0 <= "XXX";
        end if; 
    end process;


    cipher_m_h_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_m_h_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_m_h_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipher_m_h_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cipher_m_h_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            cipher_m_h_address1 <= "XXX";
        end if; 
    end process;


    cipher_m_h_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, message_addr_ap_vld_in_sig, num_blocks_ap_vld_in_sig, ap_CS_fsm_state4, ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_h_ce0, grp_final_fu_324_SHA256_m_h_ce0, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig)))) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cipher_m_h_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_h_ce0 <= grp_final_fu_324_SHA256_m_h_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_h_ce0 <= grp_update_fu_311_SHA256_m_h_ce0;
        else 
            cipher_m_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_h_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, message_addr_ap_vld_in_sig, num_blocks_ap_vld_in_sig, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig)))) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cipher_m_h_ce1 <= ap_const_logic_1;
        else 
            cipher_m_h_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_h_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_h_d0, grp_final_fu_324_SHA256_m_h_d0, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_m_h_d0 <= ap_const_lv32_1F83D9AB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_m_h_d0 <= ap_const_lv32_510E527F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipher_m_h_d0 <= ap_const_lv32_3C6EF372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cipher_m_h_d0 <= ap_const_lv32_6A09E667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_h_d0 <= grp_final_fu_324_SHA256_m_h_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_h_d0 <= grp_update_fu_311_SHA256_m_h_d0;
        else 
            cipher_m_h_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cipher_m_h_d1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cipher_m_h_d1 <= ap_const_lv32_5BE0CD19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cipher_m_h_d1 <= ap_const_lv32_9B05688C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cipher_m_h_d1 <= ap_const_lv32_A54FF53A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            cipher_m_h_d1 <= ap_const_lv32_BB67AE85;
        else 
            cipher_m_h_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cipher_m_h_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, message_addr_ap_vld_in_sig, num_blocks_ap_vld_in_sig, ap_CS_fsm_state4, ap_CS_fsm_state16, grp_update_fu_311_SHA256_m_h_we0, grp_final_fu_324_SHA256_m_h_we0, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig)))) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cipher_m_h_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            cipher_m_h_we0 <= grp_final_fu_324_SHA256_m_h_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            cipher_m_h_we0 <= grp_update_fu_311_SHA256_m_h_we0;
        else 
            cipher_m_h_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_m_h_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, message_addr_ap_vld_in_sig, num_blocks_ap_vld_in_sig, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and not(((ap_const_logic_0 = num_blocks_ap_vld_in_sig) or (ap_const_logic_0 = message_addr_ap_vld_in_sig)))) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            cipher_m_h_we1 <= ap_const_logic_1;
        else 
            cipher_m_h_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_buffer_address0_assign_proc : process(ap_CS_fsm_state16, grp_update_fu_311_message_address0, ap_CS_fsm_state15, tmp_2_fu_394_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_buffer_address0 <= tmp_2_fu_394_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_buffer_address0 <= grp_update_fu_311_message_address0;
        else 
            data_buffer_address0 <= "XXXXXX";
        end if; 
    end process;


    data_buffer_ce0_assign_proc : process(ap_CS_fsm_state16, grp_update_fu_311_message_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_buffer_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_buffer_ce0 <= grp_update_fu_311_message_ce0;
        else 
            data_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buffer_ce1_assign_proc : process(ap_CS_fsm_state16, grp_update_fu_311_message_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            data_buffer_ce1 <= grp_update_fu_311_message_ce1;
        else 
            data_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_buffer_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            data_buffer_we0 <= ap_const_logic_1;
        else 
            data_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_index_2_fu_349_p2 <= std_logic_vector(unsigned(data_index_reg_277) + unsigned(ap_const_lv32_40));
    digest_out_address0 <= grp_final_fu_324_digest_address0;
    digest_out_address1 <= grp_final_fu_324_digest_address1;
    digest_out_ce0 <= grp_final_fu_324_digest_ce0;
    digest_out_ce1 <= grp_final_fu_324_digest_ce1;
    digest_out_d0 <= grp_final_fu_324_digest_d0;
    digest_out_d1 <= grp_final_fu_324_digest_d1;
    digest_out_we0 <= grp_final_fu_324_digest_we0;
    digest_out_we1 <= grp_final_fu_324_digest_we1;
    digest_valid <= ap_const_logic_1;
    exitcond2_fu_338_p2 <= "1" when (block_counter_reg_266 = num_blocks_in_sig) else "0";
    exitcond_fu_355_p2 <= "1" when (data_index_1_reg_289 = indvars_iv_reg_254) else "0";
    grp_final_fu_324_ap_start <= ap_reg_grp_final_fu_324_ap_start;
    grp_update_fu_311_ap_start <= ap_reg_grp_update_fu_311_ap_start;
    indvars_iv_next_fu_388_p2 <= std_logic_vector(unsigned(indvars_iv_reg_254) + unsigned(ap_const_lv32_40));

    mem_ARVALID_assign_proc : process(ap_CS_fsm_state7, ap_reg_ioackin_mem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_state14, mem_RVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (mem_RVALID = ap_const_logic_1))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    message_addr_ap_vld_in_sig_assign_proc : process(message_addr_ap_vld, message_addr_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = message_addr_ap_vld)) then 
            message_addr_ap_vld_in_sig <= message_addr_ap_vld;
        else 
            message_addr_ap_vld_in_sig <= message_addr_ap_vld_preg;
        end if; 
    end process;


    message_addr_blk_n_assign_proc : process(message_addr_ap_vld, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            message_addr_blk_n <= message_addr_ap_vld;
        else 
            message_addr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    message_addr_in_sig_assign_proc : process(message_addr, message_addr_preg, message_addr_ap_vld)
    begin
        if ((ap_const_logic_1 = message_addr_ap_vld)) then 
            message_addr_in_sig <= message_addr;
        else 
            message_addr_in_sig <= message_addr_preg;
        end if; 
    end process;


    num_blocks_ap_vld_in_sig_assign_proc : process(num_blocks_ap_vld, num_blocks_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = num_blocks_ap_vld)) then 
            num_blocks_ap_vld_in_sig <= num_blocks_ap_vld;
        else 
            num_blocks_ap_vld_in_sig <= num_blocks_ap_vld_preg;
        end if; 
    end process;


    num_blocks_blk_n_assign_proc : process(num_blocks_ap_vld, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            num_blocks_blk_n <= num_blocks_ap_vld;
        else 
            num_blocks_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    num_blocks_in_sig_assign_proc : process(num_blocks, num_blocks_preg, num_blocks_ap_vld)
    begin
        if ((ap_const_logic_1 = num_blocks_ap_vld)) then 
            num_blocks_in_sig <= num_blocks;
        else 
            num_blocks_in_sig <= num_blocks_preg;
        end if; 
    end process;

    tmp_1_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_367_p2),64));
    tmp_2_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_index_reg_299),64));
    tmp_3_fu_382_p2 <= std_logic_vector(unsigned(data_index_1_reg_289) + unsigned(ap_const_lv32_1));
    tmp_fu_367_p2 <= std_logic_vector(unsigned(data_index_1_reg_289) + unsigned(message_addr_in_sig));
end behav;
