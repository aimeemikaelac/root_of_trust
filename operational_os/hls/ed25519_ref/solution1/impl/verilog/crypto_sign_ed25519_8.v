// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_sign_ed25519_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_v_address0,
        r_v_ce0,
        r_v_we0,
        r_v_d0,
        r_v_q0,
        r_v_address1,
        r_v_ce1,
        r_v_we1,
        r_v_d1,
        r_v_q1,
        x_v_address0,
        x_v_ce0,
        x_v_q0,
        x_v_address1,
        x_v_ce1,
        x_v_q1,
        y_v_address0,
        y_v_ce0,
        y_v_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] r_v_address0;
output   r_v_ce0;
output   r_v_we0;
output  [31:0] r_v_d0;
input  [31:0] r_v_q0;
output  [4:0] r_v_address1;
output   r_v_ce1;
output   r_v_we1;
output  [31:0] r_v_d1;
input  [31:0] r_v_q1;
output  [4:0] x_v_address0;
output   x_v_ce0;
input  [31:0] x_v_q0;
output  [4:0] x_v_address1;
output   x_v_ce1;
input  [31:0] x_v_q1;
output  [4:0] y_v_address0;
output   y_v_ce0;
input  [31:0] y_v_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] r_v_address0;
reg r_v_ce0;
reg r_v_we0;
reg[31:0] r_v_d0;
reg[4:0] r_v_address1;
reg r_v_ce1;
reg r_v_we1;
reg[31:0] r_v_d1;
reg[4:0] x_v_address0;
reg x_v_ce0;
reg x_v_ce1;
reg y_v_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] tmp_742_fu_253_p1;
reg   [63:0] tmp_742_reg_405;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond1_fu_247_p2;
wire   [4:0] i_23_fu_258_p2;
reg   [4:0] i_23_reg_415;
wire   [5:0] i_24_fu_277_p2;
reg   [5:0] i_24_reg_423;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_744_fu_283_p1;
reg   [63:0] tmp_744_reg_428;
wire   [0:0] exitcond_fu_271_p2;
wire   [2:0] rep_fu_302_p2;
reg   [2:0] rep_reg_458;
wire    ap_CS_fsm_state7;
wire   [4:0] i_25_fu_337_p2;
reg   [4:0] i_25_reg_466;
wire    ap_CS_fsm_state9;
reg   [4:0] r_v_addr_4_reg_471;
wire   [0:0] exitcond_i_fu_331_p2;
reg   [4:0] r_v_addr_5_reg_477;
reg   [4:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [31:0] t_d0;
reg   [4:0] t_address1;
reg    t_ce1;
reg    t_we1;
wire   [31:0] t_d1;
wire   [31:0] t_q1;
reg   [4:0] i_reg_189;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
reg   [5:0] i_1_reg_200;
wire    ap_CS_fsm_state6;
reg   [2:0] rep_i_reg_211;
reg   [4:0] i_i_reg_222;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire   [63:0] tmp_759_i_fu_343_p1;
wire   [63:0] tmp_760_i_fu_348_p1;
wire   [31:0] tmp_fu_233_p2;
wire   [31:0] tmp_743_fu_264_p2;
wire   [31:0] tmp_745_fu_289_p2;
wire   [31:0] tmp_i_cast_fu_326_p1;
wire   [31:0] grp_fu_383_p3;
wire   [31:0] tmp_761_i_fu_371_p2;
wire   [31:0] tmp_762_i_cast_fu_378_p1;
wire   [24:0] tmp_746_fu_312_p4;
wire   [6:0] tmp_759_fu_308_p1;
wire   [23:0] t_7_fu_357_p4;
wire   [31:0] t_2_fu_367_p1;
wire   [7:0] tmp_760_fu_353_p1;
wire   [5:0] grp_fu_383_p0;
wire   [24:0] grp_fu_383_p1;
wire   [0:0] exitcond1_i_fu_296_p2;
reg   [9:0] ap_NS_fsm;
wire   [30:0] grp_fu_383_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

crypto_sign_ed255ocq #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .address1(t_address1),
    .ce1(t_ce1),
    .we1(t_we1),
    .d1(t_d1),
    .q1(t_q1)
);

crypto_sign_mac_mpcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 25 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
crypto_sign_mac_mpcA_x_U68(
    .din0(grp_fu_383_p0),
    .din1(grp_fu_383_p1),
    .din2(r_v_q1),
    .dout(grp_fu_383_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_247_p2 == 1'd1))) begin
        i_1_reg_200 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_200 <= i_24_reg_423;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_i_reg_222 <= i_25_reg_466;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_i_reg_222 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_189 <= i_23_reg_415;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_189 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_i_fu_331_p2))) begin
        rep_i_reg_211 <= rep_reg_458;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_271_p2 == 1'd1))) begin
        rep_i_reg_211 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_247_p2 == 1'd0))) begin
        i_23_reg_415 <= i_23_fu_258_p2;
        tmp_742_reg_405[4 : 0] <= tmp_742_fu_253_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_24_reg_423 <= i_24_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_25_reg_466 <= i_25_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond_i_fu_331_p2))) begin
        r_v_addr_4_reg_471 <= tmp_759_i_fu_343_p1;
        r_v_addr_5_reg_477 <= tmp_760_i_fu_348_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        rep_reg_458 <= rep_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_271_p2))) begin
        tmp_744_reg_428[5 : 0] <= tmp_744_fu_283_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond1_i_fu_296_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond1_i_fu_296_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_v_address0 = r_v_addr_4_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_v_address0 = tmp_760_i_fu_348_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_v_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_v_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_v_address0 = tmp_744_reg_428;
    end else begin
        r_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_v_address1 = r_v_addr_5_reg_477;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_v_address1 = tmp_759_i_fu_343_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_v_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_v_address1 = 64'd0;
    end else begin
        r_v_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        r_v_ce0 = 1'b1;
    end else begin
        r_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        r_v_ce1 = 1'b1;
    end else begin
        r_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_v_d0 = tmp_762_i_cast_fu_378_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_v_d0 = grp_fu_383_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_v_d0 = tmp_745_fu_289_p2;
    end else begin
        r_v_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_v_d1 = tmp_761_i_fu_371_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_v_d1 = tmp_i_cast_fu_326_p1;
    end else begin
        r_v_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        r_v_we0 = 1'b1;
    end else begin
        r_v_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        r_v_we1 = 1'b1;
    end else begin
        r_v_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_address0 = tmp_742_reg_405;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_address0 = 64'd0;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_address1 = tmp_744_fu_283_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_address1 = 64'd31;
    end else begin
        t_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        t_ce1 = 1'b1;
    end else begin
        t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_d0 = tmp_743_fu_264_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_d0 = tmp_fu_233_p2;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        t_we1 = 1'b1;
    end else begin
        t_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_v_address0 = tmp_742_fu_253_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_v_address0 = 64'd0;
    end else begin
        x_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        x_v_ce0 = 1'b1;
    end else begin
        x_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_v_ce1 = 1'b1;
    end else begin
        x_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y_v_ce0 = 1'b1;
    end else begin
        y_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_247_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond1_i_fu_296_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_i_fu_331_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_247_p2 = ((i_reg_189 == 5'd31) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_296_p2 = ((rep_i_reg_211 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_271_p2 = ((i_1_reg_200 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_i_fu_331_p2 = ((i_i_reg_222 == 5'd31) ? 1'b1 : 1'b0);

assign grp_fu_383_p0 = 31'd19;

assign grp_fu_383_p1 = grp_fu_383_p10;

assign grp_fu_383_p10 = tmp_746_fu_312_p4;

assign i_23_fu_258_p2 = (i_reg_189 + 5'd1);

assign i_24_fu_277_p2 = (i_1_reg_200 + 6'd1);

assign i_25_fu_337_p2 = (i_i_reg_222 + 5'd1);

assign rep_fu_302_p2 = (rep_i_reg_211 + 3'd1);

assign t_2_fu_367_p1 = t_7_fu_357_p4;

assign t_7_fu_357_p4 = {{r_v_q1[31:8]}};

assign t_d1 = (x_v_q1 + 32'd254);

assign tmp_742_fu_253_p1 = i_reg_189;

assign tmp_743_fu_264_p2 = (x_v_q0 + 32'd510);

assign tmp_744_fu_283_p1 = i_1_reg_200;

assign tmp_745_fu_289_p2 = (t_q1 - y_v_q0);

assign tmp_746_fu_312_p4 = {{r_v_q0[31:7]}};

assign tmp_759_fu_308_p1 = r_v_q0[6:0];

assign tmp_759_i_fu_343_p1 = i_i_reg_222;

assign tmp_760_fu_353_p1 = r_v_q1[7:0];

assign tmp_760_i_fu_348_p1 = i_25_fu_337_p2;

assign tmp_761_i_fu_371_p2 = (t_2_fu_367_p1 + r_v_q0);

assign tmp_762_i_cast_fu_378_p1 = tmp_760_fu_353_p1;

assign tmp_fu_233_p2 = (x_v_q0 + 32'd474);

assign tmp_i_cast_fu_326_p1 = tmp_759_fu_308_p1;

assign x_v_address1 = 64'd31;

assign y_v_address0 = tmp_744_fu_283_p1;

always @ (posedge ap_clk) begin
    tmp_742_reg_405[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_744_reg_428[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //crypto_sign_ed25519_8
