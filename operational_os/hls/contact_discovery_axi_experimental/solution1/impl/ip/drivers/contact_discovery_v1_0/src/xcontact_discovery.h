// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XCONTACT_DISCOVERY_H
#define XCONTACT_DISCOVERY_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xcontact_discovery_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XContact_discovery_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XContact_discovery;

typedef struct {
    u32 word_0;
    u32 word_1;
    u32 word_2;
    u32 word_3;
    u32 word_4;
    u32 word_5;
    u32 word_6;
    u32 word_7;
    u32 word_8;
    u32 word_9;
    u32 word_10;
    u32 word_11;
    u32 word_12;
    u32 word_13;
    u32 word_14;
    u32 word_15;
} XContact_discovery_Contact_in_v;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XContact_discovery_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XContact_discovery_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XContact_discovery_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XContact_discovery_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XContact_discovery_Initialize(XContact_discovery *InstancePtr, u16 DeviceId);
XContact_discovery_Config* XContact_discovery_LookupConfig(u16 DeviceId);
int XContact_discovery_CfgInitialize(XContact_discovery *InstancePtr, XContact_discovery_Config *ConfigPtr);
#else
int XContact_discovery_Initialize(XContact_discovery *InstancePtr, const char* InstanceName);
int XContact_discovery_Release(XContact_discovery *InstancePtr);
#endif

void XContact_discovery_Start(XContact_discovery *InstancePtr);
u32 XContact_discovery_IsDone(XContact_discovery *InstancePtr);
u32 XContact_discovery_IsIdle(XContact_discovery *InstancePtr);
u32 XContact_discovery_IsReady(XContact_discovery *InstancePtr);
void XContact_discovery_EnableAutoRestart(XContact_discovery *InstancePtr);
void XContact_discovery_DisableAutoRestart(XContact_discovery *InstancePtr);

void XContact_discovery_Set_operation(XContact_discovery *InstancePtr, u32 Data);
u32 XContact_discovery_Get_operation(XContact_discovery *InstancePtr);
void XContact_discovery_Set_operation_vld(XContact_discovery *InstancePtr);
u32 XContact_discovery_Get_operation_vld(XContact_discovery *InstancePtr);
void XContact_discovery_Set_contact_in_V(XContact_discovery *InstancePtr, XContact_discovery_Contact_in_v Data);
XContact_discovery_Contact_in_v XContact_discovery_Get_contact_in_V(XContact_discovery *InstancePtr);
void XContact_discovery_Set_db_size_in(XContact_discovery *InstancePtr, u32 Data);
u32 XContact_discovery_Get_db_size_in(XContact_discovery *InstancePtr);
u32 XContact_discovery_Get_error_out(XContact_discovery *InstancePtr);
u32 XContact_discovery_Get_contacts_size_out(XContact_discovery *InstancePtr);

void XContact_discovery_InterruptGlobalEnable(XContact_discovery *InstancePtr);
void XContact_discovery_InterruptGlobalDisable(XContact_discovery *InstancePtr);
void XContact_discovery_InterruptEnable(XContact_discovery *InstancePtr, u32 Mask);
void XContact_discovery_InterruptDisable(XContact_discovery *InstancePtr, u32 Mask);
void XContact_discovery_InterruptClear(XContact_discovery *InstancePtr, u32 Mask);
u32 XContact_discovery_InterruptGetEnabled(XContact_discovery *InstancePtr);
u32 XContact_discovery_InterruptGetStatus(XContact_discovery *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
