-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign_ed25519_14 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    r_ce1 : OUT STD_LOGIC;
    r_we1 : OUT STD_LOGIC;
    r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    s_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_v_ce0 : OUT STD_LOGIC;
    s_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    s_v_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_v_ce1 : OUT STD_LOGIC;
    s_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign_ed25519_14 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_50 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010000";
    constant ap_const_lv64_51 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010001";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_52 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010010";
    constant ap_const_lv64_53 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010011";
    constant ap_const_lv64_54 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_324 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_782_fu_338_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_782_reg_785 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_749_fu_356_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_749_reg_790 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_751_fu_380_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_751_reg_806 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_804_cast_reg_826 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_775_fu_527_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_775_reg_831 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_820_cast_reg_836 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_825_cast_reg_841 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_774_cast_reg_851 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal r_addr_4_reg_856 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal carry_cast_fu_675_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal carry_cast_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_56_fu_685_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_56_reg_871 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_addr_13_reg_876 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_addr_14_reg_881 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_796_fu_745_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_reg_269 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal carry_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_293 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_750_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_752_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_755_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_760_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_773_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_758_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_765_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_768_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_771_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_778_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_781_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_784_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_786_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_779_cast_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_784_cast_fu_393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_797_cast_fu_465_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_800_cast_fu_480_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_805_cast_fu_553_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_818_cast_fu_577_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_821_cast_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_826_cast_fu_595_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_613_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_762_cast_fu_618_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_769_cast_fu_641_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_772_cast_fu_656_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_775_cast_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_788_fu_734_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_839_cast_fu_771_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_783_fu_776_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_344_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_352_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast_fu_328_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_776_cast_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_792_fu_371_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_304_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_754_fu_398_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_759_fu_409_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_792_cast_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_772_fu_423_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_813_cast_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_757_fu_437_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_793_fu_447_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_761_fu_451_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_762_fu_459_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_799_cast_fu_470_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_764_fu_485_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_794_fu_515_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_774_fu_519_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_809_cast_fu_505_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_767_fu_557_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_770_fu_567_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_777_fu_585_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_780_fu_599_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_609_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_791_fu_623_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_745_fu_627_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_746_fu_635_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_771_cast_fu_646_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_795_fu_701_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_77_fu_705_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_785_fu_709_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_720_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_787_fu_730_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_832_cast_fu_714_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_753_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_836_cast1_fu_741_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_838_cast_fu_761_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_790_fu_765_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    carry_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                carry_reg_281 <= tmp_832_cast_fu_714_p2(2 downto 2);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                carry_reg_281 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_1_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_1_reg_293 <= i_56_reg_871;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_293 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_269 <= tmp_782_reg_785;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_269 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    carry_cast_reg_862(0) <= carry_cast_fu_675_p1(0);
                i_56_reg_871 <= i_56_fu_685_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_679_p2))) then
                r_addr_13_reg_876 <= tmp_784_fu_691_p1(7 - 1 downto 0);
                r_addr_14_reg_881 <= tmp_786_fu_696_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_324 <= s_v_q0(8 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_332_p2 = ap_const_lv1_0))) then
                tmp_749_reg_790 <= tmp_749_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_751_reg_806(6 downto 3) <= tmp_751_fu_380_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_774_cast_reg_851 <= s_v_q1(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_775_reg_831 <= tmp_775_fu_527_p2;
                tmp_804_cast_reg_826 <= s_v_q0(6 downto 4);
                tmp_820_cast_reg_836 <= s_v_q1(4 downto 2);
                tmp_825_cast_reg_841 <= s_v_q1(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_782_reg_785 <= tmp_782_fu_338_p2;
            end if;
        end if;
    end process;
    tmp_751_reg_806(2 downto 0) <= "000";
    carry_cast_reg_862(7 downto 1) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_332_p2, ap_CS_fsm_state10, exitcond_fu_679_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_332_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_679_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_reg_281),8));
    exitcond1_fu_332_p2 <= "1" when (i_reg_269 = ap_const_lv4_A) else "0";
    exitcond_fu_679_p2 <= "1" when (i_1_reg_293 = ap_const_lv7_54) else "0";
    grp_fu_304_p4 <= s_v_q0(5 downto 3);
    i_56_fu_685_p2 <= std_logic_vector(unsigned(i_1_reg_293) + unsigned(ap_const_lv7_1));
    i_cast_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_269),7));
    p_shl_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_344_p3),7));
    p_shl_fu_344_p3 <= (i_reg_269 & ap_const_lv2_0);
    r_addr_4_reg_856 <= ap_const_lv64_54(7 - 1 downto 0);

    r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, r_addr_4_reg_856, ap_CS_fsm_state9, ap_CS_fsm_state10, r_addr_14_reg_881, ap_CS_fsm_state11, ap_CS_fsm_state6, tmp_752_fu_388_p1, tmp_758_fu_442_p1, tmp_768_fu_562_p1, ap_CS_fsm_state5, tmp_778_fu_590_p1, tmp_786_fu_696_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_address0 <= r_addr_4_reg_856;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_address0 <= r_addr_14_reg_881;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            r_address0 <= tmp_786_fu_696_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_address0 <= ap_const_lv64_54(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address0 <= ap_const_lv64_52(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address0 <= ap_const_lv64_50(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address0 <= tmp_778_fu_590_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address0 <= tmp_768_fu_562_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_address0 <= tmp_758_fu_442_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_address0 <= tmp_752_fu_388_p1(7 - 1 downto 0);
        else 
            r_address0 <= "XXXXXXX";
        end if; 
    end process;


    r_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, r_addr_13_reg_876, exitcond_fu_679_p2, ap_CS_fsm_state11, ap_CS_fsm_state6, tmp_755_fu_404_p1, tmp_765_fu_490_p1, ap_CS_fsm_state5, tmp_771_fu_572_p1, tmp_781_fu_604_p1, tmp_784_fu_691_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_address1 <= r_addr_13_reg_876;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_679_p2))) then 
            r_address1 <= ap_const_lv64_54(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_679_p2))) then 
            r_address1 <= tmp_784_fu_691_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_address1 <= ap_const_lv64_53(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_address1 <= ap_const_lv64_51(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_address1 <= tmp_781_fu_604_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address1 <= tmp_771_fu_572_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_address1 <= tmp_765_fu_490_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_address1 <= tmp_755_fu_404_p1(7 - 1 downto 0);
        else 
            r_address1 <= "XXXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, exitcond_fu_679_p2, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond_fu_679_p2)) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_679_p2)))) then 
            r_ce1 <= ap_const_logic_1;
        else 
            r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state5, tmp_779_cast_fu_375_p1, tmp_797_cast_fu_465_p1, tmp_805_cast_fu_553_p1, tmp_821_cast_fu_581_p1, tmp_cast_fu_613_p1, tmp_769_cast_fu_641_p1, tmp_775_cast_fu_671_p1, tmp_788_fu_734_p2, ap_CS_fsm_state12, tmp_783_fu_776_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            r_d0 <= tmp_783_fu_776_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_d0 <= tmp_788_fu_734_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            r_d0 <= tmp_775_cast_fu_671_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d0 <= tmp_769_cast_fu_641_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d0 <= tmp_cast_fu_613_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_d0 <= tmp_821_cast_fu_581_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d0 <= tmp_805_cast_fu_553_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_d0 <= tmp_797_cast_fu_465_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_d0 <= tmp_779_cast_fu_375_p1;
        else 
            r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    r_d1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state5, tmp_784_cast_fu_393_p1, tmp_800_cast_fu_480_p1, tmp_818_cast_fu_577_p1, tmp_826_cast_fu_595_p1, tmp_762_cast_fu_618_p1, tmp_772_cast_fu_656_p1, tmp_839_cast_fu_771_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            r_d1 <= tmp_839_cast_fu_771_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            r_d1 <= tmp_772_cast_fu_656_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_d1 <= tmp_762_cast_fu_618_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_d1 <= tmp_826_cast_fu_595_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_d1 <= tmp_818_cast_fu_577_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_d1 <= tmp_800_cast_fu_480_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_d1 <= tmp_784_cast_fu_393_p1;
        else 
            r_d1 <= "XXXXXXXX";
        end if; 
    end process;


    r_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_we1 <= ap_const_logic_1;
        else 
            r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_v_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, exitcond1_fu_332_p2, tmp_750_fu_366_p1, tmp_760_fu_418_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_v_address0 <= tmp_760_fu_418_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_332_p2 = ap_const_lv1_1))) then 
            s_v_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_332_p2 = ap_const_lv1_0))) then 
            s_v_address0 <= tmp_750_fu_366_p1(5 - 1 downto 0);
        else 
            s_v_address0 <= "XXXXX";
        end if; 
    end process;


    s_v_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, tmp_773_fu_432_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_v_address1 <= ap_const_lv64_1F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_v_address1 <= tmp_773_fu_432_p1(5 - 1 downto 0);
        else 
            s_v_address1 <= "XXXXX";
        end if; 
    end process;


    s_v_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, exitcond1_fu_332_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_332_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_332_p2 = ap_const_lv1_1)))) then 
            s_v_ce0 <= ap_const_logic_1;
        else 
            s_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_v_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            s_v_ce1 <= ap_const_logic_1;
        else 
            s_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_745_fu_627_p3 <= (tmp_791_fu_623_p1 & ap_const_lv2_0);
    tmp_746_fu_635_p2 <= (tmp_745_fu_627_p3 xor reg_324);
    tmp_749_fu_356_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_352_p1) - unsigned(i_cast_fu_328_p1));
    tmp_750_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_776_cast_fu_362_p1),64));
    tmp_751_fu_380_p3 <= (i_reg_269 & ap_const_lv3_0);
    tmp_752_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_751_fu_380_p3),64));
    tmp_754_fu_398_p2 <= (tmp_751_fu_380_p3 or ap_const_lv7_1);
    tmp_755_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_754_fu_398_p2),64));
    tmp_757_fu_437_p2 <= (tmp_751_reg_806 or ap_const_lv7_2);
    tmp_758_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_757_fu_437_p2),64));
    tmp_759_fu_409_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp_749_reg_790));
    tmp_760_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_792_cast_fu_414_p1),64));
    tmp_761_fu_451_p3 <= (tmp_793_fu_447_p1 & ap_const_lv2_0);
    tmp_762_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_304_p4),8));
    tmp_762_fu_459_p2 <= (tmp_761_fu_451_p3 xor reg_324);
    tmp_764_fu_485_p2 <= (tmp_751_reg_806 or ap_const_lv7_3);
    tmp_765_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_764_fu_485_p2),64));
    tmp_767_fu_557_p2 <= (tmp_751_reg_806 or ap_const_lv7_4);
    tmp_768_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_767_fu_557_p2),64));
    tmp_769_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_746_fu_635_p2),8));
    tmp_770_fu_567_p2 <= (tmp_751_reg_806 or ap_const_lv7_5);
    tmp_771_cast_fu_646_p4 <= s_v_q1(3 downto 1);
    tmp_771_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_770_fu_567_p2),64));
    tmp_772_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_771_cast_fu_646_p4),8));
    tmp_772_fu_423_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(tmp_749_reg_790));
    tmp_773_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_813_cast_fu_428_p1),64));
    tmp_774_fu_519_p3 <= (tmp_794_fu_515_p1 & ap_const_lv1_0);
    tmp_775_cast_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_774_cast_reg_851),8));
    tmp_775_fu_527_p2 <= (tmp_774_fu_519_p3 xor tmp_809_cast_fu_505_p4);
        tmp_776_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_749_fu_356_p2),32));

    tmp_777_fu_585_p2 <= (tmp_751_reg_806 or ap_const_lv7_6);
    tmp_778_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_777_fu_585_p2),64));
    tmp_779_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_792_fu_371_p1),8));
    tmp_77_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_reg_281),3));
    tmp_780_fu_599_p2 <= (tmp_751_reg_806 or ap_const_lv7_7);
    tmp_781_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_780_fu_599_p2),64));
    tmp_782_fu_338_p2 <= std_logic_vector(unsigned(i_reg_269) + unsigned(ap_const_lv4_1));
    tmp_783_fu_776_p2 <= std_logic_vector(unsigned(r_q1) + unsigned(carry_cast_reg_862));
    tmp_784_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_304_p4),8));
    tmp_784_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_293),64));
    tmp_785_fu_709_p2 <= std_logic_vector(unsigned(carry_cast_reg_862) + unsigned(r_q1));
    tmp_786_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_56_fu_685_p2),64));
        tmp_787_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_720_p4),8));

    tmp_788_fu_734_p2 <= std_logic_vector(signed(tmp_787_fu_730_p1) + signed(r_q0));
    tmp_790_fu_765_p2 <= std_logic_vector(unsigned(tmp_836_cast1_fu_741_p1) - unsigned(tmp_838_cast_fu_761_p1));
    tmp_791_fu_623_p1 <= s_v_q1(1 - 1 downto 0);
        tmp_792_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_759_fu_409_p2),32));

    tmp_792_fu_371_p1 <= s_v_q0(3 - 1 downto 0);
    tmp_793_fu_447_p1 <= s_v_q0(1 - 1 downto 0);
    tmp_794_fu_515_p1 <= s_v_q1(2 - 1 downto 0);
    tmp_795_fu_701_p1 <= r_q1(3 - 1 downto 0);
    tmp_796_fu_745_p3 <= tmp_832_cast_fu_714_p2(2 downto 2);
    tmp_797_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_762_fu_459_p2),8));
    tmp_799_cast_fu_470_p4 <= s_v_q0(3 downto 1);
    tmp_800_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_799_cast_fu_470_p4),8));
    tmp_805_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_804_cast_reg_826),8));
    tmp_809_cast_fu_505_p4 <= s_v_q0(9 downto 7);
        tmp_813_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_772_fu_423_p2),32));

    tmp_818_cast_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_775_reg_831),8));
    tmp_821_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_820_cast_reg_836),8));
    tmp_826_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_825_cast_reg_841),8));
    tmp_832_cast_fu_714_p2 <= std_logic_vector(unsigned(tmp_795_fu_701_p1) + unsigned(tmp_77_fu_705_p1));
    tmp_836_cast1_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_832_cast_fu_714_p2),5));
    tmp_838_cast_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_753_p3),5));
        tmp_839_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_790_fu_765_p2),8));

    tmp_9_fu_720_p4 <= tmp_785_fu_709_p2(7 downto 3);
    tmp_cast_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_609_p1),8));
    tmp_fu_609_p1 <= s_v_q0(3 - 1 downto 0);
    tmp_s_fu_753_p3 <= (tmp_796_fu_745_p3 & ap_const_lv3_0);
end behav;
