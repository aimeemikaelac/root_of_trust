// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha512_init (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        md_state_address0,
        md_state_ce0,
        md_state_we0,
        md_state_d0,
        md_state_address1,
        md_state_ce1,
        md_state_we1,
        md_state_d1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] md_state_address0;
output   md_state_ce0;
output   md_state_we0;
output  [63:0] md_state_d0;
output  [2:0] md_state_address1;
output   md_state_ce1;
output   md_state_we1;
output  [63:0] md_state_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] md_state_address0;
reg md_state_ce0;
reg md_state_we0;
reg[63:0] md_state_d0;
reg[2:0] md_state_address1;
reg md_state_ce1;
reg md_state_we1;
reg[63:0] md_state_d1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        md_state_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        md_state_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        md_state_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        md_state_address0 = 64'd0;
    end else begin
        md_state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        md_state_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        md_state_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        md_state_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        md_state_address1 = 64'd1;
    end else begin
        md_state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        md_state_ce0 = 1'b1;
    end else begin
        md_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        md_state_ce1 = 1'b1;
    end else begin
        md_state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        md_state_d0 = 64'd2270897969802886507;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        md_state_d0 = 64'd5840696475078001361;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        md_state_d0 = 64'd4354685564936845355;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        md_state_d0 = 64'd7640891576956012808;
    end else begin
        md_state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        md_state_d1 = 64'd6620516959819538809;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        md_state_d1 = 64'd11170449401992604703;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        md_state_d1 = 64'd11912009170470909681;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        md_state_d1 = 64'd13503953896175478587;
    end else begin
        md_state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        md_state_we0 = 1'b1;
    end else begin
        md_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        md_state_we1 = 1'b1;
    end else begin
        md_state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

endmodule //sha512_init
