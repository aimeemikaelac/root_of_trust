#!/usr/bin/python3

import argparse
import requests
import time
import binascii
import base64

def check_attestation_ticket(base_url, ticket):
    url = "{}/{}".format(base_url, "attestation/result/{}".format(ticket))
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()["attestation"], True
    elif response.status_code == 204:
        return None, True
    else:
        return None, False


def start_attestation(base_url, message_file):
    url = "{}/{}".format(base_url, "attestation/request")
    with open(message_file) as file_handle:
        attestation_data = file_handle.read()
    response = requests.post(url, data={
        "attestation_data": attestation_data
    })
    return response.json()["ticket"]

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--server",
        help="Server IP address or hostname",
        required=True
    )
    parser.add_argument(
        "--port",
        help="Server TCP port",
        type=int,
        default=80,
    )
    subparsers = parser.add_subparsers(dest="command")
    upload_parser = subparsers.add_parser('upload')
    attestation_parser = subparsers.add_parser('attestation')
    upload_parser.add_argument(
        "--program_file",
        help="ARM elf binary to run as the untrusted code",
        required=True
    )
    upload_parser.add_argument(
        "--enclave_file",
        help="Binary memory programming file generated by mb-objcopy that "
        "is the memory image for the microblaze program",
        required=True
    )
    attestation_parser.add_argument(
        "--message_file",
        help="Path to file containing message data"
    )
    attestation_group = attestation_parser.add_mutually_exclusive_group(
        required=True
    )
    attestation_group.add_argument(
        "--attestation_wait",
        help="Start an attestation with the input message and wait for a "
        "response, polling at the specified interval",
        type=int
    )
    attestation_group.add_argument(
        "--send_begin_attestation",
        help="Send the attestation data from the file and return the received "
        "ticket",
        action="store_true"
    )
    attestation_group.add_argument(
        "--check_ticket",
        help="Check the status of the attestation ticket",
        type=int
    )
    args = parser.parse_args()
    hostname = args.server
    port = args.port
    protocol = "http://"
    base_url = "{}{}:{}".format(protocol, hostname, port)
    if args.command == "upload":
        url = "{}/{}".format(base_url, "upload")
        files = {
            "binary": open(args.enclave_file, 'rb'),
            "program": open(args.program_file, 'rb')
        }
        data = {
            "binary_file_name":args.enclave_file
        }
        response = requests.post(url, files=files, data=data)
        response_json = response.json()
        if response.status_code != 202:
            print(
                "Error uploading file.\nStatus code: {}\nResponse: {}\n"
                .format(response.status_code, response.text)
            )

    if args.command == "attestation":
        if args.attestation_wait is not None:
            if args.message_file is None:
                print("Message data required to start attestation")
                sys.exit(-1)
            ticket = start_attestation(base_url, args.message_file)
            attestation_data = None
            while attestation_data is None:
                #TODO: keep alive here
                time.sleep(1)
                attestation_data = check_attestation_ticket(base_url, ticket)
            print("Attestation data:\n{}".format(attestation_data))
        elif args.send_begin_attestation:
            print("Ticket:\n{}".format(
                start_attestation(base_url, args.message_file)
            ))
        elif args.check_ticket is not None:
            print("here")
            attestation_data, exists = check_attestation_ticket(
                base_url, args.check_ticket
            )
            if attestation_data:
                print("Attestation data:\n{}".format(attestation_data))
            elif exists:
                print("Attestation pending")
            else:
                print("Ticket not found")
