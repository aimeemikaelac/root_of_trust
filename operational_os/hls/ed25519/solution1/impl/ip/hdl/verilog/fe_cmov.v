// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fe_cmov (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        f_0_read,
        f_1_read,
        f_2_read,
        f_3_read,
        f_4_read,
        f_5_read,
        f_6_read,
        f_7_read,
        f_8_read,
        f_9_read,
        g_address0,
        g_ce0,
        g_q0,
        g_address1,
        g_ce1,
        g_q1,
        tmp_7562,
        u_xy2d_offset,
        b,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] f_0_read;
input  [31:0] f_1_read;
input  [31:0] f_2_read;
input  [31:0] f_3_read;
input  [31:0] f_4_read;
input  [31:0] f_5_read;
input  [31:0] f_6_read;
input  [31:0] f_7_read;
input  [31:0] f_8_read;
input  [31:0] f_9_read;
output  [11:0] g_address0;
output   g_ce0;
input  [31:0] g_q0;
output  [11:0] g_address1;
output   g_ce1;
input  [31:0] g_q1;
input  [4:0] tmp_7562;
input  [2:0] u_xy2d_offset;
input  [0:0] b;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] g_address0;
reg g_ce0;
reg[11:0] g_address1;
reg g_ce1;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;
reg[31:0] ap_return_6;
reg[31:0] ap_return_7;
reg[31:0] ap_return_8;
reg[31:0] ap_return_9;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] grp_fu_255_p2;
reg   [11:0] tmp_1438_reg_262;
reg   [11:0] reg_270;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
reg   [11:0] reg_276;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [11:0] tmp_1442_reg_282;
wire    ap_CS_fsm_state4;
reg   [11:0] tmp_1443_reg_288;
wire    ap_CS_fsm_state5;
reg   [31:0] g0_reg_650;
reg   [31:0] g1_reg_655;
reg   [31:0] g2_reg_670;
reg   [31:0] g3_reg_675;
reg   [31:0] g4_reg_690;
reg   [31:0] g5_reg_695;
wire    ap_CS_fsm_state9;
reg   [31:0] g6_reg_710;
reg   [31:0] g7_reg_715;
wire   [63:0] tmp_1438_cast_fu_334_p1;
wire   [63:0] tmp_1439_cast_fu_345_p1;
wire   [63:0] tmp_1440_cast_fu_350_p1;
wire   [63:0] tmp_1441_cast_fu_355_p1;
wire   [63:0] tmp_1442_cast_fu_360_p1;
wire   [63:0] tmp_1443_cast_fu_365_p1;
wire   [63:0] tmp_1444_cast_fu_370_p1;
wire   [63:0] tmp_1445_cast_fu_375_p1;
wire   [63:0] tmp_1446_cast_fu_380_p1;
wire   [63:0] tmp_1447_cast_fu_385_p1;
wire    ap_CS_fsm_state10;
reg   [11:0] grp_fu_255_p0;
wire   [11:0] p_shl_cast_fu_314_p1;
reg   [11:0] grp_fu_255_p1;
wire   [11:0] p_shl1_cast_fu_329_p1;
wire   [10:0] tmp_fu_304_p4;
wire   [8:0] tmp_1437_fu_319_p4;
wire   [11:0] tmp_1439_fu_339_p2;
wire   [31:0] x0_fu_390_p2;
wire   [31:0] b_assign_cast_fu_442_p3;
wire   [31:0] x1_fu_395_p2;
wire   [31:0] x2_fu_400_p2;
wire   [31:0] x3_fu_405_p2;
wire   [31:0] x4_fu_410_p2;
wire   [31:0] x5_fu_415_p2;
wire   [31:0] x6_fu_420_p2;
wire   [31:0] x7_fu_425_p2;
wire   [31:0] x8_fu_430_p2;
wire   [31:0] x9_fu_436_p2;
wire   [31:0] x0_1_fu_450_p2;
wire   [31:0] x1_1_fu_456_p2;
wire   [31:0] x2_1_fu_462_p2;
wire   [31:0] x3_1_fu_468_p2;
wire   [31:0] x4_1_fu_474_p2;
wire   [31:0] x5_1_fu_480_p2;
wire   [31:0] x6_1_fu_486_p2;
wire   [31:0] x7_1_fu_492_p2;
wire   [31:0] x8_1_fu_498_p2;
wire   [31:0] x9_1_fu_504_p2;
wire   [31:0] f_0_write_assign_fu_510_p2;
wire   [31:0] f_1_write_assign_fu_516_p2;
wire   [31:0] f_2_write_assign_fu_522_p2;
wire   [31:0] f_3_write_assign_fu_528_p2;
wire   [31:0] f_4_write_assign_fu_534_p2;
wire   [31:0] f_5_write_assign_fu_540_p2;
wire   [31:0] f_6_write_assign_fu_546_p2;
wire   [31:0] f_7_write_assign_fu_552_p2;
wire   [31:0] f_8_write_assign_fu_558_p2;
wire   [31:0] f_9_write_assign_fu_564_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [31:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [31:0] ap_return_6_preg;
reg   [31:0] ap_return_7_preg;
reg   [31:0] ap_return_8_preg;
reg   [31:0] ap_return_9_preg;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
#0 ap_return_4_preg = 32'd0;
#0 ap_return_5_preg = 32'd0;
#0 ap_return_6_preg = 32'd0;
#0 ap_return_7_preg = 32'd0;
#0 ap_return_8_preg = 32'd0;
#0 ap_return_9_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_0_preg <= f_0_write_assign_fu_510_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_1_preg <= f_1_write_assign_fu_516_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_2_preg <= f_2_write_assign_fu_522_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_3_preg <= f_3_write_assign_fu_528_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_4_preg <= f_4_write_assign_fu_534_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_5_preg <= f_5_write_assign_fu_540_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_6_preg <= f_6_write_assign_fu_546_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_7_preg <= f_7_write_assign_fu_552_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_8_preg <= f_8_write_assign_fu_558_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_9_preg <= f_9_write_assign_fu_564_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return_0 <= f_0_write_assign_fu_510_p2;
        ap_return_1 <= f_1_write_assign_fu_516_p2;
        ap_return_2 <= f_2_write_assign_fu_522_p2;
        ap_return_3 <= f_3_write_assign_fu_528_p2;
        ap_return_4 <= f_4_write_assign_fu_534_p2;
        ap_return_5 <= f_5_write_assign_fu_540_p2;
        ap_return_6 <= f_6_write_assign_fu_546_p2;
        ap_return_7 <= f_7_write_assign_fu_552_p2;
        ap_return_8 <= f_8_write_assign_fu_558_p2;
        ap_return_9 <= f_9_write_assign_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        g0_reg_650 <= g_q0;
        g1_reg_655 <= g_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        g2_reg_670 <= g_q0;
        g3_reg_675 <= g_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        g4_reg_690 <= g_q0;
        g5_reg_695 <= g_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        g6_reg_710 <= g_q0;
        g7_reg_715 <= g_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_270 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_276 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_1438_reg_262 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_1442_reg_282 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_1443_reg_288 <= grp_fu_255_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        g_address0 = tmp_1446_cast_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        g_address0 = tmp_1444_cast_fu_370_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        g_address0 = tmp_1442_cast_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        g_address0 = tmp_1440_cast_fu_350_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        g_address0 = tmp_1438_cast_fu_334_p1;
    end else begin
        g_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        g_address1 = tmp_1447_cast_fu_385_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        g_address1 = tmp_1445_cast_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        g_address1 = tmp_1443_cast_fu_365_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        g_address1 = tmp_1441_cast_fu_355_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        g_address1 = tmp_1439_cast_fu_345_p1;
    end else begin
        g_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        g_ce0 = 1'b1;
    end else begin
        g_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        g_ce1 = 1'b1;
    end else begin
        g_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_255_p0 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_255_p0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_255_p0 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_255_p0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_255_p0 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_255_p0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_255_p0 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_255_p0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_255_p0 = p_shl_cast_fu_314_p1;
    end else begin
        grp_fu_255_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_255_p1 = tmp_1438_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_255_p1 = p_shl1_cast_fu_329_p1;
    end else begin
        grp_fu_255_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b_assign_cast_fu_442_p3 = ((b[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign f_0_write_assign_fu_510_p2 = (x0_1_fu_450_p2 ^ f_0_read);

assign f_1_write_assign_fu_516_p2 = (x1_1_fu_456_p2 ^ f_1_read);

assign f_2_write_assign_fu_522_p2 = (x2_1_fu_462_p2 ^ f_2_read);

assign f_3_write_assign_fu_528_p2 = (x3_1_fu_468_p2 ^ f_3_read);

assign f_4_write_assign_fu_534_p2 = (x4_1_fu_474_p2 ^ f_4_read);

assign f_5_write_assign_fu_540_p2 = (x5_1_fu_480_p2 ^ f_5_read);

assign f_6_write_assign_fu_546_p2 = (x6_1_fu_486_p2 ^ f_6_read);

assign f_7_write_assign_fu_552_p2 = (x7_1_fu_492_p2 ^ f_7_read);

assign f_8_write_assign_fu_558_p2 = (x8_1_fu_498_p2 ^ f_8_read);

assign f_9_write_assign_fu_564_p2 = (x9_1_fu_504_p2 ^ f_9_read);

assign grp_fu_255_p2 = (grp_fu_255_p0 + grp_fu_255_p1);

assign p_shl1_cast_fu_329_p1 = tmp_1437_fu_319_p4;

assign p_shl_cast_fu_314_p1 = tmp_fu_304_p4;

assign tmp_1437_fu_319_p4 = {{{tmp_7562}, {u_xy2d_offset}}, {1'd0}};

assign tmp_1438_cast_fu_334_p1 = tmp_1438_reg_262;

assign tmp_1439_cast_fu_345_p1 = tmp_1439_fu_339_p2;

assign tmp_1439_fu_339_p2 = (tmp_1438_reg_262 | 12'd1);

assign tmp_1440_cast_fu_350_p1 = reg_270;

assign tmp_1441_cast_fu_355_p1 = reg_276;

assign tmp_1442_cast_fu_360_p1 = tmp_1442_reg_282;

assign tmp_1443_cast_fu_365_p1 = tmp_1443_reg_288;

assign tmp_1444_cast_fu_370_p1 = reg_270;

assign tmp_1445_cast_fu_375_p1 = reg_276;

assign tmp_1446_cast_fu_380_p1 = reg_276;

assign tmp_1447_cast_fu_385_p1 = grp_fu_255_p2;

assign tmp_fu_304_p4 = {{{tmp_7562}, {u_xy2d_offset}}, {3'd0}};

assign x0_1_fu_450_p2 = (x0_fu_390_p2 & b_assign_cast_fu_442_p3);

assign x0_fu_390_p2 = (g0_reg_650 ^ f_0_read);

assign x1_1_fu_456_p2 = (x1_fu_395_p2 & b_assign_cast_fu_442_p3);

assign x1_fu_395_p2 = (g1_reg_655 ^ f_1_read);

assign x2_1_fu_462_p2 = (x2_fu_400_p2 & b_assign_cast_fu_442_p3);

assign x2_fu_400_p2 = (g2_reg_670 ^ f_2_read);

assign x3_1_fu_468_p2 = (x3_fu_405_p2 & b_assign_cast_fu_442_p3);

assign x3_fu_405_p2 = (g3_reg_675 ^ f_3_read);

assign x4_1_fu_474_p2 = (x4_fu_410_p2 & b_assign_cast_fu_442_p3);

assign x4_fu_410_p2 = (g4_reg_690 ^ f_4_read);

assign x5_1_fu_480_p2 = (x5_fu_415_p2 & b_assign_cast_fu_442_p3);

assign x5_fu_415_p2 = (g5_reg_695 ^ f_5_read);

assign x6_1_fu_486_p2 = (x6_fu_420_p2 & b_assign_cast_fu_442_p3);

assign x6_fu_420_p2 = (g6_reg_710 ^ f_6_read);

assign x7_1_fu_492_p2 = (x7_fu_425_p2 & b_assign_cast_fu_442_p3);

assign x7_fu_425_p2 = (g7_reg_715 ^ f_7_read);

assign x8_1_fu_498_p2 = (x8_fu_430_p2 & b_assign_cast_fu_442_p3);

assign x8_fu_430_p2 = (g_q0 ^ f_8_read);

assign x9_1_fu_504_p2 = (x9_fu_436_p2 & b_assign_cast_fu_442_p3);

assign x9_fu_436_p2 = (g_q1 ^ f_9_read);

endmodule //fe_cmov
