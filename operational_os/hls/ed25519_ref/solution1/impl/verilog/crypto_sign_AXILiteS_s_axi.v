// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module crypto_sign_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 8,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [31:0]                   ap_return,
    output wire [31:0]                   num_blocks,
    input  wire [5:0]                    sk_address0,
    input  wire                          sk_ce0,
    output wire [7:0]                    sk_q0,
    input  wire [5:0]                    signature_out_address0,
    input  wire                          signature_out_ce0,
    input  wire                          signature_out_we0,
    input  wire [7:0]                    signature_out_d0
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of ap_return
//        bit 31~0 - ap_return[31:0] (Read)
// 0x18 : Data signal of num_blocks
//        bit 31~0 - num_blocks[31:0] (Read/Write)
// 0x1c : reserved
// 0x40 ~
// 0x7f : Memory 'sk' (64 * 8b)
//        Word n : bit [ 7: 0] - sk[4n]
//                 bit [15: 8] - sk[4n+1]
//                 bit [23:16] - sk[4n+2]
//                 bit [31:24] - sk[4n+3]
// 0x80 ~
// 0xbf : Memory 'signature_out' (64 * 8b)
//        Word n : bit [ 7: 0] - signature_out[4n]
//                 bit [15: 8] - signature_out[4n+1]
//                 bit [23:16] - signature_out[4n+2]
//                 bit [31:24] - signature_out[4n+3]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL            = 8'h00,
    ADDR_GIE                = 8'h04,
    ADDR_IER                = 8'h08,
    ADDR_ISR                = 8'h0c,
    ADDR_AP_RETURN_0        = 8'h10,
    ADDR_NUM_BLOCKS_DATA_0  = 8'h18,
    ADDR_NUM_BLOCKS_CTRL    = 8'h1c,
    ADDR_SK_BASE            = 8'h40,
    ADDR_SK_HIGH            = 8'h7f,
    ADDR_SIGNATURE_OUT_BASE = 8'h80,
    ADDR_SIGNATURE_OUT_HIGH = 8'hbf,
    WRIDLE                  = 2'd0,
    WRDATA                  = 2'd1,
    WRRESP                  = 2'd2,
    WRRESET                 = 2'd3,
    RDIDLE                  = 2'd0,
    RDDATA                  = 2'd1,
    RDRESET                 = 2'd2,
    ADDR_BITS         = 8;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    reg  [1:0]                    int_isr = 2'b0;
    reg  [31:0]                   int_ap_return;
    reg  [31:0]                   int_num_blocks = 'b0;
    // memory signals
    wire [3:0]                    int_sk_address0;
    wire                          int_sk_ce0;
    wire                          int_sk_we0;
    wire [3:0]                    int_sk_be0;
    wire [31:0]                   int_sk_d0;
    wire [31:0]                   int_sk_q0;
    wire [3:0]                    int_sk_address1;
    wire                          int_sk_ce1;
    wire                          int_sk_we1;
    wire [3:0]                    int_sk_be1;
    wire [31:0]                   int_sk_d1;
    wire [31:0]                   int_sk_q1;
    reg                           int_sk_read;
    reg                           int_sk_write;
    reg  [1:0]                    int_sk_shift;
    wire [3:0]                    int_signature_out_address0;
    wire                          int_signature_out_ce0;
    wire                          int_signature_out_we0;
    wire [3:0]                    int_signature_out_be0;
    wire [31:0]                   int_signature_out_d0;
    wire [31:0]                   int_signature_out_q0;
    wire [3:0]                    int_signature_out_address1;
    wire                          int_signature_out_ce1;
    wire                          int_signature_out_we1;
    wire [3:0]                    int_signature_out_be1;
    wire [31:0]                   int_signature_out_d1;
    wire [31:0]                   int_signature_out_q1;
    reg                           int_signature_out_read;
    reg                           int_signature_out_write;
    reg  [1:0]                    int_signature_out_shift;

//------------------------Instantiation------------------
// int_sk
crypto_sign_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 16 )
) int_sk (
    .clk0     ( ACLK ),
    .address0 ( int_sk_address0 ),
    .ce0      ( int_sk_ce0 ),
    .we0      ( int_sk_we0 ),
    .be0      ( int_sk_be0 ),
    .d0       ( int_sk_d0 ),
    .q0       ( int_sk_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_sk_address1 ),
    .ce1      ( int_sk_ce1 ),
    .we1      ( int_sk_we1 ),
    .be1      ( int_sk_be1 ),
    .d1       ( int_sk_d1 ),
    .q1       ( int_sk_q1 )
);
// int_signature_out
crypto_sign_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 16 )
) int_signature_out (
    .clk0     ( ACLK ),
    .address0 ( int_signature_out_address0 ),
    .ce0      ( int_signature_out_ce0 ),
    .we0      ( int_signature_out_we0 ),
    .be0      ( int_signature_out_be0 ),
    .d0       ( int_signature_out_d0 ),
    .q0       ( int_signature_out_q0 ),
    .clk1     ( ACLK ),
    .address1 ( int_signature_out_address1 ),
    .ce1      ( int_signature_out_ce1 ),
    .we1      ( int_signature_out_we1 ),
    .be1      ( int_signature_out_be1 ),
    .d1       ( int_signature_out_d1 ),
    .q1       ( int_signature_out_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_sk_read & !int_signature_out_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_AP_RETURN_0: begin
                    rdata <= int_ap_return[31:0];
                end
                ADDR_NUM_BLOCKS_DATA_0: begin
                    rdata <= int_num_blocks[31:0];
                end
            endcase
        end
        else if (int_sk_read) begin
            rdata <= int_sk_q1;
        end
        else if (int_signature_out_read) begin
            rdata <= int_signature_out_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt    = int_gie & (|int_isr);
assign ap_start     = int_ap_start;
assign int_ap_idle  = ap_idle;
assign int_ap_ready = ap_ready;
assign num_blocks   = int_num_blocks;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_ap_return
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_return <= 0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_return <= ap_return;
    end
end

// int_num_blocks[31:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_num_blocks[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_NUM_BLOCKS_DATA_0)
            int_num_blocks[31:0] <= (WDATA[31:0] & wmask) | (int_num_blocks[31:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------
// sk
assign int_sk_address0            = sk_address0 >> 2;
assign int_sk_ce0                 = sk_ce0;
assign int_sk_we0                 = 1'b0;
assign int_sk_be0                 = 1'b0;
assign int_sk_d0                  = 1'b0;
assign sk_q0                      = int_sk_q0 >> (int_sk_shift * 8);
assign int_sk_address1            = ar_hs? raddr[5:2] : waddr[5:2];
assign int_sk_ce1                 = ar_hs | (int_sk_write & WVALID);
assign int_sk_we1                 = int_sk_write & WVALID;
assign int_sk_be1                 = WSTRB;
assign int_sk_d1                  = WDATA;
// signature_out
assign int_signature_out_address0 = signature_out_address0 >> 2;
assign int_signature_out_ce0      = signature_out_ce0;
assign int_signature_out_we0      = signature_out_we0;
assign int_signature_out_be0      = 1 << signature_out_address0[1:0];
assign int_signature_out_d0       = {4{signature_out_d0}};
assign int_signature_out_address1 = ar_hs? raddr[5:2] : waddr[5:2];
assign int_signature_out_ce1      = ar_hs | (int_signature_out_write & WVALID);
assign int_signature_out_we1      = int_signature_out_write & WVALID;
assign int_signature_out_be1      = WSTRB;
assign int_signature_out_d1       = WDATA;
// int_sk_read
always @(posedge ACLK) begin
    if (ARESET)
        int_sk_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SK_BASE && raddr <= ADDR_SK_HIGH)
            int_sk_read <= 1'b1;
        else
            int_sk_read <= 1'b0;
    end
end

// int_sk_write
always @(posedge ACLK) begin
    if (ARESET)
        int_sk_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SK_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SK_HIGH)
            int_sk_write <= 1'b1;
        else if (WVALID)
            int_sk_write <= 1'b0;
    end
end

// int_sk_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (sk_ce0)
            int_sk_shift <= sk_address0[1:0];
    end
end

// int_signature_out_read
always @(posedge ACLK) begin
    if (ARESET)
        int_signature_out_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SIGNATURE_OUT_BASE && raddr <= ADDR_SIGNATURE_OUT_HIGH)
            int_signature_out_read <= 1'b1;
        else
            int_signature_out_read <= 1'b0;
    end
end

// int_signature_out_write
always @(posedge ACLK) begin
    if (ARESET)
        int_signature_out_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SIGNATURE_OUT_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SIGNATURE_OUT_HIGH)
            int_signature_out_write <= 1'b1;
        else if (WVALID)
            int_signature_out_write <= 1'b0;
    end
end

// int_signature_out_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (signature_out_ce0)
            int_signature_out_shift <= signature_out_address0[1:0];
    end
end


endmodule


`timescale 1ns/1ps

module crypto_sign_AXILiteS_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

