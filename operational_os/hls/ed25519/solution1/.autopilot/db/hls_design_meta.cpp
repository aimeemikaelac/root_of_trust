#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_microblaze_mem_AWVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_microblaze_mem_AWREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_microblaze_mem_AWADDR", 32, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_microblaze_mem_AWID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_microblaze_mem_AWLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_microblaze_mem_AWSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_microblaze_mem_AWBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_microblaze_mem_AWLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_microblaze_mem_AWCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_microblaze_mem_AWPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_microblaze_mem_AWQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_microblaze_mem_AWREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_microblaze_mem_AWUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_microblaze_mem_WVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_microblaze_mem_WREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_microblaze_mem_WDATA", 32, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_microblaze_mem_WSTRB", 4, hls_out, 1, "m_axi", "STRB", 1),
	Port_Property("m_axi_microblaze_mem_WLAST", 1, hls_out, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_microblaze_mem_WID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_microblaze_mem_WUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_microblaze_mem_ARVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_microblaze_mem_ARREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_microblaze_mem_ARADDR", 32, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_microblaze_mem_ARID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_microblaze_mem_ARLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_microblaze_mem_ARSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_microblaze_mem_ARBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_microblaze_mem_ARLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_microblaze_mem_ARCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_microblaze_mem_ARPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_microblaze_mem_ARQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_microblaze_mem_ARREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_microblaze_mem_ARUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_microblaze_mem_RVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_microblaze_mem_RREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_microblaze_mem_RDATA", 32, hls_in, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_microblaze_mem_RLAST", 1, hls_in, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_microblaze_mem_RID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_microblaze_mem_RUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_microblaze_mem_RRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_microblaze_mem_BVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_microblaze_mem_BREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_microblaze_mem_BRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_microblaze_mem_BID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_microblaze_mem_BUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("s_axi_AXILiteS_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_AWADDR", 8, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARADDR", 8, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "ed25519_sign";
