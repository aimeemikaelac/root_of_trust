-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cmov_aff is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_x_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_x_v_ce0 : OUT STD_LOGIC;
    r_x_v_we0 : OUT STD_LOGIC;
    r_x_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_y_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    r_y_v_ce0 : OUT STD_LOGIC;
    r_y_v_we0 : OUT STD_LOGIC;
    r_y_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_x_v_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_x_v_ce0 : OUT STD_LOGIC;
    p_x_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_919 : IN STD_LOGIC_VECTOR (8 downto 0);
    p_y_v_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    p_y_v_ce0 : OUT STD_LOGIC;
    p_y_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_9191 : IN STD_LOGIC_VECTOR (8 downto 0);
    b : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of cmov_aff is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_787_cast_fu_134_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_787_cast_reg_256 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_789_cast_fu_146_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_789_cast_reg_261 : STD_LOGIC_VECTOR (14 downto 0);
    signal mask_cast_fu_150_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_cast_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_164_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_275 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_i_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_x_v_addr_reg_285 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_81_fu_213_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_81_reg_293 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i6_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_y_v_addr_reg_303 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_i_reg_104 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_i5_reg_115 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_790_cast_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_791_cast_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i7_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_126_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_788_fu_138_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i_cast_fu_175_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_790_fu_179_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_894_i_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_895_i_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i7_cast_fu_224_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_791_fu_228_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_894_i1_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_895_i1_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i5_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_fu_158_p2 = ap_const_lv1_1))) then 
                i_i5_reg_115 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_i5_reg_115 <= i_81_reg_293;
            end if; 
        end if;
    end process;

    i_i_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_104 <= i_reg_275;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_i_reg_104 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_81_reg_293 <= i_81_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_275 <= i_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                mask_cast_reg_266 <= mask_cast_fu_150_p3;
                    tmp_787_cast_reg_256(13 downto 5) <= tmp_787_cast_fu_134_p1(13 downto 5);
                    tmp_789_cast_reg_261(13 downto 5) <= tmp_789_cast_fu_146_p1(13 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_fu_158_p2 = ap_const_lv1_0))) then
                r_x_v_addr_reg_285 <= tmp_i_fu_170_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_i6_fu_207_p2))) then
                r_y_v_addr_reg_303 <= tmp_i7_fu_219_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    tmp_787_cast_reg_256(4 downto 0) <= "00000";
    tmp_787_cast_reg_256(14) <= '0';
    tmp_789_cast_reg_261(4 downto 0) <= "00000";
    tmp_789_cast_reg_261(14) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_i_fu_158_p2, ap_CS_fsm_state4, exitcond_i6_fu_207_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_fu_158_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i6_fu_207_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond_i6_fu_207_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i6_fu_207_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond_i6_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i6_fu_207_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i6_fu_207_p2 <= "1" when (i_i5_reg_115 = ap_const_lv6_20) else "0";
    exitcond_i_fu_158_p2 <= "1" when (i_i_reg_104 = ap_const_lv6_20) else "0";
    i_81_fu_213_p2 <= std_logic_vector(unsigned(i_i5_reg_115) + unsigned(ap_const_lv6_1));
    i_fu_164_p2 <= std_logic_vector(unsigned(i_i_reg_104) + unsigned(ap_const_lv6_1));
    mask_cast_fu_150_p3 <= 
        ap_const_lv32_FFFFFFFF when (b(0) = '1') else 
        ap_const_lv32_0;
    p_x_v_address0 <= tmp_790_cast_fu_184_p1(14 - 1 downto 0);

    p_x_v_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_x_v_ce0 <= ap_const_logic_1;
        else 
            p_x_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_y_v_address0 <= tmp_791_cast_fu_233_p1(14 - 1 downto 0);

    p_y_v_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            p_y_v_ce0 <= ap_const_logic_1;
        else 
            p_y_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_x_v_address0_assign_proc : process(ap_CS_fsm_state2, r_x_v_addr_reg_285, ap_CS_fsm_state3, tmp_i_fu_170_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_x_v_address0 <= r_x_v_addr_reg_285;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_x_v_address0 <= tmp_i_fu_170_p1(5 - 1 downto 0);
        else 
            r_x_v_address0 <= "XXXXX";
        end if; 
    end process;


    r_x_v_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            r_x_v_ce0 <= ap_const_logic_1;
        else 
            r_x_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_x_v_d0 <= (r_x_v_q0 xor tmp_895_i_fu_195_p2);

    r_x_v_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_x_v_we0 <= ap_const_logic_1;
        else 
            r_x_v_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_y_v_address0_assign_proc : process(ap_CS_fsm_state4, r_y_v_addr_reg_303, ap_CS_fsm_state5, tmp_i7_fu_219_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_y_v_address0 <= r_y_v_addr_reg_303;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_y_v_address0 <= tmp_i7_fu_219_p1(5 - 1 downto 0);
        else 
            r_y_v_address0 <= "XXXXX";
        end if; 
    end process;


    r_y_v_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_y_v_ce0 <= ap_const_logic_1;
        else 
            r_y_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_y_v_d0 <= (r_y_v_q0 xor tmp_895_i1_fu_244_p2);

    r_y_v_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_y_v_we0 <= ap_const_logic_1;
        else 
            r_y_v_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_787_cast_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_126_p3),15));
    tmp_788_fu_138_p3 <= (tmp_919 & ap_const_lv5_0);
    tmp_789_cast_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_788_fu_138_p3),15));
    tmp_790_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_790_fu_179_p2),64));
    tmp_790_fu_179_p2 <= std_logic_vector(unsigned(tmp_789_cast_reg_261) + unsigned(tmp_i_cast_fu_175_p1));
    tmp_791_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_791_fu_228_p2),64));
    tmp_791_fu_228_p2 <= std_logic_vector(unsigned(tmp_787_cast_reg_256) + unsigned(tmp_i7_cast_fu_224_p1));
    tmp_894_i1_fu_238_p2 <= (r_y_v_q0 xor p_y_v_q0);
    tmp_894_i_fu_189_p2 <= (r_x_v_q0 xor p_x_v_q0);
    tmp_895_i1_fu_244_p2 <= (tmp_894_i1_fu_238_p2 and mask_cast_reg_266);
    tmp_895_i_fu_195_p2 <= (tmp_894_i_fu_189_p2 and mask_cast_reg_266);
    tmp_fu_126_p3 <= (tmp_9191 & ap_const_lv5_0);
    tmp_i7_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_115),15));
    tmp_i7_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_115),64));
    tmp_i_cast_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_104),15));
    tmp_i_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_104),64));
end behav;
