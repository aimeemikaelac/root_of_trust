// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crypto_sign_ed25519_14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        r_q0,
        r_address1,
        r_ce1,
        r_we1,
        r_d1,
        r_q1,
        s_v_address0,
        s_v_ce0,
        s_v_q0,
        s_v_address1,
        s_v_ce1,
        s_v_q1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] r_address0;
output   r_ce0;
output   r_we0;
output  [7:0] r_d0;
input  [7:0] r_q0;
output  [6:0] r_address1;
output   r_ce1;
output   r_we1;
output  [7:0] r_d1;
input  [7:0] r_q1;
output  [4:0] s_v_address0;
output   s_v_ce0;
input  [31:0] s_v_q0;
output  [4:0] s_v_address1;
output   s_v_ce1;
input  [31:0] s_v_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] r_address0;
reg r_ce0;
reg r_we0;
reg[7:0] r_d0;
reg[6:0] r_address1;
reg r_ce1;
reg r_we1;
reg[7:0] r_d1;
reg[4:0] s_v_address0;
reg s_v_ce0;
reg[4:0] s_v_address1;
reg s_v_ce1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] reg_324;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
wire   [3:0] tmp_782_fu_338_p2;
reg   [3:0] tmp_782_reg_785;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_749_fu_356_p2;
reg   [6:0] tmp_749_reg_790;
wire   [0:0] exitcond1_fu_332_p2;
wire   [6:0] tmp_751_fu_380_p3;
reg   [6:0] tmp_751_reg_806;
reg   [2:0] tmp_804_cast_reg_826;
wire    ap_CS_fsm_state4;
wire   [2:0] tmp_775_fu_527_p2;
reg   [2:0] tmp_775_reg_831;
reg   [2:0] tmp_820_cast_reg_836;
reg   [2:0] tmp_825_cast_reg_841;
reg   [2:0] tmp_774_cast_reg_851;
wire    ap_CS_fsm_state8;
wire   [6:0] r_addr_4_reg_856;
wire    ap_CS_fsm_state9;
wire   [7:0] carry_cast_fu_675_p1;
reg   [7:0] carry_cast_reg_862;
wire    ap_CS_fsm_state10;
wire   [6:0] i_56_fu_685_p2;
reg   [6:0] i_56_reg_871;
reg   [6:0] r_addr_13_reg_876;
wire   [0:0] exitcond_fu_679_p2;
reg   [6:0] r_addr_14_reg_881;
wire   [0:0] tmp_796_fu_745_p3;
wire    ap_CS_fsm_state11;
reg   [3:0] i_reg_269;
wire    ap_CS_fsm_state6;
reg   [0:0] carry_reg_281;
reg   [6:0] i_1_reg_293;
wire   [63:0] tmp_750_fu_366_p1;
wire   [63:0] tmp_752_fu_388_p1;
wire   [63:0] tmp_755_fu_404_p1;
wire   [63:0] tmp_760_fu_418_p1;
wire   [63:0] tmp_773_fu_432_p1;
wire   [63:0] tmp_758_fu_442_p1;
wire   [63:0] tmp_765_fu_490_p1;
wire   [63:0] tmp_768_fu_562_p1;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_771_fu_572_p1;
wire   [63:0] tmp_778_fu_590_p1;
wire   [63:0] tmp_781_fu_604_p1;
wire   [63:0] tmp_784_fu_691_p1;
wire   [63:0] tmp_786_fu_696_p1;
wire   [7:0] tmp_779_cast_fu_375_p1;
wire   [7:0] tmp_784_cast_fu_393_p1;
wire   [7:0] tmp_797_cast_fu_465_p1;
wire   [7:0] tmp_800_cast_fu_480_p1;
wire   [7:0] tmp_805_cast_fu_553_p1;
wire   [7:0] tmp_818_cast_fu_577_p1;
wire   [7:0] tmp_821_cast_fu_581_p1;
wire   [7:0] tmp_826_cast_fu_595_p1;
wire   [7:0] tmp_cast_fu_613_p1;
wire   [7:0] tmp_762_cast_fu_618_p1;
wire   [7:0] tmp_769_cast_fu_641_p1;
wire   [7:0] tmp_772_cast_fu_656_p1;
wire   [7:0] tmp_775_cast_fu_671_p1;
wire   [7:0] tmp_788_fu_734_p2;
wire  signed [7:0] tmp_839_cast_fu_771_p1;
wire    ap_CS_fsm_state12;
wire   [7:0] tmp_783_fu_776_p2;
wire   [5:0] p_shl_fu_344_p3;
wire   [6:0] p_shl_cast_fu_352_p1;
wire   [6:0] i_cast_fu_328_p1;
wire  signed [31:0] tmp_776_cast_fu_362_p1;
wire   [2:0] tmp_792_fu_371_p1;
wire   [2:0] grp_fu_304_p4;
wire   [6:0] tmp_754_fu_398_p2;
wire   [6:0] tmp_759_fu_409_p2;
wire  signed [31:0] tmp_792_cast_fu_414_p1;
wire   [6:0] tmp_772_fu_423_p2;
wire  signed [31:0] tmp_813_cast_fu_428_p1;
wire   [6:0] tmp_757_fu_437_p2;
wire   [0:0] tmp_793_fu_447_p1;
wire   [2:0] tmp_761_fu_451_p3;
wire   [2:0] tmp_762_fu_459_p2;
wire   [2:0] tmp_799_cast_fu_470_p4;
wire   [6:0] tmp_764_fu_485_p2;
wire   [1:0] tmp_794_fu_515_p1;
wire   [2:0] tmp_774_fu_519_p3;
wire   [2:0] tmp_809_cast_fu_505_p4;
wire   [6:0] tmp_767_fu_557_p2;
wire   [6:0] tmp_770_fu_567_p2;
wire   [6:0] tmp_777_fu_585_p2;
wire   [6:0] tmp_780_fu_599_p2;
wire   [2:0] tmp_fu_609_p1;
wire   [0:0] tmp_791_fu_623_p1;
wire   [2:0] tmp_745_fu_627_p3;
wire   [2:0] tmp_746_fu_635_p2;
wire   [2:0] tmp_771_cast_fu_646_p4;
wire   [2:0] tmp_795_fu_701_p1;
wire   [2:0] tmp_77_fu_705_p1;
wire   [7:0] tmp_785_fu_709_p2;
wire   [4:0] tmp_9_fu_720_p4;
wire  signed [7:0] tmp_787_fu_730_p1;
wire   [2:0] tmp_832_cast_fu_714_p2;
wire   [3:0] tmp_s_fu_753_p3;
wire   [4:0] tmp_836_cast1_fu_741_p1;
wire   [4:0] tmp_838_cast_fu_761_p1;
wire   [4:0] tmp_790_fu_765_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        carry_reg_281 <= tmp_832_cast_fu_714_p2[32'd2];
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_281 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_1_reg_293 <= i_56_reg_871;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_293 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_269 <= tmp_782_reg_785;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_269 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        carry_cast_reg_862[0] <= carry_cast_fu_675_p1[0];
        i_56_reg_871 <= i_56_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond_fu_679_p2))) begin
        r_addr_13_reg_876 <= tmp_784_fu_691_p1;
        r_addr_14_reg_881 <= tmp_786_fu_696_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_324 <= {{s_v_q0[8:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_332_p2 == 1'd0))) begin
        tmp_749_reg_790 <= tmp_749_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_751_reg_806[6 : 3] <= tmp_751_fu_380_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_774_cast_reg_851 <= {{s_v_q1[6:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_775_reg_831 <= tmp_775_fu_527_p2;
        tmp_804_cast_reg_826 <= {{s_v_q0[6:4]}};
        tmp_820_cast_reg_836 <= {{s_v_q1[4:2]}};
        tmp_825_cast_reg_841 <= {{s_v_q1[7:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_782_reg_785 <= tmp_782_fu_338_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        r_address0 = r_addr_4_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_address0 = r_addr_14_reg_881;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        r_address0 = tmp_786_fu_696_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_address0 = 64'd84;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_address0 = 64'd82;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_address0 = 64'd80;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_address0 = tmp_778_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_address0 = tmp_768_fu_562_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_address0 = tmp_758_fu_442_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_address0 = tmp_752_fu_388_p1;
    end else begin
        r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_address1 = r_addr_13_reg_876;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_679_p2))) begin
        r_address1 = 64'd84;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond_fu_679_p2))) begin
        r_address1 = tmp_784_fu_691_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_address1 = 64'd83;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_address1 = 64'd81;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_address1 = tmp_781_fu_604_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_address1 = tmp_771_fu_572_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_address1 = tmp_765_fu_490_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_address1 = tmp_755_fu_404_p1;
    end else begin
        r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond_fu_679_p2)) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_679_p2)))) begin
        r_ce1 = 1'b1;
    end else begin
        r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        r_d0 = tmp_783_fu_776_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        r_d0 = tmp_788_fu_734_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        r_d0 = tmp_775_cast_fu_671_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_d0 = tmp_769_cast_fu_641_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_d0 = tmp_cast_fu_613_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_d0 = tmp_821_cast_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_d0 = tmp_805_cast_fu_553_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_d0 = tmp_797_cast_fu_465_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_d0 = tmp_779_cast_fu_375_p1;
    end else begin
        r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        r_d1 = tmp_839_cast_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_d1 = tmp_772_cast_fu_656_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        r_d1 = tmp_762_cast_fu_618_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_d1 = tmp_826_cast_fu_595_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_d1 = tmp_818_cast_fu_577_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_d1 = tmp_800_cast_fu_480_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_d1 = tmp_784_cast_fu_393_p1;
    end else begin
        r_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12))) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_we1 = 1'b1;
    end else begin
        r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s_v_address0 = tmp_760_fu_418_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_332_p2 == 1'd1))) begin
        s_v_address0 = 64'd30;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_332_p2 == 1'd0))) begin
        s_v_address0 = tmp_750_fu_366_p1;
    end else begin
        s_v_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        s_v_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_v_address1 = tmp_773_fu_432_p1;
    end else begin
        s_v_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_332_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_332_p2 == 1'd1)))) begin
        s_v_ce0 = 1'b1;
    end else begin
        s_v_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7))) begin
        s_v_ce1 = 1'b1;
    end else begin
        s_v_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_332_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_679_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign carry_cast_fu_675_p1 = carry_reg_281;

assign exitcond1_fu_332_p2 = ((i_reg_269 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_679_p2 = ((i_1_reg_293 == 7'd84) ? 1'b1 : 1'b0);

assign grp_fu_304_p4 = {{s_v_q0[5:3]}};

assign i_56_fu_685_p2 = (i_1_reg_293 + 7'd1);

assign i_cast_fu_328_p1 = i_reg_269;

assign p_shl_cast_fu_352_p1 = p_shl_fu_344_p3;

assign p_shl_fu_344_p3 = {{i_reg_269}, {2'd0}};

assign r_addr_4_reg_856 = 64'd84;

assign tmp_745_fu_627_p3 = {{tmp_791_fu_623_p1}, {2'd0}};

assign tmp_746_fu_635_p2 = (tmp_745_fu_627_p3 ^ reg_324);

assign tmp_749_fu_356_p2 = (p_shl_cast_fu_352_p1 - i_cast_fu_328_p1);

assign tmp_750_fu_366_p1 = $unsigned(tmp_776_cast_fu_362_p1);

assign tmp_751_fu_380_p3 = {{i_reg_269}, {3'd0}};

assign tmp_752_fu_388_p1 = tmp_751_fu_380_p3;

assign tmp_754_fu_398_p2 = (tmp_751_fu_380_p3 | 7'd1);

assign tmp_755_fu_404_p1 = tmp_754_fu_398_p2;

assign tmp_757_fu_437_p2 = (tmp_751_reg_806 | 7'd2);

assign tmp_758_fu_442_p1 = tmp_757_fu_437_p2;

assign tmp_759_fu_409_p2 = (7'd1 + tmp_749_reg_790);

assign tmp_760_fu_418_p1 = $unsigned(tmp_792_cast_fu_414_p1);

assign tmp_761_fu_451_p3 = {{tmp_793_fu_447_p1}, {2'd0}};

assign tmp_762_cast_fu_618_p1 = grp_fu_304_p4;

assign tmp_762_fu_459_p2 = (tmp_761_fu_451_p3 ^ reg_324);

assign tmp_764_fu_485_p2 = (tmp_751_reg_806 | 7'd3);

assign tmp_765_fu_490_p1 = tmp_764_fu_485_p2;

assign tmp_767_fu_557_p2 = (tmp_751_reg_806 | 7'd4);

assign tmp_768_fu_562_p1 = tmp_767_fu_557_p2;

assign tmp_769_cast_fu_641_p1 = tmp_746_fu_635_p2;

assign tmp_770_fu_567_p2 = (tmp_751_reg_806 | 7'd5);

assign tmp_771_cast_fu_646_p4 = {{s_v_q1[3:1]}};

assign tmp_771_fu_572_p1 = tmp_770_fu_567_p2;

assign tmp_772_cast_fu_656_p1 = tmp_771_cast_fu_646_p4;

assign tmp_772_fu_423_p2 = (7'd2 + tmp_749_reg_790);

assign tmp_773_fu_432_p1 = $unsigned(tmp_813_cast_fu_428_p1);

assign tmp_774_fu_519_p3 = {{tmp_794_fu_515_p1}, {1'd0}};

assign tmp_775_cast_fu_671_p1 = tmp_774_cast_reg_851;

assign tmp_775_fu_527_p2 = (tmp_774_fu_519_p3 ^ tmp_809_cast_fu_505_p4);

assign tmp_776_cast_fu_362_p1 = $signed(tmp_749_fu_356_p2);

assign tmp_777_fu_585_p2 = (tmp_751_reg_806 | 7'd6);

assign tmp_778_fu_590_p1 = tmp_777_fu_585_p2;

assign tmp_779_cast_fu_375_p1 = tmp_792_fu_371_p1;

assign tmp_77_fu_705_p1 = carry_reg_281;

assign tmp_780_fu_599_p2 = (tmp_751_reg_806 | 7'd7);

assign tmp_781_fu_604_p1 = tmp_780_fu_599_p2;

assign tmp_782_fu_338_p2 = (i_reg_269 + 4'd1);

assign tmp_783_fu_776_p2 = (r_q1 + carry_cast_reg_862);

assign tmp_784_cast_fu_393_p1 = grp_fu_304_p4;

assign tmp_784_fu_691_p1 = i_1_reg_293;

assign tmp_785_fu_709_p2 = (carry_cast_reg_862 + r_q1);

assign tmp_786_fu_696_p1 = i_56_fu_685_p2;

assign tmp_787_fu_730_p1 = $signed(tmp_9_fu_720_p4);

assign tmp_788_fu_734_p2 = ($signed(tmp_787_fu_730_p1) + $signed(r_q0));

assign tmp_790_fu_765_p2 = (tmp_836_cast1_fu_741_p1 - tmp_838_cast_fu_761_p1);

assign tmp_791_fu_623_p1 = s_v_q1[0:0];

assign tmp_792_cast_fu_414_p1 = $signed(tmp_759_fu_409_p2);

assign tmp_792_fu_371_p1 = s_v_q0[2:0];

assign tmp_793_fu_447_p1 = s_v_q0[0:0];

assign tmp_794_fu_515_p1 = s_v_q1[1:0];

assign tmp_795_fu_701_p1 = r_q1[2:0];

assign tmp_796_fu_745_p3 = tmp_832_cast_fu_714_p2[32'd2];

assign tmp_797_cast_fu_465_p1 = tmp_762_fu_459_p2;

assign tmp_799_cast_fu_470_p4 = {{s_v_q0[3:1]}};

assign tmp_800_cast_fu_480_p1 = tmp_799_cast_fu_470_p4;

assign tmp_805_cast_fu_553_p1 = tmp_804_cast_reg_826;

assign tmp_809_cast_fu_505_p4 = {{s_v_q0[9:7]}};

assign tmp_813_cast_fu_428_p1 = $signed(tmp_772_fu_423_p2);

assign tmp_818_cast_fu_577_p1 = tmp_775_reg_831;

assign tmp_821_cast_fu_581_p1 = tmp_820_cast_reg_836;

assign tmp_826_cast_fu_595_p1 = tmp_825_cast_reg_841;

assign tmp_832_cast_fu_714_p2 = (tmp_795_fu_701_p1 + tmp_77_fu_705_p1);

assign tmp_836_cast1_fu_741_p1 = tmp_832_cast_fu_714_p2;

assign tmp_838_cast_fu_761_p1 = tmp_s_fu_753_p3;

assign tmp_839_cast_fu_771_p1 = $signed(tmp_790_fu_765_p2);

assign tmp_9_fu_720_p4 = {{tmp_785_fu_709_p2[7:3]}};

assign tmp_cast_fu_613_p1 = tmp_fu_609_p1;

assign tmp_fu_609_p1 = s_v_q0[2:0];

assign tmp_s_fu_753_p3 = {{tmp_796_fu_745_p3}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_751_reg_806[2:0] <= 3'b000;
    carry_cast_reg_862[7:1] <= 7'b0000000;
end

endmodule //crypto_sign_ed25519_14
